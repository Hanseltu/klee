; ModuleID = 'test.bc'
source_filename = "test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.anon = type { %struct.Type1*, %struct.Type2* }
%struct.Type1 = type { [8 x i8] }
%struct.Type2 = type { i32, i32* }

@.str = private unnamed_addr constant [30 x i8] c"/////This is a Good function\0A\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"/////This is a Evil function\0A\00", align 1
@gvar = dso_local global %struct.anon zeroinitializer, align 8, !dbg !0
@.str.2 = private unnamed_addr constant [5 x i8] c"temp\00", align 1
@handler = common dso_local global i32 (i32*)* null, align 8, !dbg !29
@.str.3 = private unnamed_addr constant [26 x i8] c"crashing path is taken. \0A\00", align 1
@.str.4 = private unnamed_addr constant [38 x i8] c"..........exploiting path is taken. \0A\00", align 1
@handler1 = common dso_local global i32 (i32)* null, align 8, !dbg !22
@handler2 = common dso_local global i32 (i32)* null, align 8, !dbg !27

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @goodFunc(i32* %var) #0 !dbg !44 {
entry:
  %var.addr = alloca i32*, align 8
  store i32* %var, i32** %var.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %var.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)), !dbg !47
  ret i32 0, !dbg !48
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @badFunc(i32* %var) #0 !dbg !49 {
entry:
  %var.addr = alloca i32*, align 8
  store i32* %var, i32** %var.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %var.addr, metadata !50, metadata !DIExpression()), !dbg !51
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)), !dbg !52
  ret i32 0, !dbg !53
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #0 !dbg !54 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %res = alloca i32, align 4
  %temp = alloca [16 x i8], align 16
  %buf = alloca i8*, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %p = alloca i32 (i32*)*, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !59, metadata !DIExpression()), !dbg !60
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %call = call noalias i8* @malloc(i64 8) #5, !dbg !63
  %0 = bitcast i8* %call to %struct.Type1*, !dbg !64
  store %struct.Type1* %0, %struct.Type1** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 0), align 8, !dbg !65
  %call1 = call noalias i8* @malloc(i64 16) #5, !dbg !66
  %1 = bitcast i8* %call1 to %struct.Type2*, !dbg !67
  store %struct.Type2* %1, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !68
  call void @llvm.dbg.declare(metadata i32* %res, metadata !69, metadata !DIExpression()), !dbg !70
  call void @llvm.dbg.declare(metadata [16 x i8]* %temp, metadata !71, metadata !DIExpression()), !dbg !75
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %temp, i64 0, i64 0, !dbg !76
  call void @klee_make_symbolic(i8* %arraydecay, i64 16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0)), !dbg !77
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !78, metadata !DIExpression()), !dbg !79
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %temp, i64 0, i64 0, !dbg !80
  store i8* %arraydecay2, i8** %buf, align 8, !dbg !79
  %2 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !81
  %status = getelementptr inbounds %struct.Type2, %struct.Type2* %2, i32 0, i32 0, !dbg !82
  %3 = bitcast i32* %status to i8*, !dbg !83
  %4 = load i8*, i8** %buf, align 8, !dbg !84
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 1 %4, i64 16, i1 false), !dbg !83
  store i32 (i32*)* @goodFunc, i32 (i32*)** @handler, align 8, !dbg !85
  %5 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !86
  %status3 = getelementptr inbounds %struct.Type2, %struct.Type2* %5, i32 0, i32 0, !dbg !88
  %6 = load i32, i32* %status3, align 8, !dbg !88
  %tobool = icmp ne i32 %6, 0, !dbg !89
  br i1 %tobool, label %if.then, label %if.else, !dbg !90

if.then:                                          ; preds = %entry
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0)), !dbg !91
  %7 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !93
  %ptr = getelementptr inbounds %struct.Type2, %struct.Type2* %7, i32 0, i32 1, !dbg !94
  %8 = load i32*, i32** %ptr, align 8, !dbg !94
  %9 = load i32, i32* %8, align 4, !dbg !95
  store i32 %9, i32* %res, align 4, !dbg !96
  br label %if.end, !dbg !97

if.else:                                          ; preds = %entry
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)), !dbg !98
  %10 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !100
  %ptr6 = getelementptr inbounds %struct.Type2, %struct.Type2* %10, i32 0, i32 1, !dbg !101
  %11 = load i32*, i32** %ptr6, align 8, !dbg !101
  store i32 4660, i32* %11, align 4, !dbg !102
  store i32 (i32*)* inttoptr (i64 100 to i32 (i32*)*), i32 (i32*)** @handler, align 8, !dbg !103
  call void @llvm.dbg.declare(metadata i32* %a, metadata !104, metadata !DIExpression()), !dbg !105
  store i32 100, i32* %a, align 4, !dbg !105
  call void @llvm.dbg.declare(metadata i32* %b, metadata !106, metadata !DIExpression()), !dbg !107
  %12 = load i32, i32* %a, align 4, !dbg !108
  %add = add nsw i32 %12, 100, !dbg !109
  store i32 %add, i32* %b, align 4, !dbg !107
  %13 = load i32, i32* %b, align 4, !dbg !110
  %conv = sext i32 %13 to i64, !dbg !110
  %14 = inttoptr i64 %conv to i32 (i32*)*, !dbg !110
  store i32 (i32*)* %14, i32 (i32*)** @handler, align 8, !dbg !111
  %15 = load i32, i32* %b, align 4, !dbg !112
  %add7 = add nsw i32 %15, 100, !dbg !113
  %conv8 = sext i32 %add7 to i64, !dbg !112
  %16 = inttoptr i64 %conv8 to i32 (i32*)*, !dbg !112
  store i32 (i32*)* %16, i32 (i32*)** @handler, align 8, !dbg !114
  %17 = load i32, i32* %b, align 4, !dbg !115
  %sub = sub nsw i32 %17, 100, !dbg !116
  %conv9 = sext i32 %sub to i64, !dbg !115
  %18 = inttoptr i64 %conv9 to i32 (i32*)*, !dbg !115
  store i32 (i32*)* %18, i32 (i32*)** @handler, align 8, !dbg !117
  %19 = load i32 (i32*)*, i32 (i32*)** @handler, align 8, !dbg !118
  %20 = bitcast i32 (i32*)* %19 to i8*, !dbg !119
  %add.ptr = getelementptr i8, i8* %20, i64 100, !dbg !119
  %21 = bitcast i8* %add.ptr to i32 (i32*)*, !dbg !119
  store i32 (i32*)* %21, i32 (i32*)** @handler, align 8, !dbg !120
  call void @llvm.dbg.declare(metadata i32 (i32*)** %p, metadata !121, metadata !DIExpression()), !dbg !122
  %22 = load i32 (i32*)*, i32 (i32*)** @handler, align 8, !dbg !123
  store i32 (i32*)* %22, i32 (i32*)** %p, align 8, !dbg !122
  %23 = load i32 (i32*)*, i32 (i32*)** %p, align 8, !dbg !124
  %24 = bitcast i32 (i32*)* %23 to i8*, !dbg !125
  %add.ptr10 = getelementptr i8, i8* %24, i64 100, !dbg !125
  %25 = bitcast i8* %add.ptr10 to i32 (i32*)*, !dbg !125
  store i32 (i32*)* %25, i32 (i32*)** %p, align 8, !dbg !126
  %26 = load i32 (i32*)*, i32 (i32*)** %p, align 8, !dbg !127
  %27 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !128
  %ptr11 = getelementptr inbounds %struct.Type2, %struct.Type2* %27, i32 0, i32 1, !dbg !129
  %28 = load i32*, i32** %ptr11, align 8, !dbg !129
  %call12 = call i32 %26(i32* %28), !dbg !127
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %29 = load i32 (i32*)*, i32 (i32*)** @handler, align 8, !dbg !130
  %30 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8, !dbg !131
  %ptr13 = getelementptr inbounds %struct.Type2, %struct.Type2* %30, i32 0, i32 1, !dbg !132
  %31 = load i32*, i32** %ptr13, align 8, !dbg !132
  %call14 = call i32 %29(i32* %31), !dbg !130
  %32 = load i32, i32* %res, align 4, !dbg !133
  ret i32 %32, !dbg !134
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

declare dso_local void @klee_make_symbolic(i8*, i64, i8*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!40, !41, !42}
!llvm.ident = !{!43}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "gvar", scope: !2, file: !3, line: 16, type: !36, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !21, nameTableKind: None)
!3 = !DIFile(filename: "test.c", directory: "/home/haoxin/haoxin-data/smu-research/klee/examples/exploit-example")
!4 = !{}
!5 = !{!6, !14}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Type1", file: !3, line: 5, size: 64, elements: !8)
!8 = !{!9}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !7, file: !3, line: 5, baseType: !10, size: 64)
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 64, elements: !12)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !{!13}
!13 = !DISubrange(count: 8)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Type2", file: !3, line: 6, size: 128, elements: !16)
!16 = !{!17, !19}
!17 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !15, file: !3, line: 7, baseType: !18, size: 32)
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !15, file: !3, line: 8, baseType: !20, size: 64, offset: 64)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18, size: 64)
!21 = !{!0, !22, !27, !29}
!22 = !DIGlobalVariableExpression(var: !23, expr: !DIExpression())
!23 = distinct !DIGlobalVariable(name: "handler1", scope: !2, file: !3, line: 10, type: !24, isLocal: false, isDefinition: true)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DISubroutineType(types: !26)
!26 = !{!18, !18}
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(name: "handler2", scope: !2, file: !3, line: 11, type: !24, isLocal: false, isDefinition: true)
!29 = !DIGlobalVariableExpression(var: !30, expr: !DIExpression())
!30 = distinct !DIGlobalVariable(name: "handler", scope: !2, file: !3, line: 12, type: !31, isLocal: false, isDefinition: true)
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64)
!32 = !DISubroutineType(types: !33)
!33 = !{!18, !34}
!34 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !35, size: 64)
!35 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !18)
!36 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 16, size: 128, elements: !37)
!37 = !{!38, !39}
!38 = !DIDerivedType(tag: DW_TAG_member, name: "obj1", scope: !36, file: !3, line: 16, baseType: !6, size: 64)
!39 = !DIDerivedType(tag: DW_TAG_member, name: "obj2", scope: !36, file: !3, line: 16, baseType: !14, size: 64, offset: 64)
!40 = !{i32 2, !"Dwarf Version", i32 4}
!41 = !{i32 2, !"Debug Info Version", i32 3}
!42 = !{i32 1, !"wchar_size", i32 4}
!43 = !{!"clang version 9.0.0 (tags/RELEASE_900/final)"}
!44 = distinct !DISubprogram(name: "goodFunc", scope: !3, file: !3, line: 13, type: !32, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!45 = !DILocalVariable(name: "var", arg: 1, scope: !44, file: !3, line: 13, type: !34)
!46 = !DILocation(line: 13, column: 25, scope: !44)
!47 = !DILocation(line: 13, column: 30, scope: !44)
!48 = !DILocation(line: 13, column: 71, scope: !44)
!49 = distinct !DISubprogram(name: "badFunc", scope: !3, file: !3, line: 14, type: !32, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!50 = !DILocalVariable(name: "var", arg: 1, scope: !49, file: !3, line: 14, type: !34)
!51 = !DILocation(line: 14, column: 24, scope: !49)
!52 = !DILocation(line: 14, column: 29, scope: !49)
!53 = !DILocation(line: 14, column: 70, scope: !49)
!54 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 17, type: !55, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!55 = !DISubroutineType(types: !56)
!56 = !{!18, !18, !57}
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !58, size: 64)
!58 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!59 = !DILocalVariable(name: "argc", arg: 1, scope: !54, file: !3, line: 17, type: !18)
!60 = !DILocation(line: 17, column: 14, scope: !54)
!61 = !DILocalVariable(name: "argv", arg: 2, scope: !54, file: !3, line: 17, type: !57)
!62 = !DILocation(line: 17, column: 26, scope: !54)
!63 = !DILocation(line: 18, column: 32, scope: !54)
!64 = !DILocation(line: 18, column: 17, scope: !54)
!65 = !DILocation(line: 18, column: 15, scope: !54)
!66 = !DILocation(line: 19, column: 32, scope: !54)
!67 = !DILocation(line: 19, column: 17, scope: !54)
!68 = !DILocation(line: 19, column: 15, scope: !54)
!69 = !DILocalVariable(name: "res", scope: !54, file: !3, line: 20, type: !18)
!70 = !DILocation(line: 20, column: 9, scope: !54)
!71 = !DILocalVariable(name: "temp", scope: !54, file: !3, line: 21, type: !72)
!72 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 128, elements: !73)
!73 = !{!74}
!74 = !DISubrange(count: 16)
!75 = !DILocation(line: 21, column: 10, scope: !54)
!76 = !DILocation(line: 22, column: 24, scope: !54)
!77 = !DILocation(line: 22, column: 5, scope: !54)
!78 = !DILocalVariable(name: "buf", scope: !54, file: !3, line: 24, type: !58)
!79 = !DILocation(line: 24, column: 11, scope: !54)
!80 = !DILocation(line: 24, column: 17, scope: !54)
!81 = !DILocation(line: 25, column: 19, scope: !54)
!82 = !DILocation(line: 25, column: 25, scope: !54)
!83 = !DILocation(line: 25, column: 5, scope: !54)
!84 = !DILocation(line: 25, column: 33, scope: !54)
!85 = !DILocation(line: 26, column: 13, scope: !54)
!86 = !DILocation(line: 27, column: 13, scope: !87)
!87 = distinct !DILexicalBlock(scope: !54, file: !3, line: 27, column: 8)
!88 = !DILocation(line: 27, column: 19, scope: !87)
!89 = !DILocation(line: 27, column: 8, scope: !87)
!90 = !DILocation(line: 27, column: 8, scope: !54)
!91 = !DILocation(line: 29, column: 9, scope: !92)
!92 = distinct !DILexicalBlock(scope: !87, file: !3, line: 28, column: 5)
!93 = !DILocation(line: 30, column: 21, scope: !92)
!94 = !DILocation(line: 30, column: 27, scope: !92)
!95 = !DILocation(line: 30, column: 15, scope: !92)
!96 = !DILocation(line: 30, column: 13, scope: !92)
!97 = !DILocation(line: 31, column: 5, scope: !92)
!98 = !DILocation(line: 34, column: 9, scope: !99)
!99 = distinct !DILexicalBlock(scope: !87, file: !3, line: 33, column: 5)
!100 = !DILocation(line: 35, column: 15, scope: !99)
!101 = !DILocation(line: 35, column: 21, scope: !99)
!102 = !DILocation(line: 35, column: 25, scope: !99)
!103 = !DILocation(line: 36, column: 17, scope: !99)
!104 = !DILocalVariable(name: "a", scope: !99, file: !3, line: 37, type: !18)
!105 = !DILocation(line: 37, column: 13, scope: !99)
!106 = !DILocalVariable(name: "b", scope: !99, file: !3, line: 38, type: !18)
!107 = !DILocation(line: 38, column: 13, scope: !99)
!108 = !DILocation(line: 38, column: 17, scope: !99)
!109 = !DILocation(line: 38, column: 19, scope: !99)
!110 = !DILocation(line: 39, column: 19, scope: !99)
!111 = !DILocation(line: 39, column: 17, scope: !99)
!112 = !DILocation(line: 40, column: 19, scope: !99)
!113 = !DILocation(line: 40, column: 21, scope: !99)
!114 = !DILocation(line: 40, column: 17, scope: !99)
!115 = !DILocation(line: 41, column: 19, scope: !99)
!116 = !DILocation(line: 41, column: 21, scope: !99)
!117 = !DILocation(line: 41, column: 17, scope: !99)
!118 = !DILocation(line: 42, column: 19, scope: !99)
!119 = !DILocation(line: 42, column: 27, scope: !99)
!120 = !DILocation(line: 42, column: 17, scope: !99)
!121 = !DILocalVariable(name: "p", scope: !99, file: !3, line: 44, type: !31)
!122 = !DILocation(line: 44, column: 15, scope: !99)
!123 = !DILocation(line: 44, column: 32, scope: !99)
!124 = !DILocation(line: 45, column: 13, scope: !99)
!125 = !DILocation(line: 45, column: 15, scope: !99)
!126 = !DILocation(line: 45, column: 11, scope: !99)
!127 = !DILocation(line: 46, column: 9, scope: !99)
!128 = !DILocation(line: 46, column: 16, scope: !99)
!129 = !DILocation(line: 46, column: 22, scope: !99)
!130 = !DILocation(line: 49, column: 5, scope: !54)
!131 = !DILocation(line: 49, column: 18, scope: !54)
!132 = !DILocation(line: 49, column: 24, scope: !54)
!133 = !DILocation(line: 50, column: 12, scope: !54)
!134 = !DILocation(line: 50, column: 5, scope: !54)
