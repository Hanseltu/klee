; ModuleID = 'test.bc'
source_filename = "test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.anon = type { %struct.Type1*, %struct.Type2* }
%struct.Type1 = type { [8 x i8] }
%struct.Type2 = type { i32, i32* }

@.str = private unnamed_addr constant [30 x i8] c"/////This is a Good function\0A\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"/////This is a Evil function\0A\00", align 1
@gvar = dso_local global %struct.anon zeroinitializer, align 8
@.str.2 = private unnamed_addr constant [5 x i8] c"temp\00", align 1
@handler = common dso_local global i32 (i32*)* null, align 8
@.str.3 = private unnamed_addr constant [26 x i8] c"crashing path is taken. \0A\00", align 1
@.str.4 = private unnamed_addr constant [38 x i8] c"..........exploiting path is taken. \0A\00", align 1
@handler1 = common dso_local global i32 (i32)* null, align 8
@handler2 = common dso_local global i32 (i32)* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @goodFunc(i32* %var) #0 {
entry:
  %var.addr = alloca i32*, align 8
  store i32* %var, i32** %var.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @badFunc(i32* %var) #0 {
entry:
  %var.addr = alloca i32*, align 8
  store i32* %var, i32** %var.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0))
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %res = alloca i32, align 4
  %temp = alloca [16 x i8], align 16
  %buf = alloca i8*, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %p1 = alloca i32 (i32*)*, align 8
  %p2 = alloca i32 (i32*)*, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  %call = call noalias i8* @malloc(i64 8) #4
  %0 = bitcast i8* %call to %struct.Type1*
  store %struct.Type1* %0, %struct.Type1** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 0), align 8
  %call1 = call noalias i8* @malloc(i64 16) #4
  %1 = bitcast i8* %call1 to %struct.Type2*
  store %struct.Type2* %1, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %temp, i64 0, i64 0
  call void @klee_make_symbolic(i8* %arraydecay, i64 16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %temp, i64 0, i64 0
  store i8* %arraydecay2, i8** %buf, align 8
  %2 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8
  %status = getelementptr inbounds %struct.Type2, %struct.Type2* %2, i32 0, i32 0
  %3 = bitcast i32* %status to i8*
  %4 = load i8*, i8** %buf, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 1 %4, i64 16, i1 false)
  store i32 (i32*)* @goodFunc, i32 (i32*)** @handler, align 8
  %5 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8
  %status3 = getelementptr inbounds %struct.Type2, %struct.Type2* %5, i32 0, i32 0
  %6 = load i32, i32* %status3, align 8
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0))
  %7 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8
  %ptr = getelementptr inbounds %struct.Type2, %struct.Type2* %7, i32 0, i32 1
  %8 = load i32*, i32** %ptr, align 8
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %res, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0))
  %10 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8
  %ptr6 = getelementptr inbounds %struct.Type2, %struct.Type2* %10, i32 0, i32 1
  %11 = load i32*, i32** %ptr6, align 8
  store i32 4660, i32* %11, align 4
  store i32 100, i32* %a, align 4
  %12 = load i32, i32* %a, align 4
  %add = add nsw i32 %12, 100
  store i32 %add, i32* %b, align 4
  %13 = load i32, i32* %b, align 4
  %add7 = add nsw i32 %13, 100
  %conv = sext i32 %add7 to i64
  %14 = inttoptr i64 %conv to i32 (i32*)*
  store i32 (i32*)* %14, i32 (i32*)** @handler, align 8
  %15 = load i32, i32* %b, align 4
  %sub = sub nsw i32 %15, 100
  %add8 = add nsw i32 %sub, 100
  %conv9 = sext i32 %add8 to i64
  %16 = inttoptr i64 %conv9 to i32 (i32*)*
  store i32 (i32*)* %16, i32 (i32*)** @handler, align 8
  %17 = load i32 (i32*)*, i32 (i32*)** @handler, align 8
  %18 = bitcast i32 (i32*)* %17 to i8*
  %add.ptr = getelementptr i8, i8* %18, i64 100
  %19 = bitcast i8* %add.ptr to i32 (i32*)*
  store i32 (i32*)* %19, i32 (i32*)** @handler, align 8
  %20 = load i32 (i32*)*, i32 (i32*)** @handler, align 8
  store i32 (i32*)* %20, i32 (i32*)** %p1, align 8
  %21 = load i32, i32* %b, align 4
  %add10 = add nsw i32 %21, 100
  %conv11 = sext i32 %add10 to i64
  %22 = inttoptr i64 %conv11 to i32 (i32*)*
  store i32 (i32*)* %22, i32 (i32*)** %p1, align 8
  %23 = load i32 (i32*)*, i32 (i32*)** %p1, align 8
  %24 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8
  %ptr12 = getelementptr inbounds %struct.Type2, %struct.Type2* %24, i32 0, i32 1
  %25 = load i32*, i32** %ptr12, align 8
  %call13 = call i32 %23(i32* %25)
  %26 = load i32 (i32*)*, i32 (i32*)** @handler, align 8
  %27 = bitcast i32 (i32*)* %26 to i8*
  %add.ptr14 = getelementptr i8, i8* %27, i64 100
  %28 = bitcast i8* %add.ptr14 to i32 (i32*)*
  store i32 (i32*)* %28, i32 (i32*)** %p2, align 8
  %29 = load i32, i32* %b, align 4
  %add15 = add nsw i32 %29, 100
  %conv16 = sext i32 %add15 to i64
  %30 = inttoptr i64 %conv16 to i32 (i32*)*
  store i32 (i32*)* %30, i32 (i32*)** %p2, align 8
  %31 = load i32 (i32*)*, i32 (i32*)** %p2, align 8
  %32 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8
  %ptr17 = getelementptr inbounds %struct.Type2, %struct.Type2* %32, i32 0, i32 1
  %33 = load i32*, i32** %ptr17, align 8
  %call18 = call i32 %31(i32* %33)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %34 = load i32 (i32*)*, i32 (i32*)** @handler, align 8
  %35 = load %struct.Type2*, %struct.Type2** getelementptr inbounds (%struct.anon, %struct.anon* @gvar, i32 0, i32 1), align 8
  %ptr19 = getelementptr inbounds %struct.Type2, %struct.Type2* %35, i32 0, i32 1
  %36 = load i32*, i32** %ptr19, align 8
  %call20 = call i32 %34(i32* %36)
  %37 = load i32, i32* %res, align 4
  ret i32 %37
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

declare dso_local void @klee_make_symbolic(i8*, i64, i8*) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 9.0.0 (tags/RELEASE_900/final)"}
