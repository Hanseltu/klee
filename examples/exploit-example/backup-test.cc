#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <new>
#include <iostream>
#include "klee/klee.h"
struct Type1 {char data [8];};
struct Type2 {
    int status;
    int* ptr;
    void init() {};
};
int (*handler)(int);
int goodFunc(const int*){printf("/////This is a Good function\n");return 0;}
int badFunc(const int*){printf("/////This is a Evil function\n");return 0;}

struct {Type1* obj1; Type2* obj2;} gvar = {};
int main(int argc, char* argv[]){
    gvar.obj1 = new Type1;
    gvar.obj2 = new Type2;
    int res;
    char temp[16];
    klee_make_symbolic(temp, 16, "temp");

    char* buf = temp;
    memcpy (&gvar.obj2->status, buf, 16);
    //handler = goodFunc; //Here we should call a Good function
    if(gvar.obj2->status)
    {
        printf ("crashing path is taken. \n");
        res = *gvar.obj2->ptr;
    }
    else
    {
        printf ("..........exploiting path is taken. \n");
        *gvar.obj2->ptr = 0x1234; // But we modify it (e.g., to badFunc)
        int *pp = (int*)0x1234;
    }
    //handler(gvar.obj2->ptr);
    return res;
}
