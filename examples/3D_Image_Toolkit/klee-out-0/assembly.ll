; ModuleID = 'klee_init_env.bc'
source_filename = "/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/klee_init_env.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.meta = type { i64, %struct.meta*, %struct.meta* }
%struct.BUFFER_PUTC_DATA = type { [256 x i8], i16 }
%struct.exe_file_t.18 = type { i32, i32, i64, %struct.exe_disk_file_t.17* }
%struct.exe_disk_file_t.17 = type { i32, i8*, %struct.stat64.16* }
%struct.stat64.16 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec.15, %struct.timespec.15, %struct.timespec.15, [3 x i64] }
%struct.timespec.15 = type { i64, i64 }
%struct.exe_file_system_t.19 = type { i32, %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17*, i32, %struct.exe_disk_file_t.17*, i32, i32*, i32*, i32*, i32*, i32*, i32*, i32* }
%struct.cgc_prng = type { %struct.cgc_aes_state, [16 x i8], [16 x i8], i8 }
%struct.cgc_aes_state = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.t3DCPixel = type { i16, i16, i16, i8, i8, i8, i8 }
%struct.exe_sym_env_t.20 = type { [32 x %struct.exe_file_t.18], i32, i32, i32 }
%struct.statfs.12 = type { i64, i64, i64, i64, i64, i64, i64, %struct.__fsid_t.11, i64, i64, i64, [4 x i64] }
%struct.__fsid_t.11 = type { [2 x i32] }
%struct.dirent64.13 = type { i64, i64, i16, i8, [256 x i8] }
%struct.cgc_timeval = type { i32, i32 }
%struct.cgc_fd_set = type { [16 x i64] }
%struct.termios = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }
%struct.winsize = type { i16, i16, i16, i16 }
%struct.sigaction = type { %union.anon, %struct.cgc_fd_set, i32, void ()* }
%union.anon = type { void (i32)* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.tms = type { i64, i64, i64, i64 }
%struct.utmpx = type opaque
%struct.utmp = type { i16, i32, [32 x i8], [4 x i8], [32 x i8], [256 x i8], %struct.exit_status, i32, %struct.cgc_timeval, [4 x i32], [20 x i8] }
%struct.exit_status = type { i16, i16 }
%struct.rusage = type { %struct.timespec.15, %struct.timespec.15, %union.anon.10, %union.anon.10, %union.anon.10, %union.anon.10, %union.anon.10, %union.anon.10, %union.anon.10, %union.anon.10, %union.anon.10, %union.anon.10, %union.anon.10, %union.anon.10, %union.anon.10, %union.anon.10 }
%union.anon.10 = type { i64 }
%struct.siginfo_t = type { i32, i32, i32, i32, %union.anon.0 }
%union.anon.0 = type { %struct.anon.3, [80 x i8] }
%struct.anon.3 = type { i32, i32, i32, i64, i64 }

@__const.klee_init_env.sym_arg_name = private unnamed_addr constant [6 x i8] c"arg\00\00\00", align 1
@.str = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@.str.1 = private unnamed_addr constant [964 x i8] c"klee_init_env\0A\0Ausage: (klee_init_env) [options] [program arguments]\0A  -sym-arg <N>              - Replace by a symbolic argument with length N\0A  -sym-args <MIN> <MAX> <N> - Replace by at least MIN arguments and at most\0A                              MAX arguments, each with maximum length N\0A  -sym-files <NUM> <N>      - Make NUM symbolic files ('A', 'B', 'C', etc.),\0A                              each with size N\0A  -sym-stdin <N>            - Make stdin symbolic with size N.\0A  -sym-stdout               - Make stdout symbolic.\0A  -save-all-writes          - Allow write operations to execute as expected\0A                              even if they exceed the file size. If set to 0, all\0A                              writes exceeding the initial file size are discarded.\0A                              Note: file offset is always incremented.\0A  -max-fail <N>             - Allow up to N injected failures\0A  -fd-fail                  - Shortcut for '-max-fail 1'\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"--sym-arg\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"-sym-arg\00", align 1
@.str.4 = private unnamed_addr constant [48 x i8] c"--sym-arg expects an integer argument <max-len>\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"No more than 100 symbolic arguments allowed.\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"--sym-args\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"-sym-args\00", align 1
@.str.8 = private unnamed_addr constant [77 x i8] c"--sym-args expects three integer arguments <min-argvs> <max-argvs> <max-len>\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"Invalid range to --sym-args\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"n_args\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"--sym-files\00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"-sym-files\00", align 1
@.str.13 = private unnamed_addr constant [72 x i8] c"--sym-files expects two integer arguments <no-sym-files> <sym-file-len>\00", align 1
@.str.14 = private unnamed_addr constant [39 x i8] c"Multiple --sym-files are not allowed.\0A\00", align 1
@.str.15 = private unnamed_addr constant [65 x i8] c"The first argument to --sym-files (number of files) cannot be 0\0A\00", align 1
@.str.16 = private unnamed_addr constant [60 x i8] c"The second argument to --sym-files (file size) cannot be 0\0A\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c"--sym-stdin\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"-sym-stdin\00", align 1
@.str.19 = private unnamed_addr constant [57 x i8] c"--sym-stdin expects one integer argument <sym-stdin-len>\00", align 1
@.str.20 = private unnamed_addr constant [13 x i8] c"--sym-stdout\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"-sym-stdout\00", align 1
@.str.22 = private unnamed_addr constant [18 x i8] c"--save-all-writes\00", align 1
@.str.23 = private unnamed_addr constant [17 x i8] c"-save-all-writes\00", align 1
@.str.24 = private unnamed_addr constant [10 x i8] c"--fd-fail\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"-fd-fail\00", align 1
@.str.26 = private unnamed_addr constant [12 x i8] c"--bout-file\00", align 1
@.str.27 = private unnamed_addr constant [11 x i8] c"-bout-file\00", align 1
@.str.28 = private unnamed_addr constant [11 x i8] c"--max-fail\00", align 1
@.str.29 = private unnamed_addr constant [10 x i8] c"-max-fail\00", align 1
@.str.30 = private unnamed_addr constant [54 x i8] c"--max-fail expects an integer argument <max-failures>\00", align 1
@.str.31 = private unnamed_addr constant [73 x i8] c"/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/klee_init_env.c\00", align 1
@.str.32 = private unnamed_addr constant [9 x i8] c"user.err\00", align 1
@.str.33 = private unnamed_addr constant [37 x i8] c"too many arguments for klee_init_env\00", align 1
@lookaside = dso_local global [128 x %struct.meta*] zeroinitializer, align 16, !dbg !0
@state = common dso_local global [32 x i32] zeroinitializer, align 16, !dbg !25
@state_n = common dso_local global i32 0, align 4, !dbg !34
@g_putcBuffer = common dso_local global %struct.BUFFER_PUTC_DATA zeroinitializer, align 2, !dbg !40
@StrtokNext = dso_local global i8* null, align 8, !dbg !63
@red_blue = dso_local global [8 x i32] [i32 0, i32 32, i32 64, i32 96, i32 160, i32 192, i32 224, i32 255], align 16, !dbg !72
@green = dso_local global [4 x i32] [i32 0, i32 96, i32 176, i32 255], align 16, !dbg !79
@menuSelections = common dso_local global i32 0, align 4, !dbg !88
@coords = common dso_local global i32 0, align 4, !dbg !117
@.str.34 = private unnamed_addr constant [49 x i8] c"[ERROR] Allocating a free list block failed: $d\0A\00", align 1
@.str.1.35 = private unnamed_addr constant [31 x i8] c"[ERROR] Malloc fail terminate\0A\00", align 1
@.str.9.36 = private unnamed_addr constant [46 x i8] c"Please submit your new file data ($d bytes):\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [17 x i8] c"New file loaded\0A\00", align 1
@.str.2.37 = private unnamed_addr constant [20 x i8] c"XYZ:  ($d, $d, $d)\0A\00", align 1
@.str.3.38 = private unnamed_addr constant [27 x i8] c"RGBA: (#$02x$02x$02x$02x)\0A\00", align 1
@.str.4.39 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.11.40 = private unnamed_addr constant [19 x i8] c"NEW_FILE selected\0A\00", align 1
@.str.1.12 = private unnamed_addr constant [21 x i8] c"CHECK_FILE selected\0A\00", align 1
@.str.2.13 = private unnamed_addr constant [21 x i8] c"SKEW_IMAGE selected\0A\00", align 1
@.str.3.14 = private unnamed_addr constant [32 x i8] c"Incorrect coordinate provided.\0A\00", align 1
@.str.4.15 = private unnamed_addr constant [23 x i8] c"ROTATE_IMAGE selected\0A\00", align 1
@.str.5.41 = private unnamed_addr constant [22 x i8] c"SCALE_IMAGE selected\0A\00", align 1
@.str.6.42 = private unnamed_addr constant [21 x i8] c"BRIGHTNESS selected\0A\00", align 1
@.str.7.43 = private unnamed_addr constant [18 x i8] c"OPACITY selected\0A\00", align 1
@.str.8.44 = private unnamed_addr constant [19 x i8] c"COMPRESS selected\0A\00", align 1
@.str.9.16 = private unnamed_addr constant [21 x i8] c"DECOMPRESS selected\0A\00", align 1
@.str.10.45 = private unnamed_addr constant [21 x i8] c"No compressed data.\0A\00", align 1
@.str.11.17 = private unnamed_addr constant [48 x i8] c"You have already decompressed the latest data.\0A\00", align 1
@.str.12.46 = private unnamed_addr constant [21 x i8] c"SHOW_PIXEL selected\0A\00", align 1
@.str.13.47 = private unnamed_addr constant [27 x i8] c"Select the pixel to view:\0A\00", align 1
@.str.14.48 = private unnamed_addr constant [45 x i8] c"Out of range. Showing last displayed pixel.\0A\00", align 1
@.str.15.49 = private unnamed_addr constant [22 x i8] c"No pixel to show.\0A\0A\0A\0A\00", align 1
@.str.16.50 = private unnamed_addr constant [15 x i8] c"EXIT selected\0A\00", align 1
@.str.17.51 = private unnamed_addr constant [17 x i8] c"UNKNOWN command\0A\00", align 1
@.str.18.54 = private unnamed_addr constant [46 x i8] c"3D Coordinates (3DC) Image File Format Tools\0A\00", align 1
@__exe_env = dso_local global { <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] } { <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }> <{ %struct.exe_file_t.18 { i32 0, i32 5, i64 0, %struct.exe_disk_file_t.17* null }, %struct.exe_file_t.18 { i32 1, i32 9, i64 0, %struct.exe_disk_file_t.17* null }, %struct.exe_file_t.18 { i32 2, i32 9, i64 0, %struct.exe_disk_file_t.17* null }, [29 x %struct.exe_file_t.18] zeroinitializer }>, i32 18, i32 0, i32 0, [4 x i8] undef }, align 8, !dbg !119
@__exe_fs = common dso_local global %struct.exe_file_system_t.19 zeroinitializer, align 8, !dbg !124
@__const.klee_init_fds.name = private unnamed_addr constant [7 x i8] c"?-data\00", align 1
@.str.57 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.1.58 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@.str.2.59 = private unnamed_addr constant [10 x i8] c"read_fail\00", align 1
@.str.3.60 = private unnamed_addr constant [11 x i8] c"write_fail\00", align 1
@.str.4.61 = private unnamed_addr constant [11 x i8] c"close_fail\00", align 1
@.str.5.62 = private unnamed_addr constant [15 x i8] c"ftruncate_fail\00", align 1
@.str.6.63 = private unnamed_addr constant [12 x i8] c"getcwd_fail\00", align 1
@.str.7.64 = private unnamed_addr constant [7 x i8] c"stdout\00", align 1
@.str.8.65 = private unnamed_addr constant [14 x i8] c"model_version\00", align 1
@.str.9.66 = private unnamed_addr constant [6 x i8] c"-stat\00", align 1
@.str.10.67 = private unnamed_addr constant [5 x i8] c"size\00", align 1
@.str.11.68 = private unnamed_addr constant [67 x i8] c"/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/fd_init.c\00", align 1
@__PRETTY_FUNCTION__.__create_new_dfile = private unnamed_addr constant [88 x i8] c"void __create_new_dfile(exe_disk_file_t *, unsigned int, const char *, struct stat64 *)\00", align 1
@.str.71 = private unnamed_addr constant [74 x i8] c"/home/haoxin/haoxin-data/smu-research/klee/runtime/Intrinsic/klee_range.c\00", align 1
@.str.1.72 = private unnamed_addr constant [14 x i8] c"invalid range\00", align 1
@.str.2.73 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @cgc_initialize_flag_page, i8* null }]
@cgc_internal_prng = internal global %struct.cgc_prng* null, align 8
@__const.cgc_try_init_prng.prng_seed = private unnamed_addr constant <{ [32 x i8], [16 x i8] }> <{ [32 x i8] c"seedseedseedseed0123456789abcdef", [16 x i8] zeroinitializer }>, align 16
@.str.76 = private unnamed_addr constant [5 x i8] c"seed\00", align 1
@.str.1.77 = private unnamed_addr constant [6 x i8] c"%2hhx\00", align 1
@.str.88 = private unnamed_addr constant [46 x i8] c"Undefined call to open(): O_TRUNC | O_RDONLY\0A\00", align 1
@.str.1.89 = private unnamed_addr constant [47 x i8] c"Undefined call to open(): O_EXCL w/o O_RDONLY\0A\00", align 1
@.str.2.92 = private unnamed_addr constant [44 x i8] c"symbolic file descriptor, ignoring (ENOENT)\00", align 1
@close.n_calls = internal global i32 0, align 4, !dbg !211
@read.n_calls = internal global i32 0, align 4, !dbg !254
@.str.3.95 = private unnamed_addr constant [12 x i8] c"f->off >= 0\00", align 1
@.str.4.96 = private unnamed_addr constant [62 x i8] c"/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/fd.c\00", align 1
@__PRETTY_FUNCTION__.read = private unnamed_addr constant [34 x i8] c"ssize_t read(int, void *, size_t)\00", align 1
@write.n_calls = internal global i32 0, align 4, !dbg !263
@.str.5.99 = private unnamed_addr constant [7 x i8] c"r >= 0\00", align 1
@__PRETTY_FUNCTION__.write = private unnamed_addr constant [41 x i8] c"ssize_t write(int, const void *, size_t)\00", align 1
@.str.6.100 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.7.101 = private unnamed_addr constant [24 x i8] c"write() ignores bytes.\0A\00", align 1
@.str.8.104 = private unnamed_addr constant [18 x i8] c"new_off == f->off\00", align 1
@__PRETTY_FUNCTION__.__fd_lseek = private unnamed_addr constant [38 x i8] c"off64_t __fd_lseek(int, off64_t, int)\00", align 1
@.str.9.109 = private unnamed_addr constant [33 x i8] c"symbolic file, ignoring (ENOENT)\00", align 1
@chmod.n_calls = internal global i32 0, align 4, !dbg !268
@fchmod.n_calls = internal global i32 0, align 4, !dbg !275
@.str.25.110 = private unnamed_addr constant [32 x i8] c"symbolic file, ignoring (EPERM)\00", align 1
@__fd_ftruncate.n_calls = internal global i32 0, align 4, !dbg !280
@.str.10.115 = private unnamed_addr constant [30 x i8] c"symbolic file, ignoring (EIO)\00", align 1
@.str.11.118 = private unnamed_addr constant [33 x i8] c"symbolic file, ignoring (EINVAL)\00", align 1
@.str.12.119 = private unnamed_addr constant [18 x i8] c"s != (off64_t) -1\00", align 1
@__PRETTY_FUNCTION__.__fd_getdents = private unnamed_addr constant [65 x i8] c"int __fd_getdents(unsigned int, struct dirent64 *, unsigned int)\00", align 1
@.str.13.120 = private unnamed_addr constant [22 x i8] c"f->off != (off64_t)-1\00", align 1
@.str.14.121 = private unnamed_addr constant [41 x i8] c"(TCGETS) symbolic file, incomplete model\00", align 1
@.str.15.122 = private unnamed_addr constant [42 x i8] c"(TCSETS) symbolic file, silently ignoring\00", align 1
@.str.16.123 = private unnamed_addr constant [43 x i8] c"(TCSETSW) symbolic file, silently ignoring\00", align 1
@.str.17.124 = private unnamed_addr constant [43 x i8] c"(TCSETSF) symbolic file, silently ignoring\00", align 1
@.str.18.125 = private unnamed_addr constant [45 x i8] c"(TIOCGWINSZ) symbolic file, incomplete model\00", align 1
@.str.19.126 = private unnamed_addr constant [46 x i8] c"(TIOCSWINSZ) symbolic file, ignoring (EINVAL)\00", align 1
@.str.20.127 = private unnamed_addr constant [43 x i8] c"(FIONREAD) symbolic file, incomplete model\00", align 1
@.str.21.128 = private unnamed_addr constant [44 x i8] c"(MTIOCGET) symbolic file, ignoring (EINVAL)\00", align 1
@.str.22.131 = private unnamed_addr constant [32 x i8] c"symbolic file, ignoring (EBADF)\00", align 1
@.str.23.132 = private unnamed_addr constant [17 x i8] c"ignoring (EPERM)\00", align 1
@getcwd.n_calls = internal global i32 0, align 4, !dbg !285
@.str.24.135 = private unnamed_addr constant [18 x i8] c"ignoring (ENOENT)\00", align 1
@.str.136 = private unnamed_addr constant [18 x i8] c"silently ignoring\00", align 1
@.str.1.137 = private unnamed_addr constant [24 x i8] c"ignoring (EAFNOSUPPORT)\00", align 1
@.str.2.138 = private unnamed_addr constant [15 x i8] c"ignoring (EIO)\00", align 1
@.str.3.139 = private unnamed_addr constant [18 x i8] c"ignoring (ENFILE)\00", align 1
@.str.4.140 = private unnamed_addr constant [17 x i8] c"ignoring (EPERM)\00", align 1
@.str.5.141 = private unnamed_addr constant [13 x i8] c"returning 0\0A\00", align 1
@.str.6.142 = private unnamed_addr constant [40 x i8] c"setting all times to 0 and returning 0\0A\00", align 1
@.str.7.143 = private unnamed_addr constant [17 x i8] c"ignoring (EBADF)\00", align 1
@.str.8.144 = private unnamed_addr constant [21 x i8] c"ignoring (-1 result)\00", align 1
@.str.9.145 = private unnamed_addr constant [18 x i8] c"ignoring (ECHILD)\00", align 1
@.str.10.146 = private unnamed_addr constant [32 x i8] c"silently ignoring (returning 0)\00", align 1
@state.155 = internal global [4 x [4 x i8]]* null, align 8
@Key = internal global i8* null, align 8
@sbox = internal constant [256 x i8] c"c|w{\F2ko\C50\01g+\FE\D7\ABv\CA\82\C9}\FAYG\F0\AD\D4\A2\AF\9C\A4r\C0\B7\FD\93&6?\F7\CC4\A5\E5\F1q\D81\15\04\C7#\C3\18\96\05\9A\07\12\80\E2\EB'\B2u\09\83,\1A\1BnZ\A0R;\D6\B3)\E3/\84S\D1\00\ED \FC\B1[j\CB\BE9JLX\CF\D0\EF\AA\FBCM3\85E\F9\02\7FP<\9F\A8Q\A3@\8F\92\9D8\F5\BC\B6\DA!\10\FF\F3\D2\CD\0C\13\EC_\97D\17\C4\A7~=d]\19s`\81O\DC\22*\90\88F\EE\B8\14\DE^\0B\DB\E02:\0AI\06$\5C\C2\D3\ACb\91\95\E4y\E7\C87m\8D\D5N\A9lV\F4\EAez\AE\08\BAx%.\1C\A6\B4\C6\E8\DDt\1FK\BD\8B\8Ap>\B5fH\03\F6\0Ea5W\B9\86\C1\1D\9E\E1\F8\98\11i\D9\8E\94\9B\1E\87\E9\CEU(\DF\8C\A1\89\0D\BF\E6BhA\99-\0F\B0T\BB\16", align 16
@RoundKey = internal global [176 x i8] zeroinitializer, align 16
@Rcon = internal constant [255 x i8] c"\8D\01\02\04\08\10 @\80\1B6l\D8\ABM\9A/^\BCc\C6\975j\D4\B3}\FA\EF\C5\919r\E4\D3\BDa\C2\9F%J\943f\CC\83\1D:t\E8\CB\8D\01\02\04\08\10 @\80\1B6l\D8\ABM\9A/^\BCc\C6\975j\D4\B3}\FA\EF\C5\919r\E4\D3\BDa\C2\9F%J\943f\CC\83\1D:t\E8\CB\8D\01\02\04\08\10 @\80\1B6l\D8\ABM\9A/^\BCc\C6\975j\D4\B3}\FA\EF\C5\919r\E4\D3\BDa\C2\9F%J\943f\CC\83\1D:t\E8\CB\8D\01\02\04\08\10 @\80\1B6l\D8\ABM\9A/^\BCc\C6\975j\D4\B3}\FA\EF\C5\919r\E4\D3\BDa\C2\9F%J\943f\CC\83\1D:t\E8\CB\8D\01\02\04\08\10 @\80\1B6l\D8\ABM\9A/^\BCc\C6\975j\D4\B3}\FA\EF\C5\919r\E4\D3\BDa\C2\9F%J\943f\CC\83\1D:t\E8\CB", align 16
@rsbox = internal constant [256 x i8] c"R\09j\D506\A58\BF@\A3\9E\81\F3\D7\FB|\E39\82\9B/\FF\874\8ECD\C4\DE\E9\CBT{\942\A6\C2#=\EEL\95\0BB\FA\C3N\08.\A1f(\D9$\B2v[\A2Im\8B\D1%r\F8\F6d\86h\98\16\D4\A4\5C\CC]e\B6\92lpHP\FD\ED\B9\DA^\15FW\A7\8D\9D\84\90\D8\AB\00\8C\BC\D3\0A\F7\E4X\05\B8\B3E\06\D0,\1E\8F\CA?\0F\02\C1\AF\BD\03\01\13\8Ak:\91\11AOg\DC\EA\97\F2\CF\CE\F0\B4\E6s\96\ACt\22\E7\AD5\85\E2\F97\E8\1Cu\DFnG\F1\1Aq\1D)\C5\89o\B7b\0E\AA\18\BE\1B\FCV>K\C6\D2y \9A\DB\C0\FEx\CDZ\F4\1F\DD\A83\88\07\C71\B1\12\10Y'\80\EC_`Q\7F\A9\19\B5J\0D-\E5z\9F\93\C9\9C\EF\A0\E0;M\AE*\F5\B0\C8\EB\BB<\83S\99a\17+\04~\BAw\D6&\E1i\14cU!\0C}", align 16
@Iv = internal global i8* null, align 8
@.str.158 = private unnamed_addr constant [83 x i8] c"/home/haoxin/haoxin-data/smu-research/klee/runtime/Intrinsic/klee_div_zero_check.c\00", align 1
@.str.1.159 = private unnamed_addr constant [15 x i8] c"divide by zero\00", align 1
@.str.2.160 = private unnamed_addr constant [8 x i8] c"div.err\00", align 1
@.str.163 = private unnamed_addr constant [8 x i8] c"IGNORED\00", align 1
@.str.1.164 = private unnamed_addr constant [16 x i8] c"overshift error\00", align 1
@.str.2.165 = private unnamed_addr constant [14 x i8] c"overshift.err\00", align 1

@__getdents64 = dso_local alias i64 (i32, i8*, i64), i64 (i32, i8*, i64)* @getdents64

; Function Attrs: noinline nounwind uwtable
define dso_local void @klee_init_env(i32* %argcPtr, i8*** %argvPtr) #0 !dbg !399 {
entry:
  %argcPtr.addr = alloca i32*, align 8
  %argvPtr.addr = alloca i8***, align 8
  %argc = alloca i32, align 4
  %argv = alloca i8**, align 8
  %new_argc = alloca i32, align 4
  %n_args = alloca i32, align 4
  %new_argv = alloca [1024 x i8*], align 16
  %max_len = alloca i32, align 4
  %min_argvs = alloca i32, align 4
  %max_argvs = alloca i32, align 4
  %sym_files = alloca i32, align 4
  %sym_file_len = alloca i32, align 4
  %sym_stdin_len = alloca i32, align 4
  %sym_stdout_flag = alloca i32, align 4
  %save_all_writes_flag = alloca i32, align 4
  %fd_fail = alloca i32, align 4
  %final_argv = alloca i8**, align 8
  %sym_arg_name = alloca [6 x i8], align 1
  %sym_arg_num = alloca i32, align 4
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %msg = alloca i8*, align 8
  %msg40 = alloca i8*, align 8
  %msg105 = alloca i8*, align 8
  %msg145 = alloca i8*, align 8
  %msg215 = alloca i8*, align 8
  store i32* %argcPtr, i32** %argcPtr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %argcPtr.addr, metadata !404, metadata !DIExpression()), !dbg !405
  store i8*** %argvPtr, i8**** %argvPtr.addr, align 8
  call void @llvm.dbg.declare(metadata i8**** %argvPtr.addr, metadata !406, metadata !DIExpression()), !dbg !407
  call void @llvm.dbg.declare(metadata i32* %argc, metadata !408, metadata !DIExpression()), !dbg !409
  %0 = load i32*, i32** %argcPtr.addr, align 8, !dbg !410
  %1 = load i32, i32* %0, align 4, !dbg !411
  store i32 %1, i32* %argc, align 4, !dbg !409
  call void @llvm.dbg.declare(metadata i8*** %argv, metadata !412, metadata !DIExpression()), !dbg !413
  %2 = load i8***, i8**** %argvPtr.addr, align 8, !dbg !414
  %3 = load i8**, i8*** %2, align 8, !dbg !415
  store i8** %3, i8*** %argv, align 8, !dbg !413
  call void @llvm.dbg.declare(metadata i32* %new_argc, metadata !416, metadata !DIExpression()), !dbg !417
  store i32 0, i32* %new_argc, align 4, !dbg !417
  call void @llvm.dbg.declare(metadata i32* %n_args, metadata !418, metadata !DIExpression()), !dbg !419
  call void @llvm.dbg.declare(metadata [1024 x i8*]* %new_argv, metadata !420, metadata !DIExpression()), !dbg !424
  call void @llvm.dbg.declare(metadata i32* %max_len, metadata !425, metadata !DIExpression()), !dbg !426
  call void @llvm.dbg.declare(metadata i32* %min_argvs, metadata !427, metadata !DIExpression()), !dbg !428
  call void @llvm.dbg.declare(metadata i32* %max_argvs, metadata !429, metadata !DIExpression()), !dbg !430
  call void @llvm.dbg.declare(metadata i32* %sym_files, metadata !431, metadata !DIExpression()), !dbg !432
  store i32 0, i32* %sym_files, align 4, !dbg !432
  call void @llvm.dbg.declare(metadata i32* %sym_file_len, metadata !433, metadata !DIExpression()), !dbg !434
  store i32 0, i32* %sym_file_len, align 4, !dbg !434
  call void @llvm.dbg.declare(metadata i32* %sym_stdin_len, metadata !435, metadata !DIExpression()), !dbg !436
  store i32 0, i32* %sym_stdin_len, align 4, !dbg !436
  call void @llvm.dbg.declare(metadata i32* %sym_stdout_flag, metadata !437, metadata !DIExpression()), !dbg !438
  store i32 0, i32* %sym_stdout_flag, align 4, !dbg !438
  call void @llvm.dbg.declare(metadata i32* %save_all_writes_flag, metadata !439, metadata !DIExpression()), !dbg !440
  store i32 0, i32* %save_all_writes_flag, align 4, !dbg !440
  call void @llvm.dbg.declare(metadata i32* %fd_fail, metadata !441, metadata !DIExpression()), !dbg !442
  store i32 0, i32* %fd_fail, align 4, !dbg !442
  call void @llvm.dbg.declare(metadata i8*** %final_argv, metadata !443, metadata !DIExpression()), !dbg !444
  call void @llvm.dbg.declare(metadata [6 x i8]* %sym_arg_name, metadata !445, metadata !DIExpression()), !dbg !449
  %4 = bitcast [6 x i8]* %sym_arg_name to i8*, !dbg !449
  %5 = call i8* @memcpy(i8* %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__const.klee_init_env.sym_arg_name, i32 0, i32 0), i64 6), !dbg !449
  call void @llvm.dbg.declare(metadata i32* %sym_arg_num, metadata !450, metadata !DIExpression()), !dbg !451
  store i32 0, i32* %sym_arg_num, align 4, !dbg !451
  call void @llvm.dbg.declare(metadata i32* %k, metadata !452, metadata !DIExpression()), !dbg !453
  store i32 0, i32* %k, align 4, !dbg !453
  call void @llvm.dbg.declare(metadata i32* %i, metadata !454, metadata !DIExpression()), !dbg !455
  %arrayidx = getelementptr inbounds [6 x i8], [6 x i8]* %sym_arg_name, i64 0, i64 5, !dbg !456
  store i8 0, i8* %arrayidx, align 1, !dbg !457
  %6 = load i32, i32* %argc, align 4, !dbg !458
  %cmp = icmp eq i32 %6, 2, !dbg !460
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !461

land.lhs.true:                                    ; preds = %entry
  %7 = load i8**, i8*** %argv, align 8, !dbg !462
  %arrayidx1 = getelementptr inbounds i8*, i8** %7, i64 1, !dbg !462
  %8 = load i8*, i8** %arrayidx1, align 8, !dbg !462
  %call = call i32 @__streq(i8* %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)), !dbg !463
  %tobool = icmp ne i32 %call, 0, !dbg !463
  br i1 %tobool, label %if.then, label %if.end, !dbg !464

if.then:                                          ; preds = %land.lhs.true
  call void @__emit_error(i8* getelementptr inbounds ([964 x i8], [964 x i8]* @.str.1, i64 0, i64 0)), !dbg !465
  br label %if.end, !dbg !467

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  br label %while.cond, !dbg !468

while.cond:                                       ; preds = %if.end239, %if.end
  %9 = load i32, i32* %k, align 4, !dbg !469
  %10 = load i32, i32* %argc, align 4, !dbg !470
  %cmp2 = icmp slt i32 %9, %10, !dbg !471
  br i1 %cmp2, label %while.body, label %while.end, !dbg !468

while.body:                                       ; preds = %while.cond
  %11 = load i8**, i8*** %argv, align 8, !dbg !472
  %12 = load i32, i32* %k, align 4, !dbg !475
  %idxprom = sext i32 %12 to i64, !dbg !472
  %arrayidx3 = getelementptr inbounds i8*, i8** %11, i64 %idxprom, !dbg !472
  %13 = load i8*, i8** %arrayidx3, align 8, !dbg !472
  %call4 = call i32 @__streq(i8* %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0)), !dbg !476
  %tobool5 = icmp ne i32 %call4, 0, !dbg !476
  br i1 %tobool5, label %if.then10, label %lor.lhs.false, !dbg !477

lor.lhs.false:                                    ; preds = %while.body
  %14 = load i8**, i8*** %argv, align 8, !dbg !478
  %15 = load i32, i32* %k, align 4, !dbg !479
  %idxprom6 = sext i32 %15 to i64, !dbg !478
  %arrayidx7 = getelementptr inbounds i8*, i8** %14, i64 %idxprom6, !dbg !478
  %16 = load i8*, i8** %arrayidx7, align 8, !dbg !478
  %call8 = call i32 @__streq(i8* %16, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0)), !dbg !480
  %tobool9 = icmp ne i32 %call8, 0, !dbg !480
  br i1 %tobool9, label %if.then10, label %if.else, !dbg !481

if.then10:                                        ; preds = %lor.lhs.false, %while.body
  call void @llvm.dbg.declare(metadata i8** %msg, metadata !482, metadata !DIExpression()), !dbg !484
  store i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.4, i64 0, i64 0), i8** %msg, align 8, !dbg !484
  %17 = load i32, i32* %k, align 4, !dbg !485
  %inc = add nsw i32 %17, 1, !dbg !485
  store i32 %inc, i32* %k, align 4, !dbg !485
  %18 = load i32, i32* %argc, align 4, !dbg !487
  %cmp11 = icmp eq i32 %inc, %18, !dbg !488
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !489

if.then12:                                        ; preds = %if.then10
  %19 = load i8*, i8** %msg, align 8, !dbg !490
  call void @__emit_error(i8* %19), !dbg !491
  br label %if.end13, !dbg !491

if.end13:                                         ; preds = %if.then12, %if.then10
  %20 = load i8**, i8*** %argv, align 8, !dbg !492
  %21 = load i32, i32* %k, align 4, !dbg !493
  %inc14 = add nsw i32 %21, 1, !dbg !493
  store i32 %inc14, i32* %k, align 4, !dbg !493
  %idxprom15 = sext i32 %21 to i64, !dbg !492
  %arrayidx16 = getelementptr inbounds i8*, i8** %20, i64 %idxprom15, !dbg !492
  %22 = load i8*, i8** %arrayidx16, align 8, !dbg !492
  %23 = load i8*, i8** %msg, align 8, !dbg !494
  %call17 = call i64 @__str_to_int(i8* %22, i8* %23), !dbg !495
  %conv = trunc i64 %call17 to i32, !dbg !495
  store i32 %conv, i32* %max_len, align 4, !dbg !496
  %24 = load i32, i32* %sym_arg_num, align 4, !dbg !497
  %cmp18 = icmp ugt i32 %24, 99, !dbg !499
  br i1 %cmp18, label %if.then20, label %if.end21, !dbg !500

if.then20:                                        ; preds = %if.end13
  call void @__emit_error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)), !dbg !501
  br label %if.end21, !dbg !501

if.end21:                                         ; preds = %if.then20, %if.end13
  %25 = load i32, i32* %sym_arg_num, align 4, !dbg !502
  %div = udiv i32 %25, 10, !dbg !503
  %add = add i32 48, %div, !dbg !504
  %conv22 = trunc i32 %add to i8, !dbg !505
  %arrayidx23 = getelementptr inbounds [6 x i8], [6 x i8]* %sym_arg_name, i64 0, i64 3, !dbg !506
  store i8 %conv22, i8* %arrayidx23, align 1, !dbg !507
  %26 = load i32, i32* %sym_arg_num, align 4, !dbg !508
  %rem = urem i32 %26, 10, !dbg !509
  %add24 = add i32 48, %rem, !dbg !510
  %conv25 = trunc i32 %add24 to i8, !dbg !511
  %arrayidx26 = getelementptr inbounds [6 x i8], [6 x i8]* %sym_arg_name, i64 0, i64 4, !dbg !512
  store i8 %conv25, i8* %arrayidx26, align 1, !dbg !513
  %27 = load i32, i32* %sym_arg_num, align 4, !dbg !514
  %inc27 = add i32 %27, 1, !dbg !514
  store i32 %inc27, i32* %sym_arg_num, align 4, !dbg !514
  %arraydecay = getelementptr inbounds [1024 x i8*], [1024 x i8*]* %new_argv, i64 0, i64 0, !dbg !515
  %28 = load i32, i32* %max_len, align 4, !dbg !516
  %arraydecay28 = getelementptr inbounds [6 x i8], [6 x i8]* %sym_arg_name, i64 0, i64 0, !dbg !517
  %call29 = call i8* @__get_sym_str(i32 %28, i8* %arraydecay28), !dbg !518
  call void @__add_arg(i32* %new_argc, i8** %arraydecay, i8* %call29, i32 1024), !dbg !519
  br label %if.end239, !dbg !520

if.else:                                          ; preds = %lor.lhs.false
  %29 = load i8**, i8*** %argv, align 8, !dbg !521
  %30 = load i32, i32* %k, align 4, !dbg !523
  %idxprom30 = sext i32 %30 to i64, !dbg !521
  %arrayidx31 = getelementptr inbounds i8*, i8** %29, i64 %idxprom30, !dbg !521
  %31 = load i8*, i8** %arrayidx31, align 8, !dbg !521
  %call32 = call i32 @__streq(i8* %31, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0)), !dbg !524
  %tobool33 = icmp ne i32 %call32, 0, !dbg !524
  br i1 %tobool33, label %if.then39, label %lor.lhs.false34, !dbg !525

lor.lhs.false34:                                  ; preds = %if.else
  %32 = load i8**, i8*** %argv, align 8, !dbg !526
  %33 = load i32, i32* %k, align 4, !dbg !527
  %idxprom35 = sext i32 %33 to i64, !dbg !526
  %arrayidx36 = getelementptr inbounds i8*, i8** %32, i64 %idxprom35, !dbg !526
  %34 = load i8*, i8** %arrayidx36, align 8, !dbg !526
  %call37 = call i32 @__streq(i8* %34, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0)), !dbg !528
  %tobool38 = icmp ne i32 %call37, 0, !dbg !528
  br i1 %tobool38, label %if.then39, label %if.else94, !dbg !529

if.then39:                                        ; preds = %lor.lhs.false34, %if.else
  call void @llvm.dbg.declare(metadata i8** %msg40, metadata !530, metadata !DIExpression()), !dbg !532
  store i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8, i64 0, i64 0), i8** %msg40, align 8, !dbg !532
  %35 = load i32, i32* %k, align 4, !dbg !533
  %add41 = add nsw i32 %35, 3, !dbg !535
  %36 = load i32, i32* %argc, align 4, !dbg !536
  %cmp42 = icmp sge i32 %add41, %36, !dbg !537
  br i1 %cmp42, label %if.then44, label %if.end45, !dbg !538

if.then44:                                        ; preds = %if.then39
  %37 = load i8*, i8** %msg40, align 8, !dbg !539
  call void @__emit_error(i8* %37), !dbg !540
  br label %if.end45, !dbg !540

if.end45:                                         ; preds = %if.then44, %if.then39
  %38 = load i32, i32* %k, align 4, !dbg !541
  %inc46 = add nsw i32 %38, 1, !dbg !541
  store i32 %inc46, i32* %k, align 4, !dbg !541
  %39 = load i8**, i8*** %argv, align 8, !dbg !542
  %40 = load i32, i32* %k, align 4, !dbg !543
  %inc47 = add nsw i32 %40, 1, !dbg !543
  store i32 %inc47, i32* %k, align 4, !dbg !543
  %idxprom48 = sext i32 %40 to i64, !dbg !542
  %arrayidx49 = getelementptr inbounds i8*, i8** %39, i64 %idxprom48, !dbg !542
  %41 = load i8*, i8** %arrayidx49, align 8, !dbg !542
  %42 = load i8*, i8** %msg40, align 8, !dbg !544
  %call50 = call i64 @__str_to_int(i8* %41, i8* %42), !dbg !545
  %conv51 = trunc i64 %call50 to i32, !dbg !545
  store i32 %conv51, i32* %min_argvs, align 4, !dbg !546
  %43 = load i8**, i8*** %argv, align 8, !dbg !547
  %44 = load i32, i32* %k, align 4, !dbg !548
  %inc52 = add nsw i32 %44, 1, !dbg !548
  store i32 %inc52, i32* %k, align 4, !dbg !548
  %idxprom53 = sext i32 %44 to i64, !dbg !547
  %arrayidx54 = getelementptr inbounds i8*, i8** %43, i64 %idxprom53, !dbg !547
  %45 = load i8*, i8** %arrayidx54, align 8, !dbg !547
  %46 = load i8*, i8** %msg40, align 8, !dbg !549
  %call55 = call i64 @__str_to_int(i8* %45, i8* %46), !dbg !550
  %conv56 = trunc i64 %call55 to i32, !dbg !550
  store i32 %conv56, i32* %max_argvs, align 4, !dbg !551
  %47 = load i8**, i8*** %argv, align 8, !dbg !552
  %48 = load i32, i32* %k, align 4, !dbg !553
  %inc57 = add nsw i32 %48, 1, !dbg !553
  store i32 %inc57, i32* %k, align 4, !dbg !553
  %idxprom58 = sext i32 %48 to i64, !dbg !552
  %arrayidx59 = getelementptr inbounds i8*, i8** %47, i64 %idxprom58, !dbg !552
  %49 = load i8*, i8** %arrayidx59, align 8, !dbg !552
  %50 = load i8*, i8** %msg40, align 8, !dbg !554
  %call60 = call i64 @__str_to_int(i8* %49, i8* %50), !dbg !555
  %conv61 = trunc i64 %call60 to i32, !dbg !555
  store i32 %conv61, i32* %max_len, align 4, !dbg !556
  %51 = load i32, i32* %min_argvs, align 4, !dbg !557
  %52 = load i32, i32* %max_argvs, align 4, !dbg !559
  %cmp62 = icmp ugt i32 %51, %52, !dbg !560
  br i1 %cmp62, label %if.then70, label %lor.lhs.false64, !dbg !561

lor.lhs.false64:                                  ; preds = %if.end45
  %53 = load i32, i32* %min_argvs, align 4, !dbg !562
  %cmp65 = icmp eq i32 %53, 0, !dbg !563
  %54 = load i32, i32* %max_argvs, align 4, !dbg !564
  %cmp68 = icmp eq i32 %54, 0, !dbg !565
  %or.cond = and i1 %cmp65, %cmp68, !dbg !566
  br i1 %or.cond, label %if.then70, label %if.end71, !dbg !566

if.then70:                                        ; preds = %lor.lhs.false64, %if.end45
  call void @__emit_error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0)), !dbg !567
  br label %if.end71, !dbg !567

if.end71:                                         ; preds = %if.then70, %lor.lhs.false64
  %55 = load i32, i32* %min_argvs, align 4, !dbg !568
  %56 = load i32, i32* %max_argvs, align 4, !dbg !569
  %add72 = add i32 %56, 1, !dbg !570
  %call73 = call i32 @klee_range(i32 %55, i32 %add72, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0)), !dbg !571
  store i32 %call73, i32* %n_args, align 4, !dbg !572
  %57 = load i32, i32* %sym_arg_num, align 4, !dbg !573
  %58 = load i32, i32* %max_argvs, align 4, !dbg !575
  %add74 = add i32 %57, %58, !dbg !576
  %cmp75 = icmp ugt i32 %add74, 99, !dbg !577
  br i1 %cmp75, label %if.then77, label %if.end78, !dbg !578

if.then77:                                        ; preds = %if.end71
  call void @__emit_error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)), !dbg !579
  br label %if.end78, !dbg !579

if.end78:                                         ; preds = %if.then77, %if.end71
  store i32 0, i32* %i, align 4, !dbg !580
  br label %for.cond, !dbg !582

for.cond:                                         ; preds = %for.body, %if.end78
  %59 = load i32, i32* %i, align 4, !dbg !583
  %60 = load i32, i32* %n_args, align 4, !dbg !585
  %cmp79 = icmp slt i32 %59, %60, !dbg !586
  br i1 %cmp79, label %for.body, label %if.end239, !dbg !587

for.body:                                         ; preds = %for.cond
  %61 = load i32, i32* %sym_arg_num, align 4, !dbg !588
  %div81 = udiv i32 %61, 10, !dbg !590
  %add82 = add i32 48, %div81, !dbg !591
  %conv83 = trunc i32 %add82 to i8, !dbg !592
  %arrayidx84 = getelementptr inbounds [6 x i8], [6 x i8]* %sym_arg_name, i64 0, i64 3, !dbg !593
  store i8 %conv83, i8* %arrayidx84, align 1, !dbg !594
  %62 = load i32, i32* %sym_arg_num, align 4, !dbg !595
  %rem85 = urem i32 %62, 10, !dbg !596
  %add86 = add i32 48, %rem85, !dbg !597
  %conv87 = trunc i32 %add86 to i8, !dbg !598
  %arrayidx88 = getelementptr inbounds [6 x i8], [6 x i8]* %sym_arg_name, i64 0, i64 4, !dbg !599
  store i8 %conv87, i8* %arrayidx88, align 1, !dbg !600
  %63 = load i32, i32* %sym_arg_num, align 4, !dbg !601
  %inc89 = add i32 %63, 1, !dbg !601
  store i32 %inc89, i32* %sym_arg_num, align 4, !dbg !601
  %arraydecay90 = getelementptr inbounds [1024 x i8*], [1024 x i8*]* %new_argv, i64 0, i64 0, !dbg !602
  %64 = load i32, i32* %max_len, align 4, !dbg !603
  %arraydecay91 = getelementptr inbounds [6 x i8], [6 x i8]* %sym_arg_name, i64 0, i64 0, !dbg !604
  %call92 = call i8* @__get_sym_str(i32 %64, i8* %arraydecay91), !dbg !605
  call void @__add_arg(i32* %new_argc, i8** %arraydecay90, i8* %call92, i32 1024), !dbg !606
  %65 = load i32, i32* %i, align 4, !dbg !607
  %inc93 = add nsw i32 %65, 1, !dbg !607
  store i32 %inc93, i32* %i, align 4, !dbg !607
  br label %for.cond, !dbg !608, !llvm.loop !609

if.else94:                                        ; preds = %lor.lhs.false34
  %66 = load i8**, i8*** %argv, align 8, !dbg !611
  %67 = load i32, i32* %k, align 4, !dbg !613
  %idxprom95 = sext i32 %67 to i64, !dbg !611
  %arrayidx96 = getelementptr inbounds i8*, i8** %66, i64 %idxprom95, !dbg !611
  %68 = load i8*, i8** %arrayidx96, align 8, !dbg !611
  %call97 = call i32 @__streq(i8* %68, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0)), !dbg !614
  %tobool98 = icmp ne i32 %call97, 0, !dbg !614
  br i1 %tobool98, label %if.then104, label %lor.lhs.false99, !dbg !615

lor.lhs.false99:                                  ; preds = %if.else94
  %69 = load i8**, i8*** %argv, align 8, !dbg !616
  %70 = load i32, i32* %k, align 4, !dbg !617
  %idxprom100 = sext i32 %70 to i64, !dbg !616
  %arrayidx101 = getelementptr inbounds i8*, i8** %69, i64 %idxprom100, !dbg !616
  %71 = load i8*, i8** %arrayidx101, align 8, !dbg !616
  %call102 = call i32 @__streq(i8* %71, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i64 0, i64 0)), !dbg !618
  %tobool103 = icmp ne i32 %call102, 0, !dbg !618
  br i1 %tobool103, label %if.then104, label %if.else134, !dbg !619

if.then104:                                       ; preds = %lor.lhs.false99, %if.else94
  call void @llvm.dbg.declare(metadata i8** %msg105, metadata !620, metadata !DIExpression()), !dbg !622
  store i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.13, i64 0, i64 0), i8** %msg105, align 8, !dbg !622
  %72 = load i32, i32* %k, align 4, !dbg !623
  %add106 = add nsw i32 %72, 2, !dbg !625
  %73 = load i32, i32* %argc, align 4, !dbg !626
  %cmp107 = icmp sge i32 %add106, %73, !dbg !627
  br i1 %cmp107, label %if.then109, label %if.end110, !dbg !628

if.then109:                                       ; preds = %if.then104
  %74 = load i8*, i8** %msg105, align 8, !dbg !629
  call void @__emit_error(i8* %74), !dbg !630
  br label %if.end110, !dbg !630

if.end110:                                        ; preds = %if.then109, %if.then104
  %75 = load i32, i32* %sym_files, align 4, !dbg !631
  %cmp111 = icmp ne i32 %75, 0, !dbg !633
  br i1 %cmp111, label %if.then113, label %if.end114, !dbg !634

if.then113:                                       ; preds = %if.end110
  call void @__emit_error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.14, i64 0, i64 0)), !dbg !635
  br label %if.end114, !dbg !635

if.end114:                                        ; preds = %if.then113, %if.end110
  %76 = load i32, i32* %k, align 4, !dbg !636
  %inc115 = add nsw i32 %76, 1, !dbg !636
  store i32 %inc115, i32* %k, align 4, !dbg !636
  %77 = load i8**, i8*** %argv, align 8, !dbg !637
  %78 = load i32, i32* %k, align 4, !dbg !638
  %inc116 = add nsw i32 %78, 1, !dbg !638
  store i32 %inc116, i32* %k, align 4, !dbg !638
  %idxprom117 = sext i32 %78 to i64, !dbg !637
  %arrayidx118 = getelementptr inbounds i8*, i8** %77, i64 %idxprom117, !dbg !637
  %79 = load i8*, i8** %arrayidx118, align 8, !dbg !637
  %80 = load i8*, i8** %msg105, align 8, !dbg !639
  %call119 = call i64 @__str_to_int(i8* %79, i8* %80), !dbg !640
  %conv120 = trunc i64 %call119 to i32, !dbg !640
  store i32 %conv120, i32* %sym_files, align 4, !dbg !641
  %81 = load i8**, i8*** %argv, align 8, !dbg !642
  %82 = load i32, i32* %k, align 4, !dbg !643
  %inc121 = add nsw i32 %82, 1, !dbg !643
  store i32 %inc121, i32* %k, align 4, !dbg !643
  %idxprom122 = sext i32 %82 to i64, !dbg !642
  %arrayidx123 = getelementptr inbounds i8*, i8** %81, i64 %idxprom122, !dbg !642
  %83 = load i8*, i8** %arrayidx123, align 8, !dbg !642
  %84 = load i8*, i8** %msg105, align 8, !dbg !644
  %call124 = call i64 @__str_to_int(i8* %83, i8* %84), !dbg !645
  %conv125 = trunc i64 %call124 to i32, !dbg !645
  store i32 %conv125, i32* %sym_file_len, align 4, !dbg !646
  %85 = load i32, i32* %sym_files, align 4, !dbg !647
  %cmp126 = icmp eq i32 %85, 0, !dbg !649
  br i1 %cmp126, label %if.then128, label %if.end129, !dbg !650

if.then128:                                       ; preds = %if.end114
  call void @__emit_error(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.15, i64 0, i64 0)), !dbg !651
  br label %if.end129, !dbg !651

if.end129:                                        ; preds = %if.then128, %if.end114
  %86 = load i32, i32* %sym_file_len, align 4, !dbg !652
  %cmp130 = icmp eq i32 %86, 0, !dbg !654
  br i1 %cmp130, label %if.then132, label %if.end239, !dbg !655

if.then132:                                       ; preds = %if.end129
  call void @__emit_error(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.16, i64 0, i64 0)), !dbg !656
  br label %if.end239, !dbg !656

if.else134:                                       ; preds = %lor.lhs.false99
  %87 = load i8**, i8*** %argv, align 8, !dbg !657
  %88 = load i32, i32* %k, align 4, !dbg !659
  %idxprom135 = sext i32 %88 to i64, !dbg !657
  %arrayidx136 = getelementptr inbounds i8*, i8** %87, i64 %idxprom135, !dbg !657
  %89 = load i8*, i8** %arrayidx136, align 8, !dbg !657
  %call137 = call i32 @__streq(i8* %89, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i64 0, i64 0)), !dbg !660
  %tobool138 = icmp ne i32 %call137, 0, !dbg !660
  br i1 %tobool138, label %if.then144, label %lor.lhs.false139, !dbg !661

lor.lhs.false139:                                 ; preds = %if.else134
  %90 = load i8**, i8*** %argv, align 8, !dbg !662
  %91 = load i32, i32* %k, align 4, !dbg !663
  %idxprom140 = sext i32 %91 to i64, !dbg !662
  %arrayidx141 = getelementptr inbounds i8*, i8** %90, i64 %idxprom140, !dbg !662
  %92 = load i8*, i8** %arrayidx141, align 8, !dbg !662
  %call142 = call i32 @__streq(i8* %92, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i64 0, i64 0)), !dbg !664
  %tobool143 = icmp ne i32 %call142, 0, !dbg !664
  br i1 %tobool143, label %if.then144, label %if.else156, !dbg !665

if.then144:                                       ; preds = %lor.lhs.false139, %if.else134
  call void @llvm.dbg.declare(metadata i8** %msg145, metadata !666, metadata !DIExpression()), !dbg !668
  store i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.19, i64 0, i64 0), i8** %msg145, align 8, !dbg !668
  %93 = load i32, i32* %k, align 4, !dbg !669
  %inc146 = add nsw i32 %93, 1, !dbg !669
  store i32 %inc146, i32* %k, align 4, !dbg !669
  %94 = load i32, i32* %argc, align 4, !dbg !671
  %cmp147 = icmp eq i32 %inc146, %94, !dbg !672
  br i1 %cmp147, label %if.then149, label %if.end150, !dbg !673

if.then149:                                       ; preds = %if.then144
  %95 = load i8*, i8** %msg145, align 8, !dbg !674
  call void @__emit_error(i8* %95), !dbg !675
  br label %if.end150, !dbg !675

if.end150:                                        ; preds = %if.then149, %if.then144
  %96 = load i8**, i8*** %argv, align 8, !dbg !676
  %97 = load i32, i32* %k, align 4, !dbg !677
  %inc151 = add nsw i32 %97, 1, !dbg !677
  store i32 %inc151, i32* %k, align 4, !dbg !677
  %idxprom152 = sext i32 %97 to i64, !dbg !676
  %arrayidx153 = getelementptr inbounds i8*, i8** %96, i64 %idxprom152, !dbg !676
  %98 = load i8*, i8** %arrayidx153, align 8, !dbg !676
  %99 = load i8*, i8** %msg145, align 8, !dbg !678
  %call154 = call i64 @__str_to_int(i8* %98, i8* %99), !dbg !679
  %conv155 = trunc i64 %call154 to i32, !dbg !679
  store i32 %conv155, i32* %sym_stdin_len, align 4, !dbg !680
  br label %if.end239, !dbg !681

if.else156:                                       ; preds = %lor.lhs.false139
  %100 = load i8**, i8*** %argv, align 8, !dbg !682
  %101 = load i32, i32* %k, align 4, !dbg !684
  %idxprom157 = sext i32 %101 to i64, !dbg !682
  %arrayidx158 = getelementptr inbounds i8*, i8** %100, i64 %idxprom157, !dbg !682
  %102 = load i8*, i8** %arrayidx158, align 8, !dbg !682
  %call159 = call i32 @__streq(i8* %102, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.20, i64 0, i64 0)), !dbg !685
  %tobool160 = icmp ne i32 %call159, 0, !dbg !685
  br i1 %tobool160, label %if.then166, label %lor.lhs.false161, !dbg !686

lor.lhs.false161:                                 ; preds = %if.else156
  %103 = load i8**, i8*** %argv, align 8, !dbg !687
  %104 = load i32, i32* %k, align 4, !dbg !688
  %idxprom162 = sext i32 %104 to i64, !dbg !687
  %arrayidx163 = getelementptr inbounds i8*, i8** %103, i64 %idxprom162, !dbg !687
  %105 = load i8*, i8** %arrayidx163, align 8, !dbg !687
  %call164 = call i32 @__streq(i8* %105, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0)), !dbg !689
  %tobool165 = icmp ne i32 %call164, 0, !dbg !689
  br i1 %tobool165, label %if.then166, label %if.else168, !dbg !690

if.then166:                                       ; preds = %lor.lhs.false161, %if.else156
  store i32 1, i32* %sym_stdout_flag, align 4, !dbg !691
  %106 = load i32, i32* %k, align 4, !dbg !693
  %inc167 = add nsw i32 %106, 1, !dbg !693
  store i32 %inc167, i32* %k, align 4, !dbg !693
  br label %if.end239, !dbg !694

if.else168:                                       ; preds = %lor.lhs.false161
  %107 = load i8**, i8*** %argv, align 8, !dbg !695
  %108 = load i32, i32* %k, align 4, !dbg !697
  %idxprom169 = sext i32 %108 to i64, !dbg !695
  %arrayidx170 = getelementptr inbounds i8*, i8** %107, i64 %idxprom169, !dbg !695
  %109 = load i8*, i8** %arrayidx170, align 8, !dbg !695
  %call171 = call i32 @__streq(i8* %109, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i64 0, i64 0)), !dbg !698
  %tobool172 = icmp ne i32 %call171, 0, !dbg !698
  br i1 %tobool172, label %if.then178, label %lor.lhs.false173, !dbg !699

lor.lhs.false173:                                 ; preds = %if.else168
  %110 = load i8**, i8*** %argv, align 8, !dbg !700
  %111 = load i32, i32* %k, align 4, !dbg !701
  %idxprom174 = sext i32 %111 to i64, !dbg !700
  %arrayidx175 = getelementptr inbounds i8*, i8** %110, i64 %idxprom174, !dbg !700
  %112 = load i8*, i8** %arrayidx175, align 8, !dbg !700
  %call176 = call i32 @__streq(i8* %112, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.23, i64 0, i64 0)), !dbg !702
  %tobool177 = icmp ne i32 %call176, 0, !dbg !702
  br i1 %tobool177, label %if.then178, label %if.else180, !dbg !703

if.then178:                                       ; preds = %lor.lhs.false173, %if.else168
  store i32 1, i32* %save_all_writes_flag, align 4, !dbg !704
  %113 = load i32, i32* %k, align 4, !dbg !706
  %inc179 = add nsw i32 %113, 1, !dbg !706
  store i32 %inc179, i32* %k, align 4, !dbg !706
  br label %if.end239, !dbg !707

if.else180:                                       ; preds = %lor.lhs.false173
  %114 = load i8**, i8*** %argv, align 8, !dbg !708
  %115 = load i32, i32* %k, align 4, !dbg !710
  %idxprom181 = sext i32 %115 to i64, !dbg !708
  %arrayidx182 = getelementptr inbounds i8*, i8** %114, i64 %idxprom181, !dbg !708
  %116 = load i8*, i8** %arrayidx182, align 8, !dbg !708
  %call183 = call i32 @__streq(i8* %116, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i64 0, i64 0)), !dbg !711
  %tobool184 = icmp ne i32 %call183, 0, !dbg !711
  br i1 %tobool184, label %if.then190, label %lor.lhs.false185, !dbg !712

lor.lhs.false185:                                 ; preds = %if.else180
  %117 = load i8**, i8*** %argv, align 8, !dbg !713
  %118 = load i32, i32* %k, align 4, !dbg !714
  %idxprom186 = sext i32 %118 to i64, !dbg !713
  %arrayidx187 = getelementptr inbounds i8*, i8** %117, i64 %idxprom186, !dbg !713
  %119 = load i8*, i8** %arrayidx187, align 8, !dbg !713
  %call188 = call i32 @__streq(i8* %119, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i64 0, i64 0)), !dbg !715
  %tobool189 = icmp ne i32 %call188, 0, !dbg !715
  br i1 %tobool189, label %if.then190, label %if.else192, !dbg !716

if.then190:                                       ; preds = %lor.lhs.false185, %if.else180
  store i32 1, i32* %fd_fail, align 4, !dbg !717
  %120 = load i32, i32* %k, align 4, !dbg !719
  %inc191 = add nsw i32 %120, 1, !dbg !719
  store i32 %inc191, i32* %k, align 4, !dbg !719
  br label %if.end239, !dbg !720

if.else192:                                       ; preds = %lor.lhs.false185
  %121 = load i8**, i8*** %argv, align 8, !dbg !721
  %122 = load i32, i32* %k, align 4, !dbg !723
  %idxprom193 = sext i32 %122 to i64, !dbg !721
  %arrayidx194 = getelementptr inbounds i8*, i8** %121, i64 %idxprom193, !dbg !721
  %123 = load i8*, i8** %arrayidx194, align 8, !dbg !721
  %call195 = call i32 @__streq(i8* %123, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i64 0, i64 0)), !dbg !724
  %tobool196 = icmp ne i32 %call195, 0, !dbg !724
  br i1 %tobool196, label %if.then202, label %lor.lhs.false197, !dbg !725

lor.lhs.false197:                                 ; preds = %if.else192
  %124 = load i8**, i8*** %argv, align 8, !dbg !726
  %125 = load i32, i32* %k, align 4, !dbg !727
  %idxprom198 = sext i32 %125 to i64, !dbg !726
  %arrayidx199 = getelementptr inbounds i8*, i8** %124, i64 %idxprom198, !dbg !726
  %126 = load i8*, i8** %arrayidx199, align 8, !dbg !726
  %call200 = call i32 @__streq(i8* %126, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0)), !dbg !728
  %tobool201 = icmp ne i32 %call200, 0, !dbg !728
  br i1 %tobool201, label %if.then202, label %if.else204, !dbg !729

if.then202:                                       ; preds = %lor.lhs.false197, %if.else192
  %127 = load i32, i32* %k, align 4, !dbg !730
  %add203 = add nsw i32 %127, 2, !dbg !730
  store i32 %add203, i32* %k, align 4, !dbg !730
  br label %if.end239, !dbg !732

if.else204:                                       ; preds = %lor.lhs.false197
  %128 = load i8**, i8*** %argv, align 8, !dbg !733
  %129 = load i32, i32* %k, align 4, !dbg !735
  %idxprom205 = sext i32 %129 to i64, !dbg !733
  %arrayidx206 = getelementptr inbounds i8*, i8** %128, i64 %idxprom205, !dbg !733
  %130 = load i8*, i8** %arrayidx206, align 8, !dbg !733
  %call207 = call i32 @__streq(i8* %130, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0)), !dbg !736
  %tobool208 = icmp ne i32 %call207, 0, !dbg !736
  br i1 %tobool208, label %if.then214, label %lor.lhs.false209, !dbg !737

lor.lhs.false209:                                 ; preds = %if.else204
  %131 = load i8**, i8*** %argv, align 8, !dbg !738
  %132 = load i32, i32* %k, align 4, !dbg !739
  %idxprom210 = sext i32 %132 to i64, !dbg !738
  %arrayidx211 = getelementptr inbounds i8*, i8** %131, i64 %idxprom210, !dbg !738
  %133 = load i8*, i8** %arrayidx211, align 8, !dbg !738
  %call212 = call i32 @__streq(i8* %133, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i64 0, i64 0)), !dbg !740
  %tobool213 = icmp ne i32 %call212, 0, !dbg !740
  br i1 %tobool213, label %if.then214, label %if.else226, !dbg !741

if.then214:                                       ; preds = %lor.lhs.false209, %if.else204
  call void @llvm.dbg.declare(metadata i8** %msg215, metadata !742, metadata !DIExpression()), !dbg !744
  store i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.30, i64 0, i64 0), i8** %msg215, align 8, !dbg !744
  %134 = load i32, i32* %k, align 4, !dbg !745
  %inc216 = add nsw i32 %134, 1, !dbg !745
  store i32 %inc216, i32* %k, align 4, !dbg !745
  %135 = load i32, i32* %argc, align 4, !dbg !747
  %cmp217 = icmp eq i32 %inc216, %135, !dbg !748
  br i1 %cmp217, label %if.then219, label %if.end220, !dbg !749

if.then219:                                       ; preds = %if.then214
  %136 = load i8*, i8** %msg215, align 8, !dbg !750
  call void @__emit_error(i8* %136), !dbg !751
  br label %if.end220, !dbg !751

if.end220:                                        ; preds = %if.then219, %if.then214
  %137 = load i8**, i8*** %argv, align 8, !dbg !752
  %138 = load i32, i32* %k, align 4, !dbg !753
  %inc221 = add nsw i32 %138, 1, !dbg !753
  store i32 %inc221, i32* %k, align 4, !dbg !753
  %idxprom222 = sext i32 %138 to i64, !dbg !752
  %arrayidx223 = getelementptr inbounds i8*, i8** %137, i64 %idxprom222, !dbg !752
  %139 = load i8*, i8** %arrayidx223, align 8, !dbg !752
  %140 = load i8*, i8** %msg215, align 8, !dbg !754
  %call224 = call i64 @__str_to_int(i8* %139, i8* %140), !dbg !755
  %conv225 = trunc i64 %call224 to i32, !dbg !755
  store i32 %conv225, i32* %fd_fail, align 4, !dbg !756
  br label %if.end239, !dbg !757

if.else226:                                       ; preds = %lor.lhs.false209
  %arraydecay227 = getelementptr inbounds [1024 x i8*], [1024 x i8*]* %new_argv, i64 0, i64 0, !dbg !758
  %141 = load i8**, i8*** %argv, align 8, !dbg !760
  %142 = load i32, i32* %k, align 4, !dbg !761
  %inc228 = add nsw i32 %142, 1, !dbg !761
  store i32 %inc228, i32* %k, align 4, !dbg !761
  %idxprom229 = sext i32 %142 to i64, !dbg !760
  %arrayidx230 = getelementptr inbounds i8*, i8** %141, i64 %idxprom229, !dbg !760
  %143 = load i8*, i8** %arrayidx230, align 8, !dbg !760
  call void @__add_arg(i32* %new_argc, i8** %arraydecay227, i8* %143, i32 1024), !dbg !762
  br label %if.end239

if.end239:                                        ; preds = %for.cond, %if.end150, %if.then178, %if.then202, %if.else226, %if.end220, %if.then190, %if.then166, %if.end129, %if.then132, %if.end21
  br label %while.cond, !dbg !468, !llvm.loop !763

while.end:                                        ; preds = %while.cond
  %144 = load i32, i32* %new_argc, align 4, !dbg !765
  %add240 = add nsw i32 %144, 1, !dbg !766
  %conv241 = sext i32 %add240 to i64, !dbg !767
  %mul = mul i64 %conv241, 8, !dbg !768
  %call242 = call noalias i8* @malloc(i64 %mul) #7, !dbg !769
  %145 = bitcast i8* %call242 to i8**, !dbg !770
  store i8** %145, i8*** %final_argv, align 8, !dbg !771
  %146 = load i8**, i8*** %final_argv, align 8, !dbg !772
  %147 = bitcast i8** %146 to i8*, !dbg !772
  call void @klee_mark_global(i8* %147), !dbg !773
  %148 = load i8**, i8*** %final_argv, align 8, !dbg !774
  %149 = bitcast i8** %148 to i8*, !dbg !775
  %arraydecay243 = getelementptr inbounds [1024 x i8*], [1024 x i8*]* %new_argv, i64 0, i64 0, !dbg !775
  %150 = bitcast i8** %arraydecay243 to i8*, !dbg !775
  %151 = load i32, i32* %new_argc, align 4, !dbg !776
  %conv244 = sext i32 %151 to i64, !dbg !776
  %mul245 = mul i64 %conv244, 8, !dbg !777
  %152 = call i8* @memcpy(i8* %149, i8* %150, i64 %mul245), !dbg !775
  %153 = load i8**, i8*** %final_argv, align 8, !dbg !778
  %154 = load i32, i32* %new_argc, align 4, !dbg !779
  %idxprom246 = sext i32 %154 to i64, !dbg !778
  %arrayidx247 = getelementptr inbounds i8*, i8** %153, i64 %idxprom246, !dbg !778
  store i8* null, i8** %arrayidx247, align 8, !dbg !780
  %155 = load i32, i32* %new_argc, align 4, !dbg !781
  %156 = load i32*, i32** %argcPtr.addr, align 8, !dbg !782
  store i32 %155, i32* %156, align 4, !dbg !783
  %157 = load i8**, i8*** %final_argv, align 8, !dbg !784
  %158 = load i8***, i8**** %argvPtr.addr, align 8, !dbg !785
  store i8** %157, i8*** %158, align 8, !dbg !786
  %159 = load i32, i32* %sym_files, align 4, !dbg !787
  %160 = load i32, i32* %sym_file_len, align 4, !dbg !788
  %161 = load i32, i32* %sym_stdin_len, align 4, !dbg !789
  %162 = load i32, i32* %sym_stdout_flag, align 4, !dbg !790
  %163 = load i32, i32* %save_all_writes_flag, align 4, !dbg !791
  %164 = load i32, i32* %fd_fail, align 4, !dbg !792
  call void @klee_init_fds(i32 %159, i32 %160, i32 %161, i32 %162, i32 %163, i32 %164), !dbg !793
  ret void, !dbg !794
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @__streq(i8* %a, i8* %b) #0 !dbg !795 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !798, metadata !DIExpression()), !dbg !799
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !800, metadata !DIExpression()), !dbg !801
  br label %while.cond, !dbg !802

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %a.addr, align 8, !dbg !803
  %1 = load i8, i8* %0, align 1, !dbg !804
  %conv = sext i8 %1 to i32, !dbg !804
  %2 = load i8*, i8** %b.addr, align 8, !dbg !805
  %3 = load i8, i8* %2, align 1, !dbg !806
  %conv1 = sext i8 %3 to i32, !dbg !806
  %cmp = icmp eq i32 %conv, %conv1, !dbg !807
  br i1 %cmp, label %while.body, label %while.end, !dbg !802

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %a.addr, align 8, !dbg !808
  %5 = load i8, i8* %4, align 1, !dbg !811
  %tobool = icmp ne i8 %5, 0, !dbg !811
  br i1 %tobool, label %if.end, label %if.then, !dbg !812

if.then:                                          ; preds = %while.body
  store i32 1, i32* %retval, align 4, !dbg !813
  br label %return, !dbg !813

if.end:                                           ; preds = %while.body
  %6 = load i8*, i8** %a.addr, align 8, !dbg !814
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1, !dbg !814
  store i8* %incdec.ptr, i8** %a.addr, align 8, !dbg !814
  %7 = load i8*, i8** %b.addr, align 8, !dbg !815
  %incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1, !dbg !815
  store i8* %incdec.ptr3, i8** %b.addr, align 8, !dbg !815
  br label %while.cond, !dbg !802, !llvm.loop !816

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4, !dbg !818
  br label %return, !dbg !818

return:                                           ; preds = %while.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !819
  ret i32 %8, !dbg !819
}

; Function Attrs: noinline nounwind uwtable
define internal void @__emit_error(i8* %msg) #0 !dbg !820 {
entry:
  %msg.addr = alloca i8*, align 8
  store i8* %msg, i8** %msg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msg.addr, metadata !823, metadata !DIExpression()), !dbg !824
  %0 = load i8*, i8** %msg.addr, align 8, !dbg !825
  call void @klee_report_error(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.31, i64 0, i64 0), i32 24, i8* %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32, i64 0, i64 0)) #14, !dbg !826
  unreachable, !dbg !826
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @__str_to_int(i8* %s, i8* %error_msg) #0 !dbg !827 {
entry:
  %s.addr = alloca i8*, align 8
  %error_msg.addr = alloca i8*, align 8
  %res = alloca i64, align 8
  %c = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !830, metadata !DIExpression()), !dbg !831
  store i8* %error_msg, i8** %error_msg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %error_msg.addr, metadata !832, metadata !DIExpression()), !dbg !833
  call void @llvm.dbg.declare(metadata i64* %res, metadata !834, metadata !DIExpression()), !dbg !835
  store i64 0, i64* %res, align 8, !dbg !835
  call void @llvm.dbg.declare(metadata i8* %c, metadata !836, metadata !DIExpression()), !dbg !837
  %0 = load i8*, i8** %s.addr, align 8, !dbg !838
  %1 = load i8, i8* %0, align 1, !dbg !840
  %tobool = icmp ne i8 %1, 0, !dbg !840
  br i1 %tobool, label %if.end, label %if.then, !dbg !841

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %error_msg.addr, align 8, !dbg !842
  call void @__emit_error(i8* %2), !dbg !843
  br label %if.end, !dbg !843

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !844

while.cond:                                       ; preds = %if.end15, %if.end
  %3 = load i8*, i8** %s.addr, align 8, !dbg !845
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !845
  store i8* %incdec.ptr, i8** %s.addr, align 8, !dbg !845
  %4 = load i8, i8* %3, align 1, !dbg !846
  store i8 %4, i8* %c, align 1, !dbg !847
  %tobool1 = icmp ne i8 %4, 0, !dbg !844
  br i1 %tobool1, label %while.body, label %while.end, !dbg !844

while.body:                                       ; preds = %while.cond
  %5 = load i8, i8* %c, align 1, !dbg !848
  %conv = sext i8 %5 to i32, !dbg !848
  %cmp = icmp eq i32 %conv, 0, !dbg !851
  br i1 %cmp, label %while.end, label %if.else, !dbg !852

if.else:                                          ; preds = %while.body
  %6 = load i8, i8* %c, align 1, !dbg !853
  %conv4 = sext i8 %6 to i32, !dbg !853
  %cmp5 = icmp sge i32 %conv4, 48, !dbg !855
  br i1 %cmp5, label %land.lhs.true, label %if.else13, !dbg !856

land.lhs.true:                                    ; preds = %if.else
  %7 = load i8, i8* %c, align 1, !dbg !857
  %conv7 = sext i8 %7 to i32, !dbg !857
  %cmp8 = icmp sle i32 %conv7, 57, !dbg !858
  br i1 %cmp8, label %if.then10, label %if.else13, !dbg !859

if.then10:                                        ; preds = %land.lhs.true
  %8 = load i64, i64* %res, align 8, !dbg !860
  %mul = mul nsw i64 %8, 10, !dbg !862
  %9 = load i8, i8* %c, align 1, !dbg !863
  %conv11 = sext i8 %9 to i32, !dbg !863
  %sub = sub nsw i32 %conv11, 48, !dbg !864
  %conv12 = sext i32 %sub to i64, !dbg !865
  %add = add nsw i64 %mul, %conv12, !dbg !866
  store i64 %add, i64* %res, align 8, !dbg !867
  br label %if.end15, !dbg !868

if.else13:                                        ; preds = %land.lhs.true, %if.else
  %10 = load i8*, i8** %error_msg.addr, align 8, !dbg !869
  call void @__emit_error(i8* %10), !dbg !871
  br label %if.end15

if.end15:                                         ; preds = %if.then10, %if.else13
  br label %while.cond, !dbg !844, !llvm.loop !872

while.end:                                        ; preds = %while.body, %while.cond
  %11 = load i64, i64* %res, align 8, !dbg !874
  ret i64 %11, !dbg !875
}

; Function Attrs: noinline nounwind uwtable
define internal void @__add_arg(i32* %argc, i8** %argv, i8* %arg, i32 %argcMax) #0 !dbg !876 {
entry:
  %argc.addr = alloca i32*, align 8
  %argv.addr = alloca i8**, align 8
  %arg.addr = alloca i8*, align 8
  %argcMax.addr = alloca i32, align 4
  store i32* %argc, i32** %argc.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %argc.addr, metadata !879, metadata !DIExpression()), !dbg !880
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !881, metadata !DIExpression()), !dbg !882
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !883, metadata !DIExpression()), !dbg !884
  store i32 %argcMax, i32* %argcMax.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argcMax.addr, metadata !885, metadata !DIExpression()), !dbg !886
  %0 = load i32*, i32** %argc.addr, align 8, !dbg !887
  %1 = load i32, i32* %0, align 4, !dbg !889
  %2 = load i32, i32* %argcMax.addr, align 4, !dbg !890
  %cmp = icmp eq i32 %1, %2, !dbg !891
  br i1 %cmp, label %if.then, label %if.else, !dbg !892

if.then:                                          ; preds = %entry
  call void @__emit_error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.33, i64 0, i64 0)), !dbg !893
  br label %if.end, !dbg !895

if.else:                                          ; preds = %entry
  %3 = load i8*, i8** %arg.addr, align 8, !dbg !896
  %4 = load i8**, i8*** %argv.addr, align 8, !dbg !898
  %5 = load i32*, i32** %argc.addr, align 8, !dbg !899
  %6 = load i32, i32* %5, align 4, !dbg !900
  %idxprom = sext i32 %6 to i64, !dbg !898
  %arrayidx = getelementptr inbounds i8*, i8** %4, i64 %idxprom, !dbg !898
  store i8* %3, i8** %arrayidx, align 8, !dbg !901
  %7 = load i32*, i32** %argc.addr, align 8, !dbg !902
  %8 = load i32, i32* %7, align 4, !dbg !903
  %inc = add nsw i32 %8, 1, !dbg !903
  store i32 %inc, i32* %7, align 4, !dbg !903
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !904
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @__get_sym_str(i32 %numChars, i8* %name) #0 !dbg !905 {
entry:
  %numChars.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %s = alloca i8*, align 8
  store i32 %numChars, i32* %numChars.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %numChars.addr, metadata !908, metadata !DIExpression()), !dbg !909
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !910, metadata !DIExpression()), !dbg !911
  call void @llvm.dbg.declare(metadata i32* %i, metadata !912, metadata !DIExpression()), !dbg !913
  call void @llvm.dbg.declare(metadata i8** %s, metadata !914, metadata !DIExpression()), !dbg !915
  %0 = load i32, i32* %numChars.addr, align 4, !dbg !916
  %add = add nsw i32 %0, 1, !dbg !917
  %conv = sext i32 %add to i64, !dbg !916
  %call = call noalias i8* @malloc(i64 %conv) #7, !dbg !918
  store i8* %call, i8** %s, align 8, !dbg !915
  %1 = load i8*, i8** %s, align 8, !dbg !919
  call void @klee_mark_global(i8* %1), !dbg !920
  %2 = load i8*, i8** %s, align 8, !dbg !921
  %3 = load i32, i32* %numChars.addr, align 4, !dbg !922
  %add1 = add nsw i32 %3, 1, !dbg !923
  %conv2 = sext i32 %add1 to i64, !dbg !922
  %4 = load i8*, i8** %name.addr, align 8, !dbg !924
  call void @klee_make_symbolic(i8* %2, i64 %conv2, i8* %4), !dbg !925
  store i32 0, i32* %i, align 4, !dbg !926
  br label %for.cond, !dbg !928

for.cond:                                         ; preds = %for.body, %entry
  %5 = load i32, i32* %i, align 4, !dbg !929
  %6 = load i32, i32* %numChars.addr, align 4, !dbg !931
  %cmp = icmp slt i32 %5, %6, !dbg !932
  %7 = load i8*, i8** %s, align 8, !dbg !933
  br i1 %cmp, label %for.body, label %for.end, !dbg !934

for.body:                                         ; preds = %for.cond
  %8 = load i8*, i8** %s, align 8, !dbg !935
  %9 = load i32, i32* %i, align 4, !dbg !936
  %idxprom = sext i32 %9 to i64, !dbg !935
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %idxprom, !dbg !935
  %10 = load i8, i8* %arrayidx, align 1, !dbg !935
  %call4 = call i32 @__isprint(i8 signext %10), !dbg !937
  %conv5 = sext i32 %call4 to i64, !dbg !937
  call void @klee_posix_prefer_cex(i8* %7, i64 %conv5), !dbg !938
  %11 = load i32, i32* %i, align 4, !dbg !939
  %inc = add nsw i32 %11, 1, !dbg !939
  store i32 %inc, i32* %i, align 4, !dbg !939
  br label %for.cond, !dbg !940, !llvm.loop !941

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %numChars.addr, align 4, !dbg !943
  %idxprom6 = sext i32 %12 to i64, !dbg !944
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i64 %idxprom6, !dbg !944
  store i8 0, i8* %arrayidx7, align 1, !dbg !945
  %13 = load i8*, i8** %s, align 8, !dbg !946
  ret i8* %13, !dbg !947
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

declare dso_local void @klee_mark_global(i8*) #4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main(i32 %argcPtr, i8** %argvPtr, i8** %envp) #0 !dbg !948 {
entry:
  call void @klee.ctor_stub()
  %argcPtr.addr = alloca i32, align 4
  %argvPtr.addr = alloca i8**, align 8
  %envp.addr = alloca i8**, align 8
  store i32 %argcPtr, i32* %argcPtr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argcPtr.addr, metadata !951, metadata !DIExpression()), !dbg !952
  store i8** %argvPtr, i8*** %argvPtr.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argvPtr.addr, metadata !953, metadata !DIExpression()), !dbg !954
  store i8** %envp, i8*** %envp.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %envp.addr, metadata !955, metadata !DIExpression()), !dbg !956
  call void @klee_init_env(i32* %argcPtr.addr, i8*** %argvPtr.addr), !dbg !957
  %0 = load i32, i32* %argcPtr.addr, align 4, !dbg !958
  %1 = load i8**, i8*** %argvPtr.addr, align 8, !dbg !959
  %2 = load i8**, i8*** %envp.addr, align 8, !dbg !960
  %call = call i32 bitcast (i32 (i32, i8**)* @__klee_posix_wrapped_main to i32 (i32, i8**, i8**)*)(i32 %0, i8** %1, i8** %2), !dbg !961
  ret i32 %call, !dbg !962
}

; Function Attrs: noreturn
declare dso_local void @klee_report_error(i8*, i32, i8*, i8*) #5

declare dso_local void @klee_make_symbolic(i8*, i64, i8*) #4

declare dso_local void @klee_posix_prefer_cex(i8*, i64) #4

; Function Attrs: noinline nounwind uwtable
define internal i32 @__isprint(i8 signext %c) #0 !dbg !963 {
entry:
  %c.addr = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %c.addr, metadata !966, metadata !DIExpression()), !dbg !967
  %0 = load i8, i8* %c.addr, align 1, !dbg !968
  %conv = sext i8 %0 to i32, !dbg !968
  %cmp = icmp sle i32 32, %conv, !dbg !969
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !970

land.rhs:                                         ; preds = %entry
  %1 = load i8, i8* %c.addr, align 1, !dbg !971
  %conv2 = sext i8 %1 to i32, !dbg !971
  %cmp3 = icmp sle i32 %conv2, 126, !dbg !972
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !973
  %land.ext = zext i1 %2 to i32, !dbg !970
  ret i32 %land.ext, !dbg !974
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_isdigit(i32 %c) #6 !dbg !975 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !977, metadata !DIExpression()), !dbg !978
  %0 = load i32, i32* %c.addr, align 4, !dbg !979
  %cmp = icmp sge i32 %0, 48, !dbg !981
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !982

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !983
  %cmp1 = icmp sle i32 %1, 57, !dbg !984
  br i1 %cmp1, label %if.then, label %if.else, !dbg !985

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !986
  br label %return, !dbg !986

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4, !dbg !987
  br label %return, !dbg !987

return:                                           ; preds = %if.else, %if.then
  %2 = load i32, i32* %retval, align 4, !dbg !988
  ret i32 %2, !dbg !988
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_isupper(i32 %c) #6 !dbg !989 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !990, metadata !DIExpression()), !dbg !991
  %0 = load i32, i32* %c.addr, align 4, !dbg !992
  %cmp = icmp sge i32 %0, 65, !dbg !994
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !995

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !996
  %cmp1 = icmp sle i32 %1, 90, !dbg !997
  br i1 %cmp1, label %if.then, label %if.else, !dbg !998

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !999
  br label %return, !dbg !999

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4, !dbg !1000
  br label %return, !dbg !1000

return:                                           ; preds = %if.else, %if.then
  %2 = load i32, i32* %retval, align 4, !dbg !1001
  ret i32 %2, !dbg !1001
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_islower(i32 %c) #6 !dbg !1002 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !1003, metadata !DIExpression()), !dbg !1004
  %0 = load i32, i32* %c.addr, align 4, !dbg !1005
  %cmp = icmp sge i32 %0, 97, !dbg !1007
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !1008

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !1009
  %cmp1 = icmp sle i32 %1, 122, !dbg !1010
  br i1 %cmp1, label %if.then, label %if.else, !dbg !1011

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !1012
  br label %return, !dbg !1012

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4, !dbg !1013
  br label %return, !dbg !1013

return:                                           ; preds = %if.else, %if.then
  %2 = load i32, i32* %retval, align 4, !dbg !1014
  ret i32 %2, !dbg !1014
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_isalpha(i32 %c) #6 !dbg !1015 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !1016, metadata !DIExpression()), !dbg !1017
  %0 = load i32, i32* %c.addr, align 4, !dbg !1018
  %call = call i32 @cgc_isupper(i32 %0) #15, !dbg !1020
  %tobool = icmp ne i32 %call, 0, !dbg !1020
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !1021

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !1022
  %call1 = call i32 @cgc_islower(i32 %1) #15, !dbg !1023
  %tobool2 = icmp ne i32 %call1, 0, !dbg !1023
  br i1 %tobool2, label %if.then, label %if.else, !dbg !1024

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4, !dbg !1025
  br label %return, !dbg !1025

if.else:                                          ; preds = %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !1026
  br label %return, !dbg !1026

return:                                           ; preds = %if.else, %if.then
  %2 = load i32, i32* %retval, align 4, !dbg !1027
  ret i32 %2, !dbg !1027
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_isalnum(i32 %c) #6 !dbg !1028 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !1029, metadata !DIExpression()), !dbg !1030
  %0 = load i32, i32* %c.addr, align 4, !dbg !1031
  %call = call i32 @cgc_isalpha(i32 %0) #15, !dbg !1033
  %tobool = icmp ne i32 %call, 0, !dbg !1033
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !1034

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !1035
  %call1 = call i32 @cgc_isdigit(i32 %1) #15, !dbg !1036
  %tobool2 = icmp ne i32 %call1, 0, !dbg !1036
  br i1 %tobool2, label %if.then, label %if.else, !dbg !1037

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4, !dbg !1038
  br label %return, !dbg !1038

if.else:                                          ; preds = %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !1039
  br label %return, !dbg !1039

return:                                           ; preds = %if.else, %if.then
  %2 = load i32, i32* %retval, align 4, !dbg !1040
  ret i32 %2, !dbg !1040
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_isprint(i32 %c) #6 !dbg !1041 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !1042, metadata !DIExpression()), !dbg !1043
  %0 = load i32, i32* %c.addr, align 4, !dbg !1044
  %cmp = icmp sge i32 %0, 32, !dbg !1046
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !1047

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !1048
  %cmp1 = icmp ne i32 %1, 127, !dbg !1049
  br i1 %cmp1, label %if.then, label %if.else, !dbg !1050

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !1051
  br label %return, !dbg !1051

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4, !dbg !1052
  br label %return, !dbg !1052

return:                                           ; preds = %if.else, %if.then
  %2 = load i32, i32* %retval, align 4, !dbg !1053
  ret i32 %2, !dbg !1053
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_toupper(i32 %c) #6 !dbg !1054 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !1055, metadata !DIExpression()), !dbg !1056
  %0 = load i32, i32* %c.addr, align 4, !dbg !1057
  %call = call i32 @cgc_islower(i32 %0) #15, !dbg !1059
  %tobool = icmp ne i32 %call, 0, !dbg !1059
  br i1 %tobool, label %if.then, label %if.else, !dbg !1060

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !1061
  %sub = sub nsw i32 %1, 97, !dbg !1062
  %add = add nsw i32 %sub, 65, !dbg !1063
  store i32 %add, i32* %retval, align 4, !dbg !1064
  br label %return, !dbg !1064

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %c.addr, align 4, !dbg !1065
  store i32 %2, i32* %retval, align 4, !dbg !1066
  br label %return, !dbg !1066

return:                                           ; preds = %if.else, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !1067
  ret i32 %3, !dbg !1067
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_tolower(i32 %c) #6 !dbg !1068 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !1069, metadata !DIExpression()), !dbg !1070
  %0 = load i32, i32* %c.addr, align 4, !dbg !1071
  %call = call i32 @cgc_isupper(i32 %0) #15, !dbg !1073
  %tobool = icmp ne i32 %call, 0, !dbg !1073
  br i1 %tobool, label %if.then, label %if.else, !dbg !1074

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !1075
  %sub = sub nsw i32 %1, 65, !dbg !1076
  %add = add nsw i32 %sub, 97, !dbg !1077
  store i32 %add, i32* %retval, align 4, !dbg !1078
  br label %return, !dbg !1078

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %c.addr, align 4, !dbg !1079
  store i32 %2, i32* %retval, align 4, !dbg !1080
  br label %return, !dbg !1080

return:                                           ; preds = %if.else, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !1081
  ret i32 %3, !dbg !1081
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_isspace(i32 %c) #6 !dbg !1082 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !1083, metadata !DIExpression()), !dbg !1084
  %0 = load i32, i32* %c.addr, align 4, !dbg !1085
  %cmp = icmp eq i32 %0, 32, !dbg !1087
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !1088

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !1089
  %cmp1 = icmp eq i32 %1, 9, !dbg !1090
  br i1 %cmp1, label %if.then, label %lor.lhs.false2, !dbg !1091

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %c.addr, align 4, !dbg !1092
  %cmp3 = icmp eq i32 %2, 10, !dbg !1093
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !1094

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %3 = load i32, i32* %c.addr, align 4, !dbg !1095
  %cmp5 = icmp eq i32 %3, 11, !dbg !1096
  br i1 %cmp5, label %if.then, label %lor.lhs.false6, !dbg !1097

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %4 = load i32, i32* %c.addr, align 4, !dbg !1098
  %cmp7 = icmp eq i32 %4, 12, !dbg !1099
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !1100

lor.lhs.false8:                                   ; preds = %lor.lhs.false6
  %5 = load i32, i32* %c.addr, align 4, !dbg !1101
  %cmp9 = icmp eq i32 %5, 13, !dbg !1102
  br i1 %cmp9, label %if.then, label %if.else, !dbg !1103

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4, !dbg !1104
  br label %return, !dbg !1104

if.else:                                          ; preds = %lor.lhs.false8
  store i32 0, i32* %retval, align 4, !dbg !1105
  br label %return, !dbg !1105

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !1106
  ret i32 %6, !dbg !1106
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_receive_bytes(i8* %buffer, i64 %count) #6 !dbg !1107 {
entry:
  %retval = alloca i32, align 4
  %buffer.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %total = alloca i64, align 8
  %rxbytes = alloca i64, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !1111, metadata !DIExpression()), !dbg !1112
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !1113, metadata !DIExpression()), !dbg !1114
  call void @llvm.dbg.declare(metadata i64* %total, metadata !1115, metadata !DIExpression()), !dbg !1116
  call void @llvm.dbg.declare(metadata i64* %rxbytes, metadata !1117, metadata !DIExpression()), !dbg !1118
  store i64 0, i64* %total, align 8, !dbg !1119
  br label %while.cond, !dbg !1120

while.cond:                                       ; preds = %if.end5, %entry
  %0 = load i64, i64* %total, align 8, !dbg !1121
  %1 = load i64, i64* %count.addr, align 8, !dbg !1122
  %cmp = icmp ult i64 %0, %1, !dbg !1123
  br i1 %cmp, label %while.body, label %while.end, !dbg !1120

while.body:                                       ; preds = %while.cond
  store i64 0, i64* %rxbytes, align 8, !dbg !1124
  %2 = load i8*, i8** %buffer.addr, align 8, !dbg !1126
  %3 = load i64, i64* %total, align 8, !dbg !1128
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %3, !dbg !1129
  %4 = load i64, i64* %count.addr, align 8, !dbg !1130
  %5 = load i64, i64* %total, align 8, !dbg !1131
  %sub = sub i64 %4, %5, !dbg !1132
  %call = call i32 @cgc_receive(i32 0, i8* %add.ptr, i64 %sub, i64* %rxbytes) #15, !dbg !1133
  %cmp1 = icmp eq i32 %call, 0, !dbg !1134
  br i1 %cmp1, label %if.then, label %if.else4, !dbg !1135

if.then:                                          ; preds = %while.body
  %6 = load i64, i64* %rxbytes, align 8, !dbg !1136
  %cmp2 = icmp eq i64 %6, 0, !dbg !1139
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !1140

if.then3:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !1141
  br label %return, !dbg !1141

if.else:                                          ; preds = %if.then
  %7 = load i64, i64* %rxbytes, align 8, !dbg !1142
  %8 = load i64, i64* %total, align 8, !dbg !1143
  %add = add i64 %8, %7, !dbg !1143
  store i64 %add, i64* %total, align 8, !dbg !1143
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end5, !dbg !1144

if.else4:                                         ; preds = %while.body
  store i32 -1, i32* %retval, align 4, !dbg !1145
  br label %return, !dbg !1145

if.end5:                                          ; preds = %if.end
  br label %while.cond, !dbg !1120, !llvm.loop !1147

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4, !dbg !1149
  br label %return, !dbg !1149

return:                                           ; preds = %while.end, %if.else4, %if.then3
  %9 = load i32, i32* %retval, align 4, !dbg !1150
  ret i32 %9, !dbg !1150
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @cgc_receive_until(i8* %buffer, i8 signext %delim, i64 %limit) #6 !dbg !1151 {
entry:
  %buffer.addr = alloca i8*, align 8
  %delim.addr = alloca i8, align 1
  %limit.addr = alloca i64, align 8
  %len = alloca i64, align 8
  %rx = alloca i64, align 8
  %c = alloca i8, align 1
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !1154, metadata !DIExpression()), !dbg !1155
  store i8 %delim, i8* %delim.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %delim.addr, metadata !1156, metadata !DIExpression()), !dbg !1157
  store i64 %limit, i64* %limit.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %limit.addr, metadata !1158, metadata !DIExpression()), !dbg !1159
  call void @llvm.dbg.declare(metadata i64* %len, metadata !1160, metadata !DIExpression()), !dbg !1161
  store i64 0, i64* %len, align 8, !dbg !1161
  call void @llvm.dbg.declare(metadata i64* %rx, metadata !1162, metadata !DIExpression()), !dbg !1163
  store i64 0, i64* %rx, align 8, !dbg !1163
  call void @llvm.dbg.declare(metadata i8* %c, metadata !1164, metadata !DIExpression()), !dbg !1165
  store i8 0, i8* %c, align 1, !dbg !1165
  br label %while.cond, !dbg !1166

while.cond:                                       ; preds = %if.end9, %entry
  %0 = load i64, i64* %len, align 8, !dbg !1167
  %1 = load i64, i64* %limit.addr, align 8, !dbg !1168
  %cmp = icmp ult i64 %0, %1, !dbg !1169
  br i1 %cmp, label %while.body, label %while.end, !dbg !1166

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %buffer.addr, align 8, !dbg !1170
  %3 = load i64, i64* %len, align 8, !dbg !1172
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %3, !dbg !1170
  store i8 0, i8* %arrayidx, align 1, !dbg !1173
  %call = call i32 @cgc_receive(i32 0, i8* %c, i64 1, i64* %rx) #15, !dbg !1174
  %cmp1 = icmp ne i32 %call, 0, !dbg !1176
  br i1 %cmp1, label %if.then, label %if.end, !dbg !1177

if.then:                                          ; preds = %while.body
  store i64 0, i64* %len, align 8, !dbg !1178
  br label %end, !dbg !1180

if.end:                                           ; preds = %while.body
  %4 = load i64, i64* %rx, align 8, !dbg !1181
  %cmp2 = icmp eq i64 %4, 0, !dbg !1183
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !1184

if.then3:                                         ; preds = %if.end
  store i64 0, i64* %len, align 8, !dbg !1185
  br label %end, !dbg !1187

if.end4:                                          ; preds = %if.end
  %5 = load i8, i8* %c, align 1, !dbg !1188
  %conv = sext i8 %5 to i32, !dbg !1188
  %6 = load i8, i8* %delim.addr, align 1, !dbg !1190
  %conv5 = sext i8 %6 to i32, !dbg !1190
  %cmp6 = icmp eq i32 %conv, %conv5, !dbg !1191
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !1192

if.then8:                                         ; preds = %if.end4
  br label %end, !dbg !1193

if.end9:                                          ; preds = %if.end4
  %7 = load i8, i8* %c, align 1, !dbg !1195
  %8 = load i8*, i8** %buffer.addr, align 8, !dbg !1196
  %9 = load i64, i64* %len, align 8, !dbg !1197
  %arrayidx10 = getelementptr inbounds i8, i8* %8, i64 %9, !dbg !1196
  store i8 %7, i8* %arrayidx10, align 1, !dbg !1198
  %10 = load i64, i64* %len, align 8, !dbg !1199
  %inc = add i64 %10, 1, !dbg !1199
  store i64 %inc, i64* %len, align 8, !dbg !1199
  br label %while.cond, !dbg !1166, !llvm.loop !1200

while.end:                                        ; preds = %while.cond
  br label %end, !dbg !1166

end:                                              ; preds = %while.end, %if.then8, %if.then3, %if.then
  call void @llvm.dbg.label(metadata !1202), !dbg !1203
  %11 = load i64, i64* %len, align 8, !dbg !1204
  ret i64 %11, !dbg !1205
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_link(%struct.meta* %linkme) #6 !dbg !1206 {
entry:
  %linkme.addr = alloca %struct.meta*, align 8
  %walker = alloca %struct.meta*, align 8
  store %struct.meta* %linkme, %struct.meta** %linkme.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.meta** %linkme.addr, metadata !1209, metadata !DIExpression()), !dbg !1210
  call void @llvm.dbg.declare(metadata %struct.meta** %walker, metadata !1211, metadata !DIExpression()), !dbg !1212
  %0 = load %struct.meta*, %struct.meta** getelementptr inbounds ([128 x %struct.meta*], [128 x %struct.meta*]* @lookaside, i64 0, i64 0), align 16, !dbg !1213
  store %struct.meta* %0, %struct.meta** %walker, align 8, !dbg !1212
  %1 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1214
  %cmp = icmp eq %struct.meta* %1, null, !dbg !1216
  br i1 %cmp, label %if.then, label %if.end, !dbg !1217

if.then:                                          ; preds = %entry
  br label %return, !dbg !1218

if.end:                                           ; preds = %entry
  %2 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1220
  %length = getelementptr inbounds %struct.meta, %struct.meta* %2, i32 0, i32 0, !dbg !1222
  %3 = load i64, i64* %length, align 8, !dbg !1222
  %cmp1 = icmp ule i64 %3, 1016, !dbg !1223
  br i1 %cmp1, label %if.then2, label %if.end15, !dbg !1224

if.then2:                                         ; preds = %if.end
  %4 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1225
  %length3 = getelementptr inbounds %struct.meta, %struct.meta* %4, i32 0, i32 0, !dbg !1225
  %5 = load i64, i64* %length3, align 8, !dbg !1225
  %cmp4 = icmp ugt i64 %5, 1016, !dbg !1225
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !1225

cond.true:                                        ; preds = %if.then2
  br label %cond.end, !dbg !1225

cond.false:                                       ; preds = %if.then2
  %6 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1225
  %length5 = getelementptr inbounds %struct.meta, %struct.meta* %6, i32 0, i32 0, !dbg !1225
  %7 = load i64, i64* %length5, align 8, !dbg !1225
  %div = udiv i64 %7, 8, !dbg !1225
  br label %cond.end, !dbg !1225

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %div, %cond.false ], !dbg !1225
  %arrayidx = getelementptr inbounds [128 x %struct.meta*], [128 x %struct.meta*]* @lookaside, i64 0, i64 %cond, !dbg !1227
  %8 = load %struct.meta*, %struct.meta** %arrayidx, align 8, !dbg !1227
  %9 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1228
  %next = getelementptr inbounds %struct.meta, %struct.meta* %9, i32 0, i32 1, !dbg !1229
  store %struct.meta* %8, %struct.meta** %next, align 8, !dbg !1230
  %10 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1231
  %11 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1232
  %length6 = getelementptr inbounds %struct.meta, %struct.meta* %11, i32 0, i32 0, !dbg !1232
  %12 = load i64, i64* %length6, align 8, !dbg !1232
  %cmp7 = icmp ugt i64 %12, 1016, !dbg !1232
  br i1 %cmp7, label %cond.true8, label %cond.false9, !dbg !1232

cond.true8:                                       ; preds = %cond.end
  br label %cond.end12, !dbg !1232

cond.false9:                                      ; preds = %cond.end
  %13 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1232
  %length10 = getelementptr inbounds %struct.meta, %struct.meta* %13, i32 0, i32 0, !dbg !1232
  %14 = load i64, i64* %length10, align 8, !dbg !1232
  %div11 = udiv i64 %14, 8, !dbg !1232
  br label %cond.end12, !dbg !1232

cond.end12:                                       ; preds = %cond.false9, %cond.true8
  %cond13 = phi i64 [ 0, %cond.true8 ], [ %div11, %cond.false9 ], !dbg !1232
  %arrayidx14 = getelementptr inbounds [128 x %struct.meta*], [128 x %struct.meta*]* @lookaside, i64 0, i64 %cond13, !dbg !1233
  store %struct.meta* %10, %struct.meta** %arrayidx14, align 8, !dbg !1234
  br label %return, !dbg !1235

if.end15:                                         ; preds = %if.end
  br label %while.cond, !dbg !1236

while.cond:                                       ; preds = %if.end35, %if.end15
  %15 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !1237
  %tobool = icmp ne %struct.meta* %15, null, !dbg !1236
  br i1 %tobool, label %while.body, label %while.end, !dbg !1236

while.body:                                       ; preds = %while.cond
  %16 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !1238
  %next16 = getelementptr inbounds %struct.meta, %struct.meta* %16, i32 0, i32 1, !dbg !1241
  %17 = load %struct.meta*, %struct.meta** %next16, align 8, !dbg !1241
  %cmp17 = icmp eq %struct.meta* %17, null, !dbg !1242
  br i1 %cmp17, label %if.then18, label %if.else, !dbg !1243

if.then18:                                        ; preds = %while.body
  %18 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1244
  %19 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !1246
  %next19 = getelementptr inbounds %struct.meta, %struct.meta* %19, i32 0, i32 1, !dbg !1247
  store %struct.meta* %18, %struct.meta** %next19, align 8, !dbg !1248
  %20 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !1249
  %21 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1250
  %prev = getelementptr inbounds %struct.meta, %struct.meta* %21, i32 0, i32 2, !dbg !1251
  store %struct.meta* %20, %struct.meta** %prev, align 8, !dbg !1252
  %22 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1253
  %next20 = getelementptr inbounds %struct.meta, %struct.meta* %22, i32 0, i32 1, !dbg !1254
  store %struct.meta* null, %struct.meta** %next20, align 8, !dbg !1255
  br label %return, !dbg !1256

if.else:                                          ; preds = %while.body
  %23 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1257
  %length21 = getelementptr inbounds %struct.meta, %struct.meta* %23, i32 0, i32 0, !dbg !1259
  %24 = load i64, i64* %length21, align 8, !dbg !1259
  %25 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !1260
  %next22 = getelementptr inbounds %struct.meta, %struct.meta* %25, i32 0, i32 1, !dbg !1261
  %26 = load %struct.meta*, %struct.meta** %next22, align 8, !dbg !1261
  %length23 = getelementptr inbounds %struct.meta, %struct.meta* %26, i32 0, i32 0, !dbg !1262
  %27 = load i64, i64* %length23, align 8, !dbg !1262
  %cmp24 = icmp ult i64 %24, %27, !dbg !1263
  br i1 %cmp24, label %if.then25, label %if.else32, !dbg !1264

if.then25:                                        ; preds = %if.else
  %28 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !1265
  %next26 = getelementptr inbounds %struct.meta, %struct.meta* %28, i32 0, i32 1, !dbg !1267
  %29 = load %struct.meta*, %struct.meta** %next26, align 8, !dbg !1267
  %30 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1268
  %next27 = getelementptr inbounds %struct.meta, %struct.meta* %30, i32 0, i32 1, !dbg !1269
  store %struct.meta* %29, %struct.meta** %next27, align 8, !dbg !1270
  %31 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !1271
  %32 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1272
  %prev28 = getelementptr inbounds %struct.meta, %struct.meta* %32, i32 0, i32 2, !dbg !1273
  store %struct.meta* %31, %struct.meta** %prev28, align 8, !dbg !1274
  %33 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1275
  %34 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !1276
  %next29 = getelementptr inbounds %struct.meta, %struct.meta* %34, i32 0, i32 1, !dbg !1277
  %35 = load %struct.meta*, %struct.meta** %next29, align 8, !dbg !1277
  %prev30 = getelementptr inbounds %struct.meta, %struct.meta* %35, i32 0, i32 2, !dbg !1278
  store %struct.meta* %33, %struct.meta** %prev30, align 8, !dbg !1279
  %36 = load %struct.meta*, %struct.meta** %linkme.addr, align 8, !dbg !1280
  %37 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !1281
  %next31 = getelementptr inbounds %struct.meta, %struct.meta* %37, i32 0, i32 1, !dbg !1282
  store %struct.meta* %36, %struct.meta** %next31, align 8, !dbg !1283
  br label %return, !dbg !1284

if.else32:                                        ; preds = %if.else
  %38 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !1285
  %next33 = getelementptr inbounds %struct.meta, %struct.meta* %38, i32 0, i32 1, !dbg !1287
  %39 = load %struct.meta*, %struct.meta** %next33, align 8, !dbg !1287
  store %struct.meta* %39, %struct.meta** %walker, align 8, !dbg !1288
  br label %if.end34

if.end34:                                         ; preds = %if.else32
  br label %if.end35

if.end35:                                         ; preds = %if.end34
  br label %while.cond, !dbg !1236, !llvm.loop !1289

while.end:                                        ; preds = %while.cond
  br label %return, !dbg !1291

return:                                           ; preds = %while.end, %if.then25, %if.then18, %cond.end12, %if.then
  ret void, !dbg !1292
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_add_freelist_block(i64 %length) #6 !dbg !1293 {
entry:
  %length.addr = alloca i64, align 8
  %block = alloca %struct.meta*, align 8
  %walker = alloca %struct.meta*, align 8
  store i64 %length, i64* %length.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %length.addr, metadata !1296, metadata !DIExpression()), !dbg !1297
  call void @llvm.dbg.declare(metadata %struct.meta** %block, metadata !1298, metadata !DIExpression()), !dbg !1299
  store %struct.meta* null, %struct.meta** %block, align 8, !dbg !1299
  call void @llvm.dbg.declare(metadata %struct.meta** %walker, metadata !1300, metadata !DIExpression()), !dbg !1301
  store %struct.meta* null, %struct.meta** %walker, align 8, !dbg !1301
  %0 = load i64, i64* %length.addr, align 8, !dbg !1302
  %add = add i64 %0, 4, !dbg !1302
  store i64 %add, i64* %length.addr, align 8, !dbg !1302
  %1 = load i64, i64* %length.addr, align 8, !dbg !1303
  %add1 = add i64 %1, 4095, !dbg !1304
  %and = and i64 %add1, 4294963200, !dbg !1305
  store i64 %and, i64* %length.addr, align 8, !dbg !1306
  %2 = load i64, i64* %length.addr, align 8, !dbg !1307
  %3 = bitcast %struct.meta** %block to i8**, !dbg !1309
  %call = call i32 @cgc_allocate(i64 %2, i32 0, i8** %3) #15, !dbg !1310
  %cmp = icmp ne i32 %call, 0, !dbg !1311
  br i1 %cmp, label %if.then, label %if.end, !dbg !1312

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %length.addr, align 8, !dbg !1313
  %call2 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.34, i64 0, i64 0), i64 %4) #15, !dbg !1315
  call void @cgc__terminate(i32 -1) #16, !dbg !1316
  unreachable, !dbg !1316

if.end:                                           ; preds = %entry
  %5 = load %struct.meta*, %struct.meta** %block, align 8, !dbg !1317
  %6 = bitcast %struct.meta* %5 to i8*, !dbg !1317
  %7 = load i64, i64* %length.addr, align 8, !dbg !1318
  call void @cgc_bzero(i8* %6, i64 %7) #15, !dbg !1319
  %8 = load i64, i64* %length.addr, align 8, !dbg !1320
  %sub = sub i64 %8, 4, !dbg !1321
  %9 = load %struct.meta*, %struct.meta** %block, align 8, !dbg !1322
  %length3 = getelementptr inbounds %struct.meta, %struct.meta* %9, i32 0, i32 0, !dbg !1323
  store i64 %sub, i64* %length3, align 8, !dbg !1324
  %10 = load %struct.meta*, %struct.meta** getelementptr inbounds ([128 x %struct.meta*], [128 x %struct.meta*]* @lookaside, i64 0, i64 0), align 16, !dbg !1325
  %cmp4 = icmp eq %struct.meta* %10, null, !dbg !1327
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !1328

if.then5:                                         ; preds = %if.end
  %11 = load %struct.meta*, %struct.meta** %block, align 8, !dbg !1329
  store %struct.meta* %11, %struct.meta** getelementptr inbounds ([128 x %struct.meta*], [128 x %struct.meta*]* @lookaside, i64 0, i64 0), align 16, !dbg !1331
  br label %return, !dbg !1332

if.end6:                                          ; preds = %if.end
  %12 = load %struct.meta*, %struct.meta** %block, align 8, !dbg !1333
  call void @cgc_link(%struct.meta* %12) #15, !dbg !1334
  br label %return, !dbg !1335

return:                                           ; preds = %if.end6, %if.then5
  ret void, !dbg !1336
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_printf(i8* %format, ...) #6 !dbg !1337 {
entry:
  %format.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %return_val = alloca i32, align 4
  store i8* %format, i8** %format.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !1340, metadata !DIExpression()), !dbg !1341
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %args, metadata !1342, metadata !DIExpression()), !dbg !1355
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, !dbg !1356
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !1356
  call void @llvm.va_start(i8* %arraydecay1), !dbg !1356
  call void @llvm.dbg.declare(metadata i32* %return_val, metadata !1357, metadata !DIExpression()), !dbg !1358
  %0 = load i8*, i8** %format.addr, align 8, !dbg !1359
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, !dbg !1360
  %call = call i32 @cgc_vprintf_buffered(i8* %0, %struct.__va_list_tag* %arraydecay2) #15, !dbg !1361
  store i32 %call, i32* %return_val, align 4, !dbg !1358
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, !dbg !1362
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*, !dbg !1362
  call void @llvm.va_end(i8* %arraydecay34), !dbg !1362
  %1 = load i32, i32* %return_val, align 4, !dbg !1363
  ret i32 %1, !dbg !1364
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_bzero(i8* %s, i64 %n) #6 !dbg !1365 {
entry:
  %s.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !1368, metadata !DIExpression()), !dbg !1369
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !1370, metadata !DIExpression()), !dbg !1371
  br label %while.cond, !dbg !1372

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64, i64* %n.addr, align 8, !dbg !1373
  %tobool = icmp ne i64 %0, 0, !dbg !1372
  br i1 %tobool, label %while.body, label %while.end, !dbg !1372

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %s.addr, align 8, !dbg !1374
  %2 = load i64, i64* %n.addr, align 8, !dbg !1376
  %dec = add i64 %2, -1, !dbg !1376
  store i64 %dec, i64* %n.addr, align 8, !dbg !1376
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %dec, !dbg !1377
  store i8 0, i8* %arrayidx, align 1, !dbg !1378
  br label %while.cond, !dbg !1372, !llvm.loop !1379

while.end:                                        ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 8, !dbg !1381
  %4 = load i64, i64* %n.addr, align 8, !dbg !1382
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i64 %4, !dbg !1383
  store i8 0, i8* %arrayidx1, align 1, !dbg !1384
  ret void, !dbg !1385
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_vprintf_buffered(i8* %format, %struct.__va_list_tag* %args) #6 !dbg !1386 {
entry:
  %retval = alloca i32, align 4
  %format.addr = alloca i8*, align 8
  %args.addr = alloca %struct.__va_list_tag*, align 8
  %wrapper_putc_buffered = alloca i32 (i8*, i32, i64)*, align 8
  %g_putcBuffer = alloca %struct.BUFFER_PUTC_DATA, align 2
  %ctx = alloca i8*, align 8
  %pos = alloca i64, align 8
  %iReturn = alloca i32, align 4
  %pBufferPos = alloca i8*, align 8
  %tx_bytes = alloca i64, align 8
  store i8* %format, i8** %format.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !1390, metadata !DIExpression()), !dbg !1391
  store %struct.__va_list_tag* %args, %struct.__va_list_tag** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %args.addr, metadata !1392, metadata !DIExpression()), !dbg !1393
  call void @llvm.dbg.declare(metadata i32 (i8*, i32, i64)** %wrapper_putc_buffered, metadata !1394, metadata !DIExpression()), !dbg !1399
  store i32 (i8*, i32, i64)* @cgc_WRAPPER_BUFFER_PUTC, i32 (i8*, i32, i64)** %wrapper_putc_buffered, align 8, !dbg !1399
  call void @llvm.dbg.declare(metadata %struct.BUFFER_PUTC_DATA* %g_putcBuffer, metadata !1400, metadata !DIExpression()), !dbg !1401
  %bufferPos = getelementptr inbounds %struct.BUFFER_PUTC_DATA, %struct.BUFFER_PUTC_DATA* %g_putcBuffer, i32 0, i32 1, !dbg !1402
  store i16 0, i16* %bufferPos, align 2, !dbg !1403
  call void @llvm.dbg.declare(metadata i8** %ctx, metadata !1404, metadata !DIExpression()), !dbg !1405
  %0 = bitcast %struct.BUFFER_PUTC_DATA* %g_putcBuffer to i8*, !dbg !1406
  store i8* %0, i8** %ctx, align 8, !dbg !1405
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !1407, metadata !DIExpression()), !dbg !1408
  store i64 0, i64* %pos, align 8, !dbg !1408
  call void @llvm.dbg.declare(metadata i32* %iReturn, metadata !1409, metadata !DIExpression()), !dbg !1410
  %1 = load i8*, i8** %ctx, align 8, !dbg !1411
  %2 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %wrapper_putc_buffered, align 8, !dbg !1412
  %3 = load i64, i64* %pos, align 8, !dbg !1413
  %4 = load i8*, i8** %format.addr, align 8, !dbg !1414
  %5 = load %struct.__va_list_tag*, %struct.__va_list_tag** %args.addr, align 8, !dbg !1415
  %call = call i32 @cgc_wrapper_output(i8* %1, i32 (i8*, i32, i64)* %2, i64 %3, i8* %4, %struct.__va_list_tag* %5) #15, !dbg !1416
  store i32 %call, i32* %iReturn, align 4, !dbg !1410
  call void @llvm.dbg.declare(metadata i8** %pBufferPos, metadata !1417, metadata !DIExpression()), !dbg !1418
  %szBuffer = getelementptr inbounds %struct.BUFFER_PUTC_DATA, %struct.BUFFER_PUTC_DATA* %g_putcBuffer, i32 0, i32 0, !dbg !1419
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %szBuffer, i64 0, i64 0, !dbg !1420
  store i8* %arraydecay, i8** %pBufferPos, align 8, !dbg !1418
  br label %while.cond, !dbg !1421

while.cond:                                       ; preds = %if.end11, %entry
  %bufferPos1 = getelementptr inbounds %struct.BUFFER_PUTC_DATA, %struct.BUFFER_PUTC_DATA* %g_putcBuffer, i32 0, i32 1, !dbg !1422
  %6 = load i16, i16* %bufferPos1, align 2, !dbg !1422
  %conv = zext i16 %6 to i32, !dbg !1423
  %cmp = icmp sgt i32 %conv, 0, !dbg !1424
  br i1 %cmp, label %while.body, label %while.end, !dbg !1421

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i64* %tx_bytes, metadata !1425, metadata !DIExpression()), !dbg !1427
  %7 = load i8*, i8** %pBufferPos, align 8, !dbg !1428
  %bufferPos3 = getelementptr inbounds %struct.BUFFER_PUTC_DATA, %struct.BUFFER_PUTC_DATA* %g_putcBuffer, i32 0, i32 1, !dbg !1430
  %8 = load i16, i16* %bufferPos3, align 2, !dbg !1430
  %conv4 = zext i16 %8 to i64, !dbg !1431
  %call5 = call i32 @cgc_transmit(i32 1, i8* %7, i64 %conv4, i64* %tx_bytes) #15, !dbg !1432
  %cmp6 = icmp ne i32 %call5, 0, !dbg !1433
  br i1 %cmp6, label %if.then, label %if.end, !dbg !1434

if.then:                                          ; preds = %while.body
  store i32 -1, i32* %retval, align 4, !dbg !1435
  br label %return, !dbg !1435

if.end:                                           ; preds = %while.body
  %9 = load i64, i64* %tx_bytes, align 8, !dbg !1436
  %cmp8 = icmp eq i64 %9, 0, !dbg !1438
  br i1 %cmp8, label %if.then10, label %if.end11, !dbg !1439

if.then10:                                        ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !1440
  br label %return, !dbg !1440

if.end11:                                         ; preds = %if.end
  %10 = load i64, i64* %tx_bytes, align 8, !dbg !1441
  %bufferPos12 = getelementptr inbounds %struct.BUFFER_PUTC_DATA, %struct.BUFFER_PUTC_DATA* %g_putcBuffer, i32 0, i32 1, !dbg !1442
  %11 = load i16, i16* %bufferPos12, align 2, !dbg !1443
  %conv13 = zext i16 %11 to i64, !dbg !1443
  %sub = sub i64 %conv13, %10, !dbg !1443
  %conv14 = trunc i64 %sub to i16, !dbg !1443
  store i16 %conv14, i16* %bufferPos12, align 2, !dbg !1443
  %12 = load i64, i64* %tx_bytes, align 8, !dbg !1444
  %13 = load i8*, i8** %pBufferPos, align 8, !dbg !1445
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %12, !dbg !1445
  store i8* %add.ptr, i8** %pBufferPos, align 8, !dbg !1445
  br label %while.cond, !dbg !1421, !llvm.loop !1446

while.end:                                        ; preds = %while.cond
  %14 = load i32, i32* %iReturn, align 4, !dbg !1448
  store i32 %14, i32* %retval, align 4, !dbg !1449
  br label %return, !dbg !1449

return:                                           ; preds = %while.end, %if.then10, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !1450
  ret i32 %15, !dbg !1450
}

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_WRAPPER_BUFFER_PUTC(i8* %ctx, i32 %c, i64 %pos) #6 !dbg !1451 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca i8*, align 8
  %c.addr = alloca i32, align 4
  %pos.addr = alloca i64, align 8
  %pBufferData = alloca %struct.BUFFER_PUTC_DATA*, align 8
  %pBufferPos = alloca i8*, align 8
  %tx_bytes = alloca i64, align 8
  store i8* %ctx, i8** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ctx.addr, metadata !1452, metadata !DIExpression()), !dbg !1453
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !1454, metadata !DIExpression()), !dbg !1455
  store i64 %pos, i64* %pos.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %pos.addr, metadata !1456, metadata !DIExpression()), !dbg !1457
  call void @llvm.dbg.declare(metadata %struct.BUFFER_PUTC_DATA** %pBufferData, metadata !1458, metadata !DIExpression()), !dbg !1459
  %0 = load i8*, i8** %ctx.addr, align 8, !dbg !1460
  %1 = bitcast i8* %0 to %struct.BUFFER_PUTC_DATA*, !dbg !1461
  store %struct.BUFFER_PUTC_DATA* %1, %struct.BUFFER_PUTC_DATA** %pBufferData, align 8, !dbg !1459
  %2 = load %struct.BUFFER_PUTC_DATA*, %struct.BUFFER_PUTC_DATA** %pBufferData, align 8, !dbg !1462
  %bufferPos = getelementptr inbounds %struct.BUFFER_PUTC_DATA, %struct.BUFFER_PUTC_DATA* %2, i32 0, i32 1, !dbg !1464
  %3 = load i16, i16* %bufferPos, align 2, !dbg !1464
  %conv = zext i16 %3 to i32, !dbg !1462
  %cmp = icmp sge i32 %conv, 256, !dbg !1465
  br i1 %cmp, label %if.then, label %if.end18, !dbg !1466

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %pBufferPos, metadata !1467, metadata !DIExpression()), !dbg !1469
  %4 = load %struct.BUFFER_PUTC_DATA*, %struct.BUFFER_PUTC_DATA** %pBufferData, align 8, !dbg !1470
  %szBuffer = getelementptr inbounds %struct.BUFFER_PUTC_DATA, %struct.BUFFER_PUTC_DATA* %4, i32 0, i32 0, !dbg !1471
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %szBuffer, i64 0, i64 0, !dbg !1470
  store i8* %arraydecay, i8** %pBufferPos, align 8, !dbg !1469
  br label %while.cond, !dbg !1472

while.cond:                                       ; preds = %if.end14, %if.then
  %5 = load %struct.BUFFER_PUTC_DATA*, %struct.BUFFER_PUTC_DATA** %pBufferData, align 8, !dbg !1473
  %bufferPos2 = getelementptr inbounds %struct.BUFFER_PUTC_DATA, %struct.BUFFER_PUTC_DATA* %5, i32 0, i32 1, !dbg !1474
  %6 = load i16, i16* %bufferPos2, align 2, !dbg !1474
  %conv3 = zext i16 %6 to i32, !dbg !1473
  %cmp4 = icmp sgt i32 %conv3, 0, !dbg !1475
  br i1 %cmp4, label %while.body, label %while.end, !dbg !1472

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i64* %tx_bytes, metadata !1476, metadata !DIExpression()), !dbg !1478
  %7 = load i8*, i8** %pBufferPos, align 8, !dbg !1479
  %8 = load %struct.BUFFER_PUTC_DATA*, %struct.BUFFER_PUTC_DATA** %pBufferData, align 8, !dbg !1481
  %bufferPos6 = getelementptr inbounds %struct.BUFFER_PUTC_DATA, %struct.BUFFER_PUTC_DATA* %8, i32 0, i32 1, !dbg !1482
  %9 = load i16, i16* %bufferPos6, align 2, !dbg !1482
  %conv7 = zext i16 %9 to i64, !dbg !1481
  %call = call i32 @cgc_transmit(i32 1, i8* %7, i64 %conv7, i64* %tx_bytes) #15, !dbg !1483
  %cmp8 = icmp ne i32 %call, 0, !dbg !1484
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !1485

if.then10:                                        ; preds = %while.body
  store i32 -1, i32* %retval, align 4, !dbg !1486
  br label %return, !dbg !1486

if.end:                                           ; preds = %while.body
  %10 = load i64, i64* %tx_bytes, align 8, !dbg !1487
  %cmp11 = icmp eq i64 %10, 0, !dbg !1489
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !1490

if.then13:                                        ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !1491
  br label %return, !dbg !1491

if.end14:                                         ; preds = %if.end
  %11 = load i64, i64* %tx_bytes, align 8, !dbg !1492
  %12 = load %struct.BUFFER_PUTC_DATA*, %struct.BUFFER_PUTC_DATA** %pBufferData, align 8, !dbg !1493
  %bufferPos15 = getelementptr inbounds %struct.BUFFER_PUTC_DATA, %struct.BUFFER_PUTC_DATA* %12, i32 0, i32 1, !dbg !1494
  %13 = load i16, i16* %bufferPos15, align 2, !dbg !1495
  %conv16 = zext i16 %13 to i64, !dbg !1495
  %sub = sub i64 %conv16, %11, !dbg !1495
  %conv17 = trunc i64 %sub to i16, !dbg !1495
  store i16 %conv17, i16* %bufferPos15, align 2, !dbg !1495
  %14 = load i64, i64* %tx_bytes, align 8, !dbg !1496
  %15 = load i8*, i8** %pBufferPos, align 8, !dbg !1497
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %14, !dbg !1497
  store i8* %add.ptr, i8** %pBufferPos, align 8, !dbg !1497
  br label %while.cond, !dbg !1472, !llvm.loop !1498

while.end:                                        ; preds = %while.cond
  br label %if.end18, !dbg !1500

if.end18:                                         ; preds = %while.end, %entry
  %16 = load i32, i32* %c.addr, align 4, !dbg !1501
  %conv19 = trunc i32 %16 to i8, !dbg !1502
  %17 = load %struct.BUFFER_PUTC_DATA*, %struct.BUFFER_PUTC_DATA** %pBufferData, align 8, !dbg !1503
  %szBuffer20 = getelementptr inbounds %struct.BUFFER_PUTC_DATA, %struct.BUFFER_PUTC_DATA* %17, i32 0, i32 0, !dbg !1504
  %18 = load %struct.BUFFER_PUTC_DATA*, %struct.BUFFER_PUTC_DATA** %pBufferData, align 8, !dbg !1505
  %bufferPos21 = getelementptr inbounds %struct.BUFFER_PUTC_DATA, %struct.BUFFER_PUTC_DATA* %18, i32 0, i32 1, !dbg !1506
  %19 = load i16, i16* %bufferPos21, align 2, !dbg !1507
  %inc = add i16 %19, 1, !dbg !1507
  store i16 %inc, i16* %bufferPos21, align 2, !dbg !1507
  %idxprom = zext i16 %19 to i64, !dbg !1503
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %szBuffer20, i64 0, i64 %idxprom, !dbg !1503
  store i8 %conv19, i8* %arrayidx, align 1, !dbg !1508
  %20 = load i64, i64* %pos.addr, align 8, !dbg !1509
  %add = add i64 %20, 1, !dbg !1510
  %conv22 = trunc i64 %add to i32, !dbg !1511
  store i32 %conv22, i32* %retval, align 4, !dbg !1512
  br label %return, !dbg !1512

return:                                           ; preds = %if.end18, %if.then13, %if.then10
  %21 = load i32, i32* %retval, align 4, !dbg !1513
  ret i32 %21, !dbg !1513
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_wrapper_output(i8* %ctx, i32 (i8*, i32, i64)* %fpOut, i64 %pos, i8* %format, %struct.__va_list_tag* %args) #6 !dbg !1514 {
entry:
  %ctx.addr = alloca i8*, align 8
  %fpOut.addr = alloca i32 (i8*, i32, i64)*, align 8
  %pos.addr = alloca i64, align 8
  %format.addr = alloca i8*, align 8
  %args.addr = alloca %struct.__va_list_tag*, align 8
  %flags = alloca i32, align 4
  %width = alloca i32, align 4
  %pad_length = alloca i32, align 4
  %precision = alloca i32, align 4
  %curChar = alloca i8, align 1
  %startpos = alloca i8*, align 8
  %startpos58 = alloca i8*, align 8
  %print_str = alloca i8*, align 8
  %print_int = alloca i32, align 4
  %print_int89 = alloca i32, align 4
  %print_int104 = alloca i32, align 4
  %print_float = alloca double, align 8
  %print_float129 = alloca double, align 8
  %signed_int_p = alloca i32*, align 8
  %char_arg = alloca i8, align 1
  %temp_str = alloca [2 x i8], align 1
  store i8* %ctx, i8** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ctx.addr, metadata !1517, metadata !DIExpression()), !dbg !1518
  store i32 (i8*, i32, i64)* %fpOut, i32 (i8*, i32, i64)** %fpOut.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i32, i64)** %fpOut.addr, metadata !1519, metadata !DIExpression()), !dbg !1520
  store i64 %pos, i64* %pos.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %pos.addr, metadata !1521, metadata !DIExpression()), !dbg !1522
  store i8* %format, i8** %format.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !1523, metadata !DIExpression()), !dbg !1524
  store %struct.__va_list_tag* %args, %struct.__va_list_tag** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %args.addr, metadata !1525, metadata !DIExpression()), !dbg !1526
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1527, metadata !DIExpression()), !dbg !1528
  store i32 0, i32* %flags, align 4, !dbg !1528
  call void @llvm.dbg.declare(metadata i32* %width, metadata !1529, metadata !DIExpression()), !dbg !1530
  store i32 0, i32* %width, align 4, !dbg !1530
  call void @llvm.dbg.declare(metadata i32* %pad_length, metadata !1531, metadata !DIExpression()), !dbg !1532
  store i32 0, i32* %pad_length, align 4, !dbg !1532
  call void @llvm.dbg.declare(metadata i32* %precision, metadata !1533, metadata !DIExpression()), !dbg !1534
  store i32 0, i32* %precision, align 4, !dbg !1534
  br label %while.cond, !dbg !1535

while.cond:                                       ; preds = %if.end174, %if.then12, %entry
  %0 = load i8*, i8** %format.addr, align 8, !dbg !1536
  %1 = load i8, i8* %0, align 1, !dbg !1537
  %conv = sext i8 %1 to i32, !dbg !1537
  %cmp = icmp ne i32 %conv, 0, !dbg !1538
  br i1 %cmp, label %while.body, label %while.end175, !dbg !1535

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8* %curChar, metadata !1539, metadata !DIExpression()), !dbg !1541
  %2 = load i8*, i8** %format.addr, align 8, !dbg !1542
  %3 = load i8, i8* %2, align 1, !dbg !1543
  store i8 %3, i8* %curChar, align 1, !dbg !1541
  %4 = load i8*, i8** %format.addr, align 8, !dbg !1544
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1, !dbg !1544
  store i8* %incdec.ptr, i8** %format.addr, align 8, !dbg !1544
  %5 = load i8, i8* %curChar, align 1, !dbg !1545
  %conv2 = sext i8 %5 to i32, !dbg !1545
  %cmp3 = icmp eq i32 %conv2, 36, !dbg !1547
  br i1 %cmp3, label %if.then, label %if.else, !dbg !1548

if.then:                                          ; preds = %while.body
  store i32 0, i32* %precision, align 4, !dbg !1549
  store i32 0, i32* %pad_length, align 4, !dbg !1551
  store i32 0, i32* %width, align 4, !dbg !1552
  store i32 0, i32* %flags, align 4, !dbg !1553
  %6 = load i8*, i8** %format.addr, align 8, !dbg !1554
  %7 = load i8, i8* %6, align 1, !dbg !1556
  %conv5 = sext i8 %7 to i32, !dbg !1556
  %cmp6 = icmp eq i32 %conv5, 0, !dbg !1557
  br i1 %cmp6, label %if.then8, label %if.end, !dbg !1558

if.then8:                                         ; preds = %if.then
  br label %while.end175, !dbg !1559

if.end:                                           ; preds = %if.then
  %8 = load i8*, i8** %format.addr, align 8, !dbg !1560
  %9 = load i8, i8* %8, align 1, !dbg !1562
  %conv9 = sext i8 %9 to i32, !dbg !1562
  %cmp10 = icmp eq i32 %conv9, 36, !dbg !1563
  br i1 %cmp10, label %if.then12, label %if.end14, !dbg !1564

if.then12:                                        ; preds = %if.end
  %10 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1565
  %11 = load i8*, i8** %ctx.addr, align 8, !dbg !1567
  %12 = load i64, i64* %pos.addr, align 8, !dbg !1568
  %call = call i32 %10(i8* %11, i32 36, i64 %12) #15, !dbg !1569
  %conv13 = sext i32 %call to i64, !dbg !1569
  store i64 %conv13, i64* %pos.addr, align 8, !dbg !1570
  br label %while.cond, !dbg !1571, !llvm.loop !1572

if.end14:                                         ; preds = %if.end
  %13 = load i8*, i8** %format.addr, align 8, !dbg !1574
  %14 = load i8, i8* %13, align 1, !dbg !1576
  %conv15 = sext i8 %14 to i32, !dbg !1576
  %cmp16 = icmp eq i32 %conv15, 45, !dbg !1577
  br i1 %cmp16, label %if.then18, label %if.end25, !dbg !1578

if.then18:                                        ; preds = %if.end14
  %15 = load i32, i32* %flags, align 4, !dbg !1579
  %or = or i32 %15, 1, !dbg !1579
  store i32 %or, i32* %flags, align 4, !dbg !1579
  %16 = load i8*, i8** %format.addr, align 8, !dbg !1581
  %incdec.ptr19 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !1581
  store i8* %incdec.ptr19, i8** %format.addr, align 8, !dbg !1581
  %17 = load i8*, i8** %format.addr, align 8, !dbg !1582
  %18 = load i8, i8* %17, align 1, !dbg !1584
  %conv20 = sext i8 %18 to i32, !dbg !1584
  %cmp21 = icmp eq i32 %conv20, 0, !dbg !1585
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !1586

if.then23:                                        ; preds = %if.then18
  br label %while.end175, !dbg !1587

if.end24:                                         ; preds = %if.then18
  br label %if.end25, !dbg !1588

if.end25:                                         ; preds = %if.end24, %if.end14
  %19 = load i8*, i8** %format.addr, align 8, !dbg !1589
  %20 = load i8, i8* %19, align 1, !dbg !1591
  %conv26 = sext i8 %20 to i32, !dbg !1591
  %call27 = call i32 @cgc_isdigit(i32 %conv26) #15, !dbg !1592
  %tobool = icmp ne i32 %call27, 0, !dbg !1592
  br i1 %tobool, label %if.then28, label %if.end47, !dbg !1593

if.then28:                                        ; preds = %if.end25
  %21 = load i8*, i8** %format.addr, align 8, !dbg !1594
  %22 = load i8, i8* %21, align 1, !dbg !1597
  %conv29 = sext i8 %22 to i32, !dbg !1597
  %cmp30 = icmp eq i32 %conv29, 48, !dbg !1598
  br i1 %cmp30, label %if.then32, label %if.end34, !dbg !1599

if.then32:                                        ; preds = %if.then28
  %23 = load i32, i32* %flags, align 4, !dbg !1600
  %or33 = or i32 %23, 4, !dbg !1600
  store i32 %or33, i32* %flags, align 4, !dbg !1600
  br label %if.end34, !dbg !1601

if.end34:                                         ; preds = %if.then32, %if.then28
  call void @llvm.dbg.declare(metadata i8** %startpos, metadata !1602, metadata !DIExpression()), !dbg !1603
  %24 = load i8*, i8** %format.addr, align 8, !dbg !1604
  store i8* %24, i8** %startpos, align 8, !dbg !1603
  br label %while.cond35, !dbg !1605

while.cond35:                                     ; preds = %while.body39, %if.end34
  %25 = load i8*, i8** %format.addr, align 8, !dbg !1606
  %26 = load i8, i8* %25, align 1, !dbg !1607
  %conv36 = sext i8 %26 to i32, !dbg !1607
  %call37 = call i32 @cgc_isdigit(i32 %conv36) #15, !dbg !1608
  %tobool38 = icmp ne i32 %call37, 0, !dbg !1605
  br i1 %tobool38, label %while.body39, label %while.end, !dbg !1605

while.body39:                                     ; preds = %while.cond35
  %27 = load i8*, i8** %format.addr, align 8, !dbg !1609
  %incdec.ptr40 = getelementptr inbounds i8, i8* %27, i32 1, !dbg !1609
  store i8* %incdec.ptr40, i8** %format.addr, align 8, !dbg !1609
  br label %while.cond35, !dbg !1605, !llvm.loop !1610

while.end:                                        ; preds = %while.cond35
  %28 = load i8*, i8** %startpos, align 8, !dbg !1611
  %call41 = call i32 @cgc_atoi(i8* %28) #15, !dbg !1612
  store i32 %call41, i32* %width, align 4, !dbg !1613
  %29 = load i8*, i8** %format.addr, align 8, !dbg !1614
  %30 = load i8, i8* %29, align 1, !dbg !1616
  %conv42 = sext i8 %30 to i32, !dbg !1616
  %cmp43 = icmp eq i32 %conv42, 0, !dbg !1617
  br i1 %cmp43, label %if.then45, label %if.end46, !dbg !1618

if.then45:                                        ; preds = %while.end
  br label %while.end175, !dbg !1619

if.end46:                                         ; preds = %while.end
  br label %if.end47, !dbg !1620

if.end47:                                         ; preds = %if.end46, %if.end25
  %31 = load i8*, i8** %format.addr, align 8, !dbg !1621
  %32 = load i8, i8* %31, align 1, !dbg !1623
  %conv48 = sext i8 %32 to i32, !dbg !1623
  %cmp49 = icmp eq i32 %conv48, 46, !dbg !1624
  br i1 %cmp49, label %if.then51, label %if.end72, !dbg !1625

if.then51:                                        ; preds = %if.end47
  %33 = load i8*, i8** %format.addr, align 8, !dbg !1626
  %incdec.ptr52 = getelementptr inbounds i8, i8* %33, i32 1, !dbg !1626
  store i8* %incdec.ptr52, i8** %format.addr, align 8, !dbg !1626
  %34 = load i8*, i8** %format.addr, align 8, !dbg !1628
  %35 = load i8, i8* %34, align 1, !dbg !1630
  %conv53 = sext i8 %35 to i32, !dbg !1630
  %cmp54 = icmp eq i32 %conv53, 0, !dbg !1631
  br i1 %cmp54, label %if.then56, label %if.end57, !dbg !1632

if.then56:                                        ; preds = %if.then51
  br label %while.end175, !dbg !1633

if.end57:                                         ; preds = %if.then51
  call void @llvm.dbg.declare(metadata i8** %startpos58, metadata !1634, metadata !DIExpression()), !dbg !1635
  %36 = load i8*, i8** %format.addr, align 8, !dbg !1636
  store i8* %36, i8** %startpos58, align 8, !dbg !1635
  br label %while.cond59, !dbg !1637

while.cond59:                                     ; preds = %while.body63, %if.end57
  %37 = load i8*, i8** %format.addr, align 8, !dbg !1638
  %38 = load i8, i8* %37, align 1, !dbg !1639
  %conv60 = sext i8 %38 to i32, !dbg !1639
  %call61 = call i32 @cgc_isdigit(i32 %conv60) #15, !dbg !1640
  %tobool62 = icmp ne i32 %call61, 0, !dbg !1637
  br i1 %tobool62, label %while.body63, label %while.end65, !dbg !1637

while.body63:                                     ; preds = %while.cond59
  %39 = load i8*, i8** %format.addr, align 8, !dbg !1641
  %incdec.ptr64 = getelementptr inbounds i8, i8* %39, i32 1, !dbg !1641
  store i8* %incdec.ptr64, i8** %format.addr, align 8, !dbg !1641
  br label %while.cond59, !dbg !1637, !llvm.loop !1642

while.end65:                                      ; preds = %while.cond59
  %40 = load i8*, i8** %startpos58, align 8, !dbg !1643
  %call66 = call i32 @cgc_atoi(i8* %40) #15, !dbg !1644
  store i32 %call66, i32* %precision, align 4, !dbg !1645
  %41 = load i8*, i8** %format.addr, align 8, !dbg !1646
  %42 = load i8, i8* %41, align 1, !dbg !1648
  %conv67 = sext i8 %42 to i32, !dbg !1648
  %cmp68 = icmp eq i32 %conv67, 0, !dbg !1649
  br i1 %cmp68, label %if.then70, label %if.end71, !dbg !1650

if.then70:                                        ; preds = %while.end65
  br label %while.end175, !dbg !1651

if.end71:                                         ; preds = %while.end65
  br label %if.end72, !dbg !1652

if.end72:                                         ; preds = %if.end71, %if.end47
  %43 = load i8*, i8** %format.addr, align 8, !dbg !1653
  %44 = load i8, i8* %43, align 1, !dbg !1654
  %conv73 = sext i8 %44 to i32, !dbg !1654
  switch i32 %conv73, label %sw.default [
    i32 115, label %sw.bb
    i32 100, label %sw.bb75
    i32 120, label %sw.bb88
    i32 88, label %sw.bb102
    i32 102, label %sw.bb117
    i32 101, label %sw.bb127
    i32 110, label %sw.bb142
    i32 99, label %sw.bb155
  ], !dbg !1655

sw.bb:                                            ; preds = %if.end72
  call void @llvm.dbg.declare(metadata i8** %print_str, metadata !1656, metadata !DIExpression()), !dbg !1659
  %45 = load %struct.__va_list_tag*, %struct.__va_list_tag** %args.addr, align 8, !dbg !1660
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %45, i32 0, i32 0, !dbg !1660
  %gp_offset = load i32, i32* %gp_offset_p, align 8, !dbg !1660
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !1660
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !1660

vaarg.in_reg:                                     ; preds = %sw.bb
  %46 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %45, i32 0, i32 3, !dbg !1660
  %reg_save_area = load i8*, i8** %46, align 8, !dbg !1660
  %47 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !1660
  %48 = bitcast i8* %47 to i8**, !dbg !1660
  %49 = add i32 %gp_offset, 8, !dbg !1660
  store i32 %49, i32* %gp_offset_p, align 8, !dbg !1660
  br label %vaarg.end, !dbg !1660

vaarg.in_mem:                                     ; preds = %sw.bb
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %45, i32 0, i32 2, !dbg !1660
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !1660
  %50 = bitcast i8* %overflow_arg_area to i8**, !dbg !1660
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !1660
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !1660
  br label %vaarg.end, !dbg !1660

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i8** [ %48, %vaarg.in_reg ], [ %50, %vaarg.in_mem ], !dbg !1660
  %51 = load i8*, i8** %vaarg.addr, align 8, !dbg !1660
  store i8* %51, i8** %print_str, align 8, !dbg !1659
  %52 = load i8*, i8** %ctx.addr, align 8, !dbg !1661
  %53 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1662
  %54 = load i64, i64* %pos.addr, align 8, !dbg !1663
  %55 = load i8*, i8** %print_str, align 8, !dbg !1664
  %56 = load i32, i32* %width, align 4, !dbg !1665
  %57 = load i32, i32* %precision, align 4, !dbg !1666
  %58 = load i32, i32* %flags, align 4, !dbg !1667
  %call74 = call i64 @cgc_printf_helper_string(i8* %52, i32 (i8*, i32, i64)* %53, i64 %54, i8* %55, i32 %56, i32 %57, i32 %58) #15, !dbg !1668
  store i64 %call74, i64* %pos.addr, align 8, !dbg !1669
  br label %sw.epilog, !dbg !1670

sw.bb75:                                          ; preds = %if.end72
  call void @llvm.dbg.declare(metadata i32* %print_int, metadata !1671, metadata !DIExpression()), !dbg !1673
  %59 = load %struct.__va_list_tag*, %struct.__va_list_tag** %args.addr, align 8, !dbg !1674
  %gp_offset_p76 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %59, i32 0, i32 0, !dbg !1674
  %gp_offset77 = load i32, i32* %gp_offset_p76, align 8, !dbg !1674
  %fits_in_gp78 = icmp ule i32 %gp_offset77, 40, !dbg !1674
  br i1 %fits_in_gp78, label %vaarg.in_reg79, label %vaarg.in_mem81, !dbg !1674

vaarg.in_reg79:                                   ; preds = %sw.bb75
  %60 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %59, i32 0, i32 3, !dbg !1674
  %reg_save_area80 = load i8*, i8** %60, align 8, !dbg !1674
  %61 = getelementptr i8, i8* %reg_save_area80, i32 %gp_offset77, !dbg !1674
  %62 = bitcast i8* %61 to i32*, !dbg !1674
  %63 = add i32 %gp_offset77, 8, !dbg !1674
  store i32 %63, i32* %gp_offset_p76, align 8, !dbg !1674
  br label %vaarg.end85, !dbg !1674

vaarg.in_mem81:                                   ; preds = %sw.bb75
  %overflow_arg_area_p82 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %59, i32 0, i32 2, !dbg !1674
  %overflow_arg_area83 = load i8*, i8** %overflow_arg_area_p82, align 8, !dbg !1674
  %64 = bitcast i8* %overflow_arg_area83 to i32*, !dbg !1674
  %overflow_arg_area.next84 = getelementptr i8, i8* %overflow_arg_area83, i32 8, !dbg !1674
  store i8* %overflow_arg_area.next84, i8** %overflow_arg_area_p82, align 8, !dbg !1674
  br label %vaarg.end85, !dbg !1674

vaarg.end85:                                      ; preds = %vaarg.in_mem81, %vaarg.in_reg79
  %vaarg.addr86 = phi i32* [ %62, %vaarg.in_reg79 ], [ %64, %vaarg.in_mem81 ], !dbg !1674
  %65 = load i32, i32* %vaarg.addr86, align 4, !dbg !1674
  store i32 %65, i32* %print_int, align 4, !dbg !1673
  %66 = load i8*, i8** %ctx.addr, align 8, !dbg !1675
  %67 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1676
  %68 = load i64, i64* %pos.addr, align 8, !dbg !1677
  %69 = load i32, i32* %print_int, align 4, !dbg !1678
  %70 = load i32, i32* %width, align 4, !dbg !1679
  %71 = load i32, i32* %precision, align 4, !dbg !1680
  %72 = load i32, i32* %flags, align 4, !dbg !1681
  %call87 = call i64 @cgc_printf_helper_int(i8* %66, i32 (i8*, i32, i64)* %67, i64 %68, i32 %69, i32 10, i32 %70, i32 %71, i32 %72) #15, !dbg !1682
  store i64 %call87, i64* %pos.addr, align 8, !dbg !1683
  br label %sw.epilog, !dbg !1684

sw.bb88:                                          ; preds = %if.end72
  call void @llvm.dbg.declare(metadata i32* %print_int89, metadata !1685, metadata !DIExpression()), !dbg !1687
  %73 = load %struct.__va_list_tag*, %struct.__va_list_tag** %args.addr, align 8, !dbg !1688
  %gp_offset_p90 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %73, i32 0, i32 0, !dbg !1688
  %gp_offset91 = load i32, i32* %gp_offset_p90, align 8, !dbg !1688
  %fits_in_gp92 = icmp ule i32 %gp_offset91, 40, !dbg !1688
  br i1 %fits_in_gp92, label %vaarg.in_reg93, label %vaarg.in_mem95, !dbg !1688

vaarg.in_reg93:                                   ; preds = %sw.bb88
  %74 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %73, i32 0, i32 3, !dbg !1688
  %reg_save_area94 = load i8*, i8** %74, align 8, !dbg !1688
  %75 = getelementptr i8, i8* %reg_save_area94, i32 %gp_offset91, !dbg !1688
  %76 = bitcast i8* %75 to i32*, !dbg !1688
  %77 = add i32 %gp_offset91, 8, !dbg !1688
  store i32 %77, i32* %gp_offset_p90, align 8, !dbg !1688
  br label %vaarg.end99, !dbg !1688

vaarg.in_mem95:                                   ; preds = %sw.bb88
  %overflow_arg_area_p96 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %73, i32 0, i32 2, !dbg !1688
  %overflow_arg_area97 = load i8*, i8** %overflow_arg_area_p96, align 8, !dbg !1688
  %78 = bitcast i8* %overflow_arg_area97 to i32*, !dbg !1688
  %overflow_arg_area.next98 = getelementptr i8, i8* %overflow_arg_area97, i32 8, !dbg !1688
  store i8* %overflow_arg_area.next98, i8** %overflow_arg_area_p96, align 8, !dbg !1688
  br label %vaarg.end99, !dbg !1688

vaarg.end99:                                      ; preds = %vaarg.in_mem95, %vaarg.in_reg93
  %vaarg.addr100 = phi i32* [ %76, %vaarg.in_reg93 ], [ %78, %vaarg.in_mem95 ], !dbg !1688
  %79 = load i32, i32* %vaarg.addr100, align 4, !dbg !1688
  store i32 %79, i32* %print_int89, align 4, !dbg !1687
  %80 = load i8*, i8** %ctx.addr, align 8, !dbg !1689
  %81 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1690
  %82 = load i64, i64* %pos.addr, align 8, !dbg !1691
  %83 = load i32, i32* %print_int89, align 4, !dbg !1692
  %84 = load i32, i32* %width, align 4, !dbg !1693
  %85 = load i32, i32* %precision, align 4, !dbg !1694
  %86 = load i32, i32* %flags, align 4, !dbg !1695
  %call101 = call i64 @cgc_printf_helper_int(i8* %80, i32 (i8*, i32, i64)* %81, i64 %82, i32 %83, i32 16, i32 %84, i32 %85, i32 %86) #15, !dbg !1696
  store i64 %call101, i64* %pos.addr, align 8, !dbg !1697
  br label %sw.epilog, !dbg !1698

sw.bb102:                                         ; preds = %if.end72
  %87 = load i32, i32* %flags, align 4, !dbg !1699
  %or103 = or i32 %87, 8, !dbg !1699
  store i32 %or103, i32* %flags, align 4, !dbg !1699
  call void @llvm.dbg.declare(metadata i32* %print_int104, metadata !1701, metadata !DIExpression()), !dbg !1702
  %88 = load %struct.__va_list_tag*, %struct.__va_list_tag** %args.addr, align 8, !dbg !1703
  %gp_offset_p105 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %88, i32 0, i32 0, !dbg !1703
  %gp_offset106 = load i32, i32* %gp_offset_p105, align 8, !dbg !1703
  %fits_in_gp107 = icmp ule i32 %gp_offset106, 40, !dbg !1703
  br i1 %fits_in_gp107, label %vaarg.in_reg108, label %vaarg.in_mem110, !dbg !1703

vaarg.in_reg108:                                  ; preds = %sw.bb102
  %89 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %88, i32 0, i32 3, !dbg !1703
  %reg_save_area109 = load i8*, i8** %89, align 8, !dbg !1703
  %90 = getelementptr i8, i8* %reg_save_area109, i32 %gp_offset106, !dbg !1703
  %91 = bitcast i8* %90 to i32*, !dbg !1703
  %92 = add i32 %gp_offset106, 8, !dbg !1703
  store i32 %92, i32* %gp_offset_p105, align 8, !dbg !1703
  br label %vaarg.end114, !dbg !1703

vaarg.in_mem110:                                  ; preds = %sw.bb102
  %overflow_arg_area_p111 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %88, i32 0, i32 2, !dbg !1703
  %overflow_arg_area112 = load i8*, i8** %overflow_arg_area_p111, align 8, !dbg !1703
  %93 = bitcast i8* %overflow_arg_area112 to i32*, !dbg !1703
  %overflow_arg_area.next113 = getelementptr i8, i8* %overflow_arg_area112, i32 8, !dbg !1703
  store i8* %overflow_arg_area.next113, i8** %overflow_arg_area_p111, align 8, !dbg !1703
  br label %vaarg.end114, !dbg !1703

vaarg.end114:                                     ; preds = %vaarg.in_mem110, %vaarg.in_reg108
  %vaarg.addr115 = phi i32* [ %91, %vaarg.in_reg108 ], [ %93, %vaarg.in_mem110 ], !dbg !1703
  %94 = load i32, i32* %vaarg.addr115, align 4, !dbg !1703
  store i32 %94, i32* %print_int104, align 4, !dbg !1702
  %95 = load i8*, i8** %ctx.addr, align 8, !dbg !1704
  %96 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1705
  %97 = load i64, i64* %pos.addr, align 8, !dbg !1706
  %98 = load i32, i32* %print_int104, align 4, !dbg !1707
  %99 = load i32, i32* %width, align 4, !dbg !1708
  %100 = load i32, i32* %precision, align 4, !dbg !1709
  %101 = load i32, i32* %flags, align 4, !dbg !1710
  %call116 = call i64 @cgc_printf_helper_int(i8* %95, i32 (i8*, i32, i64)* %96, i64 %97, i32 %98, i32 16, i32 %99, i32 %100, i32 %101) #15, !dbg !1711
  store i64 %call116, i64* %pos.addr, align 8, !dbg !1712
  br label %sw.epilog, !dbg !1713

sw.bb117:                                         ; preds = %if.end72
  call void @llvm.dbg.declare(metadata double* %print_float, metadata !1714, metadata !DIExpression()), !dbg !1716
  %102 = load %struct.__va_list_tag*, %struct.__va_list_tag** %args.addr, align 8, !dbg !1717
  %fp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %102, i32 0, i32 1, !dbg !1717
  %fp_offset = load i32, i32* %fp_offset_p, align 4, !dbg !1717
  %fits_in_fp = icmp ule i32 %fp_offset, 160, !dbg !1717
  br i1 %fits_in_fp, label %vaarg.in_reg118, label %vaarg.in_mem120, !dbg !1717

vaarg.in_reg118:                                  ; preds = %sw.bb117
  %103 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %102, i32 0, i32 3, !dbg !1717
  %reg_save_area119 = load i8*, i8** %103, align 8, !dbg !1717
  %104 = getelementptr i8, i8* %reg_save_area119, i32 %fp_offset, !dbg !1717
  %105 = bitcast i8* %104 to double*, !dbg !1717
  %106 = add i32 %fp_offset, 16, !dbg !1717
  store i32 %106, i32* %fp_offset_p, align 4, !dbg !1717
  br label %vaarg.end124, !dbg !1717

vaarg.in_mem120:                                  ; preds = %sw.bb117
  %overflow_arg_area_p121 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %102, i32 0, i32 2, !dbg !1717
  %overflow_arg_area122 = load i8*, i8** %overflow_arg_area_p121, align 8, !dbg !1717
  %107 = bitcast i8* %overflow_arg_area122 to double*, !dbg !1717
  %overflow_arg_area.next123 = getelementptr i8, i8* %overflow_arg_area122, i32 8, !dbg !1717
  store i8* %overflow_arg_area.next123, i8** %overflow_arg_area_p121, align 8, !dbg !1717
  br label %vaarg.end124, !dbg !1717

vaarg.end124:                                     ; preds = %vaarg.in_mem120, %vaarg.in_reg118
  %vaarg.addr125 = phi double* [ %105, %vaarg.in_reg118 ], [ %107, %vaarg.in_mem120 ], !dbg !1717
  %108 = load double, double* %vaarg.addr125, align 8, !dbg !1717
  store double %108, double* %print_float, align 8, !dbg !1716
  %109 = load i8*, i8** %ctx.addr, align 8, !dbg !1718
  %110 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1719
  %111 = load i64, i64* %pos.addr, align 8, !dbg !1720
  %112 = load double, double* %print_float, align 8, !dbg !1721
  %113 = load i32, i32* %width, align 4, !dbg !1722
  %114 = load i32, i32* %precision, align 4, !dbg !1723
  %115 = load i32, i32* %flags, align 4, !dbg !1724
  %call126 = call i64 @cgc_printf_helper_float(i8* %109, i32 (i8*, i32, i64)* %110, i64 %111, double %112, i32 %113, i32 %114, i32 %115) #15, !dbg !1725
  store i64 %call126, i64* %pos.addr, align 8, !dbg !1726
  br label %sw.epilog, !dbg !1727

sw.bb127:                                         ; preds = %if.end72
  %116 = load i32, i32* %flags, align 4, !dbg !1728
  %or128 = or i32 %116, 16, !dbg !1728
  store i32 %or128, i32* %flags, align 4, !dbg !1728
  call void @llvm.dbg.declare(metadata double* %print_float129, metadata !1730, metadata !DIExpression()), !dbg !1731
  %117 = load %struct.__va_list_tag*, %struct.__va_list_tag** %args.addr, align 8, !dbg !1732
  %fp_offset_p130 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %117, i32 0, i32 1, !dbg !1732
  %fp_offset131 = load i32, i32* %fp_offset_p130, align 4, !dbg !1732
  %fits_in_fp132 = icmp ule i32 %fp_offset131, 160, !dbg !1732
  br i1 %fits_in_fp132, label %vaarg.in_reg133, label %vaarg.in_mem135, !dbg !1732

vaarg.in_reg133:                                  ; preds = %sw.bb127
  %118 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %117, i32 0, i32 3, !dbg !1732
  %reg_save_area134 = load i8*, i8** %118, align 8, !dbg !1732
  %119 = getelementptr i8, i8* %reg_save_area134, i32 %fp_offset131, !dbg !1732
  %120 = bitcast i8* %119 to double*, !dbg !1732
  %121 = add i32 %fp_offset131, 16, !dbg !1732
  store i32 %121, i32* %fp_offset_p130, align 4, !dbg !1732
  br label %vaarg.end139, !dbg !1732

vaarg.in_mem135:                                  ; preds = %sw.bb127
  %overflow_arg_area_p136 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %117, i32 0, i32 2, !dbg !1732
  %overflow_arg_area137 = load i8*, i8** %overflow_arg_area_p136, align 8, !dbg !1732
  %122 = bitcast i8* %overflow_arg_area137 to double*, !dbg !1732
  %overflow_arg_area.next138 = getelementptr i8, i8* %overflow_arg_area137, i32 8, !dbg !1732
  store i8* %overflow_arg_area.next138, i8** %overflow_arg_area_p136, align 8, !dbg !1732
  br label %vaarg.end139, !dbg !1732

vaarg.end139:                                     ; preds = %vaarg.in_mem135, %vaarg.in_reg133
  %vaarg.addr140 = phi double* [ %120, %vaarg.in_reg133 ], [ %122, %vaarg.in_mem135 ], !dbg !1732
  %123 = load double, double* %vaarg.addr140, align 8, !dbg !1732
  store double %123, double* %print_float129, align 8, !dbg !1731
  %124 = load i8*, i8** %ctx.addr, align 8, !dbg !1733
  %125 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1734
  %126 = load i64, i64* %pos.addr, align 8, !dbg !1735
  %127 = load double, double* %print_float129, align 8, !dbg !1736
  %128 = load i32, i32* %width, align 4, !dbg !1737
  %129 = load i32, i32* %precision, align 4, !dbg !1738
  %130 = load i32, i32* %flags, align 4, !dbg !1739
  %call141 = call i64 @cgc_printf_helper_float(i8* %124, i32 (i8*, i32, i64)* %125, i64 %126, double %127, i32 %128, i32 %129, i32 %130) #15, !dbg !1740
  store i64 %call141, i64* %pos.addr, align 8, !dbg !1741
  br label %sw.epilog, !dbg !1742

sw.bb142:                                         ; preds = %if.end72
  call void @llvm.dbg.declare(metadata i32** %signed_int_p, metadata !1743, metadata !DIExpression()), !dbg !1746
  %131 = load %struct.__va_list_tag*, %struct.__va_list_tag** %args.addr, align 8, !dbg !1747
  %gp_offset_p143 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %131, i32 0, i32 0, !dbg !1747
  %gp_offset144 = load i32, i32* %gp_offset_p143, align 8, !dbg !1747
  %fits_in_gp145 = icmp ule i32 %gp_offset144, 40, !dbg !1747
  br i1 %fits_in_gp145, label %vaarg.in_reg146, label %vaarg.in_mem148, !dbg !1747

vaarg.in_reg146:                                  ; preds = %sw.bb142
  %132 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %131, i32 0, i32 3, !dbg !1747
  %reg_save_area147 = load i8*, i8** %132, align 8, !dbg !1747
  %133 = getelementptr i8, i8* %reg_save_area147, i32 %gp_offset144, !dbg !1747
  %134 = bitcast i8* %133 to i32**, !dbg !1747
  %135 = add i32 %gp_offset144, 8, !dbg !1747
  store i32 %135, i32* %gp_offset_p143, align 8, !dbg !1747
  br label %vaarg.end152, !dbg !1747

vaarg.in_mem148:                                  ; preds = %sw.bb142
  %overflow_arg_area_p149 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %131, i32 0, i32 2, !dbg !1747
  %overflow_arg_area150 = load i8*, i8** %overflow_arg_area_p149, align 8, !dbg !1747
  %136 = bitcast i8* %overflow_arg_area150 to i32**, !dbg !1747
  %overflow_arg_area.next151 = getelementptr i8, i8* %overflow_arg_area150, i32 8, !dbg !1747
  store i8* %overflow_arg_area.next151, i8** %overflow_arg_area_p149, align 8, !dbg !1747
  br label %vaarg.end152, !dbg !1747

vaarg.end152:                                     ; preds = %vaarg.in_mem148, %vaarg.in_reg146
  %vaarg.addr153 = phi i32** [ %134, %vaarg.in_reg146 ], [ %136, %vaarg.in_mem148 ], !dbg !1747
  %137 = load i32*, i32** %vaarg.addr153, align 8, !dbg !1747
  store i32* %137, i32** %signed_int_p, align 8, !dbg !1746
  %138 = load i64, i64* %pos.addr, align 8, !dbg !1748
  %conv154 = trunc i64 %138 to i32, !dbg !1748
  %139 = load i32*, i32** %signed_int_p, align 8, !dbg !1749
  store i32 %conv154, i32* %139, align 4, !dbg !1750
  br label %sw.epilog, !dbg !1751

sw.bb155:                                         ; preds = %if.end72
  call void @llvm.dbg.declare(metadata i8* %char_arg, metadata !1752, metadata !DIExpression()), !dbg !1754
  %140 = load %struct.__va_list_tag*, %struct.__va_list_tag** %args.addr, align 8, !dbg !1755
  %gp_offset_p156 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %140, i32 0, i32 0, !dbg !1755
  %gp_offset157 = load i32, i32* %gp_offset_p156, align 8, !dbg !1755
  %fits_in_gp158 = icmp ule i32 %gp_offset157, 40, !dbg !1755
  br i1 %fits_in_gp158, label %vaarg.in_reg159, label %vaarg.in_mem161, !dbg !1755

vaarg.in_reg159:                                  ; preds = %sw.bb155
  %141 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %140, i32 0, i32 3, !dbg !1755
  %reg_save_area160 = load i8*, i8** %141, align 8, !dbg !1755
  %142 = getelementptr i8, i8* %reg_save_area160, i32 %gp_offset157, !dbg !1755
  %143 = bitcast i8* %142 to i32*, !dbg !1755
  %144 = add i32 %gp_offset157, 8, !dbg !1755
  store i32 %144, i32* %gp_offset_p156, align 8, !dbg !1755
  br label %vaarg.end165, !dbg !1755

vaarg.in_mem161:                                  ; preds = %sw.bb155
  %overflow_arg_area_p162 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %140, i32 0, i32 2, !dbg !1755
  %overflow_arg_area163 = load i8*, i8** %overflow_arg_area_p162, align 8, !dbg !1755
  %145 = bitcast i8* %overflow_arg_area163 to i32*, !dbg !1755
  %overflow_arg_area.next164 = getelementptr i8, i8* %overflow_arg_area163, i32 8, !dbg !1755
  store i8* %overflow_arg_area.next164, i8** %overflow_arg_area_p162, align 8, !dbg !1755
  br label %vaarg.end165, !dbg !1755

vaarg.end165:                                     ; preds = %vaarg.in_mem161, %vaarg.in_reg159
  %vaarg.addr166 = phi i32* [ %143, %vaarg.in_reg159 ], [ %145, %vaarg.in_mem161 ], !dbg !1755
  %146 = load i32, i32* %vaarg.addr166, align 4, !dbg !1755
  %conv167 = trunc i32 %146 to i8, !dbg !1756
  store i8 %conv167, i8* %char_arg, align 1, !dbg !1754
  call void @llvm.dbg.declare(metadata [2 x i8]* %temp_str, metadata !1757, metadata !DIExpression()), !dbg !1761
  %147 = load i8, i8* %char_arg, align 1, !dbg !1762
  %arrayidx = getelementptr inbounds [2 x i8], [2 x i8]* %temp_str, i64 0, i64 0, !dbg !1763
  store i8 %147, i8* %arrayidx, align 1, !dbg !1764
  %arrayidx168 = getelementptr inbounds [2 x i8], [2 x i8]* %temp_str, i64 0, i64 1, !dbg !1765
  store i8 0, i8* %arrayidx168, align 1, !dbg !1766
  %148 = load i8*, i8** %ctx.addr, align 8, !dbg !1767
  %149 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1768
  %150 = load i64, i64* %pos.addr, align 8, !dbg !1769
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %temp_str, i64 0, i64 0, !dbg !1770
  %151 = load i32, i32* %width, align 4, !dbg !1771
  %152 = load i32, i32* %flags, align 4, !dbg !1772
  %call169 = call i64 @cgc_printf_helper_string(i8* %148, i32 (i8*, i32, i64)* %149, i64 %150, i8* %arraydecay, i32 %151, i32 0, i32 %152) #15, !dbg !1773
  store i64 %call169, i64* %pos.addr, align 8, !dbg !1774
  br label %sw.epilog, !dbg !1775

sw.default:                                       ; preds = %if.end72
  br label %sw.epilog, !dbg !1776

sw.epilog:                                        ; preds = %sw.default, %vaarg.end165, %vaarg.end152, %vaarg.end139, %vaarg.end124, %vaarg.end114, %vaarg.end99, %vaarg.end85, %vaarg.end
  %153 = load i8*, i8** %format.addr, align 8, !dbg !1777
  %incdec.ptr170 = getelementptr inbounds i8, i8* %153, i32 1, !dbg !1777
  store i8* %incdec.ptr170, i8** %format.addr, align 8, !dbg !1777
  br label %if.end174, !dbg !1778

if.else:                                          ; preds = %while.body
  %154 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1779
  %155 = load i8*, i8** %ctx.addr, align 8, !dbg !1780
  %156 = load i8, i8* %curChar, align 1, !dbg !1781
  %conv171 = sext i8 %156 to i32, !dbg !1781
  %157 = load i64, i64* %pos.addr, align 8, !dbg !1782
  %call172 = call i32 %154(i8* %155, i32 %conv171, i64 %157) #15, !dbg !1783
  %conv173 = sext i32 %call172 to i64, !dbg !1783
  store i64 %conv173, i64* %pos.addr, align 8, !dbg !1784
  br label %if.end174

if.end174:                                        ; preds = %if.else, %sw.epilog
  br label %while.cond, !dbg !1535, !llvm.loop !1572

while.end175:                                     ; preds = %if.then70, %if.then56, %if.then45, %if.then23, %if.then8, %while.cond
  %158 = load i64, i64* %pos.addr, align 8, !dbg !1785
  %conv176 = trunc i64 %158 to i32, !dbg !1786
  ret i32 %conv176, !dbg !1787
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_atoi(i8* %pStr) #6 !dbg !1788 {
entry:
  %retval = alloca i32, align 4
  %pStr.addr = alloca i8*, align 8
  %value = alloca i32, align 4
  %negative = alloca i32, align 4
  store i8* %pStr, i8** %pStr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pStr.addr, metadata !1792, metadata !DIExpression()), !dbg !1793
  call void @llvm.dbg.declare(metadata i32* %value, metadata !1794, metadata !DIExpression()), !dbg !1795
  store i32 0, i32* %value, align 4, !dbg !1795
  call void @llvm.dbg.declare(metadata i32* %negative, metadata !1796, metadata !DIExpression()), !dbg !1797
  store i32 0, i32* %negative, align 4, !dbg !1797
  br label %while.cond, !dbg !1798

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %pStr.addr, align 8, !dbg !1799
  %1 = load i8, i8* %0, align 1, !dbg !1800
  %conv = sext i8 %1 to i32, !dbg !1800
  %call = call i32 @cgc_isspace(i32 %conv) #15, !dbg !1801
  %tobool = icmp ne i32 %call, 0, !dbg !1798
  br i1 %tobool, label %while.body, label %while.end, !dbg !1798

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %pStr.addr, align 8, !dbg !1802
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1, !dbg !1802
  store i8* %incdec.ptr, i8** %pStr.addr, align 8, !dbg !1802
  br label %while.cond, !dbg !1798, !llvm.loop !1803

while.end:                                        ; preds = %while.cond
  %3 = load i8*, i8** %pStr.addr, align 8, !dbg !1804
  %4 = load i8, i8* %3, align 1, !dbg !1806
  %conv1 = sext i8 %4 to i32, !dbg !1806
  %cmp = icmp eq i32 %conv1, 0, !dbg !1807
  br i1 %cmp, label %if.then, label %if.end, !dbg !1808

if.then:                                          ; preds = %while.end
  store i32 0, i32* %retval, align 4, !dbg !1809
  br label %return, !dbg !1809

if.end:                                           ; preds = %while.end
  %5 = load i8*, i8** %pStr.addr, align 8, !dbg !1810
  %6 = load i8, i8* %5, align 1, !dbg !1812
  %conv3 = sext i8 %6 to i32, !dbg !1812
  %cmp4 = icmp eq i32 %conv3, 45, !dbg !1813
  br i1 %cmp4, label %if.then6, label %if.end8, !dbg !1814

if.then6:                                         ; preds = %if.end
  store i32 1, i32* %negative, align 4, !dbg !1815
  %7 = load i8*, i8** %pStr.addr, align 8, !dbg !1817
  %incdec.ptr7 = getelementptr inbounds i8, i8* %7, i32 1, !dbg !1817
  store i8* %incdec.ptr7, i8** %pStr.addr, align 8, !dbg !1817
  br label %if.end8, !dbg !1818

if.end8:                                          ; preds = %if.then6, %if.end
  br label %while.cond9, !dbg !1819

while.cond9:                                      ; preds = %while.body13, %if.end8
  %8 = load i8*, i8** %pStr.addr, align 8, !dbg !1820
  %9 = load i8, i8* %8, align 1, !dbg !1821
  %conv10 = sext i8 %9 to i32, !dbg !1821
  %call11 = call i32 @cgc_isdigit(i32 %conv10) #15, !dbg !1822
  %tobool12 = icmp ne i32 %call11, 0, !dbg !1819
  br i1 %tobool12, label %while.body13, label %while.end16, !dbg !1819

while.body13:                                     ; preds = %while.cond9
  %10 = load i32, i32* %value, align 4, !dbg !1823
  %mul = mul nsw i32 %10, 10, !dbg !1824
  %11 = load i8*, i8** %pStr.addr, align 8, !dbg !1825
  %incdec.ptr14 = getelementptr inbounds i8, i8* %11, i32 1, !dbg !1825
  store i8* %incdec.ptr14, i8** %pStr.addr, align 8, !dbg !1825
  %12 = load i8, i8* %11, align 1, !dbg !1826
  %conv15 = sext i8 %12 to i32, !dbg !1826
  %sub = sub nsw i32 %conv15, 48, !dbg !1827
  %add = add nsw i32 %mul, %sub, !dbg !1828
  store i32 %add, i32* %value, align 4, !dbg !1829
  br label %while.cond9, !dbg !1819, !llvm.loop !1830

while.end16:                                      ; preds = %while.cond9
  %13 = load i32, i32* %negative, align 4, !dbg !1832
  %tobool17 = icmp ne i32 %13, 0, !dbg !1832
  br i1 %tobool17, label %if.then18, label %if.else, !dbg !1834

if.then18:                                        ; preds = %while.end16
  %14 = load i32, i32* %value, align 4, !dbg !1835
  %sub19 = sub nsw i32 0, %14, !dbg !1836
  store i32 %sub19, i32* %retval, align 4, !dbg !1837
  br label %return, !dbg !1837

if.else:                                          ; preds = %while.end16
  %15 = load i32, i32* %value, align 4, !dbg !1838
  store i32 %15, i32* %retval, align 4, !dbg !1839
  br label %return, !dbg !1839

return:                                           ; preds = %if.else, %if.then18, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !1840
  ret i32 %16, !dbg !1840
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @cgc_printf_helper_string(i8* %ctx, i32 (i8*, i32, i64)* %fpOut, i64 %pos, i8* %outStr, i32 %width, i32 %precision, i32 %flags) #6 !dbg !1841 {
entry:
  %retval = alloca i64, align 8
  %ctx.addr = alloca i8*, align 8
  %fpOut.addr = alloca i32 (i8*, i32, i64)*, align 8
  %pos.addr = alloca i64, align 8
  %outStr.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %precision.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %max_printlen = alloca i64, align 8
  %pad_length = alloca i64, align 8
  store i8* %ctx, i8** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ctx.addr, metadata !1844, metadata !DIExpression()), !dbg !1845
  store i32 (i8*, i32, i64)* %fpOut, i32 (i8*, i32, i64)** %fpOut.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i32, i64)** %fpOut.addr, metadata !1846, metadata !DIExpression()), !dbg !1847
  store i64 %pos, i64* %pos.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %pos.addr, metadata !1848, metadata !DIExpression()), !dbg !1849
  store i8* %outStr, i8** %outStr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %outStr.addr, metadata !1850, metadata !DIExpression()), !dbg !1851
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !1852, metadata !DIExpression()), !dbg !1853
  store i32 %precision, i32* %precision.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %precision.addr, metadata !1854, metadata !DIExpression()), !dbg !1855
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !1856, metadata !DIExpression()), !dbg !1857
  %0 = load i32, i32* %precision.addr, align 4, !dbg !1858
  %cmp = icmp eq i32 %0, 0, !dbg !1860
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !1861

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %width.addr, align 4, !dbg !1862
  %cmp1 = icmp eq i32 %1, 0, !dbg !1863
  br i1 %cmp1, label %if.then, label %if.end, !dbg !1864

if.then:                                          ; preds = %land.lhs.true
  br label %while.cond, !dbg !1865

while.cond:                                       ; preds = %while.body, %if.then
  %2 = load i8*, i8** %outStr.addr, align 8, !dbg !1867
  %3 = load i8, i8* %2, align 1, !dbg !1868
  %conv = sext i8 %3 to i32, !dbg !1868
  %cmp2 = icmp ne i32 %conv, 0, !dbg !1869
  br i1 %cmp2, label %while.body, label %while.end, !dbg !1865

while.body:                                       ; preds = %while.cond
  %4 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1870
  %5 = load i8*, i8** %ctx.addr, align 8, !dbg !1872
  %6 = load i8*, i8** %outStr.addr, align 8, !dbg !1873
  %7 = load i8, i8* %6, align 1, !dbg !1874
  %conv4 = sext i8 %7 to i32, !dbg !1874
  %8 = load i64, i64* %pos.addr, align 8, !dbg !1875
  %call = call i32 %4(i8* %5, i32 %conv4, i64 %8) #15, !dbg !1876
  %conv5 = sext i32 %call to i64, !dbg !1876
  store i64 %conv5, i64* %pos.addr, align 8, !dbg !1877
  %9 = load i8*, i8** %outStr.addr, align 8, !dbg !1878
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1, !dbg !1878
  store i8* %incdec.ptr, i8** %outStr.addr, align 8, !dbg !1878
  br label %while.cond, !dbg !1865, !llvm.loop !1879

while.end:                                        ; preds = %while.cond
  %10 = load i64, i64* %pos.addr, align 8, !dbg !1881
  store i64 %10, i64* %retval, align 8, !dbg !1882
  br label %return, !dbg !1882

if.end:                                           ; preds = %land.lhs.true, %entry
  call void @llvm.dbg.declare(metadata i64* %max_printlen, metadata !1883, metadata !DIExpression()), !dbg !1884
  %11 = load i8*, i8** %outStr.addr, align 8, !dbg !1885
  %call6 = call i64 @cgc_strlen(i8* %11) #15, !dbg !1886
  store i64 %call6, i64* %max_printlen, align 8, !dbg !1884
  call void @llvm.dbg.declare(metadata i64* %pad_length, metadata !1887, metadata !DIExpression()), !dbg !1888
  store i64 0, i64* %pad_length, align 8, !dbg !1888
  %12 = load i32, i32* %precision.addr, align 4, !dbg !1889
  %cmp7 = icmp sgt i32 %12, 0, !dbg !1891
  br i1 %cmp7, label %if.then9, label %if.end16, !dbg !1892

if.then9:                                         ; preds = %if.end
  %13 = load i64, i64* %max_printlen, align 8, !dbg !1893
  %14 = load i32, i32* %precision.addr, align 4, !dbg !1896
  %conv10 = sext i32 %14 to i64, !dbg !1896
  %cmp11 = icmp ugt i64 %13, %conv10, !dbg !1897
  br i1 %cmp11, label %if.then13, label %if.end15, !dbg !1898

if.then13:                                        ; preds = %if.then9
  %15 = load i32, i32* %precision.addr, align 4, !dbg !1899
  %conv14 = sext i32 %15 to i64, !dbg !1899
  store i64 %conv14, i64* %max_printlen, align 8, !dbg !1900
  br label %if.end15, !dbg !1901

if.end15:                                         ; preds = %if.then13, %if.then9
  br label %if.end16, !dbg !1902

if.end16:                                         ; preds = %if.end15, %if.end
  %16 = load i32, i32* %width.addr, align 4, !dbg !1903
  %cmp17 = icmp sgt i32 %16, 0, !dbg !1905
  br i1 %cmp17, label %if.then19, label %if.end26, !dbg !1906

if.then19:                                        ; preds = %if.end16
  %17 = load i64, i64* %max_printlen, align 8, !dbg !1907
  %18 = load i32, i32* %width.addr, align 4, !dbg !1910
  %conv20 = sext i32 %18 to i64, !dbg !1910
  %cmp21 = icmp ult i64 %17, %conv20, !dbg !1911
  br i1 %cmp21, label %if.then23, label %if.end25, !dbg !1912

if.then23:                                        ; preds = %if.then19
  %19 = load i32, i32* %width.addr, align 4, !dbg !1913
  %conv24 = sext i32 %19 to i64, !dbg !1913
  %20 = load i64, i64* %max_printlen, align 8, !dbg !1914
  %sub = sub i64 %conv24, %20, !dbg !1915
  store i64 %sub, i64* %pad_length, align 8, !dbg !1916
  br label %if.end25, !dbg !1917

if.end25:                                         ; preds = %if.then23, %if.then19
  br label %if.end26, !dbg !1918

if.end26:                                         ; preds = %if.end25, %if.end16
  %21 = load i32, i32* %flags.addr, align 4, !dbg !1919
  %and = and i32 %21, 1, !dbg !1921
  %tobool = icmp ne i32 %and, 0, !dbg !1921
  br i1 %tobool, label %if.end41, label %if.then27, !dbg !1922

if.then27:                                        ; preds = %if.end26
  br label %while.cond28, !dbg !1923

while.cond28:                                     ; preds = %if.end39, %if.then27
  %22 = load i64, i64* %pad_length, align 8, !dbg !1925
  %dec = add i64 %22, -1, !dbg !1925
  store i64 %dec, i64* %pad_length, align 8, !dbg !1925
  %cmp29 = icmp ugt i64 %22, 0, !dbg !1926
  br i1 %cmp29, label %while.body31, label %while.end40, !dbg !1923

while.body31:                                     ; preds = %while.cond28
  %23 = load i32, i32* %flags.addr, align 4, !dbg !1927
  %and32 = and i32 %23, 4, !dbg !1930
  %tobool33 = icmp ne i32 %and32, 0, !dbg !1930
  br i1 %tobool33, label %if.then34, label %if.else, !dbg !1931

if.then34:                                        ; preds = %while.body31
  %24 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1932
  %25 = load i8*, i8** %ctx.addr, align 8, !dbg !1933
  %26 = load i64, i64* %pos.addr, align 8, !dbg !1934
  %call35 = call i32 %24(i8* %25, i32 48, i64 %26) #15, !dbg !1935
  %conv36 = sext i32 %call35 to i64, !dbg !1935
  store i64 %conv36, i64* %pos.addr, align 8, !dbg !1936
  br label %if.end39, !dbg !1937

if.else:                                          ; preds = %while.body31
  %27 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1938
  %28 = load i8*, i8** %ctx.addr, align 8, !dbg !1939
  %29 = load i64, i64* %pos.addr, align 8, !dbg !1940
  %call37 = call i32 %27(i8* %28, i32 32, i64 %29) #15, !dbg !1941
  %conv38 = sext i32 %call37 to i64, !dbg !1941
  store i64 %conv38, i64* %pos.addr, align 8, !dbg !1942
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then34
  br label %while.cond28, !dbg !1923, !llvm.loop !1943

while.end40:                                      ; preds = %while.cond28
  br label %if.end41, !dbg !1945

if.end41:                                         ; preds = %while.end40, %if.end26
  br label %while.cond42, !dbg !1946

while.cond42:                                     ; preds = %while.body46, %if.end41
  %30 = load i64, i64* %max_printlen, align 8, !dbg !1947
  %dec43 = add i64 %30, -1, !dbg !1947
  store i64 %dec43, i64* %max_printlen, align 8, !dbg !1947
  %cmp44 = icmp ugt i64 %30, 0, !dbg !1948
  br i1 %cmp44, label %while.body46, label %while.end51, !dbg !1946

while.body46:                                     ; preds = %while.cond42
  %31 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1949
  %32 = load i8*, i8** %ctx.addr, align 8, !dbg !1950
  %33 = load i8*, i8** %outStr.addr, align 8, !dbg !1951
  %incdec.ptr47 = getelementptr inbounds i8, i8* %33, i32 1, !dbg !1951
  store i8* %incdec.ptr47, i8** %outStr.addr, align 8, !dbg !1951
  %34 = load i8, i8* %33, align 1, !dbg !1952
  %conv48 = sext i8 %34 to i32, !dbg !1952
  %35 = load i64, i64* %pos.addr, align 8, !dbg !1953
  %call49 = call i32 %31(i8* %32, i32 %conv48, i64 %35) #15, !dbg !1954
  %conv50 = sext i32 %call49 to i64, !dbg !1954
  store i64 %conv50, i64* %pos.addr, align 8, !dbg !1955
  br label %while.cond42, !dbg !1946, !llvm.loop !1956

while.end51:                                      ; preds = %while.cond42
  %36 = load i32, i32* %flags.addr, align 4, !dbg !1958
  %and52 = and i32 %36, 1, !dbg !1960
  %tobool53 = icmp ne i32 %and52, 0, !dbg !1960
  br i1 %tobool53, label %if.then54, label %if.end63, !dbg !1961

if.then54:                                        ; preds = %while.end51
  br label %while.cond55, !dbg !1962

while.cond55:                                     ; preds = %while.body59, %if.then54
  %37 = load i64, i64* %pad_length, align 8, !dbg !1964
  %dec56 = add i64 %37, -1, !dbg !1964
  store i64 %dec56, i64* %pad_length, align 8, !dbg !1964
  %cmp57 = icmp ugt i64 %37, 0, !dbg !1965
  br i1 %cmp57, label %while.body59, label %while.end62, !dbg !1962

while.body59:                                     ; preds = %while.cond55
  %38 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !1966
  %39 = load i8*, i8** %ctx.addr, align 8, !dbg !1967
  %40 = load i64, i64* %pos.addr, align 8, !dbg !1968
  %call60 = call i32 %38(i8* %39, i32 32, i64 %40) #15, !dbg !1969
  %conv61 = sext i32 %call60 to i64, !dbg !1969
  store i64 %conv61, i64* %pos.addr, align 8, !dbg !1970
  br label %while.cond55, !dbg !1962, !llvm.loop !1971

while.end62:                                      ; preds = %while.cond55
  br label %if.end63, !dbg !1973

if.end63:                                         ; preds = %while.end62, %while.end51
  %41 = load i64, i64* %pos.addr, align 8, !dbg !1974
  store i64 %41, i64* %retval, align 8, !dbg !1975
  br label %return, !dbg !1975

return:                                           ; preds = %if.end63, %while.end
  %42 = load i64, i64* %retval, align 8, !dbg !1976
  ret i64 %42, !dbg !1976
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @cgc_printf_helper_int(i8* %ctx, i32 (i8*, i32, i64)* %fpOut, i64 %pos, i32 %val, i32 %base, i32 %width, i32 %precision, i32 %flags) #6 !dbg !1977 {
entry:
  %ctx.addr = alloca i8*, align 8
  %fpOut.addr = alloca i32 (i8*, i32, i64)*, align 8
  %pos.addr = alloca i64, align 8
  %val.addr = alloca i32, align 4
  %base.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %precision.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %max_printlen = alloca i64, align 8
  %pad_length = alloca i64, align 8
  %is_negative = alloca i8, align 1
  %character_count = alloca i64, align 8
  %temp_str = alloca [32 x i8], align 16
  %i = alloca i64, align 8
  store i8* %ctx, i8** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ctx.addr, metadata !1980, metadata !DIExpression()), !dbg !1981
  store i32 (i8*, i32, i64)* %fpOut, i32 (i8*, i32, i64)** %fpOut.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i32, i64)** %fpOut.addr, metadata !1982, metadata !DIExpression()), !dbg !1983
  store i64 %pos, i64* %pos.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %pos.addr, metadata !1984, metadata !DIExpression()), !dbg !1985
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !1986, metadata !DIExpression()), !dbg !1987
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !1988, metadata !DIExpression()), !dbg !1989
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !1990, metadata !DIExpression()), !dbg !1991
  store i32 %precision, i32* %precision.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %precision.addr, metadata !1992, metadata !DIExpression()), !dbg !1993
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !1994, metadata !DIExpression()), !dbg !1995
  call void @llvm.dbg.declare(metadata i64* %max_printlen, metadata !1996, metadata !DIExpression()), !dbg !1997
  store i64 0, i64* %max_printlen, align 8, !dbg !1997
  call void @llvm.dbg.declare(metadata i64* %pad_length, metadata !1998, metadata !DIExpression()), !dbg !1999
  store i64 0, i64* %pad_length, align 8, !dbg !1999
  call void @llvm.dbg.declare(metadata i8* %is_negative, metadata !2000, metadata !DIExpression()), !dbg !2003
  store i8 0, i8* %is_negative, align 1, !dbg !2003
  call void @llvm.dbg.declare(metadata i64* %character_count, metadata !2004, metadata !DIExpression()), !dbg !2005
  store i64 0, i64* %character_count, align 8, !dbg !2005
  call void @llvm.dbg.declare(metadata [32 x i8]* %temp_str, metadata !2006, metadata !DIExpression()), !dbg !2008
  %0 = load i32, i32* %base.addr, align 4, !dbg !2009
  %cmp = icmp eq i32 %0, 10, !dbg !2011
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !2012

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %val.addr, align 4, !dbg !2013
  %cmp1 = icmp slt i32 %1, 0, !dbg !2014
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2015

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %is_negative, align 1, !dbg !2016
  %2 = load i32, i32* %val.addr, align 4, !dbg !2018
  %sub = sub nsw i32 0, %2, !dbg !2019
  store i32 %sub, i32* %val.addr, align 4, !dbg !2020
  %3 = load i64, i64* %max_printlen, align 8, !dbg !2021
  %inc = add i64 %3, 1, !dbg !2021
  store i64 %inc, i64* %max_printlen, align 8, !dbg !2021
  br label %if.end, !dbg !2022

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load i32, i32* %val.addr, align 4, !dbg !2023
  %5 = load i32, i32* %base.addr, align 4, !dbg !2024
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %temp_str, i64 0, i64 0, !dbg !2025
  %6 = load i32, i32* %flags.addr, align 4, !dbg !2026
  %call = call i64 @cgc_printf_int_to_string(i32 %4, i32 %5, i8* %arraydecay, i32 %6) #15, !dbg !2027
  store i64 %call, i64* %character_count, align 8, !dbg !2028
  %7 = load i64, i64* %character_count, align 8, !dbg !2029
  %8 = load i64, i64* %max_printlen, align 8, !dbg !2030
  %add = add i64 %8, %7, !dbg !2030
  store i64 %add, i64* %max_printlen, align 8, !dbg !2030
  %9 = load i32, i32* %width.addr, align 4, !dbg !2031
  %cmp2 = icmp sgt i32 %9, 0, !dbg !2033
  br i1 %cmp2, label %if.then3, label %if.end10, !dbg !2034

if.then3:                                         ; preds = %if.end
  %10 = load i64, i64* %max_printlen, align 8, !dbg !2035
  %11 = load i32, i32* %width.addr, align 4, !dbg !2038
  %conv = sext i32 %11 to i64, !dbg !2038
  %cmp4 = icmp ult i64 %10, %conv, !dbg !2039
  br i1 %cmp4, label %if.then6, label %if.end9, !dbg !2040

if.then6:                                         ; preds = %if.then3
  %12 = load i32, i32* %width.addr, align 4, !dbg !2041
  %conv7 = sext i32 %12 to i64, !dbg !2041
  %13 = load i64, i64* %max_printlen, align 8, !dbg !2042
  %sub8 = sub i64 %conv7, %13, !dbg !2043
  store i64 %sub8, i64* %pad_length, align 8, !dbg !2044
  br label %if.end9, !dbg !2045

if.end9:                                          ; preds = %if.then6, %if.then3
  br label %if.end10, !dbg !2046

if.end10:                                         ; preds = %if.end9, %if.end
  %14 = load i32, i32* %precision.addr, align 4, !dbg !2047
  %cmp11 = icmp sgt i32 %14, 0, !dbg !2049
  br i1 %cmp11, label %if.then13, label %if.end21, !dbg !2050

if.then13:                                        ; preds = %if.end10
  %15 = load i32, i32* %flags.addr, align 4, !dbg !2051
  %or = or i32 %15, 4, !dbg !2051
  store i32 %or, i32* %flags.addr, align 4, !dbg !2051
  %16 = load i64, i64* %character_count, align 8, !dbg !2053
  %17 = load i32, i32* %precision.addr, align 4, !dbg !2055
  %conv14 = sext i32 %17 to i64, !dbg !2055
  %cmp15 = icmp ult i64 %16, %conv14, !dbg !2056
  br i1 %cmp15, label %if.then17, label %if.end20, !dbg !2057

if.then17:                                        ; preds = %if.then13
  %18 = load i32, i32* %precision.addr, align 4, !dbg !2058
  %conv18 = sext i32 %18 to i64, !dbg !2058
  %19 = load i64, i64* %character_count, align 8, !dbg !2059
  %sub19 = sub i64 %conv18, %19, !dbg !2060
  store i64 %sub19, i64* %pad_length, align 8, !dbg !2061
  br label %if.end20, !dbg !2062

if.end20:                                         ; preds = %if.then17, %if.then13
  br label %if.end21, !dbg !2063

if.end21:                                         ; preds = %if.end20, %if.end10
  %20 = load i32, i32* %flags.addr, align 4, !dbg !2064
  %and = and i32 %20, 1, !dbg !2066
  %tobool = icmp ne i32 %and, 0, !dbg !2066
  br i1 %tobool, label %if.end45, label %if.then22, !dbg !2067

if.then22:                                        ; preds = %if.end21
  %21 = load i8, i8* %is_negative, align 1, !dbg !2068
  %conv23 = sext i8 %21 to i32, !dbg !2068
  %tobool24 = icmp ne i32 %conv23, 0, !dbg !2068
  br i1 %tobool24, label %land.lhs.true25, label %if.end34, !dbg !2071

land.lhs.true25:                                  ; preds = %if.then22
  %22 = load i64, i64* %pad_length, align 8, !dbg !2072
  %cmp26 = icmp ugt i64 %22, 0, !dbg !2073
  br i1 %cmp26, label %land.lhs.true28, label %if.end34, !dbg !2074

land.lhs.true28:                                  ; preds = %land.lhs.true25
  %23 = load i32, i32* %flags.addr, align 4, !dbg !2075
  %and29 = and i32 %23, 4, !dbg !2076
  %tobool30 = icmp ne i32 %and29, 0, !dbg !2076
  br i1 %tobool30, label %if.then31, label %if.end34, !dbg !2077

if.then31:                                        ; preds = %land.lhs.true28
  %24 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !2078
  %25 = load i8*, i8** %ctx.addr, align 8, !dbg !2080
  %26 = load i64, i64* %pos.addr, align 8, !dbg !2081
  %call32 = call i32 %24(i8* %25, i32 45, i64 %26) #15, !dbg !2082
  %conv33 = sext i32 %call32 to i64, !dbg !2082
  store i64 %conv33, i64* %pos.addr, align 8, !dbg !2083
  store i8 0, i8* %is_negative, align 1, !dbg !2084
  br label %if.end34, !dbg !2085

if.end34:                                         ; preds = %if.then31, %land.lhs.true28, %land.lhs.true25, %if.then22
  br label %while.cond, !dbg !2086

while.cond:                                       ; preds = %if.end44, %if.end34
  %27 = load i64, i64* %pad_length, align 8, !dbg !2087
  %dec = add i64 %27, -1, !dbg !2087
  store i64 %dec, i64* %pad_length, align 8, !dbg !2087
  %cmp35 = icmp ugt i64 %27, 0, !dbg !2088
  br i1 %cmp35, label %while.body, label %while.end, !dbg !2086

while.body:                                       ; preds = %while.cond
  %28 = load i32, i32* %flags.addr, align 4, !dbg !2089
  %and37 = and i32 %28, 4, !dbg !2092
  %tobool38 = icmp ne i32 %and37, 0, !dbg !2092
  br i1 %tobool38, label %if.then39, label %if.else, !dbg !2093

if.then39:                                        ; preds = %while.body
  %29 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !2094
  %30 = load i8*, i8** %ctx.addr, align 8, !dbg !2095
  %31 = load i64, i64* %pos.addr, align 8, !dbg !2096
  %call40 = call i32 %29(i8* %30, i32 48, i64 %31) #15, !dbg !2097
  %conv41 = sext i32 %call40 to i64, !dbg !2097
  store i64 %conv41, i64* %pos.addr, align 8, !dbg !2098
  br label %if.end44, !dbg !2099

if.else:                                          ; preds = %while.body
  %32 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !2100
  %33 = load i8*, i8** %ctx.addr, align 8, !dbg !2101
  %34 = load i64, i64* %pos.addr, align 8, !dbg !2102
  %call42 = call i32 %32(i8* %33, i32 32, i64 %34) #15, !dbg !2103
  %conv43 = sext i32 %call42 to i64, !dbg !2103
  store i64 %conv43, i64* %pos.addr, align 8, !dbg !2104
  br label %if.end44

if.end44:                                         ; preds = %if.else, %if.then39
  br label %while.cond, !dbg !2086, !llvm.loop !2105

while.end:                                        ; preds = %while.cond
  br label %if.end45, !dbg !2107

if.end45:                                         ; preds = %while.end, %if.end21
  %35 = load i8, i8* %is_negative, align 1, !dbg !2108
  %tobool46 = icmp ne i8 %35, 0, !dbg !2108
  br i1 %tobool46, label %if.then47, label %if.end50, !dbg !2110

if.then47:                                        ; preds = %if.end45
  %36 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !2111
  %37 = load i8*, i8** %ctx.addr, align 8, !dbg !2113
  %38 = load i64, i64* %pos.addr, align 8, !dbg !2114
  %call48 = call i32 %36(i8* %37, i32 45, i64 %38) #15, !dbg !2115
  %conv49 = sext i32 %call48 to i64, !dbg !2115
  store i64 %conv49, i64* %pos.addr, align 8, !dbg !2116
  store i8 0, i8* %is_negative, align 1, !dbg !2117
  br label %if.end50, !dbg !2118

if.end50:                                         ; preds = %if.then47, %if.end45
  call void @llvm.dbg.declare(metadata i64* %i, metadata !2119, metadata !DIExpression()), !dbg !2120
  %39 = load i64, i64* %character_count, align 8, !dbg !2121
  store i64 %39, i64* %i, align 8, !dbg !2120
  br label %while.cond51, !dbg !2122

while.cond51:                                     ; preds = %while.body54, %if.end50
  %40 = load i64, i64* %i, align 8, !dbg !2123
  %cmp52 = icmp ugt i64 %40, 0, !dbg !2124
  br i1 %cmp52, label %while.body54, label %while.end60, !dbg !2122

while.body54:                                     ; preds = %while.cond51
  %41 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !2125
  %42 = load i8*, i8** %ctx.addr, align 8, !dbg !2127
  %43 = load i64, i64* %i, align 8, !dbg !2128
  %sub55 = sub i64 %43, 1, !dbg !2129
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %temp_str, i64 0, i64 %sub55, !dbg !2130
  %44 = load i8, i8* %arrayidx, align 1, !dbg !2130
  %conv56 = sext i8 %44 to i32, !dbg !2130
  %45 = load i64, i64* %pos.addr, align 8, !dbg !2131
  %call57 = call i32 %41(i8* %42, i32 %conv56, i64 %45) #15, !dbg !2132
  %conv58 = sext i32 %call57 to i64, !dbg !2132
  store i64 %conv58, i64* %pos.addr, align 8, !dbg !2133
  %46 = load i64, i64* %i, align 8, !dbg !2134
  %dec59 = add i64 %46, -1, !dbg !2134
  store i64 %dec59, i64* %i, align 8, !dbg !2134
  br label %while.cond51, !dbg !2122, !llvm.loop !2135

while.end60:                                      ; preds = %while.cond51
  %47 = load i32, i32* %flags.addr, align 4, !dbg !2137
  %and61 = and i32 %47, 1, !dbg !2139
  %tobool62 = icmp ne i32 %and61, 0, !dbg !2139
  br i1 %tobool62, label %if.then63, label %if.end72, !dbg !2140

if.then63:                                        ; preds = %while.end60
  br label %while.cond64, !dbg !2141

while.cond64:                                     ; preds = %while.body68, %if.then63
  %48 = load i64, i64* %pad_length, align 8, !dbg !2143
  %dec65 = add i64 %48, -1, !dbg !2143
  store i64 %dec65, i64* %pad_length, align 8, !dbg !2143
  %cmp66 = icmp ugt i64 %48, 0, !dbg !2144
  br i1 %cmp66, label %while.body68, label %while.end71, !dbg !2141

while.body68:                                     ; preds = %while.cond64
  %49 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !2145
  %50 = load i8*, i8** %ctx.addr, align 8, !dbg !2146
  %51 = load i64, i64* %pos.addr, align 8, !dbg !2147
  %call69 = call i32 %49(i8* %50, i32 32, i64 %51) #15, !dbg !2148
  %conv70 = sext i32 %call69 to i64, !dbg !2148
  store i64 %conv70, i64* %pos.addr, align 8, !dbg !2149
  br label %while.cond64, !dbg !2141, !llvm.loop !2150

while.end71:                                      ; preds = %while.cond64
  br label %if.end72, !dbg !2152

if.end72:                                         ; preds = %while.end71, %while.end60
  %52 = load i64, i64* %pos.addr, align 8, !dbg !2153
  ret i64 %52, !dbg !2154
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @cgc_printf_helper_float(i8* %ctx, i32 (i8*, i32, i64)* %fpOut, i64 %pos, double %val, i32 %width, i32 %precision, i32 %flags) #6 !dbg !2155 {
entry:
  %ctx.addr = alloca i8*, align 8
  %fpOut.addr = alloca i32 (i8*, i32, i64)*, align 8
  %pos.addr = alloca i64, align 8
  %val.addr = alloca double, align 8
  %width.addr = alloca i32, align 4
  %precision.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %max_printlen = alloca i64, align 8
  %pad_length = alloca i64, align 8
  %is_negative = alloca i8, align 1
  %character_count = alloca i64, align 8
  %temp_str = alloca [32 x i8], align 16
  %i = alloca i64, align 8
  store i8* %ctx, i8** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ctx.addr, metadata !2158, metadata !DIExpression()), !dbg !2159
  store i32 (i8*, i32, i64)* %fpOut, i32 (i8*, i32, i64)** %fpOut.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i32, i64)** %fpOut.addr, metadata !2160, metadata !DIExpression()), !dbg !2161
  store i64 %pos, i64* %pos.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %pos.addr, metadata !2162, metadata !DIExpression()), !dbg !2163
  store double %val, double* %val.addr, align 8
  call void @llvm.dbg.declare(metadata double* %val.addr, metadata !2164, metadata !DIExpression()), !dbg !2165
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !2166, metadata !DIExpression()), !dbg !2167
  store i32 %precision, i32* %precision.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %precision.addr, metadata !2168, metadata !DIExpression()), !dbg !2169
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2170, metadata !DIExpression()), !dbg !2171
  call void @llvm.dbg.declare(metadata i64* %max_printlen, metadata !2172, metadata !DIExpression()), !dbg !2173
  store i64 0, i64* %max_printlen, align 8, !dbg !2173
  call void @llvm.dbg.declare(metadata i64* %pad_length, metadata !2174, metadata !DIExpression()), !dbg !2175
  store i64 0, i64* %pad_length, align 8, !dbg !2175
  call void @llvm.dbg.declare(metadata i8* %is_negative, metadata !2176, metadata !DIExpression()), !dbg !2177
  store i8 0, i8* %is_negative, align 1, !dbg !2177
  call void @llvm.dbg.declare(metadata i64* %character_count, metadata !2178, metadata !DIExpression()), !dbg !2179
  store i64 0, i64* %character_count, align 8, !dbg !2179
  call void @llvm.dbg.declare(metadata [32 x i8]* %temp_str, metadata !2180, metadata !DIExpression()), !dbg !2181
  %0 = load double, double* %val.addr, align 8, !dbg !2182
  %cmp = fcmp olt double %0, 0.000000e+00, !dbg !2184
  br i1 %cmp, label %if.then, label %if.end, !dbg !2185

if.then:                                          ; preds = %entry
  %1 = load double, double* %val.addr, align 8, !dbg !2186
  %sub = fsub double -0.000000e+00, %1, !dbg !2188
  store double %sub, double* %val.addr, align 8, !dbg !2189
  store i8 1, i8* %is_negative, align 1, !dbg !2190
  %2 = load i64, i64* %max_printlen, align 8, !dbg !2191
  %inc = add i64 %2, 1, !dbg !2191
  store i64 %inc, i64* %max_printlen, align 8, !dbg !2191
  br label %if.end, !dbg !2192

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %precision.addr, align 4, !dbg !2193
  %cmp1 = icmp eq i32 %3, 0, !dbg !2195
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !2196

if.then2:                                         ; preds = %if.end
  %4 = load double, double* %val.addr, align 8, !dbg !2197
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %temp_str, i64 0, i64 0, !dbg !2198
  %5 = load i32, i32* %flags.addr, align 4, !dbg !2199
  %call = call i64 @cgc_printf_float_to_string(double %4, i8 zeroext 6, i8* %arraydecay, i32 %5) #15, !dbg !2200
  store i64 %call, i64* %character_count, align 8, !dbg !2201
  br label %if.end5, !dbg !2202

if.else:                                          ; preds = %if.end
  %6 = load double, double* %val.addr, align 8, !dbg !2203
  %7 = load i32, i32* %precision.addr, align 4, !dbg !2204
  %conv = trunc i32 %7 to i8, !dbg !2204
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %temp_str, i64 0, i64 0, !dbg !2205
  %8 = load i32, i32* %flags.addr, align 4, !dbg !2206
  %call4 = call i64 @cgc_printf_float_to_string(double %6, i8 zeroext %conv, i8* %arraydecay3, i32 %8) #15, !dbg !2207
  store i64 %call4, i64* %character_count, align 8, !dbg !2208
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then2
  %9 = load i64, i64* %character_count, align 8, !dbg !2209
  %10 = load i64, i64* %max_printlen, align 8, !dbg !2210
  %add = add i64 %10, %9, !dbg !2210
  store i64 %add, i64* %max_printlen, align 8, !dbg !2210
  %11 = load i32, i32* %width.addr, align 4, !dbg !2211
  %cmp6 = icmp sgt i32 %11, 0, !dbg !2213
  br i1 %cmp6, label %if.then8, label %if.end16, !dbg !2214

if.then8:                                         ; preds = %if.end5
  %12 = load i64, i64* %max_printlen, align 8, !dbg !2215
  %13 = load i32, i32* %width.addr, align 4, !dbg !2218
  %conv9 = sext i32 %13 to i64, !dbg !2218
  %cmp10 = icmp ult i64 %12, %conv9, !dbg !2219
  br i1 %cmp10, label %if.then12, label %if.end15, !dbg !2220

if.then12:                                        ; preds = %if.then8
  %14 = load i32, i32* %width.addr, align 4, !dbg !2221
  %conv13 = sext i32 %14 to i64, !dbg !2221
  %15 = load i64, i64* %max_printlen, align 8, !dbg !2222
  %sub14 = sub i64 %conv13, %15, !dbg !2223
  store i64 %sub14, i64* %pad_length, align 8, !dbg !2224
  br label %if.end15, !dbg !2225

if.end15:                                         ; preds = %if.then12, %if.then8
  br label %if.end16, !dbg !2226

if.end16:                                         ; preds = %if.end15, %if.end5
  %16 = load i32, i32* %flags.addr, align 4, !dbg !2227
  %and = and i32 %16, 1, !dbg !2229
  %tobool = icmp ne i32 %and, 0, !dbg !2229
  br i1 %tobool, label %if.end40, label %if.then17, !dbg !2230

if.then17:                                        ; preds = %if.end16
  %17 = load i8, i8* %is_negative, align 1, !dbg !2231
  %conv18 = sext i8 %17 to i32, !dbg !2231
  %tobool19 = icmp ne i32 %conv18, 0, !dbg !2231
  br i1 %tobool19, label %land.lhs.true, label %if.end28, !dbg !2234

land.lhs.true:                                    ; preds = %if.then17
  %18 = load i64, i64* %pad_length, align 8, !dbg !2235
  %cmp20 = icmp ugt i64 %18, 0, !dbg !2236
  br i1 %cmp20, label %land.lhs.true22, label %if.end28, !dbg !2237

land.lhs.true22:                                  ; preds = %land.lhs.true
  %19 = load i32, i32* %flags.addr, align 4, !dbg !2238
  %and23 = and i32 %19, 4, !dbg !2239
  %tobool24 = icmp ne i32 %and23, 0, !dbg !2239
  br i1 %tobool24, label %if.then25, label %if.end28, !dbg !2240

if.then25:                                        ; preds = %land.lhs.true22
  %20 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !2241
  %21 = load i8*, i8** %ctx.addr, align 8, !dbg !2243
  %22 = load i64, i64* %pos.addr, align 8, !dbg !2244
  %call26 = call i32 %20(i8* %21, i32 45, i64 %22) #15, !dbg !2245
  %conv27 = sext i32 %call26 to i64, !dbg !2245
  store i64 %conv27, i64* %pos.addr, align 8, !dbg !2246
  store i8 0, i8* %is_negative, align 1, !dbg !2247
  br label %if.end28, !dbg !2248

if.end28:                                         ; preds = %if.then25, %land.lhs.true22, %land.lhs.true, %if.then17
  br label %while.cond, !dbg !2249

while.cond:                                       ; preds = %if.end39, %if.end28
  %23 = load i64, i64* %pad_length, align 8, !dbg !2250
  %dec = add i64 %23, -1, !dbg !2250
  store i64 %dec, i64* %pad_length, align 8, !dbg !2250
  %cmp29 = icmp ugt i64 %23, 0, !dbg !2251
  br i1 %cmp29, label %while.body, label %while.end, !dbg !2249

while.body:                                       ; preds = %while.cond
  %24 = load i32, i32* %flags.addr, align 4, !dbg !2252
  %and31 = and i32 %24, 4, !dbg !2255
  %tobool32 = icmp ne i32 %and31, 0, !dbg !2255
  br i1 %tobool32, label %if.then33, label %if.else36, !dbg !2256

if.then33:                                        ; preds = %while.body
  %25 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !2257
  %26 = load i8*, i8** %ctx.addr, align 8, !dbg !2258
  %27 = load i64, i64* %pos.addr, align 8, !dbg !2259
  %call34 = call i32 %25(i8* %26, i32 48, i64 %27) #15, !dbg !2260
  %conv35 = sext i32 %call34 to i64, !dbg !2260
  store i64 %conv35, i64* %pos.addr, align 8, !dbg !2261
  br label %if.end39, !dbg !2262

if.else36:                                        ; preds = %while.body
  %28 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !2263
  %29 = load i8*, i8** %ctx.addr, align 8, !dbg !2264
  %30 = load i64, i64* %pos.addr, align 8, !dbg !2265
  %call37 = call i32 %28(i8* %29, i32 32, i64 %30) #15, !dbg !2266
  %conv38 = sext i32 %call37 to i64, !dbg !2266
  store i64 %conv38, i64* %pos.addr, align 8, !dbg !2267
  br label %if.end39

if.end39:                                         ; preds = %if.else36, %if.then33
  br label %while.cond, !dbg !2249, !llvm.loop !2268

while.end:                                        ; preds = %while.cond
  br label %if.end40, !dbg !2270

if.end40:                                         ; preds = %while.end, %if.end16
  %31 = load i8, i8* %is_negative, align 1, !dbg !2271
  %tobool41 = icmp ne i8 %31, 0, !dbg !2271
  br i1 %tobool41, label %if.then42, label %if.end45, !dbg !2273

if.then42:                                        ; preds = %if.end40
  %32 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !2274
  %33 = load i8*, i8** %ctx.addr, align 8, !dbg !2276
  %34 = load i64, i64* %pos.addr, align 8, !dbg !2277
  %call43 = call i32 %32(i8* %33, i32 45, i64 %34) #15, !dbg !2278
  %conv44 = sext i32 %call43 to i64, !dbg !2278
  store i64 %conv44, i64* %pos.addr, align 8, !dbg !2279
  store i8 0, i8* %is_negative, align 1, !dbg !2280
  br label %if.end45, !dbg !2281

if.end45:                                         ; preds = %if.then42, %if.end40
  call void @llvm.dbg.declare(metadata i64* %i, metadata !2282, metadata !DIExpression()), !dbg !2284
  store i64 0, i64* %i, align 8, !dbg !2284
  br label %for.cond, !dbg !2285

for.cond:                                         ; preds = %for.inc, %if.end45
  %35 = load i64, i64* %i, align 8, !dbg !2286
  %36 = load i64, i64* %character_count, align 8, !dbg !2288
  %cmp46 = icmp ult i64 %35, %36, !dbg !2289
  br i1 %cmp46, label %for.body, label %for.end, !dbg !2290

for.body:                                         ; preds = %for.cond
  %37 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !2291
  %38 = load i8*, i8** %ctx.addr, align 8, !dbg !2292
  %39 = load i64, i64* %i, align 8, !dbg !2293
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %temp_str, i64 0, i64 %39, !dbg !2294
  %40 = load i8, i8* %arrayidx, align 1, !dbg !2294
  %conv48 = sext i8 %40 to i32, !dbg !2294
  %41 = load i64, i64* %pos.addr, align 8, !dbg !2295
  %call49 = call i32 %37(i8* %38, i32 %conv48, i64 %41) #15, !dbg !2296
  %conv50 = sext i32 %call49 to i64, !dbg !2296
  store i64 %conv50, i64* %pos.addr, align 8, !dbg !2297
  br label %for.inc, !dbg !2298

for.inc:                                          ; preds = %for.body
  %42 = load i64, i64* %i, align 8, !dbg !2299
  %inc51 = add i64 %42, 1, !dbg !2299
  store i64 %inc51, i64* %i, align 8, !dbg !2299
  br label %for.cond, !dbg !2300, !llvm.loop !2301

for.end:                                          ; preds = %for.cond
  %43 = load i32, i32* %flags.addr, align 4, !dbg !2303
  %and52 = and i32 %43, 1, !dbg !2305
  %tobool53 = icmp ne i32 %and52, 0, !dbg !2305
  br i1 %tobool53, label %if.then54, label %if.end63, !dbg !2306

if.then54:                                        ; preds = %for.end
  br label %while.cond55, !dbg !2307

while.cond55:                                     ; preds = %while.body59, %if.then54
  %44 = load i64, i64* %pad_length, align 8, !dbg !2309
  %dec56 = add i64 %44, -1, !dbg !2309
  store i64 %dec56, i64* %pad_length, align 8, !dbg !2309
  %cmp57 = icmp ugt i64 %44, 0, !dbg !2310
  br i1 %cmp57, label %while.body59, label %while.end62, !dbg !2307

while.body59:                                     ; preds = %while.cond55
  %45 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %fpOut.addr, align 8, !dbg !2311
  %46 = load i8*, i8** %ctx.addr, align 8, !dbg !2312
  %47 = load i64, i64* %pos.addr, align 8, !dbg !2313
  %call60 = call i32 %45(i8* %46, i32 32, i64 %47) #15, !dbg !2314
  %conv61 = sext i32 %call60 to i64, !dbg !2314
  store i64 %conv61, i64* %pos.addr, align 8, !dbg !2315
  br label %while.cond55, !dbg !2307, !llvm.loop !2316

while.end62:                                      ; preds = %while.cond55
  br label %if.end63, !dbg !2318

if.end63:                                         ; preds = %while.end62, %for.end
  %48 = load i64, i64* %pos.addr, align 8, !dbg !2319
  ret i64 %48, !dbg !2320
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @cgc_printf_float_to_string(double %val, i8 zeroext %fraction_precision_digit_count, i8* %str, i32 %flags) #6 !dbg !2321 {
entry:
  %retval = alloca i64, align 8
  %val.addr = alloca double, align 8
  %fraction_precision_digit_count.addr = alloca i8, align 1
  %str.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %pos = alloca i64, align 8
  %n = alloca i32, align 4
  %display_precision = alloca double, align 8
  %i = alloca i8, align 1
  %magnitude = alloca i16, align 2
  %new_round_precision = alloca double, align 8
  %round_position = alloca i16, align 2
  %exponent_value = alloca i16, align 2
  %fraction_count = alloca i16, align 2
  %is_fraction_digits = alloca i8, align 1
  %temp_zero_count = alloca i16, align 2
  %divider = alloca double, align 8
  %digit = alloca i8, align 1
  %i237 = alloca i8, align 1
  %exponent_digit_count = alloca i8, align 1
  %exponent_magnitude = alloca i16, align 2
  %i252 = alloca i8, align 1
  %exponent_divider = alloca i16, align 2
  %exponent_digit = alloca i8, align 1
  store double %val, double* %val.addr, align 8
  call void @llvm.dbg.declare(metadata double* %val.addr, metadata !2324, metadata !DIExpression()), !dbg !2325
  store i8 %fraction_precision_digit_count, i8* %fraction_precision_digit_count.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fraction_precision_digit_count.addr, metadata !2326, metadata !DIExpression()), !dbg !2327
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !2328, metadata !DIExpression()), !dbg !2329
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2330, metadata !DIExpression()), !dbg !2331
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !2332, metadata !DIExpression()), !dbg !2333
  store i64 0, i64* %pos, align 8, !dbg !2333
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2334, metadata !DIExpression()), !dbg !2335
  call void @llvm.dbg.declare(metadata double* %display_precision, metadata !2336, metadata !DIExpression()), !dbg !2337
  %0 = load i8, i8* %fraction_precision_digit_count.addr, align 1, !dbg !2338
  %conv = zext i8 %0 to i32, !dbg !2338
  %sub = sub nsw i32 0, %conv, !dbg !2339
  %conv1 = sitofp i32 %sub to double, !dbg !2339
  %call = call double @cgc_pow(double 1.000000e+01, double %conv1) #15, !dbg !2340
  store double %call, double* %display_precision, align 8, !dbg !2337
  %1 = load double, double* %val.addr, align 8, !dbg !2341
  %cmp = fcmp oeq double %1, 0.000000e+00, !dbg !2343
  br i1 %cmp, label %if.then, label %if.else, !dbg !2344

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %str.addr, align 8, !dbg !2345
  %3 = load i64, i64* %pos, align 8, !dbg !2347
  %inc = add i64 %3, 1, !dbg !2347
  store i64 %inc, i64* %pos, align 8, !dbg !2347
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %3, !dbg !2345
  store i8 48, i8* %arrayidx, align 1, !dbg !2348
  %4 = load i8*, i8** %str.addr, align 8, !dbg !2349
  %5 = load i64, i64* %pos, align 8, !dbg !2350
  %inc3 = add i64 %5, 1, !dbg !2350
  store i64 %inc3, i64* %pos, align 8, !dbg !2350
  %arrayidx4 = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !2349
  store i8 46, i8* %arrayidx4, align 1, !dbg !2351
  call void @llvm.dbg.declare(metadata i8* %i, metadata !2352, metadata !DIExpression()), !dbg !2354
  store i8 0, i8* %i, align 1, !dbg !2354
  br label %for.cond, !dbg !2355

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load i8, i8* %i, align 1, !dbg !2356
  %conv5 = zext i8 %6 to i32, !dbg !2356
  %7 = load i8, i8* %fraction_precision_digit_count.addr, align 1, !dbg !2358
  %conv6 = zext i8 %7 to i32, !dbg !2358
  %cmp7 = icmp slt i32 %conv5, %conv6, !dbg !2359
  br i1 %cmp7, label %for.body, label %for.end, !dbg !2360

for.body:                                         ; preds = %for.cond
  %8 = load i8*, i8** %str.addr, align 8, !dbg !2361
  %9 = load i64, i64* %pos, align 8, !dbg !2362
  %inc9 = add i64 %9, 1, !dbg !2362
  store i64 %inc9, i64* %pos, align 8, !dbg !2362
  %arrayidx10 = getelementptr inbounds i8, i8* %8, i64 %9, !dbg !2361
  store i8 48, i8* %arrayidx10, align 1, !dbg !2363
  br label %for.inc, !dbg !2361

for.inc:                                          ; preds = %for.body
  %10 = load i8, i8* %i, align 1, !dbg !2364
  %inc11 = add i8 %10, 1, !dbg !2364
  store i8 %inc11, i8* %i, align 1, !dbg !2364
  br label %for.cond, !dbg !2365, !llvm.loop !2366

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %flags.addr, align 4, !dbg !2368
  %and = and i32 %11, 16, !dbg !2370
  %tobool = icmp ne i32 %and, 0, !dbg !2370
  br i1 %tobool, label %if.then12, label %if.end, !dbg !2371

if.then12:                                        ; preds = %for.end
  %12 = load i8*, i8** %str.addr, align 8, !dbg !2372
  %13 = load i64, i64* %pos, align 8, !dbg !2374
  %inc13 = add i64 %13, 1, !dbg !2374
  store i64 %inc13, i64* %pos, align 8, !dbg !2374
  %arrayidx14 = getelementptr inbounds i8, i8* %12, i64 %13, !dbg !2372
  store i8 101, i8* %arrayidx14, align 1, !dbg !2375
  %14 = load i8*, i8** %str.addr, align 8, !dbg !2376
  %15 = load i64, i64* %pos, align 8, !dbg !2377
  %inc15 = add i64 %15, 1, !dbg !2377
  store i64 %inc15, i64* %pos, align 8, !dbg !2377
  %arrayidx16 = getelementptr inbounds i8, i8* %14, i64 %15, !dbg !2376
  store i8 43, i8* %arrayidx16, align 1, !dbg !2378
  %16 = load i8*, i8** %str.addr, align 8, !dbg !2379
  %17 = load i64, i64* %pos, align 8, !dbg !2380
  %inc17 = add i64 %17, 1, !dbg !2380
  store i64 %inc17, i64* %pos, align 8, !dbg !2380
  %arrayidx18 = getelementptr inbounds i8, i8* %16, i64 %17, !dbg !2379
  store i8 48, i8* %arrayidx18, align 1, !dbg !2381
  %18 = load i8*, i8** %str.addr, align 8, !dbg !2382
  %19 = load i64, i64* %pos, align 8, !dbg !2383
  %inc19 = add i64 %19, 1, !dbg !2383
  store i64 %inc19, i64* %pos, align 8, !dbg !2383
  %arrayidx20 = getelementptr inbounds i8, i8* %18, i64 %19, !dbg !2382
  store i8 48, i8* %arrayidx20, align 1, !dbg !2384
  %20 = load i8*, i8** %str.addr, align 8, !dbg !2385
  %21 = load i64, i64* %pos, align 8, !dbg !2386
  %inc21 = add i64 %21, 1, !dbg !2386
  store i64 %inc21, i64* %pos, align 8, !dbg !2386
  %arrayidx22 = getelementptr inbounds i8, i8* %20, i64 %21, !dbg !2385
  store i8 48, i8* %arrayidx22, align 1, !dbg !2387
  br label %if.end, !dbg !2388

if.end:                                           ; preds = %if.then12, %for.end
  %22 = load i64, i64* %pos, align 8, !dbg !2389
  store i64 %22, i64* %retval, align 8, !dbg !2390
  br label %return, !dbg !2390

if.else:                                          ; preds = %entry
  %23 = load double, double* %val.addr, align 8, !dbg !2391
  %cmp23 = fcmp uno double %23, %23, !dbg !2391
  br i1 %cmp23, label %if.then24, label %if.else31, !dbg !2393

if.then24:                                        ; preds = %if.else
  %24 = load i8*, i8** %str.addr, align 8, !dbg !2394
  %25 = load i64, i64* %pos, align 8, !dbg !2396
  %inc25 = add i64 %25, 1, !dbg !2396
  store i64 %inc25, i64* %pos, align 8, !dbg !2396
  %arrayidx26 = getelementptr inbounds i8, i8* %24, i64 %25, !dbg !2394
  store i8 78, i8* %arrayidx26, align 1, !dbg !2397
  %26 = load i8*, i8** %str.addr, align 8, !dbg !2398
  %27 = load i64, i64* %pos, align 8, !dbg !2399
  %inc27 = add i64 %27, 1, !dbg !2399
  store i64 %inc27, i64* %pos, align 8, !dbg !2399
  %arrayidx28 = getelementptr inbounds i8, i8* %26, i64 %27, !dbg !2398
  store i8 97, i8* %arrayidx28, align 1, !dbg !2400
  %28 = load i8*, i8** %str.addr, align 8, !dbg !2401
  %29 = load i64, i64* %pos, align 8, !dbg !2402
  %inc29 = add i64 %29, 1, !dbg !2402
  store i64 %inc29, i64* %pos, align 8, !dbg !2402
  %arrayidx30 = getelementptr inbounds i8, i8* %28, i64 %29, !dbg !2401
  store i8 78, i8* %arrayidx30, align 1, !dbg !2403
  %30 = load i64, i64* %pos, align 8, !dbg !2404
  store i64 %30, i64* %retval, align 8, !dbg !2405
  br label %return, !dbg !2405

if.else31:                                        ; preds = %if.else
  %31 = load double, double* %val.addr, align 8, !dbg !2406
  %32 = call double @llvm.fabs.f64(double %31) #17, !dbg !2406
  %cmpinf = fcmp oeq double %32, 0x7FF0000000000000, !dbg !2406
  br i1 %cmpinf, label %if.then32, label %if.end39, !dbg !2408

if.then32:                                        ; preds = %if.else31
  %33 = load i8*, i8** %str.addr, align 8, !dbg !2409
  %34 = load i64, i64* %pos, align 8, !dbg !2411
  %inc33 = add i64 %34, 1, !dbg !2411
  store i64 %inc33, i64* %pos, align 8, !dbg !2411
  %arrayidx34 = getelementptr inbounds i8, i8* %33, i64 %34, !dbg !2409
  store i8 73, i8* %arrayidx34, align 1, !dbg !2412
  %35 = load i8*, i8** %str.addr, align 8, !dbg !2413
  %36 = load i64, i64* %pos, align 8, !dbg !2414
  %inc35 = add i64 %36, 1, !dbg !2414
  store i64 %inc35, i64* %pos, align 8, !dbg !2414
  %arrayidx36 = getelementptr inbounds i8, i8* %35, i64 %36, !dbg !2413
  store i8 78, i8* %arrayidx36, align 1, !dbg !2415
  %37 = load i8*, i8** %str.addr, align 8, !dbg !2416
  %38 = load i64, i64* %pos, align 8, !dbg !2417
  %inc37 = add i64 %38, 1, !dbg !2417
  store i64 %inc37, i64* %pos, align 8, !dbg !2417
  %arrayidx38 = getelementptr inbounds i8, i8* %37, i64 %38, !dbg !2416
  store i8 70, i8* %arrayidx38, align 1, !dbg !2418
  %39 = load i64, i64* %pos, align 8, !dbg !2419
  store i64 %39, i64* %retval, align 8, !dbg !2420
  br label %return, !dbg !2420

if.end39:                                         ; preds = %if.else31
  br label %if.end40

if.end40:                                         ; preds = %if.end39
  br label %if.end41

if.end41:                                         ; preds = %if.end40
  %40 = load double, double* %val.addr, align 8, !dbg !2421
  %cmp42 = fcmp oge double %40, 1.000000e+10, !dbg !2423
  br i1 %cmp42, label %if.then44, label %if.end45, !dbg !2424

if.then44:                                        ; preds = %if.end41
  %41 = load i32, i32* %flags.addr, align 4, !dbg !2425
  %or = or i32 %41, 16, !dbg !2425
  store i32 %or, i32* %flags.addr, align 4, !dbg !2425
  br label %if.end45, !dbg !2426

if.end45:                                         ; preds = %if.then44, %if.end41
  %42 = load double, double* %val.addr, align 8, !dbg !2427
  %cmp46 = fcmp olt double %42, 0.000000e+00, !dbg !2429
  br i1 %cmp46, label %if.then48, label %if.else50, !dbg !2430

if.then48:                                        ; preds = %if.end45
  %43 = load double, double* %val.addr, align 8, !dbg !2431
  %44 = load double, double* %display_precision, align 8, !dbg !2432
  %mul = fmul double %44, 5.000000e-01, !dbg !2433
  %sub49 = fsub double %43, %mul, !dbg !2434
  store double %sub49, double* %val.addr, align 8, !dbg !2435
  br label %if.end52, !dbg !2436

if.else50:                                        ; preds = %if.end45
  %45 = load double, double* %val.addr, align 8, !dbg !2437
  %46 = load double, double* %display_precision, align 8, !dbg !2438
  %mul51 = fmul double %46, 5.000000e-01, !dbg !2439
  %add = fadd double %45, %mul51, !dbg !2440
  store double %add, double* %val.addr, align 8, !dbg !2441
  br label %if.end52

if.end52:                                         ; preds = %if.else50, %if.then48
  call void @llvm.dbg.declare(metadata i16* %magnitude, metadata !2442, metadata !DIExpression()), !dbg !2443
  %47 = load double, double* %val.addr, align 8, !dbg !2444
  %call53 = call double @cgc_log10(double %47) #15, !dbg !2445
  %conv54 = fptosi double %call53 to i16, !dbg !2445
  store i16 %conv54, i16* %magnitude, align 2, !dbg !2443
  %48 = load i32, i32* %flags.addr, align 4, !dbg !2446
  %and55 = and i32 %48, 16, !dbg !2448
  %tobool56 = icmp ne i32 %and55, 0, !dbg !2448
  br i1 %tobool56, label %if.then57, label %if.end73, !dbg !2449

if.then57:                                        ; preds = %if.end52
  call void @llvm.dbg.declare(metadata double* %new_round_precision, metadata !2450, metadata !DIExpression()), !dbg !2452
  call void @llvm.dbg.declare(metadata i16* %round_position, metadata !2453, metadata !DIExpression()), !dbg !2454
  %49 = load i16, i16* %magnitude, align 2, !dbg !2455
  %conv58 = sext i16 %49 to i32, !dbg !2455
  %50 = load i8, i8* %fraction_precision_digit_count.addr, align 1, !dbg !2456
  %conv59 = zext i8 %50 to i32, !dbg !2456
  %sub60 = sub nsw i32 %conv58, %conv59, !dbg !2457
  %conv61 = trunc i32 %sub60 to i16, !dbg !2455
  store i16 %conv61, i16* %round_position, align 2, !dbg !2454
  %51 = load double, double* %val.addr, align 8, !dbg !2458
  %cmp62 = fcmp olt double %51, 1.000000e+00, !dbg !2460
  br i1 %cmp62, label %if.then64, label %if.else69, !dbg !2461

if.then64:                                        ; preds = %if.then57
  %52 = load i16, i16* %round_position, align 2, !dbg !2462
  %conv65 = sext i16 %52 to i32, !dbg !2462
  %sub66 = sub nsw i32 %conv65, 1, !dbg !2463
  %conv67 = sitofp i32 %sub66 to double, !dbg !2462
  %call68 = call double @cgc_pow(double 1.000000e+01, double %conv67) #15, !dbg !2464
  store double %call68, double* %new_round_precision, align 8, !dbg !2465
  br label %if.end72, !dbg !2466

if.else69:                                        ; preds = %if.then57
  %53 = load i16, i16* %round_position, align 2, !dbg !2467
  %conv70 = sitofp i16 %53 to double, !dbg !2467
  %call71 = call double @cgc_pow(double 1.000000e+01, double %conv70) #15, !dbg !2468
  store double %call71, double* %new_round_precision, align 8, !dbg !2469
  br label %if.end72

if.end72:                                         ; preds = %if.else69, %if.then64
  %54 = load double, double* %new_round_precision, align 8, !dbg !2470
  store double %54, double* %display_precision, align 8, !dbg !2471
  br label %if.end73, !dbg !2472

if.end73:                                         ; preds = %if.end72, %if.end52
  %55 = load double, double* %val.addr, align 8, !dbg !2473
  %cmp74 = fcmp olt double %55, 0.000000e+00, !dbg !2475
  br i1 %cmp74, label %if.then76, label %if.end80, !dbg !2476

if.then76:                                        ; preds = %if.end73
  %56 = load double, double* %val.addr, align 8, !dbg !2477
  %sub77 = fsub double -0.000000e+00, %56, !dbg !2479
  store double %sub77, double* %val.addr, align 8, !dbg !2480
  %57 = load i8*, i8** %str.addr, align 8, !dbg !2481
  %58 = load i64, i64* %pos, align 8, !dbg !2482
  %arrayidx78 = getelementptr inbounds i8, i8* %57, i64 %58, !dbg !2481
  store i8 45, i8* %arrayidx78, align 1, !dbg !2483
  %59 = load i64, i64* %pos, align 8, !dbg !2484
  %inc79 = add i64 %59, 1, !dbg !2484
  store i64 %inc79, i64* %pos, align 8, !dbg !2484
  br label %if.end80, !dbg !2485

if.end80:                                         ; preds = %if.then76, %if.end73
  call void @llvm.dbg.declare(metadata i16* %exponent_value, metadata !2486, metadata !DIExpression()), !dbg !2487
  store i16 0, i16* %exponent_value, align 2, !dbg !2487
  call void @llvm.dbg.declare(metadata i16* %fraction_count, metadata !2488, metadata !DIExpression()), !dbg !2489
  store i16 0, i16* %fraction_count, align 2, !dbg !2489
  call void @llvm.dbg.declare(metadata i8* %is_fraction_digits, metadata !2490, metadata !DIExpression()), !dbg !2491
  store i8 0, i8* %is_fraction_digits, align 1, !dbg !2491
  %60 = load double, double* %val.addr, align 8, !dbg !2492
  %61 = load double, double* %display_precision, align 8, !dbg !2494
  %cmp81 = fcmp olt double %60, %61, !dbg !2495
  br i1 %cmp81, label %if.then83, label %if.else88, !dbg !2496

if.then83:                                        ; preds = %if.end80
  %62 = load i8*, i8** %str.addr, align 8, !dbg !2497
  %63 = load i64, i64* %pos, align 8, !dbg !2499
  %inc84 = add i64 %63, 1, !dbg !2499
  store i64 %inc84, i64* %pos, align 8, !dbg !2499
  %arrayidx85 = getelementptr inbounds i8, i8* %62, i64 %63, !dbg !2497
  store i8 48, i8* %arrayidx85, align 1, !dbg !2500
  %64 = load i8*, i8** %str.addr, align 8, !dbg !2501
  %65 = load i64, i64* %pos, align 8, !dbg !2502
  %inc86 = add i64 %65, 1, !dbg !2502
  store i64 %inc86, i64* %pos, align 8, !dbg !2502
  %arrayidx87 = getelementptr inbounds i8, i8* %64, i64 %65, !dbg !2501
  store i8 46, i8* %arrayidx87, align 1, !dbg !2503
  store i8 1, i8* %is_fraction_digits, align 1, !dbg !2504
  br label %if.end110, !dbg !2505

if.else88:                                        ; preds = %if.end80
  %66 = load i16, i16* %magnitude, align 2, !dbg !2506
  %conv89 = sext i16 %66 to i32, !dbg !2506
  %cmp90 = icmp slt i32 %conv89, 0, !dbg !2508
  br i1 %cmp90, label %land.lhs.true, label %if.end109, !dbg !2509

land.lhs.true:                                    ; preds = %if.else88
  %67 = load double, double* %val.addr, align 8, !dbg !2510
  %68 = load double, double* %display_precision, align 8, !dbg !2511
  %cmp92 = fcmp ogt double %67, %68, !dbg !2512
  br i1 %cmp92, label %land.lhs.true94, label %if.end109, !dbg !2513

land.lhs.true94:                                  ; preds = %land.lhs.true
  %69 = load i32, i32* %flags.addr, align 4, !dbg !2514
  %and95 = and i32 %69, 16, !dbg !2515
  %tobool96 = icmp ne i32 %and95, 0, !dbg !2515
  br i1 %tobool96, label %if.end109, label %if.then97, !dbg !2516

if.then97:                                        ; preds = %land.lhs.true94
  %70 = load i8*, i8** %str.addr, align 8, !dbg !2517
  %71 = load i64, i64* %pos, align 8, !dbg !2519
  %inc98 = add i64 %71, 1, !dbg !2519
  store i64 %inc98, i64* %pos, align 8, !dbg !2519
  %arrayidx99 = getelementptr inbounds i8, i8* %70, i64 %71, !dbg !2517
  store i8 48, i8* %arrayidx99, align 1, !dbg !2520
  %72 = load i8*, i8** %str.addr, align 8, !dbg !2521
  %73 = load i64, i64* %pos, align 8, !dbg !2522
  %inc100 = add i64 %73, 1, !dbg !2522
  store i64 %inc100, i64* %pos, align 8, !dbg !2522
  %arrayidx101 = getelementptr inbounds i8, i8* %72, i64 %73, !dbg !2521
  store i8 46, i8* %arrayidx101, align 1, !dbg !2523
  call void @llvm.dbg.declare(metadata i16* %temp_zero_count, metadata !2524, metadata !DIExpression()), !dbg !2525
  %74 = load i16, i16* %magnitude, align 2, !dbg !2526
  store i16 %74, i16* %temp_zero_count, align 2, !dbg !2525
  br label %while.cond, !dbg !2527

while.cond:                                       ; preds = %while.body, %if.then97
  %75 = load i16, i16* %temp_zero_count, align 2, !dbg !2528
  %inc102 = add i16 %75, 1, !dbg !2528
  store i16 %inc102, i16* %temp_zero_count, align 2, !dbg !2528
  %conv103 = sext i16 %inc102 to i32, !dbg !2528
  %cmp104 = icmp slt i32 %conv103, 0, !dbg !2529
  br i1 %cmp104, label %while.body, label %while.end, !dbg !2527

while.body:                                       ; preds = %while.cond
  %76 = load i8*, i8** %str.addr, align 8, !dbg !2530
  %77 = load i64, i64* %pos, align 8, !dbg !2532
  %inc106 = add i64 %77, 1, !dbg !2532
  store i64 %inc106, i64* %pos, align 8, !dbg !2532
  %arrayidx107 = getelementptr inbounds i8, i8* %76, i64 %77, !dbg !2530
  store i8 48, i8* %arrayidx107, align 1, !dbg !2533
  %78 = load i16, i16* %fraction_count, align 2, !dbg !2534
  %inc108 = add i16 %78, 1, !dbg !2534
  store i16 %inc108, i16* %fraction_count, align 2, !dbg !2534
  br label %while.cond, !dbg !2527, !llvm.loop !2535

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %is_fraction_digits, align 1, !dbg !2537
  br label %if.end109, !dbg !2538

if.end109:                                        ; preds = %while.end, %land.lhs.true94, %land.lhs.true, %if.else88
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %if.then83
  br label %while.cond111, !dbg !2539

while.cond111:                                    ; preds = %if.end200, %if.end110
  %79 = load i16, i16* %magnitude, align 2, !dbg !2540
  %conv112 = sext i16 %79 to i32, !dbg !2540
  %cmp113 = icmp sge i32 %conv112, 0, !dbg !2541
  br i1 %cmp113, label %lor.end, label %lor.rhs, !dbg !2542

lor.rhs:                                          ; preds = %while.cond111
  %80 = load double, double* %val.addr, align 8, !dbg !2543
  %81 = load double, double* %display_precision, align 8, !dbg !2544
  %cmp115 = fcmp ogt double %80, %81, !dbg !2545
  br label %lor.end, !dbg !2542

lor.end:                                          ; preds = %lor.rhs, %while.cond111
  %82 = phi i1 [ true, %while.cond111 ], [ %cmp115, %lor.rhs ]
  br i1 %82, label %while.body117, label %while.end202, !dbg !2539

while.body117:                                    ; preds = %lor.end
  call void @llvm.dbg.declare(metadata double* %divider, metadata !2546, metadata !DIExpression()), !dbg !2548
  %83 = load i16, i16* %magnitude, align 2, !dbg !2549
  %conv118 = sitofp i16 %83 to double, !dbg !2549
  %call119 = call double @cgc_pow(double 1.000000e+01, double %conv118) #15, !dbg !2550
  store double %call119, double* %divider, align 8, !dbg !2548
  %84 = load double, double* %divider, align 8, !dbg !2551
  %cmp120 = fcmp ogt double %84, 0.000000e+00, !dbg !2553
  br i1 %cmp120, label %land.lhs.true122, label %if.end180, !dbg !2554

land.lhs.true122:                                 ; preds = %while.body117
  %85 = load double, double* %divider, align 8, !dbg !2555
  %86 = call double @llvm.fabs.f64(double %85) #17, !dbg !2555
  %cmpinf123 = fcmp oeq double %86, 0x7FF0000000000000, !dbg !2555
  br i1 %cmpinf123, label %if.end180, label %if.then124, !dbg !2556

if.then124:                                       ; preds = %land.lhs.true122
  call void @llvm.dbg.declare(metadata i8* %digit, metadata !2557, metadata !DIExpression()), !dbg !2559
  %87 = load double, double* %val.addr, align 8, !dbg !2560
  %88 = load double, double* %divider, align 8, !dbg !2561
  %div = fdiv double %87, %88, !dbg !2562
  %call125 = call double @cgc_floor(double %div) #15, !dbg !2563
  %conv126 = fptoui double %call125 to i8, !dbg !2564
  store i8 %conv126, i8* %digit, align 1, !dbg !2559
  %89 = load i8, i8* %digit, align 1, !dbg !2565
  %conv127 = uitofp i8 %89 to double, !dbg !2566
  %90 = load double, double* %divider, align 8, !dbg !2567
  %mul128 = fmul double %conv127, %90, !dbg !2568
  %91 = load double, double* %val.addr, align 8, !dbg !2569
  %sub129 = fsub double %91, %mul128, !dbg !2569
  store double %sub129, double* %val.addr, align 8, !dbg !2569
  %92 = load i32, i32* %flags.addr, align 4, !dbg !2570
  %and130 = and i32 %92, 16, !dbg !2572
  %tobool131 = icmp ne i32 %and130, 0, !dbg !2572
  br i1 %tobool131, label %land.lhs.true132, label %if.else155, !dbg !2573

land.lhs.true132:                                 ; preds = %if.then124
  %93 = load i8, i8* %is_fraction_digits, align 1, !dbg !2574
  %conv133 = sext i8 %93 to i32, !dbg !2574
  %cmp134 = icmp eq i32 %conv133, 0, !dbg !2575
  br i1 %cmp134, label %if.then136, label %if.else155, !dbg !2576

if.then136:                                       ; preds = %land.lhs.true132
  %94 = load i16, i16* %exponent_value, align 2, !dbg !2577
  %conv137 = sext i16 %94 to i32, !dbg !2577
  %cmp138 = icmp eq i32 %conv137, 0, !dbg !2580
  br i1 %cmp138, label %if.then140, label %if.end141, !dbg !2581

if.then140:                                       ; preds = %if.then136
  %95 = load i16, i16* %magnitude, align 2, !dbg !2582
  store i16 %95, i16* %exponent_value, align 2, !dbg !2583
  br label %if.end141, !dbg !2584

if.end141:                                        ; preds = %if.then140, %if.then136
  %96 = load i8, i8* %digit, align 1, !dbg !2585
  %conv142 = zext i8 %96 to i32, !dbg !2585
  %cmp143 = icmp eq i32 %conv142, 0, !dbg !2587
  br i1 %cmp143, label %if.then145, label %if.else146, !dbg !2588

if.then145:                                       ; preds = %if.end141
  %97 = load i16, i16* %exponent_value, align 2, !dbg !2589
  %dec = add i16 %97, -1, !dbg !2589
  store i16 %dec, i16* %exponent_value, align 2, !dbg !2589
  br label %if.end154, !dbg !2590

if.else146:                                       ; preds = %if.end141
  %98 = load i8, i8* %digit, align 1, !dbg !2591
  %conv147 = zext i8 %98 to i32, !dbg !2591
  %add148 = add nsw i32 48, %conv147, !dbg !2593
  %conv149 = trunc i32 %add148 to i8, !dbg !2594
  %99 = load i8*, i8** %str.addr, align 8, !dbg !2595
  %100 = load i64, i64* %pos, align 8, !dbg !2596
  %inc150 = add i64 %100, 1, !dbg !2596
  store i64 %inc150, i64* %pos, align 8, !dbg !2596
  %arrayidx151 = getelementptr inbounds i8, i8* %99, i64 %100, !dbg !2595
  store i8 %conv149, i8* %arrayidx151, align 1, !dbg !2597
  %101 = load i8*, i8** %str.addr, align 8, !dbg !2598
  %102 = load i64, i64* %pos, align 8, !dbg !2599
  %inc152 = add i64 %102, 1, !dbg !2599
  store i64 %inc152, i64* %pos, align 8, !dbg !2599
  %arrayidx153 = getelementptr inbounds i8, i8* %101, i64 %102, !dbg !2598
  store i8 46, i8* %arrayidx153, align 1, !dbg !2600
  store i8 1, i8* %is_fraction_digits, align 1, !dbg !2601
  br label %if.end154

if.end154:                                        ; preds = %if.else146, %if.then145
  br label %if.end179, !dbg !2602

if.else155:                                       ; preds = %land.lhs.true132, %if.then124
  %103 = load i16, i16* %magnitude, align 2, !dbg !2603
  %conv156 = sext i16 %103 to i32, !dbg !2603
  %conv157 = sitofp i32 %conv156 to double, !dbg !2603
  %cmp158 = fcmp olt double %conv157, 0.000000e+00, !dbg !2606
  br i1 %cmp158, label %land.lhs.true160, label %if.end169, !dbg !2607

land.lhs.true160:                                 ; preds = %if.else155
  %104 = load i8, i8* %is_fraction_digits, align 1, !dbg !2608
  %conv161 = sext i8 %104 to i32, !dbg !2608
  %cmp162 = icmp eq i32 %conv161, 0, !dbg !2609
  br i1 %cmp162, label %if.then164, label %if.end169, !dbg !2610

if.then164:                                       ; preds = %land.lhs.true160
  %105 = load i8*, i8** %str.addr, align 8, !dbg !2611
  %106 = load i64, i64* %pos, align 8, !dbg !2613
  %inc165 = add i64 %106, 1, !dbg !2613
  store i64 %inc165, i64* %pos, align 8, !dbg !2613
  %arrayidx166 = getelementptr inbounds i8, i8* %105, i64 %106, !dbg !2611
  store i8 48, i8* %arrayidx166, align 1, !dbg !2614
  %107 = load i8*, i8** %str.addr, align 8, !dbg !2615
  %108 = load i64, i64* %pos, align 8, !dbg !2616
  %inc167 = add i64 %108, 1, !dbg !2616
  store i64 %inc167, i64* %pos, align 8, !dbg !2616
  %arrayidx168 = getelementptr inbounds i8, i8* %107, i64 %108, !dbg !2615
  store i8 46, i8* %arrayidx168, align 1, !dbg !2617
  store i8 1, i8* %is_fraction_digits, align 1, !dbg !2618
  br label %if.end169, !dbg !2619

if.end169:                                        ; preds = %if.then164, %land.lhs.true160, %if.else155
  %109 = load i8, i8* %digit, align 1, !dbg !2620
  %conv170 = zext i8 %109 to i32, !dbg !2620
  %add171 = add nsw i32 48, %conv170, !dbg !2621
  %conv172 = trunc i32 %add171 to i8, !dbg !2622
  %110 = load i8*, i8** %str.addr, align 8, !dbg !2623
  %111 = load i64, i64* %pos, align 8, !dbg !2624
  %inc173 = add i64 %111, 1, !dbg !2624
  store i64 %inc173, i64* %pos, align 8, !dbg !2624
  %arrayidx174 = getelementptr inbounds i8, i8* %110, i64 %111, !dbg !2623
  store i8 %conv172, i8* %arrayidx174, align 1, !dbg !2625
  %112 = load i8, i8* %is_fraction_digits, align 1, !dbg !2626
  %tobool175 = icmp ne i8 %112, 0, !dbg !2626
  br i1 %tobool175, label %if.then176, label %if.end178, !dbg !2628

if.then176:                                       ; preds = %if.end169
  %113 = load i16, i16* %fraction_count, align 2, !dbg !2629
  %inc177 = add i16 %113, 1, !dbg !2629
  store i16 %inc177, i16* %fraction_count, align 2, !dbg !2629
  br label %if.end178, !dbg !2630

if.end178:                                        ; preds = %if.then176, %if.end169
  br label %if.end179

if.end179:                                        ; preds = %if.end178, %if.end154
  br label %if.end180, !dbg !2631

if.end180:                                        ; preds = %if.end179, %land.lhs.true122, %while.body117
  %114 = load i16, i16* %magnitude, align 2, !dbg !2632
  %conv181 = sext i16 %114 to i32, !dbg !2632
  %conv182 = sitofp i32 %conv181 to double, !dbg !2632
  %cmp183 = fcmp oeq double %conv182, 0.000000e+00, !dbg !2634
  br i1 %cmp183, label %land.lhs.true185, label %if.end194, !dbg !2635

land.lhs.true185:                                 ; preds = %if.end180
  %115 = load double, double* %val.addr, align 8, !dbg !2636
  %cmp186 = fcmp ogt double %115, 0.000000e+00, !dbg !2637
  br i1 %cmp186, label %land.lhs.true188, label %if.end194, !dbg !2638

land.lhs.true188:                                 ; preds = %land.lhs.true185
  %116 = load i32, i32* %flags.addr, align 4, !dbg !2639
  %and189 = and i32 %116, 16, !dbg !2640
  %tobool190 = icmp ne i32 %and189, 0, !dbg !2640
  br i1 %tobool190, label %if.end194, label %if.then191, !dbg !2641

if.then191:                                       ; preds = %land.lhs.true188
  %117 = load i8*, i8** %str.addr, align 8, !dbg !2642
  %118 = load i64, i64* %pos, align 8, !dbg !2644
  %inc192 = add i64 %118, 1, !dbg !2644
  store i64 %inc192, i64* %pos, align 8, !dbg !2644
  %arrayidx193 = getelementptr inbounds i8, i8* %117, i64 %118, !dbg !2642
  store i8 46, i8* %arrayidx193, align 1, !dbg !2645
  store i8 1, i8* %is_fraction_digits, align 1, !dbg !2646
  br label %if.end194, !dbg !2647

if.end194:                                        ; preds = %if.then191, %land.lhs.true188, %land.lhs.true185, %if.end180
  %119 = load i16, i16* %fraction_count, align 2, !dbg !2648
  %conv195 = zext i16 %119 to i32, !dbg !2648
  %120 = load i8, i8* %fraction_precision_digit_count.addr, align 1, !dbg !2650
  %conv196 = zext i8 %120 to i32, !dbg !2650
  %cmp197 = icmp sge i32 %conv195, %conv196, !dbg !2651
  br i1 %cmp197, label %if.then199, label %if.end200, !dbg !2652

if.then199:                                       ; preds = %if.end194
  br label %while.end202, !dbg !2653

if.end200:                                        ; preds = %if.end194
  %121 = load i16, i16* %magnitude, align 2, !dbg !2654
  %dec201 = add i16 %121, -1, !dbg !2654
  store i16 %dec201, i16* %magnitude, align 2, !dbg !2654
  br label %while.cond111, !dbg !2539, !llvm.loop !2655

while.end202:                                     ; preds = %if.then199, %lor.end
  br label %while.cond203, !dbg !2657

while.cond203:                                    ; preds = %while.body210, %while.end202
  %122 = load i8, i8* %is_fraction_digits, align 1, !dbg !2658
  %conv204 = sext i8 %122 to i32, !dbg !2658
  %tobool205 = icmp ne i32 %conv204, 0, !dbg !2658
  br i1 %tobool205, label %land.rhs, label %land.end, !dbg !2659

land.rhs:                                         ; preds = %while.cond203
  %123 = load i16, i16* %fraction_count, align 2, !dbg !2660
  %conv206 = zext i16 %123 to i32, !dbg !2660
  %124 = load i8, i8* %fraction_precision_digit_count.addr, align 1, !dbg !2661
  %conv207 = zext i8 %124 to i32, !dbg !2661
  %cmp208 = icmp slt i32 %conv206, %conv207, !dbg !2662
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond203
  %125 = phi i1 [ false, %while.cond203 ], [ %cmp208, %land.rhs ], !dbg !2663
  br i1 %125, label %while.body210, label %while.end214, !dbg !2657

while.body210:                                    ; preds = %land.end
  %126 = load i8*, i8** %str.addr, align 8, !dbg !2664
  %127 = load i64, i64* %pos, align 8, !dbg !2666
  %inc211 = add i64 %127, 1, !dbg !2666
  store i64 %inc211, i64* %pos, align 8, !dbg !2666
  %arrayidx212 = getelementptr inbounds i8, i8* %126, i64 %127, !dbg !2664
  store i8 48, i8* %arrayidx212, align 1, !dbg !2667
  %128 = load i16, i16* %fraction_count, align 2, !dbg !2668
  %inc213 = add i16 %128, 1, !dbg !2668
  store i16 %inc213, i16* %fraction_count, align 2, !dbg !2668
  br label %while.cond203, !dbg !2657, !llvm.loop !2669

while.end214:                                     ; preds = %land.end
  %129 = load i32, i32* %flags.addr, align 4, !dbg !2671
  %and215 = and i32 %129, 16, !dbg !2673
  %tobool216 = icmp ne i32 %and215, 0, !dbg !2673
  br i1 %tobool216, label %if.then217, label %if.end292, !dbg !2674

if.then217:                                       ; preds = %while.end214
  %130 = load i8*, i8** %str.addr, align 8, !dbg !2675
  %131 = load i64, i64* %pos, align 8, !dbg !2677
  %inc218 = add i64 %131, 1, !dbg !2677
  store i64 %inc218, i64* %pos, align 8, !dbg !2677
  %arrayidx219 = getelementptr inbounds i8, i8* %130, i64 %131, !dbg !2675
  store i8 101, i8* %arrayidx219, align 1, !dbg !2678
  %132 = load i16, i16* %exponent_value, align 2, !dbg !2679
  %conv220 = sext i16 %132 to i32, !dbg !2679
  %cmp221 = icmp slt i32 %conv220, 0, !dbg !2681
  br i1 %cmp221, label %if.then223, label %if.else229, !dbg !2682

if.then223:                                       ; preds = %if.then217
  %133 = load i16, i16* %exponent_value, align 2, !dbg !2683
  %conv224 = sext i16 %133 to i32, !dbg !2683
  %sub225 = sub nsw i32 0, %conv224, !dbg !2685
  %conv226 = trunc i32 %sub225 to i16, !dbg !2685
  store i16 %conv226, i16* %exponent_value, align 2, !dbg !2686
  %134 = load i8*, i8** %str.addr, align 8, !dbg !2687
  %135 = load i64, i64* %pos, align 8, !dbg !2688
  %inc227 = add i64 %135, 1, !dbg !2688
  store i64 %inc227, i64* %pos, align 8, !dbg !2688
  %arrayidx228 = getelementptr inbounds i8, i8* %134, i64 %135, !dbg !2687
  store i8 45, i8* %arrayidx228, align 1, !dbg !2689
  br label %if.end232, !dbg !2690

if.else229:                                       ; preds = %if.then217
  %136 = load i8*, i8** %str.addr, align 8, !dbg !2691
  %137 = load i64, i64* %pos, align 8, !dbg !2692
  %inc230 = add i64 %137, 1, !dbg !2692
  store i64 %inc230, i64* %pos, align 8, !dbg !2692
  %arrayidx231 = getelementptr inbounds i8, i8* %136, i64 %137, !dbg !2691
  store i8 43, i8* %arrayidx231, align 1, !dbg !2693
  br label %if.end232

if.end232:                                        ; preds = %if.else229, %if.then223
  %138 = load i16, i16* %exponent_value, align 2, !dbg !2694
  %conv233 = sext i16 %138 to i32, !dbg !2694
  %cmp234 = icmp eq i32 %conv233, 0, !dbg !2696
  br i1 %cmp234, label %if.then236, label %if.else248, !dbg !2697

if.then236:                                       ; preds = %if.end232
  call void @llvm.dbg.declare(metadata i8* %i237, metadata !2698, metadata !DIExpression()), !dbg !2701
  store i8 0, i8* %i237, align 1, !dbg !2701
  br label %for.cond238, !dbg !2702

for.cond238:                                      ; preds = %for.inc245, %if.then236
  %139 = load i8, i8* %i237, align 1, !dbg !2703
  %conv239 = zext i8 %139 to i32, !dbg !2703
  %cmp240 = icmp slt i32 %conv239, 3, !dbg !2705
  br i1 %cmp240, label %for.body242, label %for.end247, !dbg !2706

for.body242:                                      ; preds = %for.cond238
  %140 = load i8*, i8** %str.addr, align 8, !dbg !2707
  %141 = load i64, i64* %pos, align 8, !dbg !2708
  %inc243 = add i64 %141, 1, !dbg !2708
  store i64 %inc243, i64* %pos, align 8, !dbg !2708
  %arrayidx244 = getelementptr inbounds i8, i8* %140, i64 %141, !dbg !2707
  store i8 48, i8* %arrayidx244, align 1, !dbg !2709
  br label %for.inc245, !dbg !2707

for.inc245:                                       ; preds = %for.body242
  %142 = load i8, i8* %i237, align 1, !dbg !2710
  %inc246 = add i8 %142, 1, !dbg !2710
  store i8 %inc246, i8* %i237, align 1, !dbg !2710
  br label %for.cond238, !dbg !2711, !llvm.loop !2712

for.end247:                                       ; preds = %for.cond238
  br label %if.end291, !dbg !2714

if.else248:                                       ; preds = %if.end232
  call void @llvm.dbg.declare(metadata i8* %exponent_digit_count, metadata !2715, metadata !DIExpression()), !dbg !2717
  store i8 0, i8* %exponent_digit_count, align 1, !dbg !2717
  call void @llvm.dbg.declare(metadata i16* %exponent_magnitude, metadata !2718, metadata !DIExpression()), !dbg !2719
  %143 = load i16, i16* %exponent_value, align 2, !dbg !2720
  %conv249 = sitofp i16 %143 to double, !dbg !2720
  %call250 = call double @cgc_log10(double %conv249) #15, !dbg !2721
  %conv251 = fptoui double %call250 to i16, !dbg !2721
  store i16 %conv251, i16* %exponent_magnitude, align 2, !dbg !2719
  call void @llvm.dbg.declare(metadata i8* %i252, metadata !2722, metadata !DIExpression()), !dbg !2724
  %144 = load i16, i16* %exponent_magnitude, align 2, !dbg !2725
  %conv253 = trunc i16 %144 to i8, !dbg !2725
  store i8 %conv253, i8* %i252, align 1, !dbg !2724
  br label %for.cond254, !dbg !2726

for.cond254:                                      ; preds = %for.inc262, %if.else248
  %145 = load i8, i8* %i252, align 1, !dbg !2727
  %conv255 = zext i8 %145 to i32, !dbg !2727
  %cmp256 = icmp slt i32 %conv255, 2, !dbg !2729
  br i1 %cmp256, label %for.body258, label %for.end264, !dbg !2730

for.body258:                                      ; preds = %for.cond254
  %146 = load i8*, i8** %str.addr, align 8, !dbg !2731
  %147 = load i64, i64* %pos, align 8, !dbg !2733
  %inc259 = add i64 %147, 1, !dbg !2733
  store i64 %inc259, i64* %pos, align 8, !dbg !2733
  %arrayidx260 = getelementptr inbounds i8, i8* %146, i64 %147, !dbg !2731
  store i8 48, i8* %arrayidx260, align 1, !dbg !2734
  %148 = load i8, i8* %exponent_digit_count, align 1, !dbg !2735
  %inc261 = add i8 %148, 1, !dbg !2735
  store i8 %inc261, i8* %exponent_digit_count, align 1, !dbg !2735
  br label %for.inc262, !dbg !2736

for.inc262:                                       ; preds = %for.body258
  %149 = load i8, i8* %i252, align 1, !dbg !2737
  %inc263 = add i8 %149, 1, !dbg !2737
  store i8 %inc263, i8* %i252, align 1, !dbg !2737
  br label %for.cond254, !dbg !2738, !llvm.loop !2739

for.end264:                                       ; preds = %for.cond254
  br label %while.cond265, !dbg !2741

while.cond265:                                    ; preds = %while.body270, %for.end264
  %150 = load i8, i8* %exponent_digit_count, align 1, !dbg !2742
  %inc266 = add i8 %150, 1, !dbg !2742
  store i8 %inc266, i8* %exponent_digit_count, align 1, !dbg !2742
  %conv267 = zext i8 %150 to i32, !dbg !2743
  %cmp268 = icmp slt i32 %conv267, 3, !dbg !2744
  br i1 %cmp268, label %while.body270, label %while.end290, !dbg !2741

while.body270:                                    ; preds = %while.cond265
  call void @llvm.dbg.declare(metadata i16* %exponent_divider, metadata !2745, metadata !DIExpression()), !dbg !2747
  %151 = load i16, i16* %exponent_magnitude, align 2, !dbg !2748
  %conv271 = uitofp i16 %151 to double, !dbg !2748
  %call272 = call double @cgc_pow(double 1.000000e+01, double %conv271) #15, !dbg !2749
  %conv273 = fptoui double %call272 to i16, !dbg !2749
  store i16 %conv273, i16* %exponent_divider, align 2, !dbg !2747
  call void @llvm.dbg.declare(metadata i8* %exponent_digit, metadata !2750, metadata !DIExpression()), !dbg !2751
  %152 = load i16, i16* %exponent_value, align 2, !dbg !2752
  %conv274 = sext i16 %152 to i32, !dbg !2752
  %153 = load i16, i16* %exponent_divider, align 2, !dbg !2753
  %conv275 = zext i16 %153 to i32, !dbg !2753
  %int_cast_to_i64 = zext i32 %conv275 to i64, !dbg !2754
  call void @klee_div_zero_check(i64 %int_cast_to_i64), !dbg !2754
  %div276 = sdiv i32 %conv274, %conv275, !dbg !2754, !klee.check.div !2755
  %conv277 = trunc i32 %div276 to i8, !dbg !2756
  store i8 %conv277, i8* %exponent_digit, align 1, !dbg !2751
  %154 = load i8, i8* %exponent_digit, align 1, !dbg !2757
  %conv278 = zext i8 %154 to i32, !dbg !2757
  %add279 = add nsw i32 48, %conv278, !dbg !2758
  %conv280 = trunc i32 %add279 to i8, !dbg !2759
  %155 = load i8*, i8** %str.addr, align 8, !dbg !2760
  %156 = load i64, i64* %pos, align 8, !dbg !2761
  %inc281 = add i64 %156, 1, !dbg !2761
  store i64 %inc281, i64* %pos, align 8, !dbg !2761
  %arrayidx282 = getelementptr inbounds i8, i8* %155, i64 %156, !dbg !2760
  store i8 %conv280, i8* %arrayidx282, align 1, !dbg !2762
  %157 = load i8, i8* %exponent_digit, align 1, !dbg !2763
  %conv283 = zext i8 %157 to i32, !dbg !2763
  %158 = load i16, i16* %exponent_divider, align 2, !dbg !2764
  %conv284 = zext i16 %158 to i32, !dbg !2764
  %mul285 = mul nsw i32 %conv283, %conv284, !dbg !2765
  %159 = load i16, i16* %exponent_value, align 2, !dbg !2766
  %conv286 = sext i16 %159 to i32, !dbg !2766
  %sub287 = sub nsw i32 %conv286, %mul285, !dbg !2766
  %conv288 = trunc i32 %sub287 to i16, !dbg !2766
  store i16 %conv288, i16* %exponent_value, align 2, !dbg !2766
  %160 = load i16, i16* %exponent_magnitude, align 2, !dbg !2767
  %dec289 = add i16 %160, -1, !dbg !2767
  store i16 %dec289, i16* %exponent_magnitude, align 2, !dbg !2767
  br label %while.cond265, !dbg !2741, !llvm.loop !2768

while.end290:                                     ; preds = %while.cond265
  br label %if.end291

if.end291:                                        ; preds = %while.end290, %for.end247
  br label %if.end292, !dbg !2770

if.end292:                                        ; preds = %if.end291, %while.end214
  %161 = load i64, i64* %pos, align 8, !dbg !2771
  store i64 %161, i64* %retval, align 8, !dbg !2772
  br label %return, !dbg !2772

return:                                           ; preds = %if.end292, %if.then32, %if.then24, %if.end
  %162 = load i64, i64* %retval, align 8, !dbg !2773
  ret i64 %162, !dbg !2773
}

declare dso_local double @cgc_pow(double, double) #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #1

declare dso_local double @cgc_log10(double) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @cgc_floor(double %val) #6 !dbg !2774 {
entry:
  %retval = alloca double, align 8
  %val.addr = alloca double, align 8
  store double %val, double* %val.addr, align 8
  call void @llvm.dbg.declare(metadata double* %val.addr, metadata !2778, metadata !DIExpression()), !dbg !2779
  %0 = load double, double* %val.addr, align 8, !dbg !2780
  %cmp = fcmp olt double %0, 0.000000e+00, !dbg !2782
  br i1 %cmp, label %if.then, label %if.else, !dbg !2783

if.then:                                          ; preds = %entry
  %1 = load double, double* %val.addr, align 8, !dbg !2784
  %sub = fsub double %1, 5.000000e-01, !dbg !2785
  %call = call double @cgc_rint(double %sub) #15, !dbg !2786
  %add = fadd double %call, 1.000000e+00, !dbg !2787
  store double %add, double* %retval, align 8, !dbg !2788
  br label %return, !dbg !2788

if.else:                                          ; preds = %entry
  %2 = load double, double* %val.addr, align 8, !dbg !2789
  %cmp1 = fcmp ogt double %2, 0.000000e+00, !dbg !2791
  br i1 %cmp1, label %if.then2, label %if.else6, !dbg !2792

if.then2:                                         ; preds = %if.else
  %3 = load double, double* %val.addr, align 8, !dbg !2793
  %add3 = fadd double %3, 5.000000e-01, !dbg !2794
  %call4 = call double @cgc_rint(double %add3) #15, !dbg !2795
  %sub5 = fsub double %call4, 1.000000e+00, !dbg !2796
  store double %sub5, double* %retval, align 8, !dbg !2797
  br label %return, !dbg !2797

if.else6:                                         ; preds = %if.else
  %4 = load double, double* %val.addr, align 8, !dbg !2798
  store double %4, double* %retval, align 8, !dbg !2799
  br label %return, !dbg !2799

return:                                           ; preds = %if.else6, %if.then2, %if.then
  %5 = load double, double* %retval, align 8, !dbg !2800
  ret double %5, !dbg !2800
}

declare dso_local double @cgc_rint(double) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @cgc_printf_int_to_string(i32 %val, i32 %base, i8* %str, i32 %flags) #6 !dbg !2801 {
entry:
  %retval = alloca i64, align 8
  %val.addr = alloca i32, align 4
  %base.addr = alloca i32, align 4
  %str.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %pos = alloca i64, align 8
  %n = alloca i32, align 4
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !2804, metadata !DIExpression()), !dbg !2805
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !2806, metadata !DIExpression()), !dbg !2807
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !2808, metadata !DIExpression()), !dbg !2809
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2810, metadata !DIExpression()), !dbg !2811
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !2812, metadata !DIExpression()), !dbg !2813
  store i64 0, i64* %pos, align 8, !dbg !2813
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2814, metadata !DIExpression()), !dbg !2815
  %0 = load i32, i32* %val.addr, align 4, !dbg !2816
  %cmp = icmp eq i32 %0, 0, !dbg !2818
  br i1 %cmp, label %if.then, label %if.end, !dbg !2819

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %str.addr, align 8, !dbg !2820
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !2820
  store i8 48, i8* %arrayidx, align 1, !dbg !2822
  store i64 1, i64* %retval, align 8, !dbg !2823
  br label %return, !dbg !2823

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !2824

while.cond:                                       ; preds = %if.end25, %if.end
  %2 = load i32, i32* %val.addr, align 4, !dbg !2825
  %cmp1 = icmp ugt i32 %2, 0, !dbg !2826
  br i1 %cmp1, label %while.body, label %while.end, !dbg !2824

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %val.addr, align 4, !dbg !2827
  %4 = load i32, i32* %base.addr, align 4, !dbg !2829
  %int_cast_to_i64 = zext i32 %4 to i64, !dbg !2830
  call void @klee_div_zero_check(i64 %int_cast_to_i64), !dbg !2830
  %rem = urem i32 %3, %4, !dbg !2830, !klee.check.div !2755
  store i32 %rem, i32* %n, align 4, !dbg !2831
  %5 = load i32, i32* %val.addr, align 4, !dbg !2832
  %6 = load i32, i32* %base.addr, align 4, !dbg !2833
  %int_cast_to_i641 = zext i32 %6 to i64, !dbg !2834
  call void @klee_div_zero_check(i64 %int_cast_to_i641), !dbg !2834
  %div = udiv i32 %5, %6, !dbg !2834, !klee.check.div !2755
  store i32 %div, i32* %val.addr, align 4, !dbg !2835
  %7 = load i32, i32* %base.addr, align 4, !dbg !2836
  %cmp2 = icmp eq i32 %7, 16, !dbg !2838
  br i1 %cmp2, label %if.then3, label %if.else20, !dbg !2839

if.then3:                                         ; preds = %while.body
  %8 = load i32, i32* %n, align 4, !dbg !2840
  %cmp4 = icmp slt i32 %8, 10, !dbg !2843
  br i1 %cmp4, label %if.then5, label %if.else, !dbg !2844

if.then5:                                         ; preds = %if.then3
  %9 = load i32, i32* %n, align 4, !dbg !2845
  %add = add nsw i32 48, %9, !dbg !2846
  %conv = trunc i32 %add to i8, !dbg !2847
  %10 = load i8*, i8** %str.addr, align 8, !dbg !2848
  %11 = load i64, i64* %pos, align 8, !dbg !2849
  %inc = add i64 %11, 1, !dbg !2849
  store i64 %inc, i64* %pos, align 8, !dbg !2849
  %arrayidx6 = getelementptr inbounds i8, i8* %10, i64 %11, !dbg !2848
  store i8 %conv, i8* %arrayidx6, align 1, !dbg !2850
  br label %if.end19, !dbg !2848

if.else:                                          ; preds = %if.then3
  %12 = load i32, i32* %flags.addr, align 4, !dbg !2851
  %and = and i32 %12, 8, !dbg !2854
  %tobool = icmp ne i32 %and, 0, !dbg !2854
  br i1 %tobool, label %if.then7, label %if.else12, !dbg !2855

if.then7:                                         ; preds = %if.else
  %13 = load i32, i32* %n, align 4, !dbg !2856
  %sub = sub nsw i32 %13, 10, !dbg !2857
  %add8 = add nsw i32 65, %sub, !dbg !2858
  %conv9 = trunc i32 %add8 to i8, !dbg !2859
  %14 = load i8*, i8** %str.addr, align 8, !dbg !2860
  %15 = load i64, i64* %pos, align 8, !dbg !2861
  %inc10 = add i64 %15, 1, !dbg !2861
  store i64 %inc10, i64* %pos, align 8, !dbg !2861
  %arrayidx11 = getelementptr inbounds i8, i8* %14, i64 %15, !dbg !2860
  store i8 %conv9, i8* %arrayidx11, align 1, !dbg !2862
  br label %if.end18, !dbg !2860

if.else12:                                        ; preds = %if.else
  %16 = load i32, i32* %n, align 4, !dbg !2863
  %sub13 = sub nsw i32 %16, 10, !dbg !2864
  %add14 = add nsw i32 97, %sub13, !dbg !2865
  %conv15 = trunc i32 %add14 to i8, !dbg !2866
  %17 = load i8*, i8** %str.addr, align 8, !dbg !2867
  %18 = load i64, i64* %pos, align 8, !dbg !2868
  %inc16 = add i64 %18, 1, !dbg !2868
  store i64 %inc16, i64* %pos, align 8, !dbg !2868
  %arrayidx17 = getelementptr inbounds i8, i8* %17, i64 %18, !dbg !2867
  store i8 %conv15, i8* %arrayidx17, align 1, !dbg !2869
  br label %if.end18

if.end18:                                         ; preds = %if.else12, %if.then7
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then5
  br label %if.end25, !dbg !2870

if.else20:                                        ; preds = %while.body
  %19 = load i32, i32* %n, align 4, !dbg !2871
  %add21 = add nsw i32 48, %19, !dbg !2872
  %conv22 = trunc i32 %add21 to i8, !dbg !2873
  %20 = load i8*, i8** %str.addr, align 8, !dbg !2874
  %21 = load i64, i64* %pos, align 8, !dbg !2875
  %inc23 = add i64 %21, 1, !dbg !2875
  store i64 %inc23, i64* %pos, align 8, !dbg !2875
  %arrayidx24 = getelementptr inbounds i8, i8* %20, i64 %21, !dbg !2874
  store i8 %conv22, i8* %arrayidx24, align 1, !dbg !2876
  br label %if.end25

if.end25:                                         ; preds = %if.else20, %if.end19
  br label %while.cond, !dbg !2824, !llvm.loop !2877

while.end:                                        ; preds = %while.cond
  %22 = load i64, i64* %pos, align 8, !dbg !2879
  store i64 %22, i64* %retval, align 8, !dbg !2880
  br label %return, !dbg !2880

return:                                           ; preds = %while.end, %if.then
  %23 = load i64, i64* %retval, align 8, !dbg !2881
  ret i64 %23, !dbg !2881
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @cgc_strlen(i8* %str) #6 !dbg !2882 {
entry:
  %str.addr = alloca i8*, align 8
  %len = alloca i64, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !2885, metadata !DIExpression()), !dbg !2886
  call void @llvm.dbg.declare(metadata i64* %len, metadata !2887, metadata !DIExpression()), !dbg !2888
  store i64 0, i64* %len, align 8, !dbg !2888
  br label %while.cond, !dbg !2889

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %str.addr, align 8, !dbg !2890
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1, !dbg !2890
  store i8* %incdec.ptr, i8** %str.addr, align 8, !dbg !2890
  %1 = load i8, i8* %0, align 1, !dbg !2891
  %conv = sext i8 %1 to i32, !dbg !2891
  %cmp = icmp ne i32 %conv, 0, !dbg !2892
  br i1 %cmp, label %while.body, label %while.end, !dbg !2889

while.body:                                       ; preds = %while.cond
  %2 = load i64, i64* %len, align 8, !dbg !2893
  %inc = add i64 %2, 1, !dbg !2893
  store i64 %inc, i64* %len, align 8, !dbg !2893
  br label %while.cond, !dbg !2889, !llvm.loop !2894

while.end:                                        ; preds = %while.cond
  %3 = load i64, i64* %len, align 8, !dbg !2895
  ret i64 %3, !dbg !2896
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_free(i8* %block) #6 !dbg !2897 {
entry:
  %block.addr = alloca i8*, align 8
  %nb = alloca %struct.meta*, align 8
  store i8* %block, i8** %block.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %block.addr, metadata !2900, metadata !DIExpression()), !dbg !2901
  call void @llvm.dbg.declare(metadata %struct.meta** %nb, metadata !2902, metadata !DIExpression()), !dbg !2903
  store %struct.meta* null, %struct.meta** %nb, align 8, !dbg !2903
  %0 = load i8*, i8** %block.addr, align 8, !dbg !2904
  %tobool = icmp ne i8* %0, null, !dbg !2904
  br i1 %tobool, label %if.then, label %if.end, !dbg !2906

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %block.addr, align 8, !dbg !2907
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 -4, !dbg !2909
  %2 = bitcast i8* %add.ptr to %struct.meta*, !dbg !2910
  store %struct.meta* %2, %struct.meta** %nb, align 8, !dbg !2911
  %3 = load %struct.meta*, %struct.meta** %nb, align 8, !dbg !2912
  call void @cgc_link(%struct.meta* %3) #15, !dbg !2913
  br label %if.end, !dbg !2914

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !2915
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_init_freelist() #6 !dbg !2916 {
entry:
  %zero_block = alloca %struct.meta*, align 8
  %base_block = alloca %struct.meta*, align 8
  call void @llvm.dbg.declare(metadata %struct.meta** %zero_block, metadata !2919, metadata !DIExpression()), !dbg !2920
  store %struct.meta* null, %struct.meta** %zero_block, align 8, !dbg !2920
  call void @llvm.dbg.declare(metadata %struct.meta** %base_block, metadata !2921, metadata !DIExpression()), !dbg !2922
  store %struct.meta* null, %struct.meta** %base_block, align 8, !dbg !2922
  %call = call i32 @cgc_allocate(i64 4096, i32 0, i8** bitcast ([128 x %struct.meta*]* @lookaside to i8**)) #15, !dbg !2923
  %cmp = icmp ne i32 %call, 0, !dbg !2925
  br i1 %cmp, label %if.then, label %if.end, !dbg !2926

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1.35, i64 0, i64 0)) #15, !dbg !2927
  call void @cgc__terminate(i32 -1) #16, !dbg !2929
  unreachable, !dbg !2929

if.end:                                           ; preds = %entry
  %0 = load %struct.meta*, %struct.meta** getelementptr inbounds ([128 x %struct.meta*], [128 x %struct.meta*]* @lookaside, i64 0, i64 0), align 16, !dbg !2930
  %1 = bitcast %struct.meta* %0 to i8*, !dbg !2930
  call void @cgc_bzero(i8* %1, i64 4096) #15, !dbg !2931
  %2 = load %struct.meta*, %struct.meta** getelementptr inbounds ([128 x %struct.meta*], [128 x %struct.meta*]* @lookaside, i64 0, i64 0), align 16, !dbg !2932
  store %struct.meta* %2, %struct.meta** %zero_block, align 8, !dbg !2933
  %3 = load %struct.meta*, %struct.meta** %zero_block, align 8, !dbg !2934
  %add.ptr = getelementptr inbounds %struct.meta, %struct.meta* %3, i64 1, !dbg !2935
  store %struct.meta* %add.ptr, %struct.meta** %base_block, align 8, !dbg !2936
  %4 = load %struct.meta*, %struct.meta** %zero_block, align 8, !dbg !2937
  %length = getelementptr inbounds %struct.meta, %struct.meta* %4, i32 0, i32 0, !dbg !2938
  store i64 0, i64* %length, align 8, !dbg !2939
  %5 = load %struct.meta*, %struct.meta** %base_block, align 8, !dbg !2940
  %6 = load %struct.meta*, %struct.meta** %zero_block, align 8, !dbg !2941
  %next = getelementptr inbounds %struct.meta, %struct.meta* %6, i32 0, i32 1, !dbg !2942
  store %struct.meta* %5, %struct.meta** %next, align 8, !dbg !2943
  %7 = load %struct.meta*, %struct.meta** %zero_block, align 8, !dbg !2944
  %prev = getelementptr inbounds %struct.meta, %struct.meta* %7, i32 0, i32 2, !dbg !2945
  store %struct.meta* null, %struct.meta** %prev, align 8, !dbg !2946
  %8 = load %struct.meta*, %struct.meta** %base_block, align 8, !dbg !2947
  %length2 = getelementptr inbounds %struct.meta, %struct.meta* %8, i32 0, i32 0, !dbg !2948
  store i64 4068, i64* %length2, align 8, !dbg !2949
  %9 = load %struct.meta*, %struct.meta** %zero_block, align 8, !dbg !2950
  %10 = load %struct.meta*, %struct.meta** %base_block, align 8, !dbg !2951
  %prev3 = getelementptr inbounds %struct.meta, %struct.meta* %10, i32 0, i32 2, !dbg !2952
  store %struct.meta* %9, %struct.meta** %prev3, align 8, !dbg !2953
  %11 = load %struct.meta*, %struct.meta** %base_block, align 8, !dbg !2954
  %next4 = getelementptr inbounds %struct.meta, %struct.meta* %11, i32 0, i32 1, !dbg !2955
  store %struct.meta* null, %struct.meta** %next4, align 8, !dbg !2956
  ret void, !dbg !2957
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_unlink(%struct.meta* %block) #6 !dbg !2958 {
entry:
  %block.addr = alloca %struct.meta*, align 8
  store %struct.meta* %block, %struct.meta** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.meta** %block.addr, metadata !2959, metadata !DIExpression()), !dbg !2960
  %0 = load %struct.meta*, %struct.meta** %block.addr, align 8, !dbg !2961
  %cmp = icmp eq %struct.meta* %0, null, !dbg !2963
  br i1 %cmp, label %if.then, label %if.end, !dbg !2964

if.then:                                          ; preds = %entry
  br label %return, !dbg !2965

if.end:                                           ; preds = %entry
  %1 = load %struct.meta*, %struct.meta** %block.addr, align 8, !dbg !2967
  %prev = getelementptr inbounds %struct.meta, %struct.meta* %1, i32 0, i32 2, !dbg !2969
  %2 = load %struct.meta*, %struct.meta** %prev, align 8, !dbg !2969
  %cmp1 = icmp ne %struct.meta* %2, null, !dbg !2970
  br i1 %cmp1, label %if.then2, label %if.end5, !dbg !2971

if.then2:                                         ; preds = %if.end
  %3 = load %struct.meta*, %struct.meta** %block.addr, align 8, !dbg !2972
  %next = getelementptr inbounds %struct.meta, %struct.meta* %3, i32 0, i32 1, !dbg !2974
  %4 = load %struct.meta*, %struct.meta** %next, align 8, !dbg !2974
  %5 = load %struct.meta*, %struct.meta** %block.addr, align 8, !dbg !2975
  %prev3 = getelementptr inbounds %struct.meta, %struct.meta* %5, i32 0, i32 2, !dbg !2976
  %6 = load %struct.meta*, %struct.meta** %prev3, align 8, !dbg !2976
  %next4 = getelementptr inbounds %struct.meta, %struct.meta* %6, i32 0, i32 1, !dbg !2977
  store %struct.meta* %4, %struct.meta** %next4, align 8, !dbg !2978
  br label %if.end5, !dbg !2979

if.end5:                                          ; preds = %if.then2, %if.end
  %7 = load %struct.meta*, %struct.meta** %block.addr, align 8, !dbg !2980
  %next6 = getelementptr inbounds %struct.meta, %struct.meta* %7, i32 0, i32 1, !dbg !2982
  %8 = load %struct.meta*, %struct.meta** %next6, align 8, !dbg !2982
  %cmp7 = icmp ne %struct.meta* %8, null, !dbg !2983
  br i1 %cmp7, label %if.then8, label %if.end12, !dbg !2984

if.then8:                                         ; preds = %if.end5
  %9 = load %struct.meta*, %struct.meta** %block.addr, align 8, !dbg !2985
  %prev9 = getelementptr inbounds %struct.meta, %struct.meta* %9, i32 0, i32 2, !dbg !2987
  %10 = load %struct.meta*, %struct.meta** %prev9, align 8, !dbg !2987
  %11 = load %struct.meta*, %struct.meta** %block.addr, align 8, !dbg !2988
  %next10 = getelementptr inbounds %struct.meta, %struct.meta* %11, i32 0, i32 1, !dbg !2989
  %12 = load %struct.meta*, %struct.meta** %next10, align 8, !dbg !2989
  %prev11 = getelementptr inbounds %struct.meta, %struct.meta* %12, i32 0, i32 2, !dbg !2990
  store %struct.meta* %10, %struct.meta** %prev11, align 8, !dbg !2991
  br label %if.end12, !dbg !2992

if.end12:                                         ; preds = %if.then8, %if.end5
  br label %return, !dbg !2993

return:                                           ; preds = %if.end12, %if.then
  ret void, !dbg !2994
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @cgc_freelist_alloc(i64 %length) #6 !dbg !2995 {
entry:
  %retval = alloca i8*, align 8
  %length.addr = alloca i64, align 8
  %walker = alloca %struct.meta*, align 8
  %newone = alloca %struct.meta*, align 8
  store i64 %length, i64* %length.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %length.addr, metadata !2998, metadata !DIExpression()), !dbg !2999
  call void @llvm.dbg.declare(metadata %struct.meta** %walker, metadata !3000, metadata !DIExpression()), !dbg !3001
  store %struct.meta* null, %struct.meta** %walker, align 8, !dbg !3001
  call void @llvm.dbg.declare(metadata %struct.meta** %newone, metadata !3002, metadata !DIExpression()), !dbg !3003
  store %struct.meta* null, %struct.meta** %newone, align 8, !dbg !3003
  %0 = load %struct.meta*, %struct.meta** getelementptr inbounds ([128 x %struct.meta*], [128 x %struct.meta*]* @lookaside, i64 0, i64 0), align 16, !dbg !3004
  %cmp = icmp eq %struct.meta* %0, null, !dbg !3006
  br i1 %cmp, label %if.then, label %if.end, !dbg !3007

if.then:                                          ; preds = %entry
  call void @cgc_init_freelist() #15, !dbg !3008
  br label %if.end, !dbg !3010

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.meta*, %struct.meta** getelementptr inbounds ([128 x %struct.meta*], [128 x %struct.meta*]* @lookaside, i64 0, i64 0), align 16, !dbg !3011
  store %struct.meta* %1, %struct.meta** %walker, align 8, !dbg !3012
  br label %while.cond, !dbg !3013

while.cond:                                       ; preds = %if.end4, %if.end
  %2 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !3014
  %tobool = icmp ne %struct.meta* %2, null, !dbg !3013
  br i1 %tobool, label %while.body, label %while.end, !dbg !3013

while.body:                                       ; preds = %while.cond
  %3 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !3015
  %length1 = getelementptr inbounds %struct.meta, %struct.meta* %3, i32 0, i32 0, !dbg !3018
  %4 = load i64, i64* %length1, align 8, !dbg !3018
  %5 = load i64, i64* %length.addr, align 8, !dbg !3019
  %cmp2 = icmp ult i64 %4, %5, !dbg !3020
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !3021

if.then3:                                         ; preds = %while.body
  %6 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !3022
  %next = getelementptr inbounds %struct.meta, %struct.meta* %6, i32 0, i32 1, !dbg !3024
  %7 = load %struct.meta*, %struct.meta** %next, align 8, !dbg !3024
  store %struct.meta* %7, %struct.meta** %walker, align 8, !dbg !3025
  br label %if.end4, !dbg !3026

if.else:                                          ; preds = %while.body
  br label %while.end, !dbg !3027

if.end4:                                          ; preds = %if.then3
  br label %while.cond, !dbg !3013, !llvm.loop !3029

while.end:                                        ; preds = %if.else, %while.cond
  %8 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !3031
  %cmp5 = icmp eq %struct.meta* %8, null, !dbg !3033
  br i1 %cmp5, label %if.then6, label %if.else7, !dbg !3034

if.then6:                                         ; preds = %while.end
  %9 = load i64, i64* %length.addr, align 8, !dbg !3035
  call void @cgc_add_freelist_block(i64 %9) #15, !dbg !3037
  %10 = load i64, i64* %length.addr, align 8, !dbg !3038
  %call = call i8* @cgc_freelist_alloc(i64 %10) #15, !dbg !3039
  store i8* %call, i8** %retval, align 8, !dbg !3040
  br label %return, !dbg !3040

if.else7:                                         ; preds = %while.end
  %11 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !3041
  call void @cgc_unlink(%struct.meta* %11) #15, !dbg !3043
  %12 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !3044
  %length8 = getelementptr inbounds %struct.meta, %struct.meta* %12, i32 0, i32 0, !dbg !3046
  %13 = load i64, i64* %length8, align 8, !dbg !3046
  %14 = load i64, i64* %length.addr, align 8, !dbg !3047
  %sub = sub i64 %13, %14, !dbg !3048
  %cmp9 = icmp ult i64 %sub, 24, !dbg !3049
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !3050

if.then10:                                        ; preds = %if.else7
  %15 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !3051
  %16 = bitcast %struct.meta* %15 to i8*, !dbg !3053
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 4, !dbg !3054
  store i8* %add.ptr, i8** %retval, align 8, !dbg !3055
  br label %return, !dbg !3055

if.end11:                                         ; preds = %if.else7
  %17 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !3056
  %18 = bitcast %struct.meta* %17 to i8*, !dbg !3057
  %add.ptr12 = getelementptr inbounds i8, i8* %18, i64 4, !dbg !3058
  %19 = load i64, i64* %length.addr, align 8, !dbg !3059
  %add.ptr13 = getelementptr inbounds i8, i8* %add.ptr12, i64 %19, !dbg !3060
  %20 = bitcast i8* %add.ptr13 to %struct.meta*, !dbg !3061
  store %struct.meta* %20, %struct.meta** %newone, align 8, !dbg !3062
  %21 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !3063
  %length14 = getelementptr inbounds %struct.meta, %struct.meta* %21, i32 0, i32 0, !dbg !3064
  %22 = load i64, i64* %length14, align 8, !dbg !3064
  %23 = load i64, i64* %length.addr, align 8, !dbg !3065
  %add = add i64 %23, 4, !dbg !3066
  %sub15 = sub i64 %22, %add, !dbg !3067
  %24 = load %struct.meta*, %struct.meta** %newone, align 8, !dbg !3068
  %length16 = getelementptr inbounds %struct.meta, %struct.meta* %24, i32 0, i32 0, !dbg !3069
  store i64 %sub15, i64* %length16, align 8, !dbg !3070
  %25 = load i64, i64* %length.addr, align 8, !dbg !3071
  %26 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !3072
  %length17 = getelementptr inbounds %struct.meta, %struct.meta* %26, i32 0, i32 0, !dbg !3073
  store i64 %25, i64* %length17, align 8, !dbg !3074
  %27 = load %struct.meta*, %struct.meta** %newone, align 8, !dbg !3075
  call void @cgc_link(%struct.meta* %27) #15, !dbg !3076
  %28 = load %struct.meta*, %struct.meta** %walker, align 8, !dbg !3077
  %29 = bitcast %struct.meta* %28 to i8*, !dbg !3078
  %add.ptr18 = getelementptr inbounds i8, i8* %29, i64 4, !dbg !3079
  store i8* %add.ptr18, i8** %retval, align 8, !dbg !3080
  br label %return, !dbg !3080

return:                                           ; preds = %if.end11, %if.then10, %if.then6
  %30 = load i8*, i8** %retval, align 8, !dbg !3081
  ret i8* %30, !dbg !3081
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @cgc_calloc(i64 %length) #6 !dbg !3082 {
entry:
  %retval = alloca i8*, align 8
  %length.addr = alloca i64, align 8
  %out = alloca i8*, align 8
  store i64 %length, i64* %length.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %length.addr, metadata !3083, metadata !DIExpression()), !dbg !3084
  call void @llvm.dbg.declare(metadata i8** %out, metadata !3085, metadata !DIExpression()), !dbg !3086
  %0 = load i64, i64* %length.addr, align 8, !dbg !3087
  %call = call i8* @cgc_malloc(i64 %0) #15, !dbg !3088
  store i8* %call, i8** %out, align 8, !dbg !3086
  %1 = load i8*, i8** %out, align 8, !dbg !3089
  %tobool = icmp ne i8* %1, null, !dbg !3089
  br i1 %tobool, label %if.end, label %if.then, !dbg !3091

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %out, align 8, !dbg !3092
  store i8* %2, i8** %retval, align 8, !dbg !3094
  br label %return, !dbg !3094

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %length.addr, align 8, !dbg !3095
  %add = add i64 %3, 7, !dbg !3096
  %and = and i64 %add, 4294967288, !dbg !3097
  store i64 %and, i64* %length.addr, align 8, !dbg !3098
  %4 = load i8*, i8** %out, align 8, !dbg !3099
  %5 = load i64, i64* %length.addr, align 8, !dbg !3100
  call void @cgc_bzero(i8* %4, i64 %5) #15, !dbg !3101
  %6 = load i8*, i8** %out, align 8, !dbg !3102
  store i8* %6, i8** %retval, align 8, !dbg !3103
  br label %return, !dbg !3103

return:                                           ; preds = %if.end, %if.then
  %7 = load i8*, i8** %retval, align 8, !dbg !3104
  ret i8* %7, !dbg !3104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @cgc_malloc(i64 %length) #6 !dbg !3105 {
entry:
  %retval = alloca i8*, align 8
  %length.addr = alloca i64, align 8
  %bucket = alloca i32, align 4
  %outb = alloca %struct.meta*, align 8
  store i64 %length, i64* %length.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %length.addr, metadata !3106, metadata !DIExpression()), !dbg !3107
  call void @llvm.dbg.declare(metadata i32* %bucket, metadata !3108, metadata !DIExpression()), !dbg !3109
  store i32 0, i32* %bucket, align 4, !dbg !3109
  call void @llvm.dbg.declare(metadata %struct.meta** %outb, metadata !3110, metadata !DIExpression()), !dbg !3111
  store %struct.meta* null, %struct.meta** %outb, align 8, !dbg !3111
  %0 = load i64, i64* %length.addr, align 8, !dbg !3112
  %cmp = icmp ult i64 %0, 8, !dbg !3114
  br i1 %cmp, label %if.then, label %if.end, !dbg !3115

if.then:                                          ; preds = %entry
  store i64 8, i64* %length.addr, align 8, !dbg !3116
  br label %if.end, !dbg !3118

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64, i64* %length.addr, align 8, !dbg !3119
  %add = add i64 %1, 7, !dbg !3120
  %and = and i64 %add, 4294967288, !dbg !3121
  store i64 %and, i64* %length.addr, align 8, !dbg !3122
  %2 = load i64, i64* %length.addr, align 8, !dbg !3123
  %cmp1 = icmp ugt i64 %2, 1016, !dbg !3123
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !3123

cond.true:                                        ; preds = %if.end
  br label %cond.end, !dbg !3123

cond.false:                                       ; preds = %if.end
  %3 = load i64, i64* %length.addr, align 8, !dbg !3123
  %div = udiv i64 %3, 8, !dbg !3123
  br label %cond.end, !dbg !3123

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %div, %cond.false ], !dbg !3123
  %conv = trunc i64 %cond to i32, !dbg !3123
  store i32 %conv, i32* %bucket, align 4, !dbg !3124
  %4 = load i32, i32* %bucket, align 4, !dbg !3125
  %cmp2 = icmp eq i32 %4, 0, !dbg !3127
  br i1 %cmp2, label %if.then4, label %if.else, !dbg !3128

if.then4:                                         ; preds = %cond.end
  %5 = load i64, i64* %length.addr, align 8, !dbg !3129
  %call = call i8* @cgc_freelist_alloc(i64 %5) #15, !dbg !3131
  store i8* %call, i8** %retval, align 8, !dbg !3132
  br label %return, !dbg !3132

if.else:                                          ; preds = %cond.end
  br label %while.cond, !dbg !3133

while.cond:                                       ; preds = %if.end10, %if.else
  %6 = load i32, i32* %bucket, align 4, !dbg !3135
  %cmp5 = icmp slt i32 %6, 128, !dbg !3136
  br i1 %cmp5, label %while.body, label %while.end, !dbg !3133

while.body:                                       ; preds = %while.cond
  %7 = load i32, i32* %bucket, align 4, !dbg !3137
  %idxprom = sext i32 %7 to i64, !dbg !3140
  %arrayidx = getelementptr inbounds [128 x %struct.meta*], [128 x %struct.meta*]* @lookaside, i64 0, i64 %idxprom, !dbg !3140
  %8 = load %struct.meta*, %struct.meta** %arrayidx, align 8, !dbg !3140
  %cmp7 = icmp ne %struct.meta* %8, null, !dbg !3141
  br i1 %cmp7, label %if.then9, label %if.end10, !dbg !3142

if.then9:                                         ; preds = %while.body
  br label %while.end, !dbg !3143

if.end10:                                         ; preds = %while.body
  %9 = load i32, i32* %bucket, align 4, !dbg !3145
  %inc = add nsw i32 %9, 1, !dbg !3145
  store i32 %inc, i32* %bucket, align 4, !dbg !3145
  br label %while.cond, !dbg !3133, !llvm.loop !3146

while.end:                                        ; preds = %if.then9, %while.cond
  br label %if.end11

if.end11:                                         ; preds = %while.end
  %10 = load i32, i32* %bucket, align 4, !dbg !3148
  %cmp12 = icmp eq i32 %10, 128, !dbg !3150
  br i1 %cmp12, label %if.then14, label %if.else16, !dbg !3151

if.then14:                                        ; preds = %if.end11
  %11 = load i64, i64* %length.addr, align 8, !dbg !3152
  %call15 = call i8* @cgc_freelist_alloc(i64 %11) #15, !dbg !3154
  store i8* %call15, i8** %retval, align 8, !dbg !3155
  br label %return, !dbg !3155

if.else16:                                        ; preds = %if.end11
  %12 = load i32, i32* %bucket, align 4, !dbg !3156
  %idxprom17 = sext i32 %12 to i64, !dbg !3158
  %arrayidx18 = getelementptr inbounds [128 x %struct.meta*], [128 x %struct.meta*]* @lookaside, i64 0, i64 %idxprom17, !dbg !3158
  %13 = load %struct.meta*, %struct.meta** %arrayidx18, align 8, !dbg !3158
  store %struct.meta* %13, %struct.meta** %outb, align 8, !dbg !3159
  %14 = load %struct.meta*, %struct.meta** %outb, align 8, !dbg !3160
  %next = getelementptr inbounds %struct.meta, %struct.meta* %14, i32 0, i32 1, !dbg !3161
  %15 = load %struct.meta*, %struct.meta** %next, align 8, !dbg !3161
  %16 = load i32, i32* %bucket, align 4, !dbg !3162
  %idxprom19 = sext i32 %16 to i64, !dbg !3163
  %arrayidx20 = getelementptr inbounds [128 x %struct.meta*], [128 x %struct.meta*]* @lookaside, i64 0, i64 %idxprom19, !dbg !3163
  store %struct.meta* %15, %struct.meta** %arrayidx20, align 8, !dbg !3164
  %17 = load %struct.meta*, %struct.meta** %outb, align 8, !dbg !3165
  %18 = bitcast %struct.meta* %17 to i8*, !dbg !3166
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 4, !dbg !3167
  store i8* %add.ptr, i8** %retval, align 8, !dbg !3168
  br label %return, !dbg !3168

return:                                           ; preds = %if.else16, %if.then14, %if.then4
  %19 = load i8*, i8** %retval, align 8, !dbg !3169
  ret i8* %19, !dbg !3169
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @cgc_round(double %val) #6 !dbg !3170 {
entry:
  %retval = alloca double, align 8
  %val.addr = alloca double, align 8
  store double %val, double* %val.addr, align 8
  call void @llvm.dbg.declare(metadata double* %val.addr, metadata !3171, metadata !DIExpression()), !dbg !3172
  %0 = load double, double* %val.addr, align 8, !dbg !3173
  %cmp = fcmp olt double %0, 0.000000e+00, !dbg !3175
  br i1 %cmp, label %if.then, label %if.else, !dbg !3176

if.then:                                          ; preds = %entry
  %1 = load double, double* %val.addr, align 8, !dbg !3177
  %sub = fsub double %1, 5.000000e-01, !dbg !3178
  %call = call double @cgc_rint(double %sub) #15, !dbg !3179
  store double %call, double* %retval, align 8, !dbg !3180
  br label %return, !dbg !3180

if.else:                                          ; preds = %entry
  %2 = load double, double* %val.addr, align 8, !dbg !3181
  %cmp1 = fcmp ogt double %2, 0.000000e+00, !dbg !3183
  br i1 %cmp1, label %if.then2, label %if.else4, !dbg !3184

if.then2:                                         ; preds = %if.else
  %3 = load double, double* %val.addr, align 8, !dbg !3185
  %add = fadd double %3, 5.000000e-01, !dbg !3186
  %call3 = call double @cgc_rint(double %add) #15, !dbg !3187
  store double %call3, double* %retval, align 8, !dbg !3188
  br label %return, !dbg !3188

if.else4:                                         ; preds = %if.else
  %4 = load double, double* %val.addr, align 8, !dbg !3189
  store double %4, double* %retval, align 8, !dbg !3190
  br label %return, !dbg !3190

return:                                           ; preds = %if.else4, %if.then2, %if.then
  %5 = load double, double* %retval, align 8, !dbg !3191
  ret double %5, !dbg !3191
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_seed_prng_array(i32* %pSeedArray, i32 %arrayLen) #6 !dbg !3192 {
entry:
  %pSeedArray.addr = alloca i32*, align 8
  %arrayLen.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %state_value = alloca i32, align 4
  store i32* %pSeedArray, i32** %pSeedArray.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pSeedArray.addr, metadata !3195, metadata !DIExpression()), !dbg !3196
  store i32 %arrayLen, i32* %arrayLen.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %arrayLen.addr, metadata !3197, metadata !DIExpression()), !dbg !3198
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3199, metadata !DIExpression()), !dbg !3200
  call void @cgc_bzero(i8* bitcast ([32 x i32]* @state to i8*), i64 128) #15, !dbg !3201
  store i32 0, i32* @state_n, align 4, !dbg !3202
  %0 = load i32, i32* %arrayLen.addr, align 4, !dbg !3203
  %cmp = icmp ugt i32 %0, 32, !dbg !3205
  br i1 %cmp, label %if.then, label %if.end, !dbg !3206

if.then:                                          ; preds = %entry
  store i32 32, i32* %arrayLen.addr, align 4, !dbg !3207
  br label %if.end, !dbg !3208

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !3209
  br label %for.cond, !dbg !3211

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4, !dbg !3212
  %2 = load i32, i32* %arrayLen.addr, align 4, !dbg !3214
  %cmp1 = icmp ult i32 %1, %2, !dbg !3215
  br i1 %cmp1, label %for.body, label %for.end, !dbg !3216

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %pSeedArray.addr, align 8, !dbg !3217
  %4 = load i32, i32* %i, align 4, !dbg !3218
  %idxprom = zext i32 %4 to i64, !dbg !3217
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !3217
  %5 = load i32, i32* %arrayidx, align 4, !dbg !3217
  %6 = load i32, i32* %i, align 4, !dbg !3219
  %idxprom2 = zext i32 %6 to i64, !dbg !3220
  %arrayidx3 = getelementptr inbounds [32 x i32], [32 x i32]* @state, i64 0, i64 %idxprom2, !dbg !3220
  store i32 %5, i32* %arrayidx3, align 4, !dbg !3221
  br label %for.inc, !dbg !3220

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !3222
  %inc = add i32 %7, 1, !dbg !3222
  store i32 %inc, i32* %i, align 4, !dbg !3222
  br label %for.cond, !dbg !3223, !llvm.loop !3224

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %arrayLen.addr, align 4, !dbg !3226
  store i32 %8, i32* %i, align 4, !dbg !3228
  br label %for.cond4, !dbg !3229

for.cond4:                                        ; preds = %for.inc11, %for.end
  %9 = load i32, i32* %i, align 4, !dbg !3230
  %cmp5 = icmp ult i32 %9, 32, !dbg !3232
  br i1 %cmp5, label %for.body6, label %for.end13, !dbg !3233

for.body6:                                        ; preds = %for.cond4
  call void @llvm.dbg.declare(metadata i32* %state_value, metadata !3234, metadata !DIExpression()), !dbg !3236
  %10 = load i32, i32* %i, align 4, !dbg !3237
  %sub = sub i32 %10, 1, !dbg !3238
  %and = and i32 %sub, 31, !dbg !3239
  %idxprom7 = zext i32 %and to i64, !dbg !3240
  %arrayidx8 = getelementptr inbounds [32 x i32], [32 x i32]* @state, i64 0, i64 %idxprom7, !dbg !3240
  %11 = load i32, i32* %arrayidx8, align 4, !dbg !3240
  store i32 %11, i32* %state_value, align 4, !dbg !3236
  %12 = load i32, i32* %state_value, align 4, !dbg !3241
  %13 = load i32, i32* %state_value, align 4, !dbg !3242
  %shr = lshr i32 %13, 30, !dbg !3243
  %14 = load i32, i32* %i, align 4, !dbg !3244
  %add = add i32 %shr, %14, !dbg !3245
  %xor = xor i32 %12, %add, !dbg !3246
  %mul = mul i32 %xor, 524287, !dbg !3247
  %15 = load i32, i32* %i, align 4, !dbg !3248
  %idxprom9 = zext i32 %15 to i64, !dbg !3249
  %arrayidx10 = getelementptr inbounds [32 x i32], [32 x i32]* @state, i64 0, i64 %idxprom9, !dbg !3249
  store i32 %mul, i32* %arrayidx10, align 4, !dbg !3250
  br label %for.inc11, !dbg !3251

for.inc11:                                        ; preds = %for.body6
  %16 = load i32, i32* %i, align 4, !dbg !3252
  %inc12 = add i32 %16, 1, !dbg !3252
  store i32 %inc12, i32* %i, align 4, !dbg !3252
  br label %for.cond4, !dbg !3253, !llvm.loop !3254

for.end13:                                        ; preds = %for.cond4
  ret void, !dbg !3256
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_seed_prng(i32 %seedValue) #6 !dbg !3257 {
entry:
  %seedValue.addr = alloca i32, align 4
  store i32 %seedValue, i32* %seedValue.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %seedValue.addr, metadata !3260, metadata !DIExpression()), !dbg !3261
  call void @cgc_seed_prng_array(i32* %seedValue.addr, i32 1) #15, !dbg !3262
  ret void, !dbg !3263
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_prng() #6 !dbg !3264 {
entry:
  %v0 = alloca i32, align 4
  %vM1 = alloca i32, align 4
  %vM2 = alloca i32, align 4
  %vM3 = alloca i32, align 4
  %z0 = alloca i32, align 4
  %z1 = alloca i32, align 4
  %z2 = alloca i32, align 4
  %newV1 = alloca i32, align 4
  %newV0 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %v0, metadata !3267, metadata !DIExpression()), !dbg !3268
  %0 = load i32, i32* @state_n, align 4, !dbg !3269
  %idxprom = zext i32 %0 to i64, !dbg !3270
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* @state, i64 0, i64 %idxprom, !dbg !3270
  %1 = load i32, i32* %arrayidx, align 4, !dbg !3270
  store i32 %1, i32* %v0, align 4, !dbg !3268
  call void @llvm.dbg.declare(metadata i32* %vM1, metadata !3271, metadata !DIExpression()), !dbg !3272
  %2 = load i32, i32* @state_n, align 4, !dbg !3273
  %add = add i32 %2, 3, !dbg !3274
  %and = and i32 %add, 31, !dbg !3275
  %idxprom1 = zext i32 %and to i64, !dbg !3276
  %arrayidx2 = getelementptr inbounds [32 x i32], [32 x i32]* @state, i64 0, i64 %idxprom1, !dbg !3276
  %3 = load i32, i32* %arrayidx2, align 4, !dbg !3276
  store i32 %3, i32* %vM1, align 4, !dbg !3272
  call void @llvm.dbg.declare(metadata i32* %vM2, metadata !3277, metadata !DIExpression()), !dbg !3278
  %4 = load i32, i32* @state_n, align 4, !dbg !3279
  %add3 = add i32 %4, 24, !dbg !3280
  %and4 = and i32 %add3, 31, !dbg !3281
  %idxprom5 = zext i32 %and4 to i64, !dbg !3282
  %arrayidx6 = getelementptr inbounds [32 x i32], [32 x i32]* @state, i64 0, i64 %idxprom5, !dbg !3282
  %5 = load i32, i32* %arrayidx6, align 4, !dbg !3282
  store i32 %5, i32* %vM2, align 4, !dbg !3278
  call void @llvm.dbg.declare(metadata i32* %vM3, metadata !3283, metadata !DIExpression()), !dbg !3284
  %6 = load i32, i32* @state_n, align 4, !dbg !3285
  %add7 = add i32 %6, 10, !dbg !3286
  %and8 = and i32 %add7, 31, !dbg !3287
  %idxprom9 = zext i32 %and8 to i64, !dbg !3288
  %arrayidx10 = getelementptr inbounds [32 x i32], [32 x i32]* @state, i64 0, i64 %idxprom9, !dbg !3288
  %7 = load i32, i32* %arrayidx10, align 4, !dbg !3288
  store i32 %7, i32* %vM3, align 4, !dbg !3284
  call void @llvm.dbg.declare(metadata i32* %z0, metadata !3289, metadata !DIExpression()), !dbg !3290
  %8 = load i32, i32* @state_n, align 4, !dbg !3291
  %add11 = add i32 %8, 31, !dbg !3292
  %and12 = and i32 %add11, 31, !dbg !3293
  %idxprom13 = zext i32 %and12 to i64, !dbg !3294
  %arrayidx14 = getelementptr inbounds [32 x i32], [32 x i32]* @state, i64 0, i64 %idxprom13, !dbg !3294
  %9 = load i32, i32* %arrayidx14, align 4, !dbg !3294
  store i32 %9, i32* %z0, align 4, !dbg !3290
  call void @llvm.dbg.declare(metadata i32* %z1, metadata !3295, metadata !DIExpression()), !dbg !3296
  %10 = load i32, i32* %v0, align 4, !dbg !3297
  %11 = load i32, i32* %vM1, align 4, !dbg !3298
  %12 = load i32, i32* %vM1, align 4, !dbg !3299
  %shr = lshr i32 %12, 8, !dbg !3300
  %xor = xor i32 %11, %shr, !dbg !3301
  %xor15 = xor i32 %10, %xor, !dbg !3302
  store i32 %xor15, i32* %z1, align 4, !dbg !3296
  call void @llvm.dbg.declare(metadata i32* %z2, metadata !3303, metadata !DIExpression()), !dbg !3304
  %13 = load i32, i32* %vM2, align 4, !dbg !3305
  %14 = load i32, i32* %vM2, align 4, !dbg !3306
  %shl = shl i32 %14, 19, !dbg !3307
  %xor16 = xor i32 %13, %shl, !dbg !3308
  %15 = load i32, i32* %vM3, align 4, !dbg !3309
  %16 = load i32, i32* %vM3, align 4, !dbg !3310
  %shl17 = shl i32 %16, 14, !dbg !3311
  %xor18 = xor i32 %15, %shl17, !dbg !3312
  %xor19 = xor i32 %xor16, %xor18, !dbg !3313
  store i32 %xor19, i32* %z2, align 4, !dbg !3304
  call void @llvm.dbg.declare(metadata i32* %newV1, metadata !3314, metadata !DIExpression()), !dbg !3315
  %17 = load i32, i32* %z1, align 4, !dbg !3316
  %18 = load i32, i32* %z2, align 4, !dbg !3317
  %xor20 = xor i32 %17, %18, !dbg !3318
  store i32 %xor20, i32* %newV1, align 4, !dbg !3315
  call void @llvm.dbg.declare(metadata i32* %newV0, metadata !3319, metadata !DIExpression()), !dbg !3320
  %19 = load i32, i32* %z0, align 4, !dbg !3321
  %20 = load i32, i32* %z0, align 4, !dbg !3322
  %shl21 = shl i32 %20, 11, !dbg !3323
  %xor22 = xor i32 %19, %shl21, !dbg !3324
  %21 = load i32, i32* %z1, align 4, !dbg !3325
  %22 = load i32, i32* %z1, align 4, !dbg !3326
  %shl23 = shl i32 %22, 7, !dbg !3327
  %xor24 = xor i32 %21, %shl23, !dbg !3328
  %xor25 = xor i32 %xor22, %xor24, !dbg !3329
  %23 = load i32, i32* %z2, align 4, !dbg !3330
  %24 = load i32, i32* %z2, align 4, !dbg !3331
  %shl26 = shl i32 %24, 13, !dbg !3332
  %xor27 = xor i32 %23, %shl26, !dbg !3333
  %xor28 = xor i32 %xor25, %xor27, !dbg !3334
  store i32 %xor28, i32* %newV0, align 4, !dbg !3320
  %25 = load i32, i32* %newV1, align 4, !dbg !3335
  %26 = load i32, i32* @state_n, align 4, !dbg !3336
  %idxprom29 = zext i32 %26 to i64, !dbg !3337
  %arrayidx30 = getelementptr inbounds [32 x i32], [32 x i32]* @state, i64 0, i64 %idxprom29, !dbg !3337
  store i32 %25, i32* %arrayidx30, align 4, !dbg !3338
  %27 = load i32, i32* %newV0, align 4, !dbg !3339
  %28 = load i32, i32* @state_n, align 4, !dbg !3340
  %add31 = add i32 %28, 31, !dbg !3341
  %and32 = and i32 %add31, 31, !dbg !3342
  %idxprom33 = zext i32 %and32 to i64, !dbg !3343
  %arrayidx34 = getelementptr inbounds [32 x i32], [32 x i32]* @state, i64 0, i64 %idxprom33, !dbg !3343
  store i32 %27, i32* %arrayidx34, align 4, !dbg !3344
  %29 = load i32, i32* @state_n, align 4, !dbg !3345
  %add35 = add i32 %29, 31, !dbg !3346
  %and36 = and i32 %add35, 31, !dbg !3347
  store i32 %and36, i32* @state_n, align 4, !dbg !3348
  %30 = load i32, i32* %newV0, align 4, !dbg !3349
  ret i32 %30, !dbg !3350
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_random_in_range(i32 %min, i32 %max) #6 !dbg !3351 {
entry:
  %retval = alloca i32, align 4
  %min.addr = alloca i32, align 4
  %max.addr = alloca i32, align 4
  %random_value = alloca i32, align 4
  %delta = alloca i32, align 4
  %scale_divider = alloca i32, align 4
  store i32 %min, i32* %min.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %min.addr, metadata !3354, metadata !DIExpression()), !dbg !3355
  store i32 %max, i32* %max.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max.addr, metadata !3356, metadata !DIExpression()), !dbg !3357
  %0 = load i32, i32* %min.addr, align 4, !dbg !3358
  %1 = load i32, i32* %max.addr, align 4, !dbg !3360
  %cmp = icmp ugt i32 %0, %1, !dbg !3361
  br i1 %cmp, label %if.then, label %if.end, !dbg !3362

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3363
  br label %return, !dbg !3363

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %min.addr, align 4, !dbg !3364
  %3 = load i32, i32* %max.addr, align 4, !dbg !3366
  %cmp1 = icmp eq i32 %2, %3, !dbg !3367
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !3368

if.then2:                                         ; preds = %if.end
  %4 = load i32, i32* %min.addr, align 4, !dbg !3369
  store i32 %4, i32* %retval, align 4, !dbg !3370
  br label %return, !dbg !3370

if.end3:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %random_value, metadata !3371, metadata !DIExpression()), !dbg !3372
  call void @llvm.dbg.declare(metadata i32* %delta, metadata !3373, metadata !DIExpression()), !dbg !3374
  %5 = load i32, i32* %max.addr, align 4, !dbg !3375
  %6 = load i32, i32* %min.addr, align 4, !dbg !3376
  %sub = sub i32 %5, %6, !dbg !3377
  %add = add i32 %sub, 1, !dbg !3378
  store i32 %add, i32* %delta, align 4, !dbg !3374
  %7 = load i32, i32* %delta, align 4, !dbg !3379
  %cmp4 = icmp eq i32 %7, 0, !dbg !3381
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !3382

if.then5:                                         ; preds = %if.end3
  %call = call i32 @cgc_prng() #15, !dbg !3383
  store i32 %call, i32* %retval, align 4, !dbg !3384
  br label %return, !dbg !3384

if.end6:                                          ; preds = %if.end3
  call void @llvm.dbg.declare(metadata i32* %scale_divider, metadata !3385, metadata !DIExpression()), !dbg !3386
  %8 = load i32, i32* %delta, align 4, !dbg !3387
  %int_cast_to_i64 = zext i32 %8 to i64, !dbg !3388
  call void @klee_div_zero_check(i64 %int_cast_to_i64), !dbg !3388
  %div = udiv i32 -1, %8, !dbg !3388, !klee.check.div !2755
  store i32 %div, i32* %scale_divider, align 4, !dbg !3386
  br label %do.body, !dbg !3389

do.body:                                          ; preds = %do.cond, %if.end6
  %call7 = call i32 @cgc_prng() #15, !dbg !3390
  store i32 %call7, i32* %random_value, align 4, !dbg !3392
  br label %do.cond, !dbg !3393

do.cond:                                          ; preds = %do.body
  %9 = load i32, i32* %random_value, align 4, !dbg !3394
  %10 = load i32, i32* %scale_divider, align 4, !dbg !3395
  %11 = load i32, i32* %delta, align 4, !dbg !3396
  %mul = mul i32 %10, %11, !dbg !3397
  %cmp8 = icmp uge i32 %9, %mul, !dbg !3398
  br i1 %cmp8, label %do.body, label %do.end, !dbg !3393, !llvm.loop !3399

do.end:                                           ; preds = %do.cond
  %12 = load i32, i32* %min.addr, align 4, !dbg !3401
  %13 = load i32, i32* %random_value, align 4, !dbg !3402
  %14 = load i32, i32* %scale_divider, align 4, !dbg !3403
  %int_cast_to_i641 = zext i32 %14 to i64, !dbg !3404
  call void @klee_div_zero_check(i64 %int_cast_to_i641), !dbg !3404
  %div9 = udiv i32 %13, %14, !dbg !3404, !klee.check.div !2755
  %add10 = add i32 %12, %div9, !dbg !3405
  store i32 %add10, i32* %retval, align 4, !dbg !3406
  br label %return, !dbg !3406

return:                                           ; preds = %do.end, %if.then5, %if.then2, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !3407
  ret i32 %15, !dbg !3407
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_WRAPPER_PUTC(i8* %ctx, i32 %c, i64 %pos) #6 !dbg !3408 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca i8*, align 8
  %c.addr = alloca i32, align 4
  %pos.addr = alloca i64, align 8
  %tx_bytes = alloca i64, align 8
  store i8* %ctx, i8** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ctx.addr, metadata !3409, metadata !DIExpression()), !dbg !3410
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !3411, metadata !DIExpression()), !dbg !3412
  store i64 %pos, i64* %pos.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %pos.addr, metadata !3413, metadata !DIExpression()), !dbg !3414
  call void @llvm.dbg.declare(metadata i64* %tx_bytes, metadata !3415, metadata !DIExpression()), !dbg !3416
  %0 = bitcast i32* %c.addr to i8*, !dbg !3417
  %call = call i32 @cgc_transmit(i32 1, i8* %0, i64 1, i64* %tx_bytes) #15, !dbg !3419
  %cmp = icmp ne i32 %call, 0, !dbg !3420
  br i1 %cmp, label %if.then, label %if.end, !dbg !3421

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !3422
  br label %return, !dbg !3422

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %pos.addr, align 8, !dbg !3423
  %add = add i64 %1, 1, !dbg !3424
  %conv = trunc i64 %add to i32, !dbg !3425
  store i32 %conv, i32* %retval, align 4, !dbg !3426
  br label %return, !dbg !3426

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, align 4, !dbg !3427
  ret i32 %2, !dbg !3427
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_WRAPPER_OUTC(i8* %ctx, i32 %c, i64 %pos) #6 !dbg !3428 {
entry:
  %ctx.addr = alloca i8*, align 8
  %c.addr = alloca i32, align 4
  %pos.addr = alloca i64, align 8
  store i8* %ctx, i8** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ctx.addr, metadata !3429, metadata !DIExpression()), !dbg !3430
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !3431, metadata !DIExpression()), !dbg !3432
  store i64 %pos, i64* %pos.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %pos.addr, metadata !3433, metadata !DIExpression()), !dbg !3434
  %0 = load i32, i32* %c.addr, align 4, !dbg !3435
  %conv = trunc i32 %0 to i8, !dbg !3436
  %1 = load i8*, i8** %ctx.addr, align 8, !dbg !3437
  %2 = load i64, i64* %pos.addr, align 8, !dbg !3438
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %2, !dbg !3439
  store i8 %conv, i8* %add.ptr, align 1, !dbg !3440
  %3 = load i64, i64* %pos.addr, align 8, !dbg !3441
  %add = add i64 %3, 1, !dbg !3442
  %conv1 = trunc i64 %add to i32, !dbg !3443
  ret i32 %conv1, !dbg !3444
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_putchar(i32 %c) #6 !dbg !3445 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %tx_bytes = alloca i64, align 8
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !3446, metadata !DIExpression()), !dbg !3447
  call void @llvm.dbg.declare(metadata i64* %tx_bytes, metadata !3448, metadata !DIExpression()), !dbg !3449
  %0 = bitcast i32* %c.addr to i8*, !dbg !3450
  %call = call i32 @cgc_transmit(i32 1, i8* %0, i64 1, i64* %tx_bytes) #15, !dbg !3452
  %cmp = icmp ne i32 %call, 0, !dbg !3453
  br i1 %cmp, label %if.then, label %if.end, !dbg !3454

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !3455
  br label %return, !dbg !3455

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !3456
  store i32 %1, i32* %retval, align 4, !dbg !3457
  br label %return, !dbg !3457

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, align 4, !dbg !3458
  ret i32 %2, !dbg !3458
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_puts(i8* %s) #6 !dbg !3459 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %tx_bytes = alloca i64, align 8
  %s_len = alloca i64, align 8
  %total_sent = alloca i64, align 8
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3460, metadata !DIExpression()), !dbg !3461
  call void @llvm.dbg.declare(metadata i64* %tx_bytes, metadata !3462, metadata !DIExpression()), !dbg !3463
  call void @llvm.dbg.declare(metadata i64* %s_len, metadata !3464, metadata !DIExpression()), !dbg !3465
  call void @llvm.dbg.declare(metadata i64* %total_sent, metadata !3466, metadata !DIExpression()), !dbg !3467
  store i64 0, i64* %total_sent, align 8, !dbg !3467
  %0 = load i8*, i8** %s.addr, align 8, !dbg !3468
  %call = call i64 @cgc_strlen(i8* %0) #15, !dbg !3469
  store i64 %call, i64* %s_len, align 8, !dbg !3470
  br label %while.cond, !dbg !3471

while.cond:                                       ; preds = %if.end5, %entry
  %1 = load i64, i64* %total_sent, align 8, !dbg !3472
  %2 = load i64, i64* %s_len, align 8, !dbg !3473
  %cmp = icmp ne i64 %1, %2, !dbg !3474
  br i1 %cmp, label %while.body, label %while.end, !dbg !3471

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 8, !dbg !3475
  %4 = load i64, i64* %total_sent, align 8, !dbg !3478
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %4, !dbg !3479
  %5 = load i64, i64* %s_len, align 8, !dbg !3480
  %6 = load i64, i64* %total_sent, align 8, !dbg !3481
  %sub = sub i64 %5, %6, !dbg !3482
  %call1 = call i32 @cgc_transmit(i32 1, i8* %add.ptr, i64 %sub, i64* %tx_bytes) #15, !dbg !3483
  %cmp2 = icmp ne i32 %call1, 0, !dbg !3484
  br i1 %cmp2, label %if.then, label %if.end, !dbg !3485

if.then:                                          ; preds = %while.body
  store i32 -1, i32* %retval, align 4, !dbg !3486
  br label %return, !dbg !3486

if.end:                                           ; preds = %while.body
  %7 = load i64, i64* %tx_bytes, align 8, !dbg !3488
  %cmp3 = icmp eq i64 %7, 0, !dbg !3490
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !3491

if.then4:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !3492
  br label %return, !dbg !3492

if.end5:                                          ; preds = %if.end
  %8 = load i64, i64* %tx_bytes, align 8, !dbg !3494
  %9 = load i64, i64* %total_sent, align 8, !dbg !3495
  %add = add i64 %9, %8, !dbg !3495
  store i64 %add, i64* %total_sent, align 8, !dbg !3495
  br label %while.cond, !dbg !3471, !llvm.loop !3496

while.end:                                        ; preds = %while.cond
  %call6 = call i32 @cgc_putchar(i32 10) #15, !dbg !3498
  store i32 0, i32* %retval, align 4, !dbg !3499
  br label %return, !dbg !3499

return:                                           ; preds = %while.end, %if.then4, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !3500
  ret i32 %10, !dbg !3500
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_sprintf(i8* %buf, i8* %format, ...) #6 !dbg !3501 {
entry:
  %buf.addr = alloca i8*, align 8
  %format.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %return_val = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !3504, metadata !DIExpression()), !dbg !3505
  store i8* %format, i8** %format.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !3506, metadata !DIExpression()), !dbg !3507
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %args, metadata !3508, metadata !DIExpression()), !dbg !3509
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, !dbg !3510
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !3510
  call void @llvm.va_start(i8* %arraydecay1), !dbg !3510
  call void @llvm.dbg.declare(metadata i32* %return_val, metadata !3511, metadata !DIExpression()), !dbg !3512
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !3513
  %1 = load i8*, i8** %format.addr, align 8, !dbg !3514
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, !dbg !3515
  %call = call i32 @cgc_vsprintf(i8* %0, i8* %1, %struct.__va_list_tag* %arraydecay2) #15, !dbg !3516
  store i32 %call, i32* %return_val, align 4, !dbg !3512
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, !dbg !3517
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*, !dbg !3517
  call void @llvm.va_end(i8* %arraydecay34), !dbg !3517
  %2 = load i32, i32* %return_val, align 4, !dbg !3518
  ret i32 %2, !dbg !3519
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_vsprintf(i8* %buf, i8* %format, %struct.__va_list_tag* %args) #6 !dbg !3520 {
entry:
  %buf.addr = alloca i8*, align 8
  %format.addr = alloca i8*, align 8
  %args.addr = alloca %struct.__va_list_tag*, align 8
  %wrapper_outc = alloca i32 (i8*, i32, i64)*, align 8
  %ctx = alloca i8*, align 8
  %pos = alloca i64, align 8
  %iReturnValue = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !3523, metadata !DIExpression()), !dbg !3524
  store i8* %format, i8** %format.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !3525, metadata !DIExpression()), !dbg !3526
  store %struct.__va_list_tag* %args, %struct.__va_list_tag** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %args.addr, metadata !3527, metadata !DIExpression()), !dbg !3528
  call void @llvm.dbg.declare(metadata i32 (i8*, i32, i64)** %wrapper_outc, metadata !3529, metadata !DIExpression()), !dbg !3530
  store i32 (i8*, i32, i64)* @cgc_WRAPPER_OUTC, i32 (i8*, i32, i64)** %wrapper_outc, align 8, !dbg !3530
  call void @llvm.dbg.declare(metadata i8** %ctx, metadata !3531, metadata !DIExpression()), !dbg !3532
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !3533
  store i8* %0, i8** %ctx, align 8, !dbg !3532
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !3534, metadata !DIExpression()), !dbg !3535
  store i64 0, i64* %pos, align 8, !dbg !3535
  call void @llvm.dbg.declare(metadata i32* %iReturnValue, metadata !3536, metadata !DIExpression()), !dbg !3537
  %1 = load i8*, i8** %ctx, align 8, !dbg !3538
  %2 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %wrapper_outc, align 8, !dbg !3539
  %3 = load i64, i64* %pos, align 8, !dbg !3540
  %4 = load i8*, i8** %format.addr, align 8, !dbg !3541
  %5 = load %struct.__va_list_tag*, %struct.__va_list_tag** %args.addr, align 8, !dbg !3542
  %call = call i32 @cgc_wrapper_output(i8* %1, i32 (i8*, i32, i64)* %2, i64 %3, i8* %4, %struct.__va_list_tag* %5) #15, !dbg !3543
  store i32 %call, i32* %iReturnValue, align 4, !dbg !3537
  %6 = load i32 (i8*, i32, i64)*, i32 (i8*, i32, i64)** %wrapper_outc, align 8, !dbg !3544
  %7 = load i8*, i8** %ctx, align 8, !dbg !3545
  %8 = load i32, i32* %iReturnValue, align 4, !dbg !3546
  %conv = sext i32 %8 to i64, !dbg !3546
  %call1 = call i32 %6(i8* %7, i32 0, i64 %conv) #15, !dbg !3547
  %9 = load i32, i32* %iReturnValue, align 4, !dbg !3548
  ret i32 %9, !dbg !3549
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_rand() #6 !dbg !3550 {
entry:
  %call = call i32 @cgc_random_in_range(i32 0, i32 2147483646) #15, !dbg !3552
  ret i32 %call, !dbg !3553
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_srand(i32 %seed) #6 !dbg !3554 {
entry:
  %seed.addr = alloca i32, align 4
  store i32 %seed, i32* %seed.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %seed.addr, metadata !3557, metadata !DIExpression()), !dbg !3558
  %0 = load i32, i32* %seed.addr, align 4, !dbg !3559
  call void @cgc_seed_prng(i32 %0) #15, !dbg !3560
  ret void, !dbg !3561
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @cgc_atof(i8* %pStr) #6 !dbg !3562 {
entry:
  %pStr.addr = alloca i8*, align 8
  %whole = alloca double, align 8
  %fraction = alloca double, align 8
  %pWhole = alloca i8*, align 8
  %pFraction = alloca i8*, align 8
  store i8* %pStr, i8** %pStr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pStr.addr, metadata !3565, metadata !DIExpression()), !dbg !3566
  call void @llvm.dbg.declare(metadata double* %whole, metadata !3567, metadata !DIExpression()), !dbg !3568
  call void @llvm.dbg.declare(metadata double* %fraction, metadata !3569, metadata !DIExpression()), !dbg !3570
  store double 0.000000e+00, double* %fraction, align 8, !dbg !3570
  call void @llvm.dbg.declare(metadata i8** %pWhole, metadata !3571, metadata !DIExpression()), !dbg !3572
  %0 = load i8*, i8** %pStr.addr, align 8, !dbg !3573
  store i8* %0, i8** %pWhole, align 8, !dbg !3572
  call void @llvm.dbg.declare(metadata i8** %pFraction, metadata !3574, metadata !DIExpression()), !dbg !3575
  %1 = load i8*, i8** %pStr.addr, align 8, !dbg !3576
  store i8* %1, i8** %pFraction, align 8, !dbg !3577
  br label %while.cond, !dbg !3578

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i8*, i8** %pFraction, align 8, !dbg !3579
  %3 = load i8, i8* %2, align 1, !dbg !3580
  %conv = sext i8 %3 to i32, !dbg !3580
  %cmp = icmp ne i32 %conv, 0, !dbg !3581
  br i1 %cmp, label %while.body, label %while.end, !dbg !3578

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %pFraction, align 8, !dbg !3582
  %5 = load i8, i8* %4, align 1, !dbg !3585
  %conv2 = sext i8 %5 to i32, !dbg !3585
  %cmp3 = icmp eq i32 %conv2, 46, !dbg !3586
  br i1 %cmp3, label %if.then, label %if.end, !dbg !3587

if.then:                                          ; preds = %while.body
  %6 = load i8*, i8** %pFraction, align 8, !dbg !3588
  store i8 0, i8* %6, align 1, !dbg !3590
  %7 = load i8*, i8** %pFraction, align 8, !dbg !3591
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1, !dbg !3591
  store i8* %incdec.ptr, i8** %pFraction, align 8, !dbg !3591
  br label %while.end, !dbg !3592

if.end:                                           ; preds = %while.body
  %8 = load i8*, i8** %pFraction, align 8, !dbg !3593
  %incdec.ptr5 = getelementptr inbounds i8, i8* %8, i32 1, !dbg !3593
  store i8* %incdec.ptr5, i8** %pFraction, align 8, !dbg !3593
  br label %while.cond, !dbg !3578, !llvm.loop !3594

while.end:                                        ; preds = %if.then, %while.cond
  %9 = load i8*, i8** %pWhole, align 8, !dbg !3596
  %call = call i32 @cgc_atoi(i8* %9) #15, !dbg !3597
  %conv6 = sitofp i32 %call to double, !dbg !3597
  store double %conv6, double* %whole, align 8, !dbg !3598
  %10 = load i8*, i8** %pFraction, align 8, !dbg !3599
  %11 = load i8, i8* %10, align 1, !dbg !3601
  %conv7 = sext i8 %11 to i32, !dbg !3601
  %cmp8 = icmp ne i32 %conv7, 0, !dbg !3602
  br i1 %cmp8, label %if.then10, label %if.end21, !dbg !3603

if.then10:                                        ; preds = %while.end
  %12 = load i8*, i8** %pFraction, align 8, !dbg !3604
  %call11 = call i32 @cgc_atoi(i8* %12) #15, !dbg !3606
  %conv12 = sitofp i32 %call11 to double, !dbg !3606
  store double %conv12, double* %fraction, align 8, !dbg !3607
  br label %while.cond13, !dbg !3608

while.cond13:                                     ; preds = %while.body18, %if.then10
  %13 = load i8*, i8** %pFraction, align 8, !dbg !3609
  %cmp14 = icmp ne i8* %13, null, !dbg !3610
  br i1 %cmp14, label %land.rhs, label %land.end, !dbg !3611

land.rhs:                                         ; preds = %while.cond13
  %14 = load i8*, i8** %pFraction, align 8, !dbg !3612
  %15 = load i8, i8* %14, align 1, !dbg !3613
  %conv16 = sext i8 %15 to i32, !dbg !3613
  %call17 = call i32 @cgc_isdigit(i32 %conv16) #15, !dbg !3614
  %tobool = icmp ne i32 %call17, 0, !dbg !3611
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond13
  %16 = phi i1 [ false, %while.cond13 ], [ %tobool, %land.rhs ], !dbg !3615
  br i1 %16, label %while.body18, label %while.end20, !dbg !3608

while.body18:                                     ; preds = %land.end
  %17 = load double, double* %fraction, align 8, !dbg !3616
  %div = fdiv double %17, 1.000000e+01, !dbg !3616
  store double %div, double* %fraction, align 8, !dbg !3616
  %18 = load i8*, i8** %pFraction, align 8, !dbg !3618
  %incdec.ptr19 = getelementptr inbounds i8, i8* %18, i32 1, !dbg !3618
  store i8* %incdec.ptr19, i8** %pFraction, align 8, !dbg !3618
  br label %while.cond13, !dbg !3608, !llvm.loop !3619

while.end20:                                      ; preds = %land.end
  br label %if.end21, !dbg !3621

if.end21:                                         ; preds = %while.end20, %while.end
  %19 = load double, double* %whole, align 8, !dbg !3622
  %20 = load double, double* %fraction, align 8, !dbg !3623
  %add = fadd double %19, %20, !dbg !3624
  ret double %add, !dbg !3625
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @cgc_strcpy(i8* %pDest, i8* %pSrc) #6 !dbg !3626 {
entry:
  %pDest.addr = alloca i8*, align 8
  %pSrc.addr = alloca i8*, align 8
  %pDestReturn = alloca i8*, align 8
  store i8* %pDest, i8** %pDest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pDest.addr, metadata !3629, metadata !DIExpression()), !dbg !3630
  store i8* %pSrc, i8** %pSrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pSrc.addr, metadata !3631, metadata !DIExpression()), !dbg !3632
  call void @llvm.dbg.declare(metadata i8** %pDestReturn, metadata !3633, metadata !DIExpression()), !dbg !3634
  %0 = load i8*, i8** %pDest.addr, align 8, !dbg !3635
  store i8* %0, i8** %pDestReturn, align 8, !dbg !3634
  br label %while.cond, !dbg !3636

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i8*, i8** %pSrc.addr, align 8, !dbg !3637
  %2 = load i8, i8* %1, align 1, !dbg !3638
  %conv = sext i8 %2 to i32, !dbg !3638
  %cmp = icmp ne i32 %conv, 0, !dbg !3639
  br i1 %cmp, label %while.body, label %while.end, !dbg !3636

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %pSrc.addr, align 8, !dbg !3640
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !3640
  store i8* %incdec.ptr, i8** %pSrc.addr, align 8, !dbg !3640
  %4 = load i8, i8* %3, align 1, !dbg !3641
  %5 = load i8*, i8** %pDest.addr, align 8, !dbg !3642
  %incdec.ptr2 = getelementptr inbounds i8, i8* %5, i32 1, !dbg !3642
  store i8* %incdec.ptr2, i8** %pDest.addr, align 8, !dbg !3642
  store i8 %4, i8* %5, align 1, !dbg !3643
  br label %while.cond, !dbg !3636, !llvm.loop !3644

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %pDest.addr, align 8, !dbg !3645
  store i8 0, i8* %6, align 1, !dbg !3646
  %7 = load i8*, i8** %pDestReturn, align 8, !dbg !3647
  ret i8* %7, !dbg !3648
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @cgc_strncpy(i8* %pDest, i8* %pSrc, i64 %maxlen) #6 !dbg !3649 {
entry:
  %pDest.addr = alloca i8*, align 8
  %pSrc.addr = alloca i8*, align 8
  %maxlen.addr = alloca i64, align 8
  %n = alloca i64, align 8
  store i8* %pDest, i8** %pDest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pDest.addr, metadata !3652, metadata !DIExpression()), !dbg !3653
  store i8* %pSrc, i8** %pSrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pSrc.addr, metadata !3654, metadata !DIExpression()), !dbg !3655
  store i64 %maxlen, i64* %maxlen.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %maxlen.addr, metadata !3656, metadata !DIExpression()), !dbg !3657
  call void @llvm.dbg.declare(metadata i64* %n, metadata !3658, metadata !DIExpression()), !dbg !3659
  store i64 0, i64* %n, align 8, !dbg !3660
  br label %for.cond, !dbg !3662

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %n, align 8, !dbg !3663
  %1 = load i64, i64* %maxlen.addr, align 8, !dbg !3665
  %cmp = icmp ult i64 %0, %1, !dbg !3666
  br i1 %cmp, label %for.body, label %for.end, !dbg !3667

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %pSrc.addr, align 8, !dbg !3668
  %3 = load i64, i64* %n, align 8, !dbg !3671
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %3, !dbg !3668
  %4 = load i8, i8* %arrayidx, align 1, !dbg !3668
  %conv = sext i8 %4 to i32, !dbg !3668
  %cmp1 = icmp eq i32 %conv, 0, !dbg !3672
  br i1 %cmp1, label %if.then, label %if.end, !dbg !3673

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !3674

if.end:                                           ; preds = %for.body
  %5 = load i8*, i8** %pSrc.addr, align 8, !dbg !3675
  %6 = load i64, i64* %n, align 8, !dbg !3676
  %arrayidx3 = getelementptr inbounds i8, i8* %5, i64 %6, !dbg !3675
  %7 = load i8, i8* %arrayidx3, align 1, !dbg !3675
  %8 = load i8*, i8** %pDest.addr, align 8, !dbg !3677
  %9 = load i64, i64* %n, align 8, !dbg !3678
  %arrayidx4 = getelementptr inbounds i8, i8* %8, i64 %9, !dbg !3677
  store i8 %7, i8* %arrayidx4, align 1, !dbg !3679
  br label %for.inc, !dbg !3680

for.inc:                                          ; preds = %if.end
  %10 = load i64, i64* %n, align 8, !dbg !3681
  %inc = add i64 %10, 1, !dbg !3681
  store i64 %inc, i64* %n, align 8, !dbg !3681
  br label %for.cond, !dbg !3682, !llvm.loop !3683

for.end:                                          ; preds = %if.then, %for.cond
  br label %for.cond5, !dbg !3685

for.cond5:                                        ; preds = %for.inc10, %for.end
  %11 = load i64, i64* %n, align 8, !dbg !3686
  %12 = load i64, i64* %maxlen.addr, align 8, !dbg !3689
  %cmp6 = icmp ult i64 %11, %12, !dbg !3690
  br i1 %cmp6, label %for.body8, label %for.end12, !dbg !3691

for.body8:                                        ; preds = %for.cond5
  %13 = load i8*, i8** %pDest.addr, align 8, !dbg !3692
  %14 = load i64, i64* %n, align 8, !dbg !3693
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i64 %14, !dbg !3692
  store i8 0, i8* %arrayidx9, align 1, !dbg !3694
  br label %for.inc10, !dbg !3692

for.inc10:                                        ; preds = %for.body8
  %15 = load i64, i64* %n, align 8, !dbg !3695
  %inc11 = add i64 %15, 1, !dbg !3695
  store i64 %inc11, i64* %n, align 8, !dbg !3695
  br label %for.cond5, !dbg !3696, !llvm.loop !3697

for.end12:                                        ; preds = %for.cond5
  %16 = load i8*, i8** %pDest.addr, align 8, !dbg !3699
  ret i8* %16, !dbg !3700
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @cgc_memcpy(i8* %pDest, i8* %pSource, i64 %nbytes) #6 !dbg !3701 {
entry:
  %pDest.addr = alloca i8*, align 8
  %pSource.addr = alloca i8*, align 8
  %nbytes.addr = alloca i64, align 8
  %pDestReturn = alloca i8*, align 8
  store i8* %pDest, i8** %pDest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pDest.addr, metadata !3704, metadata !DIExpression()), !dbg !3705
  store i8* %pSource, i8** %pSource.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pSource.addr, metadata !3706, metadata !DIExpression()), !dbg !3707
  store i64 %nbytes, i64* %nbytes.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nbytes.addr, metadata !3708, metadata !DIExpression()), !dbg !3709
  call void @llvm.dbg.declare(metadata i8** %pDestReturn, metadata !3710, metadata !DIExpression()), !dbg !3711
  %0 = load i8*, i8** %pDest.addr, align 8, !dbg !3712
  store i8* %0, i8** %pDestReturn, align 8, !dbg !3711
  br label %while.cond, !dbg !3713

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i64, i64* %nbytes.addr, align 8, !dbg !3714
  %cmp = icmp uge i64 %1, 4, !dbg !3715
  br i1 %cmp, label %while.body, label %while.end, !dbg !3713

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %pSource.addr, align 8, !dbg !3716
  %3 = bitcast i8* %2 to i32*, !dbg !3718
  %4 = load i32, i32* %3, align 4, !dbg !3719
  %5 = load i8*, i8** %pDest.addr, align 8, !dbg !3720
  %6 = bitcast i8* %5 to i32*, !dbg !3721
  store i32 %4, i32* %6, align 4, !dbg !3722
  %7 = load i8*, i8** %pDest.addr, align 8, !dbg !3723
  %add.ptr = getelementptr i8, i8* %7, i64 4, !dbg !3723
  store i8* %add.ptr, i8** %pDest.addr, align 8, !dbg !3723
  %8 = load i8*, i8** %pSource.addr, align 8, !dbg !3724
  %add.ptr1 = getelementptr i8, i8* %8, i64 4, !dbg !3724
  store i8* %add.ptr1, i8** %pSource.addr, align 8, !dbg !3724
  %9 = load i64, i64* %nbytes.addr, align 8, !dbg !3725
  %sub = sub i64 %9, 4, !dbg !3725
  store i64 %sub, i64* %nbytes.addr, align 8, !dbg !3725
  br label %while.cond, !dbg !3713, !llvm.loop !3726

while.end:                                        ; preds = %while.cond
  br label %while.cond2, !dbg !3728

while.cond2:                                      ; preds = %while.body4, %while.end
  %10 = load i64, i64* %nbytes.addr, align 8, !dbg !3729
  %cmp3 = icmp ugt i64 %10, 0, !dbg !3730
  br i1 %cmp3, label %while.body4, label %while.end6, !dbg !3728

while.body4:                                      ; preds = %while.cond2
  %11 = load i8*, i8** %pSource.addr, align 8, !dbg !3731
  %12 = load i8, i8* %11, align 1, !dbg !3733
  %13 = load i8*, i8** %pDest.addr, align 8, !dbg !3734
  store i8 %12, i8* %13, align 1, !dbg !3735
  %14 = load i8*, i8** %pDest.addr, align 8, !dbg !3736
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1, !dbg !3736
  store i8* %incdec.ptr, i8** %pDest.addr, align 8, !dbg !3736
  %15 = load i8*, i8** %pSource.addr, align 8, !dbg !3737
  %incdec.ptr5 = getelementptr inbounds i8, i8* %15, i32 1, !dbg !3737
  store i8* %incdec.ptr5, i8** %pSource.addr, align 8, !dbg !3737
  %16 = load i64, i64* %nbytes.addr, align 8, !dbg !3738
  %dec = add i64 %16, -1, !dbg !3738
  store i64 %dec, i64* %nbytes.addr, align 8, !dbg !3738
  br label %while.cond2, !dbg !3728, !llvm.loop !3739

while.end6:                                       ; preds = %while.cond2
  %17 = load i8*, i8** %pDestReturn, align 8, !dbg !3741
  ret i8* %17, !dbg !3742
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @cgc_strtol(i8* %str, i8** %endptr, i32 %base) #6 !dbg !3743 {
entry:
  %retval = alloca i64, align 8
  %str.addr = alloca i8*, align 8
  %endptr.addr = alloca i8**, align 8
  %base.addr = alloca i32, align 4
  %value = alloca i64, align 8
  %neg = alloca i32, align 4
  %cutoff_value = alloca i64, align 8
  %cutlim_value = alloca i64, align 8
  %c = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !3746, metadata !DIExpression()), !dbg !3747
  store i8** %endptr, i8*** %endptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %endptr.addr, metadata !3748, metadata !DIExpression()), !dbg !3749
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !3750, metadata !DIExpression()), !dbg !3751
  call void @llvm.dbg.declare(metadata i64* %value, metadata !3752, metadata !DIExpression()), !dbg !3753
  store i64 0, i64* %value, align 8, !dbg !3753
  call void @llvm.dbg.declare(metadata i32* %neg, metadata !3754, metadata !DIExpression()), !dbg !3755
  store i32 0, i32* %neg, align 4, !dbg !3755
  %0 = load i8*, i8** %str.addr, align 8, !dbg !3756
  %cmp = icmp eq i8* %0, null, !dbg !3758
  br i1 %cmp, label %if.then, label %if.end, !dbg !3759

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8, !dbg !3760
  br label %return, !dbg !3760

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %base.addr, align 4, !dbg !3761
  %cmp1 = icmp sge i32 %1, 16, !dbg !3763
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !3764

if.then2:                                         ; preds = %if.end
  store i32 16, i32* %base.addr, align 4, !dbg !3765
  br label %if.end3, !dbg !3766

if.end3:                                          ; preds = %if.then2, %if.end
  br label %while.cond, !dbg !3767

while.cond:                                       ; preds = %while.body, %if.end3
  %2 = load i8*, i8** %str.addr, align 8, !dbg !3768
  %3 = load i8, i8* %2, align 1, !dbg !3769
  %conv = sext i8 %3 to i32, !dbg !3769
  %call = call i32 @cgc_isspace(i32 %conv) #15, !dbg !3770
  %tobool = icmp ne i32 %call, 0, !dbg !3767
  br i1 %tobool, label %while.body, label %while.end, !dbg !3767

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %str.addr, align 8, !dbg !3771
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1, !dbg !3771
  store i8* %incdec.ptr, i8** %str.addr, align 8, !dbg !3771
  br label %while.cond, !dbg !3767, !llvm.loop !3772

while.end:                                        ; preds = %while.cond
  %5 = load i8*, i8** %str.addr, align 8, !dbg !3773
  %6 = load i8, i8* %5, align 1, !dbg !3775
  %conv4 = sext i8 %6 to i32, !dbg !3775
  %cmp5 = icmp eq i32 %conv4, 45, !dbg !3776
  br i1 %cmp5, label %if.then7, label %if.else, !dbg !3777

if.then7:                                         ; preds = %while.end
  store i32 1, i32* %neg, align 4, !dbg !3778
  %7 = load i8*, i8** %str.addr, align 8, !dbg !3780
  %incdec.ptr8 = getelementptr inbounds i8, i8* %7, i32 1, !dbg !3780
  store i8* %incdec.ptr8, i8** %str.addr, align 8, !dbg !3780
  br label %if.end15, !dbg !3781

if.else:                                          ; preds = %while.end
  %8 = load i8*, i8** %str.addr, align 8, !dbg !3782
  %9 = load i8, i8* %8, align 1, !dbg !3784
  %conv9 = sext i8 %9 to i32, !dbg !3784
  %cmp10 = icmp eq i32 %conv9, 43, !dbg !3785
  br i1 %cmp10, label %if.then12, label %if.end14, !dbg !3786

if.then12:                                        ; preds = %if.else
  %10 = load i8*, i8** %str.addr, align 8, !dbg !3787
  %incdec.ptr13 = getelementptr inbounds i8, i8* %10, i32 1, !dbg !3787
  store i8* %incdec.ptr13, i8** %str.addr, align 8, !dbg !3787
  br label %if.end14, !dbg !3788

if.end14:                                         ; preds = %if.then12, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then7
  %11 = load i32, i32* %base.addr, align 4, !dbg !3789
  %cmp16 = icmp eq i32 %11, 16, !dbg !3791
  br i1 %cmp16, label %land.lhs.true, label %lor.lhs.false, !dbg !3792

lor.lhs.false:                                    ; preds = %if.end15
  %12 = load i32, i32* %base.addr, align 4, !dbg !3793
  %cmp18 = icmp eq i32 %12, 0, !dbg !3794
  br i1 %cmp18, label %land.lhs.true, label %if.else34, !dbg !3795

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end15
  %13 = load i8*, i8** %str.addr, align 8, !dbg !3796
  %14 = load i8, i8* %13, align 1, !dbg !3797
  %conv20 = sext i8 %14 to i32, !dbg !3797
  %cmp21 = icmp eq i32 %conv20, 48, !dbg !3798
  br i1 %cmp21, label %land.lhs.true23, label %if.else34, !dbg !3799

land.lhs.true23:                                  ; preds = %land.lhs.true
  %15 = load i8*, i8** %str.addr, align 8, !dbg !3800
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 1, !dbg !3801
  %16 = load i8, i8* %add.ptr, align 1, !dbg !3802
  %conv24 = sext i8 %16 to i32, !dbg !3802
  %cmp25 = icmp eq i32 %conv24, 120, !dbg !3803
  br i1 %cmp25, label %if.then32, label %lor.lhs.false27, !dbg !3804

lor.lhs.false27:                                  ; preds = %land.lhs.true23
  %17 = load i8*, i8** %str.addr, align 8, !dbg !3805
  %add.ptr28 = getelementptr inbounds i8, i8* %17, i64 1, !dbg !3806
  %18 = load i8, i8* %add.ptr28, align 1, !dbg !3807
  %conv29 = sext i8 %18 to i32, !dbg !3807
  %cmp30 = icmp eq i32 %conv29, 88, !dbg !3808
  br i1 %cmp30, label %if.then32, label %if.else34, !dbg !3809

if.then32:                                        ; preds = %lor.lhs.false27, %land.lhs.true23
  %19 = load i8*, i8** %str.addr, align 8, !dbg !3810
  %add.ptr33 = getelementptr inbounds i8, i8* %19, i64 2, !dbg !3810
  store i8* %add.ptr33, i8** %str.addr, align 8, !dbg !3810
  store i32 16, i32* %base.addr, align 4, !dbg !3812
  br label %if.end57, !dbg !3813

if.else34:                                        ; preds = %lor.lhs.false27, %land.lhs.true, %lor.lhs.false
  %20 = load i32, i32* %base.addr, align 4, !dbg !3814
  %cmp35 = icmp eq i32 %20, 0, !dbg !3816
  br i1 %cmp35, label %land.lhs.true40, label %lor.lhs.false37, !dbg !3817

lor.lhs.false37:                                  ; preds = %if.else34
  %21 = load i32, i32* %base.addr, align 4, !dbg !3818
  %cmp38 = icmp eq i32 %21, 2, !dbg !3819
  br i1 %cmp38, label %land.lhs.true40, label %if.end56, !dbg !3820

land.lhs.true40:                                  ; preds = %lor.lhs.false37, %if.else34
  %22 = load i8*, i8** %str.addr, align 8, !dbg !3821
  %23 = load i8, i8* %22, align 1, !dbg !3822
  %conv41 = sext i8 %23 to i32, !dbg !3822
  %cmp42 = icmp eq i32 %conv41, 48, !dbg !3823
  br i1 %cmp42, label %land.lhs.true44, label %if.end56, !dbg !3824

land.lhs.true44:                                  ; preds = %land.lhs.true40
  %24 = load i8*, i8** %str.addr, align 8, !dbg !3825
  %add.ptr45 = getelementptr inbounds i8, i8* %24, i64 1, !dbg !3826
  %25 = load i8, i8* %add.ptr45, align 1, !dbg !3827
  %conv46 = sext i8 %25 to i32, !dbg !3827
  %cmp47 = icmp eq i32 %conv46, 98, !dbg !3828
  br i1 %cmp47, label %if.then54, label %lor.lhs.false49, !dbg !3829

lor.lhs.false49:                                  ; preds = %land.lhs.true44
  %26 = load i8*, i8** %str.addr, align 8, !dbg !3830
  %add.ptr50 = getelementptr inbounds i8, i8* %26, i64 1, !dbg !3831
  %27 = load i8, i8* %add.ptr50, align 1, !dbg !3832
  %conv51 = sext i8 %27 to i32, !dbg !3832
  %cmp52 = icmp eq i32 %conv51, 66, !dbg !3833
  br i1 %cmp52, label %if.then54, label %if.end56, !dbg !3834

if.then54:                                        ; preds = %lor.lhs.false49, %land.lhs.true44
  %28 = load i8*, i8** %str.addr, align 8, !dbg !3835
  %add.ptr55 = getelementptr inbounds i8, i8* %28, i64 2, !dbg !3835
  store i8* %add.ptr55, i8** %str.addr, align 8, !dbg !3835
  store i32 2, i32* %base.addr, align 4, !dbg !3837
  br label %if.end56, !dbg !3838

if.end56:                                         ; preds = %if.then54, %lor.lhs.false49, %land.lhs.true40, %lor.lhs.false37
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then32
  %29 = load i32, i32* %base.addr, align 4, !dbg !3839
  %cmp58 = icmp eq i32 %29, 0, !dbg !3841
  br i1 %cmp58, label %if.then60, label %if.end67, !dbg !3842

if.then60:                                        ; preds = %if.end57
  %30 = load i8*, i8** %str.addr, align 8, !dbg !3843
  %31 = load i8, i8* %30, align 1, !dbg !3846
  %conv61 = sext i8 %31 to i32, !dbg !3846
  %cmp62 = icmp eq i32 %conv61, 48, !dbg !3847
  br i1 %cmp62, label %if.then64, label %if.else65, !dbg !3848

if.then64:                                        ; preds = %if.then60
  store i32 8, i32* %base.addr, align 4, !dbg !3849
  br label %if.end66, !dbg !3851

if.else65:                                        ; preds = %if.then60
  store i32 10, i32* %base.addr, align 4, !dbg !3852
  br label %if.end66

if.end66:                                         ; preds = %if.else65, %if.then64
  br label %if.end67, !dbg !3853

if.end67:                                         ; preds = %if.end66, %if.end57
  call void @llvm.dbg.declare(metadata i64* %cutoff_value, metadata !3854, metadata !DIExpression()), !dbg !3855
  store i64 0, i64* %cutoff_value, align 8, !dbg !3855
  %32 = load i32, i32* %neg, align 4, !dbg !3856
  %tobool68 = icmp ne i32 %32, 0, !dbg !3856
  br i1 %tobool68, label %if.then69, label %if.else70, !dbg !3858

if.then69:                                        ; preds = %if.end67
  store i64 -2147483648, i64* %cutoff_value, align 8, !dbg !3859
  br label %if.end71, !dbg !3860

if.else70:                                        ; preds = %if.end67
  store i64 2147483647, i64* %cutoff_value, align 8, !dbg !3861
  br label %if.end71

if.end71:                                         ; preds = %if.else70, %if.then69
  call void @llvm.dbg.declare(metadata i64* %cutlim_value, metadata !3862, metadata !DIExpression()), !dbg !3863
  %33 = load i64, i64* %cutoff_value, align 8, !dbg !3864
  %34 = load i32, i32* %base.addr, align 4, !dbg !3865
  %conv72 = sext i32 %34 to i64, !dbg !3866
  call void @klee_div_zero_check(i64 %conv72), !dbg !3867
  %rem = urem i64 %33, %conv72, !dbg !3867, !klee.check.div !2755
  store i64 %rem, i64* %cutlim_value, align 8, !dbg !3863
  %35 = load i32, i32* %base.addr, align 4, !dbg !3868
  %conv73 = sext i32 %35 to i64, !dbg !3868
  %36 = load i64, i64* %cutoff_value, align 8, !dbg !3869
  call void @klee_div_zero_check(i64 %conv73), !dbg !3869
  %div = udiv i64 %36, %conv73, !dbg !3869, !klee.check.div !2755
  store i64 %div, i64* %cutoff_value, align 8, !dbg !3869
  br label %while.cond74, !dbg !3870

while.cond74:                                     ; preds = %if.end114, %if.end71
  %37 = load i8*, i8** %str.addr, align 8, !dbg !3871
  %38 = load i8, i8* %37, align 1, !dbg !3872
  %conv75 = sext i8 %38 to i32, !dbg !3872
  %cmp76 = icmp ne i32 %conv75, 0, !dbg !3873
  br i1 %cmp76, label %while.body78, label %while.end116, !dbg !3870

while.body78:                                     ; preds = %while.cond74
  call void @llvm.dbg.declare(metadata i32* %c, metadata !3874, metadata !DIExpression()), !dbg !3876
  %39 = load i8*, i8** %str.addr, align 8, !dbg !3877
  %40 = load i8, i8* %39, align 1, !dbg !3878
  %conv79 = sext i8 %40 to i32, !dbg !3878
  store i32 %conv79, i32* %c, align 4, !dbg !3876
  %41 = load i32, i32* %c, align 4, !dbg !3879
  %call80 = call i32 @cgc_isdigit(i32 %41) #15, !dbg !3881
  %tobool81 = icmp ne i32 %call80, 0, !dbg !3881
  br i1 %tobool81, label %if.then82, label %if.else83, !dbg !3882

if.then82:                                        ; preds = %while.body78
  %42 = load i32, i32* %c, align 4, !dbg !3883
  %sub = sub nsw i32 %42, 48, !dbg !3883
  store i32 %sub, i32* %c, align 4, !dbg !3883
  br label %if.end96, !dbg !3884

if.else83:                                        ; preds = %while.body78
  %43 = load i32, i32* %c, align 4, !dbg !3885
  %call84 = call i32 @cgc_isalpha(i32 %43) #15, !dbg !3887
  %tobool85 = icmp ne i32 %call84, 0, !dbg !3887
  br i1 %tobool85, label %if.then86, label %if.else94, !dbg !3888

if.then86:                                        ; preds = %if.else83
  %44 = load i32, i32* %c, align 4, !dbg !3889
  %call87 = call i32 @cgc_isupper(i32 %44) #15, !dbg !3892
  %tobool88 = icmp ne i32 %call87, 0, !dbg !3892
  br i1 %tobool88, label %if.then89, label %if.else91, !dbg !3893

if.then89:                                        ; preds = %if.then86
  %45 = load i32, i32* %c, align 4, !dbg !3894
  %sub90 = sub nsw i32 %45, 55, !dbg !3894
  store i32 %sub90, i32* %c, align 4, !dbg !3894
  br label %if.end93, !dbg !3895

if.else91:                                        ; preds = %if.then86
  %46 = load i32, i32* %c, align 4, !dbg !3896
  %sub92 = sub nsw i32 %46, 87, !dbg !3896
  store i32 %sub92, i32* %c, align 4, !dbg !3896
  br label %if.end93

if.end93:                                         ; preds = %if.else91, %if.then89
  br label %if.end95, !dbg !3897

if.else94:                                        ; preds = %if.else83
  br label %while.end116, !dbg !3898

if.end95:                                         ; preds = %if.end93
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.then82
  %47 = load i32, i32* %c, align 4, !dbg !3899
  %48 = load i32, i32* %base.addr, align 4, !dbg !3901
  %cmp97 = icmp sge i32 %47, %48, !dbg !3902
  br i1 %cmp97, label %if.then99, label %if.end100, !dbg !3903

if.then99:                                        ; preds = %if.end96
  br label %while.end116, !dbg !3904

if.end100:                                        ; preds = %if.end96
  %49 = load i64, i64* %value, align 8, !dbg !3905
  %50 = load i64, i64* %cutoff_value, align 8, !dbg !3907
  %cmp101 = icmp ugt i64 %49, %50, !dbg !3908
  br i1 %cmp101, label %if.then110, label %lor.lhs.false103, !dbg !3909

lor.lhs.false103:                                 ; preds = %if.end100
  %51 = load i64, i64* %value, align 8, !dbg !3910
  %52 = load i64, i64* %cutoff_value, align 8, !dbg !3911
  %cmp104 = icmp eq i64 %51, %52, !dbg !3912
  br i1 %cmp104, label %land.lhs.true106, label %if.else111, !dbg !3913

land.lhs.true106:                                 ; preds = %lor.lhs.false103
  %53 = load i32, i32* %c, align 4, !dbg !3914
  %conv107 = sext i32 %53 to i64, !dbg !3914
  %54 = load i64, i64* %cutlim_value, align 8, !dbg !3915
  %cmp108 = icmp sgt i64 %conv107, %54, !dbg !3916
  br i1 %cmp108, label %if.then110, label %if.else111, !dbg !3917

if.then110:                                       ; preds = %land.lhs.true106, %if.end100
  br label %while.end116, !dbg !3918

if.else111:                                       ; preds = %land.lhs.true106, %lor.lhs.false103
  %55 = load i32, i32* %base.addr, align 4, !dbg !3919
  %conv112 = sext i32 %55 to i64, !dbg !3919
  %56 = load i64, i64* %value, align 8, !dbg !3921
  %mul = mul nsw i64 %56, %conv112, !dbg !3921
  store i64 %mul, i64* %value, align 8, !dbg !3921
  %57 = load i32, i32* %c, align 4, !dbg !3922
  %conv113 = sext i32 %57 to i64, !dbg !3922
  %58 = load i64, i64* %value, align 8, !dbg !3923
  %add = add nsw i64 %58, %conv113, !dbg !3923
  store i64 %add, i64* %value, align 8, !dbg !3923
  br label %if.end114

if.end114:                                        ; preds = %if.else111
  %59 = load i8*, i8** %str.addr, align 8, !dbg !3924
  %incdec.ptr115 = getelementptr inbounds i8, i8* %59, i32 1, !dbg !3924
  store i8* %incdec.ptr115, i8** %str.addr, align 8, !dbg !3924
  br label %while.cond74, !dbg !3870, !llvm.loop !3925

while.end116:                                     ; preds = %if.then110, %if.then99, %if.else94, %while.cond74
  %60 = load i8**, i8*** %endptr.addr, align 8, !dbg !3927
  %tobool117 = icmp ne i8** %60, null, !dbg !3927
  br i1 %tobool117, label %if.then118, label %if.end119, !dbg !3929

if.then118:                                       ; preds = %while.end116
  %61 = load i8*, i8** %str.addr, align 8, !dbg !3930
  %62 = load i8**, i8*** %endptr.addr, align 8, !dbg !3931
  store i8* %61, i8** %62, align 8, !dbg !3932
  br label %if.end119, !dbg !3933

if.end119:                                        ; preds = %if.then118, %while.end116
  %63 = load i32, i32* %neg, align 4, !dbg !3934
  %tobool120 = icmp ne i32 %63, 0, !dbg !3934
  br i1 %tobool120, label %if.then121, label %if.else123, !dbg !3936

if.then121:                                       ; preds = %if.end119
  %64 = load i64, i64* %value, align 8, !dbg !3937
  %sub122 = sub nsw i64 0, %64, !dbg !3938
  store i64 %sub122, i64* %retval, align 8, !dbg !3939
  br label %return, !dbg !3939

if.else123:                                       ; preds = %if.end119
  %65 = load i64, i64* %value, align 8, !dbg !3940
  store i64 %65, i64* %retval, align 8, !dbg !3941
  br label %return, !dbg !3941

return:                                           ; preds = %if.else123, %if.then121, %if.then
  %66 = load i64, i64* %retval, align 8, !dbg !3942
  ret i64 %66, !dbg !3942
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @cgc_memset(i8* %ptr, i32 %value, i64 %num) #6 !dbg !3943 {
entry:
  %ptr.addr = alloca i8*, align 8
  %value.addr = alloca i32, align 4
  %num.addr = alloca i64, align 8
  %ptr_temp = alloca i8*, align 8
  %set_value_byte = alloca i8, align 1
  %set_value_dword = alloca i32, align 4
  store i8* %ptr, i8** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ptr.addr, metadata !3946, metadata !DIExpression()), !dbg !3947
  store i32 %value, i32* %value.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %value.addr, metadata !3948, metadata !DIExpression()), !dbg !3949
  store i64 %num, i64* %num.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %num.addr, metadata !3950, metadata !DIExpression()), !dbg !3951
  call void @llvm.dbg.declare(metadata i8** %ptr_temp, metadata !3952, metadata !DIExpression()), !dbg !3953
  %0 = load i8*, i8** %ptr.addr, align 8, !dbg !3954
  store i8* %0, i8** %ptr_temp, align 8, !dbg !3953
  call void @llvm.dbg.declare(metadata i8* %set_value_byte, metadata !3955, metadata !DIExpression()), !dbg !3956
  %1 = load i32, i32* %value.addr, align 4, !dbg !3957
  %conv = trunc i32 %1 to i8, !dbg !3958
  store i8 %conv, i8* %set_value_byte, align 1, !dbg !3956
  call void @llvm.dbg.declare(metadata i32* %set_value_dword, metadata !3959, metadata !DIExpression()), !dbg !3960
  %2 = load i8, i8* %set_value_byte, align 1, !dbg !3961
  %conv1 = zext i8 %2 to i32, !dbg !3961
  %shl = shl i32 %conv1, 24, !dbg !3962
  %3 = load i8, i8* %set_value_byte, align 1, !dbg !3963
  %conv2 = zext i8 %3 to i32, !dbg !3963
  %shl3 = shl i32 %conv2, 16, !dbg !3964
  %or = or i32 %shl, %shl3, !dbg !3965
  %4 = load i8, i8* %set_value_byte, align 1, !dbg !3966
  %conv4 = zext i8 %4 to i32, !dbg !3966
  %shl5 = shl i32 %conv4, 8, !dbg !3967
  %or6 = or i32 %or, %shl5, !dbg !3968
  %5 = load i8, i8* %set_value_byte, align 1, !dbg !3969
  %conv7 = zext i8 %5 to i32, !dbg !3969
  %or8 = or i32 %or6, %conv7, !dbg !3970
  store i32 %or8, i32* %set_value_dword, align 4, !dbg !3960
  br label %while.cond, !dbg !3971

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i64, i64* %num.addr, align 8, !dbg !3972
  %cmp = icmp uge i64 %6, 4, !dbg !3973
  br i1 %cmp, label %while.body, label %while.end, !dbg !3971

while.body:                                       ; preds = %while.cond
  %7 = load i32, i32* %set_value_dword, align 4, !dbg !3974
  %8 = load i8*, i8** %ptr.addr, align 8, !dbg !3976
  %9 = bitcast i8* %8 to i32*, !dbg !3977
  store i32 %7, i32* %9, align 4, !dbg !3978
  %10 = load i8*, i8** %ptr.addr, align 8, !dbg !3979
  %add.ptr = getelementptr i8, i8* %10, i64 4, !dbg !3979
  store i8* %add.ptr, i8** %ptr.addr, align 8, !dbg !3979
  %11 = load i64, i64* %num.addr, align 8, !dbg !3980
  %sub = sub i64 %11, 4, !dbg !3980
  store i64 %sub, i64* %num.addr, align 8, !dbg !3980
  br label %while.cond, !dbg !3971, !llvm.loop !3981

while.end:                                        ; preds = %while.cond
  br label %while.cond10, !dbg !3983

while.cond10:                                     ; preds = %while.body13, %while.end
  %12 = load i64, i64* %num.addr, align 8, !dbg !3984
  %cmp11 = icmp ugt i64 %12, 0, !dbg !3985
  br i1 %cmp11, label %while.body13, label %while.end14, !dbg !3983

while.body13:                                     ; preds = %while.cond10
  %13 = load i8, i8* %set_value_byte, align 1, !dbg !3986
  %14 = load i8*, i8** %ptr.addr, align 8, !dbg !3988
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1, !dbg !3988
  store i8* %incdec.ptr, i8** %ptr.addr, align 8, !dbg !3988
  store i8 %13, i8* %14, align 1, !dbg !3989
  %15 = load i64, i64* %num.addr, align 8, !dbg !3990
  %dec = add i64 %15, -1, !dbg !3990
  store i64 %dec, i64* %num.addr, align 8, !dbg !3990
  br label %while.cond10, !dbg !3983, !llvm.loop !3991

while.end14:                                      ; preds = %while.cond10
  %16 = load i8*, i8** %ptr_temp, align 8, !dbg !3993
  ret i8* %16, !dbg !3994
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @cgc_strchr(i8* %s, i32 %c) #6 !dbg !3995 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3998, metadata !DIExpression()), !dbg !3999
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !4000, metadata !DIExpression()), !dbg !4001
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4002, metadata !DIExpression()), !dbg !4003
  %0 = load i8*, i8** %s.addr, align 8, !dbg !4004
  %tobool = icmp ne i8* %0, null, !dbg !4004
  br i1 %tobool, label %if.end, label %if.then, !dbg !4006

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !4007
  br label %return, !dbg !4007

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4009
  br label %for.cond, !dbg !4011

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4, !dbg !4012
  %conv = zext i32 %1 to i64, !dbg !4012
  %2 = load i8*, i8** %s.addr, align 8, !dbg !4014
  %call = call i64 @cgc_strlen(i8* %2) #15, !dbg !4015
  %cmp = icmp ult i64 %conv, %call, !dbg !4016
  br i1 %cmp, label %for.body, label %for.end, !dbg !4017

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s.addr, align 8, !dbg !4018
  %4 = load i32, i32* %i, align 4, !dbg !4021
  %idxprom = zext i32 %4 to i64, !dbg !4018
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom, !dbg !4018
  %5 = load i8, i8* %arrayidx, align 1, !dbg !4018
  %conv2 = sext i8 %5 to i32, !dbg !4018
  %6 = load i32, i32* %c.addr, align 4, !dbg !4022
  %cmp3 = icmp eq i32 %conv2, %6, !dbg !4023
  br i1 %cmp3, label %if.then5, label %if.end6, !dbg !4024

if.then5:                                         ; preds = %for.body
  %7 = load i8*, i8** %s.addr, align 8, !dbg !4025
  %8 = load i32, i32* %i, align 4, !dbg !4027
  %idx.ext = zext i32 %8 to i64, !dbg !4028
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.ext, !dbg !4028
  store i8* %add.ptr, i8** %retval, align 8, !dbg !4029
  br label %return, !dbg !4029

if.end6:                                          ; preds = %for.body
  br label %for.inc, !dbg !4030

for.inc:                                          ; preds = %if.end6
  %9 = load i32, i32* %i, align 4, !dbg !4031
  %inc = add i32 %9, 1, !dbg !4031
  store i32 %inc, i32* %i, align 4, !dbg !4031
  br label %for.cond, !dbg !4032, !llvm.loop !4033

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8, !dbg !4035
  br label %return, !dbg !4035

return:                                           ; preds = %for.end, %if.then5, %if.then
  %10 = load i8*, i8** %retval, align 8, !dbg !4036
  ret i8* %10, !dbg !4036
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @cgc_strtok(i8* %str, i8* %sep) #6 !dbg !4037 {
entry:
  %retval = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  %sep.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %str_len = alloca i32, align 4
  %tok = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !4040, metadata !DIExpression()), !dbg !4041
  store i8* %sep, i8** %sep.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sep.addr, metadata !4042, metadata !DIExpression()), !dbg !4043
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4044, metadata !DIExpression()), !dbg !4045
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4046, metadata !DIExpression()), !dbg !4047
  call void @llvm.dbg.declare(metadata i32* %str_len, metadata !4048, metadata !DIExpression()), !dbg !4049
  call void @llvm.dbg.declare(metadata i8** %tok, metadata !4050, metadata !DIExpression()), !dbg !4051
  %0 = load i8*, i8** %sep.addr, align 8, !dbg !4052
  %tobool = icmp ne i8* %0, null, !dbg !4052
  br i1 %tobool, label %if.end, label %if.then, !dbg !4054

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !4055
  br label %return, !dbg !4055

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %str.addr, align 8, !dbg !4057
  %tobool1 = icmp ne i8* %1, null, !dbg !4057
  br i1 %tobool1, label %if.end6, label %if.then2, !dbg !4059

if.then2:                                         ; preds = %if.end
  %2 = load i8*, i8** @StrtokNext, align 8, !dbg !4060
  %tobool3 = icmp ne i8* %2, null, !dbg !4060
  br i1 %tobool3, label %if.else, label %if.then4, !dbg !4063

if.then4:                                         ; preds = %if.then2
  store i8* null, i8** %retval, align 8, !dbg !4064
  br label %return, !dbg !4064

if.else:                                          ; preds = %if.then2
  %3 = load i8*, i8** @StrtokNext, align 8, !dbg !4066
  store i8* %3, i8** %str.addr, align 8, !dbg !4068
  br label %if.end5

if.end5:                                          ; preds = %if.else
  br label %if.end6, !dbg !4069

if.end6:                                          ; preds = %if.end5, %if.end
  br label %while.cond, !dbg !4070

while.cond:                                       ; preds = %while.body, %if.end6
  %4 = load i8*, i8** %sep.addr, align 8, !dbg !4071
  %5 = load i8*, i8** %str.addr, align 8, !dbg !4072
  %6 = load i8, i8* %5, align 1, !dbg !4073
  %conv = sext i8 %6 to i32, !dbg !4073
  %call = call i8* @cgc_strchr(i8* %4, i32 %conv) #15, !dbg !4074
  %tobool7 = icmp ne i8* %call, null, !dbg !4074
  br i1 %tobool7, label %land.rhs, label %land.end, !dbg !4075

land.rhs:                                         ; preds = %while.cond
  %7 = load i8*, i8** %str.addr, align 8, !dbg !4076
  %8 = load i8, i8* %7, align 1, !dbg !4077
  %conv8 = sext i8 %8 to i32, !dbg !4077
  %cmp = icmp ne i32 %conv8, 0, !dbg !4078
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !4079
  br i1 %9, label %while.body, label %while.end, !dbg !4070

while.body:                                       ; preds = %land.end
  %10 = load i8*, i8** %str.addr, align 8, !dbg !4080
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1, !dbg !4080
  store i8* %incdec.ptr, i8** %str.addr, align 8, !dbg !4080
  br label %while.cond, !dbg !4070, !llvm.loop !4082

while.end:                                        ; preds = %land.end
  %11 = load i8*, i8** %str.addr, align 8, !dbg !4084
  %12 = load i8, i8* %11, align 1, !dbg !4086
  %conv10 = sext i8 %12 to i32, !dbg !4086
  %cmp11 = icmp eq i32 %conv10, 0, !dbg !4087
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !4088

if.then13:                                        ; preds = %while.end
  store i8* null, i8** @StrtokNext, align 8, !dbg !4089
  store i8* null, i8** %retval, align 8, !dbg !4091
  br label %return, !dbg !4091

if.end14:                                         ; preds = %while.end
  %13 = load i8*, i8** %str.addr, align 8, !dbg !4092
  %call15 = call i64 @cgc_strlen(i8* %13) #15, !dbg !4093
  %conv16 = trunc i64 %call15 to i32, !dbg !4093
  store i32 %conv16, i32* %str_len, align 4, !dbg !4094
  store i32 0, i32* %i, align 4, !dbg !4095
  br label %for.cond, !dbg !4097

for.cond:                                         ; preds = %for.inc44, %if.end14
  %14 = load i32, i32* %i, align 4, !dbg !4098
  %15 = load i32, i32* %str_len, align 4, !dbg !4100
  %cmp17 = icmp ult i32 %14, %15, !dbg !4101
  br i1 %cmp17, label %for.body, label %for.end46, !dbg !4102

for.body:                                         ; preds = %for.cond
  %16 = load i8*, i8** %sep.addr, align 8, !dbg !4103
  %17 = load i8*, i8** %str.addr, align 8, !dbg !4106
  %18 = load i32, i32* %i, align 4, !dbg !4107
  %idxprom = zext i32 %18 to i64, !dbg !4106
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 %idxprom, !dbg !4106
  %19 = load i8, i8* %arrayidx, align 1, !dbg !4106
  %conv19 = sext i8 %19 to i32, !dbg !4106
  %call20 = call i8* @cgc_strchr(i8* %16, i32 %conv19) #15, !dbg !4108
  %tobool21 = icmp ne i8* %call20, null, !dbg !4108
  br i1 %tobool21, label %if.then22, label %if.end43, !dbg !4109

if.then22:                                        ; preds = %for.body
  %20 = load i8*, i8** %str.addr, align 8, !dbg !4110
  %21 = load i32, i32* %i, align 4, !dbg !4112
  %idxprom23 = zext i32 %21 to i64, !dbg !4110
  %arrayidx24 = getelementptr inbounds i8, i8* %20, i64 %idxprom23, !dbg !4110
  store i8 0, i8* %arrayidx24, align 1, !dbg !4113
  %22 = load i32, i32* %i, align 4, !dbg !4114
  %add = add i32 %22, 1, !dbg !4116
  store i32 %add, i32* %j, align 4, !dbg !4117
  br label %for.cond25, !dbg !4118

for.cond25:                                       ; preds = %for.inc, %if.then22
  %23 = load i32, i32* %j, align 4, !dbg !4119
  %24 = load i32, i32* %str_len, align 4, !dbg !4121
  %cmp26 = icmp ult i32 %23, %24, !dbg !4122
  br i1 %cmp26, label %for.body28, label %for.end, !dbg !4123

for.body28:                                       ; preds = %for.cond25
  %25 = load i8*, i8** %sep.addr, align 8, !dbg !4124
  %26 = load i8*, i8** %str.addr, align 8, !dbg !4127
  %27 = load i32, i32* %j, align 4, !dbg !4128
  %idxprom29 = zext i32 %27 to i64, !dbg !4127
  %arrayidx30 = getelementptr inbounds i8, i8* %26, i64 %idxprom29, !dbg !4127
  %28 = load i8, i8* %arrayidx30, align 1, !dbg !4127
  %conv31 = sext i8 %28 to i32, !dbg !4127
  %call32 = call i8* @cgc_strchr(i8* %25, i32 %conv31) #15, !dbg !4129
  %tobool33 = icmp ne i8* %call32, null, !dbg !4129
  br i1 %tobool33, label %if.then34, label %if.else37, !dbg !4130

if.then34:                                        ; preds = %for.body28
  %29 = load i8*, i8** %str.addr, align 8, !dbg !4131
  %30 = load i32, i32* %j, align 4, !dbg !4133
  %idxprom35 = zext i32 %30 to i64, !dbg !4131
  %arrayidx36 = getelementptr inbounds i8, i8* %29, i64 %idxprom35, !dbg !4131
  store i8 0, i8* %arrayidx36, align 1, !dbg !4134
  br label %if.end38, !dbg !4135

if.else37:                                        ; preds = %for.body28
  %31 = load i8*, i8** %str.addr, align 8, !dbg !4136
  %32 = load i32, i32* %j, align 4, !dbg !4138
  %idx.ext = zext i32 %32 to i64, !dbg !4139
  %add.ptr = getelementptr inbounds i8, i8* %31, i64 %idx.ext, !dbg !4139
  store i8* %add.ptr, i8** @StrtokNext, align 8, !dbg !4140
  %33 = load i8*, i8** %str.addr, align 8, !dbg !4141
  store i8* %33, i8** %retval, align 8, !dbg !4142
  br label %return, !dbg !4142

if.end38:                                         ; preds = %if.then34
  br label %for.inc, !dbg !4143

for.inc:                                          ; preds = %if.end38
  %34 = load i32, i32* %j, align 4, !dbg !4144
  %inc = add i32 %34, 1, !dbg !4144
  store i32 %inc, i32* %j, align 4, !dbg !4144
  br label %for.cond25, !dbg !4145, !llvm.loop !4146

for.end:                                          ; preds = %for.cond25
  %35 = load i32, i32* %j, align 4, !dbg !4148
  %36 = load i32, i32* %str_len, align 4, !dbg !4150
  %cmp39 = icmp eq i32 %35, %36, !dbg !4151
  br i1 %cmp39, label %if.then41, label %if.end42, !dbg !4152

if.then41:                                        ; preds = %for.end
  store i8* null, i8** @StrtokNext, align 8, !dbg !4153
  br label %if.end42, !dbg !4155

if.end42:                                         ; preds = %if.then41, %for.end
  %37 = load i8*, i8** %str.addr, align 8, !dbg !4156
  store i8* %37, i8** %retval, align 8, !dbg !4157
  br label %return, !dbg !4157

if.end43:                                         ; preds = %for.body
  br label %for.inc44, !dbg !4158

for.inc44:                                        ; preds = %if.end43
  %38 = load i32, i32* %i, align 4, !dbg !4159
  %inc45 = add i32 %38, 1, !dbg !4159
  store i32 %inc45, i32* %i, align 4, !dbg !4159
  br label %for.cond, !dbg !4160, !llvm.loop !4161

for.end46:                                        ; preds = %for.cond
  store i8* null, i8** @StrtokNext, align 8, !dbg !4163
  %39 = load i8*, i8** %str.addr, align 8, !dbg !4164
  store i8* %39, i8** %retval, align 8, !dbg !4165
  br label %return, !dbg !4165

return:                                           ; preds = %for.end46, %if.end42, %if.else37, %if.then13, %if.then4, %if.then
  %40 = load i8*, i8** %retval, align 8, !dbg !4166
  ret i8* %40, !dbg !4166
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_strcmp(i8* %s1, i8* %s2) #6 !dbg !4167 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !4168, metadata !DIExpression()), !dbg !4169
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !4170, metadata !DIExpression()), !dbg !4171
  %0 = load i8*, i8** %s1.addr, align 8, !dbg !4172
  %tobool = icmp ne i8* %0, null, !dbg !4172
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4174

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %s2.addr, align 8, !dbg !4175
  %tobool1 = icmp ne i8* %1, null, !dbg !4175
  br i1 %tobool1, label %if.end, label %if.then, !dbg !4176

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !4177
  br label %return, !dbg !4177

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load i8*, i8** %s1.addr, align 8, !dbg !4179
  %tobool2 = icmp ne i8* %2, null, !dbg !4179
  br i1 %tobool2, label %if.end6, label %land.lhs.true3, !dbg !4181

land.lhs.true3:                                   ; preds = %if.end
  %3 = load i8*, i8** %s2.addr, align 8, !dbg !4182
  %tobool4 = icmp ne i8* %3, null, !dbg !4182
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !4183

if.then5:                                         ; preds = %land.lhs.true3
  store i32 -1, i32* %retval, align 4, !dbg !4184
  br label %return, !dbg !4184

if.end6:                                          ; preds = %land.lhs.true3, %if.end
  %4 = load i8*, i8** %s1.addr, align 8, !dbg !4186
  %tobool7 = icmp ne i8* %4, null, !dbg !4186
  br i1 %tobool7, label %if.end11, label %land.lhs.true8, !dbg !4188

land.lhs.true8:                                   ; preds = %if.end6
  %5 = load i8*, i8** %s2.addr, align 8, !dbg !4189
  %tobool9 = icmp ne i8* %5, null, !dbg !4189
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !4190

if.then10:                                        ; preds = %land.lhs.true8
  store i32 0, i32* %retval, align 4, !dbg !4191
  br label %return, !dbg !4191

if.end11:                                         ; preds = %land.lhs.true8, %if.end6
  br label %while.cond, !dbg !4193

while.cond:                                       ; preds = %if.end27, %if.end11
  %6 = load i8*, i8** %s1.addr, align 8, !dbg !4194
  %7 = load i8, i8* %6, align 1, !dbg !4195
  %conv = sext i8 %7 to i32, !dbg !4195
  %cmp = icmp ne i32 %conv, 0, !dbg !4196
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4197

land.rhs:                                         ; preds = %while.cond
  %8 = load i8*, i8** %s2.addr, align 8, !dbg !4198
  %9 = load i8, i8* %8, align 1, !dbg !4199
  %conv13 = sext i8 %9 to i32, !dbg !4199
  %cmp14 = icmp ne i32 %conv13, 0, !dbg !4200
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %cmp14, %land.rhs ], !dbg !4201
  br i1 %10, label %while.body, label %while.end, !dbg !4193

while.body:                                       ; preds = %land.end
  %11 = load i8*, i8** %s1.addr, align 8, !dbg !4202
  %12 = load i8, i8* %11, align 1, !dbg !4205
  %conv16 = sext i8 %12 to i32, !dbg !4205
  %13 = load i8*, i8** %s2.addr, align 8, !dbg !4206
  %14 = load i8, i8* %13, align 1, !dbg !4207
  %conv17 = sext i8 %14 to i32, !dbg !4207
  %cmp18 = icmp sgt i32 %conv16, %conv17, !dbg !4208
  br i1 %cmp18, label %if.then20, label %if.end21, !dbg !4209

if.then20:                                        ; preds = %while.body
  store i32 1, i32* %retval, align 4, !dbg !4210
  br label %return, !dbg !4210

if.end21:                                         ; preds = %while.body
  %15 = load i8*, i8** %s1.addr, align 8, !dbg !4212
  %16 = load i8, i8* %15, align 1, !dbg !4214
  %conv22 = sext i8 %16 to i32, !dbg !4214
  %17 = load i8*, i8** %s2.addr, align 8, !dbg !4215
  %18 = load i8, i8* %17, align 1, !dbg !4216
  %conv23 = sext i8 %18 to i32, !dbg !4216
  %cmp24 = icmp slt i32 %conv22, %conv23, !dbg !4217
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !4218

if.then26:                                        ; preds = %if.end21
  store i32 -1, i32* %retval, align 4, !dbg !4219
  br label %return, !dbg !4219

if.end27:                                         ; preds = %if.end21
  %19 = load i8*, i8** %s1.addr, align 8, !dbg !4221
  %incdec.ptr = getelementptr inbounds i8, i8* %19, i32 1, !dbg !4221
  store i8* %incdec.ptr, i8** %s1.addr, align 8, !dbg !4221
  %20 = load i8*, i8** %s2.addr, align 8, !dbg !4222
  %incdec.ptr28 = getelementptr inbounds i8, i8* %20, i32 1, !dbg !4222
  store i8* %incdec.ptr28, i8** %s2.addr, align 8, !dbg !4222
  br label %while.cond, !dbg !4193, !llvm.loop !4223

while.end:                                        ; preds = %land.end
  %21 = load i8*, i8** %s1.addr, align 8, !dbg !4225
  %22 = load i8, i8* %21, align 1, !dbg !4227
  %conv29 = sext i8 %22 to i32, !dbg !4227
  %cmp30 = icmp ne i32 %conv29, 0, !dbg !4228
  br i1 %cmp30, label %land.lhs.true32, label %if.end37, !dbg !4229

land.lhs.true32:                                  ; preds = %while.end
  %23 = load i8*, i8** %s2.addr, align 8, !dbg !4230
  %24 = load i8, i8* %23, align 1, !dbg !4231
  %conv33 = sext i8 %24 to i32, !dbg !4231
  %cmp34 = icmp eq i32 %conv33, 0, !dbg !4232
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !4233

if.then36:                                        ; preds = %land.lhs.true32
  store i32 1, i32* %retval, align 4, !dbg !4234
  br label %return, !dbg !4234

if.end37:                                         ; preds = %land.lhs.true32, %while.end
  %25 = load i8*, i8** %s1.addr, align 8, !dbg !4236
  %26 = load i8, i8* %25, align 1, !dbg !4238
  %conv38 = sext i8 %26 to i32, !dbg !4238
  %cmp39 = icmp eq i32 %conv38, 0, !dbg !4239
  br i1 %cmp39, label %land.lhs.true41, label %if.end46, !dbg !4240

land.lhs.true41:                                  ; preds = %if.end37
  %27 = load i8*, i8** %s2.addr, align 8, !dbg !4241
  %28 = load i8, i8* %27, align 1, !dbg !4242
  %conv42 = sext i8 %28 to i32, !dbg !4242
  %cmp43 = icmp ne i32 %conv42, 0, !dbg !4243
  br i1 %cmp43, label %if.then45, label %if.end46, !dbg !4244

if.then45:                                        ; preds = %land.lhs.true41
  store i32 -1, i32* %retval, align 4, !dbg !4245
  br label %return, !dbg !4245

if.end46:                                         ; preds = %land.lhs.true41, %if.end37
  store i32 0, i32* %retval, align 4, !dbg !4247
  br label %return, !dbg !4247

return:                                           ; preds = %if.end46, %if.then45, %if.then36, %if.then26, %if.then20, %if.then10, %if.then5, %if.then
  %29 = load i32, i32* %retval, align 4, !dbg !4248
  ret i32 %29, !dbg !4248
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @cgc_strcat(i8* noalias %s1, i8* noalias %s2) #6 !dbg !4249 {
entry:
  %retval = alloca i8*, align 8
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !4254, metadata !DIExpression()), !dbg !4255
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !4256, metadata !DIExpression()), !dbg !4257
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4258, metadata !DIExpression()), !dbg !4259
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4260, metadata !DIExpression()), !dbg !4261
  %0 = load i8*, i8** %s1.addr, align 8, !dbg !4262
  %tobool = icmp ne i8* %0, null, !dbg !4262
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !4264

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %s2.addr, align 8, !dbg !4265
  %tobool1 = icmp ne i8* %1, null, !dbg !4265
  br i1 %tobool1, label %if.end, label %if.then, !dbg !4266

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* null, i8** %retval, align 8, !dbg !4267
  br label %return, !dbg !4267

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i8*, i8** %s1.addr, align 8, !dbg !4269
  %call = call i64 @cgc_strlen(i8* %2) #15, !dbg !4271
  %conv = trunc i64 %call to i32, !dbg !4271
  store i32 %conv, i32* %i, align 4, !dbg !4272
  store i32 0, i32* %j, align 4, !dbg !4273
  br label %for.cond, !dbg !4274

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %j, align 4, !dbg !4275
  %conv2 = zext i32 %3 to i64, !dbg !4275
  %4 = load i8*, i8** %s2.addr, align 8, !dbg !4277
  %call3 = call i64 @cgc_strlen(i8* %4) #15, !dbg !4278
  %cmp = icmp ult i64 %conv2, %call3, !dbg !4279
  br i1 %cmp, label %for.body, label %for.end, !dbg !4280

for.body:                                         ; preds = %for.cond
  %5 = load i8*, i8** %s2.addr, align 8, !dbg !4281
  %6 = load i32, i32* %j, align 4, !dbg !4283
  %idxprom = zext i32 %6 to i64, !dbg !4281
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom, !dbg !4281
  %7 = load i8, i8* %arrayidx, align 1, !dbg !4281
  %8 = load i8*, i8** %s1.addr, align 8, !dbg !4284
  %9 = load i32, i32* %i, align 4, !dbg !4285
  %idxprom5 = zext i32 %9 to i64, !dbg !4284
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !4284
  store i8 %7, i8* %arrayidx6, align 1, !dbg !4286
  br label %for.inc, !dbg !4287

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4, !dbg !4288
  %inc = add i32 %10, 1, !dbg !4288
  store i32 %inc, i32* %i, align 4, !dbg !4288
  %11 = load i32, i32* %j, align 4, !dbg !4289
  %inc7 = add i32 %11, 1, !dbg !4289
  store i32 %inc7, i32* %j, align 4, !dbg !4289
  br label %for.cond, !dbg !4290, !llvm.loop !4291

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %s1.addr, align 8, !dbg !4293
  %13 = load i32, i32* %i, align 4, !dbg !4294
  %idxprom8 = zext i32 %13 to i64, !dbg !4293
  %arrayidx9 = getelementptr inbounds i8, i8* %12, i64 %idxprom8, !dbg !4293
  store i8 0, i8* %arrayidx9, align 1, !dbg !4295
  %14 = load i8*, i8** %s1.addr, align 8, !dbg !4296
  store i8* %14, i8** %retval, align 8, !dbg !4297
  br label %return, !dbg !4297

return:                                           ; preds = %for.end, %if.then
  %15 = load i8*, i8** %retval, align 8, !dbg !4298
  ret i8* %15, !dbg !4298
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_memcmp(i8* %s1, i8* %s2, i64 %n) #6 !dbg !4299 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pos = alloca i64, align 8
  %val1 = alloca i8, align 1
  %val2 = alloca i8, align 1
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !4302, metadata !DIExpression()), !dbg !4303
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !4304, metadata !DIExpression()), !dbg !4305
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !4306, metadata !DIExpression()), !dbg !4307
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !4308, metadata !DIExpression()), !dbg !4310
  store i64 0, i64* %pos, align 8, !dbg !4310
  br label %for.cond, !dbg !4311

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %pos, align 8, !dbg !4312
  %1 = load i64, i64* %n.addr, align 8, !dbg !4314
  %cmp = icmp ult i64 %0, %1, !dbg !4315
  br i1 %cmp, label %for.body, label %for.end, !dbg !4316

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8* %val1, metadata !4317, metadata !DIExpression()), !dbg !4319
  %2 = load i8*, i8** %s1.addr, align 8, !dbg !4320
  %3 = load i64, i64* %pos, align 8, !dbg !4321
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %3, !dbg !4322
  %4 = load i8, i8* %arrayidx, align 1, !dbg !4322
  store i8 %4, i8* %val1, align 1, !dbg !4319
  call void @llvm.dbg.declare(metadata i8* %val2, metadata !4323, metadata !DIExpression()), !dbg !4324
  %5 = load i8*, i8** %s2.addr, align 8, !dbg !4325
  %6 = load i64, i64* %pos, align 8, !dbg !4326
  %arrayidx1 = getelementptr inbounds i8, i8* %5, i64 %6, !dbg !4327
  %7 = load i8, i8* %arrayidx1, align 1, !dbg !4327
  store i8 %7, i8* %val2, align 1, !dbg !4324
  %8 = load i8, i8* %val1, align 1, !dbg !4328
  %conv = zext i8 %8 to i32, !dbg !4328
  %9 = load i8, i8* %val2, align 1, !dbg !4330
  %conv2 = zext i8 %9 to i32, !dbg !4330
  %cmp3 = icmp slt i32 %conv, %conv2, !dbg !4331
  br i1 %cmp3, label %if.then, label %if.else, !dbg !4332

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval, align 4, !dbg !4333
  br label %return, !dbg !4333

if.else:                                          ; preds = %for.body
  %10 = load i8, i8* %val1, align 1, !dbg !4334
  %conv5 = zext i8 %10 to i32, !dbg !4334
  %11 = load i8, i8* %val2, align 1, !dbg !4336
  %conv6 = zext i8 %11 to i32, !dbg !4336
  %cmp7 = icmp sgt i32 %conv5, %conv6, !dbg !4337
  br i1 %cmp7, label %if.then9, label %if.end, !dbg !4338

if.then9:                                         ; preds = %if.else
  store i32 1, i32* %retval, align 4, !dbg !4339
  br label %return, !dbg !4339

if.end:                                           ; preds = %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end
  br label %for.inc, !dbg !4340

for.inc:                                          ; preds = %if.end10
  %12 = load i64, i64* %pos, align 8, !dbg !4341
  %inc = add i64 %12, 1, !dbg !4341
  store i64 %inc, i64* %pos, align 8, !dbg !4341
  br label %for.cond, !dbg !4342, !llvm.loop !4343

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !4345
  br label %return, !dbg !4345

return:                                           ; preds = %for.end, %if.then9, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !4346
  ret i32 %13, !dbg !4346
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_Push(%struct.t3DCPixel** %px_list, %struct.t3DCPixel* %px) #6 !dbg !4347 {
entry:
  %px_list.addr = alloca %struct.t3DCPixel**, align 8
  %px.addr = alloca %struct.t3DCPixel*, align 8
  %i = alloca i32, align 4
  %new = alloca %struct.t3DCPixel*, align 8
  store %struct.t3DCPixel** %px_list, %struct.t3DCPixel*** %px_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel*** %px_list.addr, metadata !4364, metadata !DIExpression()), !dbg !4365
  store %struct.t3DCPixel* %px, %struct.t3DCPixel** %px.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %px.addr, metadata !4366, metadata !DIExpression()), !dbg !4367
  %0 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4368
  %cmp = icmp eq %struct.t3DCPixel* %0, null, !dbg !4370
  br i1 %cmp, label %if.then, label %if.end, !dbg !4371

if.then:                                          ; preds = %entry
  br label %return, !dbg !4372

if.end:                                           ; preds = %entry
  %1 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list.addr, align 8, !dbg !4373
  %cmp1 = icmp eq %struct.t3DCPixel** %1, null, !dbg !4375
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !4376

if.then2:                                         ; preds = %if.end
  br label %return, !dbg !4377

if.end3:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4378, metadata !DIExpression()), !dbg !4379
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %new, metadata !4380, metadata !DIExpression()), !dbg !4381
  %call = call i8* @cgc_malloc(i64 10) #15, !dbg !4382
  %2 = bitcast i8* %call to %struct.t3DCPixel*, !dbg !4382
  store %struct.t3DCPixel* %2, %struct.t3DCPixel** %new, align 8, !dbg !4381
  %3 = load %struct.t3DCPixel*, %struct.t3DCPixel** %new, align 8, !dbg !4383
  %4 = bitcast %struct.t3DCPixel* %3 to i8*, !dbg !4383
  %5 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4384
  %6 = bitcast %struct.t3DCPixel* %5 to i8*, !dbg !4384
  %call4 = call i8* @cgc_memcpy(i8* %4, i8* %6, i64 10) #15, !dbg !4385
  store i32 0, i32* %i, align 4, !dbg !4386
  br label %for.cond, !dbg !4388

for.cond:                                         ; preds = %for.inc, %if.end3
  %7 = load i32, i32* %i, align 4, !dbg !4389
  %conv = sext i32 %7 to i64, !dbg !4389
  %cmp5 = icmp ule i64 %conv, 409, !dbg !4391
  br i1 %cmp5, label %for.body, label %for.end, !dbg !4392

for.body:                                         ; preds = %for.cond
  %8 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list.addr, align 8, !dbg !4393
  %9 = load i32, i32* %i, align 4, !dbg !4396
  %idxprom = sext i32 %9 to i64, !dbg !4393
  %arrayidx = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %8, i64 %idxprom, !dbg !4393
  %10 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx, align 8, !dbg !4393
  %cmp7 = icmp eq %struct.t3DCPixel* %10, null, !dbg !4397
  br i1 %cmp7, label %if.then9, label %if.end12, !dbg !4398

if.then9:                                         ; preds = %for.body
  %11 = load %struct.t3DCPixel*, %struct.t3DCPixel** %new, align 8, !dbg !4399
  %12 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list.addr, align 8, !dbg !4401
  %13 = load i32, i32* %i, align 4, !dbg !4402
  %idxprom10 = sext i32 %13 to i64, !dbg !4401
  %arrayidx11 = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %12, i64 %idxprom10, !dbg !4401
  store %struct.t3DCPixel* %11, %struct.t3DCPixel** %arrayidx11, align 8, !dbg !4403
  br label %for.end, !dbg !4404

if.end12:                                         ; preds = %for.body
  br label %for.inc, !dbg !4405

for.inc:                                          ; preds = %if.end12
  %14 = load i32, i32* %i, align 4, !dbg !4406
  %inc = add nsw i32 %14, 1, !dbg !4406
  store i32 %inc, i32* %i, align 4, !dbg !4406
  br label %for.cond, !dbg !4407, !llvm.loop !4408

for.end:                                          ; preds = %if.then9, %for.cond
  br label %return, !dbg !4410

return:                                           ; preds = %for.end, %if.then2, %if.then
  ret void, !dbg !4411
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_RunTask(%struct.t3DCPixel** %px_list, void (%struct.t3DCPixel*, i16)* %exec_task, i16 signext %fptr_arg) #6 !dbg !4412 {
entry:
  %px_list.addr = alloca %struct.t3DCPixel**, align 8
  %exec_task.addr = alloca void (%struct.t3DCPixel*, i16)*, align 8
  %fptr_arg.addr = alloca i16, align 2
  %count = alloca i16, align 2
  %i = alloca i16, align 2
  store %struct.t3DCPixel** %px_list, %struct.t3DCPixel*** %px_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel*** %px_list.addr, metadata !4419, metadata !DIExpression()), !dbg !4420
  store void (%struct.t3DCPixel*, i16)* %exec_task, void (%struct.t3DCPixel*, i16)** %exec_task.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.t3DCPixel*, i16)** %exec_task.addr, metadata !4421, metadata !DIExpression()), !dbg !4422
  store i16 %fptr_arg, i16* %fptr_arg.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %fptr_arg.addr, metadata !4423, metadata !DIExpression()), !dbg !4424
  call void @llvm.dbg.declare(metadata i16* %count, metadata !4425, metadata !DIExpression()), !dbg !4426
  store i16 409, i16* %count, align 2, !dbg !4426
  call void @llvm.dbg.declare(metadata i16* %i, metadata !4427, metadata !DIExpression()), !dbg !4428
  store i16 0, i16* %i, align 2, !dbg !4428
  br label %while.cond, !dbg !4429

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i16, i16* %count, align 2, !dbg !4430
  %dec = add i16 %0, -1, !dbg !4430
  store i16 %dec, i16* %count, align 2, !dbg !4430
  %tobool = icmp ne i16 %0, 0, !dbg !4429
  br i1 %tobool, label %while.body, label %while.end, !dbg !4429

while.body:                                       ; preds = %while.cond
  %1 = load void (%struct.t3DCPixel*, i16)*, void (%struct.t3DCPixel*, i16)** %exec_task.addr, align 8, !dbg !4431
  %2 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list.addr, align 8, !dbg !4433
  %3 = load i16, i16* %i, align 2, !dbg !4434
  %inc = add i16 %3, 1, !dbg !4434
  store i16 %inc, i16* %i, align 2, !dbg !4434
  %idxprom = sext i16 %3 to i64, !dbg !4433
  %arrayidx = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %2, i64 %idxprom, !dbg !4433
  %4 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx, align 8, !dbg !4433
  %5 = load i16, i16* %fptr_arg.addr, align 2, !dbg !4435
  call void %1(%struct.t3DCPixel* %4, i16 signext %5) #15, !dbg !4431
  br label %while.cond, !dbg !4429, !llvm.loop !4436

while.end:                                        ; preds = %while.cond
  ret void, !dbg !4438
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_ReadFile(%struct.t3DCPixel** %px_list) #6 !dbg !4439 {
entry:
  %px_list.addr = alloca %struct.t3DCPixel**, align 8
  %dataSize = alloca i32, align 4
  %px = alloca %struct.t3DCPixel*, align 8
  %offset = alloca i32, align 4
  store %struct.t3DCPixel** %px_list, %struct.t3DCPixel*** %px_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel*** %px_list.addr, metadata !4442, metadata !DIExpression()), !dbg !4443
  call void @llvm.dbg.declare(metadata i32* %dataSize, metadata !4444, metadata !DIExpression()), !dbg !4445
  store i32 4096, i32* %dataSize, align 4, !dbg !4445
  %0 = load i32, i32* inttoptr (i64 1128775680 to i32*), align 4, !dbg !4446
  call void @cgc_seed_prng(i32 %0) #15, !dbg !4447
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %px, metadata !4448, metadata !DIExpression()), !dbg !4449
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !4450, metadata !DIExpression()), !dbg !4451
  store i32 0, i32* %offset, align 4, !dbg !4451
  br label %while.cond, !dbg !4452

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %dataSize, align 4, !dbg !4453
  %cmp = icmp sgt i32 %1, 0, !dbg !4454
  br i1 %cmp, label %while.body, label %while.end, !dbg !4452

while.body:                                       ; preds = %while.cond
  %call = call i8* @cgc_malloc(i64 10) #15, !dbg !4455
  %2 = bitcast i8* %call to %struct.t3DCPixel*, !dbg !4455
  store %struct.t3DCPixel* %2, %struct.t3DCPixel** %px, align 8, !dbg !4457
  %call1 = call i32 @cgc_prng() #15, !dbg !4458
  %conv = trunc i32 %call1 to i16, !dbg !4459
  %3 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !4460
  %x = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %3, i32 0, i32 0, !dbg !4461
  store i16 %conv, i16* %x, align 1, !dbg !4462
  %call2 = call i32 @cgc_prng() #15, !dbg !4463
  %conv3 = trunc i32 %call2 to i16, !dbg !4464
  %4 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !4465
  %y = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %4, i32 0, i32 1, !dbg !4466
  store i16 %conv3, i16* %y, align 1, !dbg !4467
  %call4 = call i32 @cgc_prng() #15, !dbg !4468
  %conv5 = trunc i32 %call4 to i16, !dbg !4469
  %5 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !4470
  %z = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %5, i32 0, i32 2, !dbg !4471
  store i16 %conv5, i16* %z, align 1, !dbg !4472
  %call6 = call i32 @cgc_prng() #15, !dbg !4473
  %conv7 = trunc i32 %call6 to i8, !dbg !4474
  %6 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !4475
  %r = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %6, i32 0, i32 3, !dbg !4476
  store i8 %conv7, i8* %r, align 1, !dbg !4477
  %call8 = call i32 @cgc_prng() #15, !dbg !4478
  %conv9 = trunc i32 %call8 to i8, !dbg !4479
  %7 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !4480
  %g = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %7, i32 0, i32 4, !dbg !4481
  store i8 %conv9, i8* %g, align 1, !dbg !4482
  %call10 = call i32 @cgc_prng() #15, !dbg !4483
  %conv11 = trunc i32 %call10 to i8, !dbg !4484
  %8 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !4485
  %b = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %8, i32 0, i32 5, !dbg !4486
  store i8 %conv11, i8* %b, align 1, !dbg !4487
  %call12 = call i32 @cgc_prng() #15, !dbg !4488
  %conv13 = trunc i32 %call12 to i8, !dbg !4489
  %9 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !4490
  %a = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %9, i32 0, i32 6, !dbg !4491
  store i8 %conv13, i8* %a, align 1, !dbg !4492
  %10 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list.addr, align 8, !dbg !4493
  %11 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !4494
  call void @cgc_Push(%struct.t3DCPixel** %10, %struct.t3DCPixel* %11) #15, !dbg !4495
  %12 = load i32, i32* %dataSize, align 4, !dbg !4496
  %conv14 = sext i32 %12 to i64, !dbg !4496
  %sub = sub i64 %conv14, 10, !dbg !4496
  %conv15 = trunc i64 %sub to i32, !dbg !4496
  store i32 %conv15, i32* %dataSize, align 4, !dbg !4496
  %13 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !4497
  %14 = bitcast %struct.t3DCPixel* %13 to i8*, !dbg !4497
  call void @cgc_free(i8* %14) #15, !dbg !4498
  br label %while.cond, !dbg !4452, !llvm.loop !4499

while.end:                                        ; preds = %while.cond
  ret void, !dbg !4501
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_NewFile(%struct.t3DCPixel** %px_list, i8* %buf) #6 !dbg !4502 {
entry:
  %px_list.addr = alloca %struct.t3DCPixel**, align 8
  %buf.addr = alloca i8*, align 8
  %maxSize = alloca i16, align 2
  %offset = alloca i16, align 2
  %i = alloca i16, align 2
  %tmp = alloca %struct.t3DCPixel*, align 8
  store %struct.t3DCPixel** %px_list, %struct.t3DCPixel*** %px_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel*** %px_list.addr, metadata !4505, metadata !DIExpression()), !dbg !4506
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !4507, metadata !DIExpression()), !dbg !4508
  call void @llvm.dbg.declare(metadata i16* %maxSize, metadata !4509, metadata !DIExpression()), !dbg !4510
  store i16 4090, i16* %maxSize, align 2, !dbg !4510
  %0 = load i16, i16* %maxSize, align 2, !dbg !4511
  %conv = zext i16 %0 to i32, !dbg !4511
  %call = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.9.36, i64 0, i64 0), i32 %conv) #15, !dbg !4512
  %1 = load i8*, i8** %buf.addr, align 8, !dbg !4513
  %2 = load i16, i16* %maxSize, align 2, !dbg !4514
  %conv1 = zext i16 %2 to i64, !dbg !4514
  %call2 = call i32 @cgc_receive_bytes(i8* %1, i64 %conv1) #15, !dbg !4515
  call void @llvm.dbg.declare(metadata i16* %offset, metadata !4516, metadata !DIExpression()), !dbg !4517
  store i16 0, i16* %offset, align 2, !dbg !4517
  call void @llvm.dbg.declare(metadata i16* %i, metadata !4518, metadata !DIExpression()), !dbg !4519
  store i16 0, i16* %i, align 2, !dbg !4519
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %tmp, metadata !4520, metadata !DIExpression()), !dbg !4521
  br label %while.cond, !dbg !4522

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i16, i16* %offset, align 2, !dbg !4523
  %conv3 = zext i16 %3 to i32, !dbg !4523
  %4 = load i16, i16* %maxSize, align 2, !dbg !4524
  %conv4 = zext i16 %4 to i32, !dbg !4524
  %cmp = icmp slt i32 %conv3, %conv4, !dbg !4525
  br i1 %cmp, label %while.body, label %while.end, !dbg !4522

while.body:                                       ; preds = %while.cond
  %5 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list.addr, align 8, !dbg !4526
  %6 = load i16, i16* %i, align 2, !dbg !4528
  %inc = add i16 %6, 1, !dbg !4528
  store i16 %inc, i16* %i, align 2, !dbg !4528
  %idxprom = zext i16 %6 to i64, !dbg !4526
  %arrayidx = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %5, i64 %idxprom, !dbg !4526
  %7 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx, align 8, !dbg !4526
  store %struct.t3DCPixel* %7, %struct.t3DCPixel** %tmp, align 8, !dbg !4529
  %8 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !4530
  %x = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %8, i32 0, i32 0, !dbg !4531
  %9 = bitcast i16* %x to i8*, !dbg !4532
  %10 = load i8*, i8** %buf.addr, align 8, !dbg !4533
  %11 = load i16, i16* %offset, align 2, !dbg !4534
  %conv6 = zext i16 %11 to i32, !dbg !4534
  %idx.ext = sext i32 %conv6 to i64, !dbg !4535
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %idx.ext, !dbg !4535
  %call7 = call i8* @cgc_memcpy(i8* %9, i8* %add.ptr, i64 2) #15, !dbg !4536
  %12 = load i16, i16* %offset, align 2, !dbg !4537
  %conv8 = zext i16 %12 to i64, !dbg !4537
  %add = add i64 %conv8, 2, !dbg !4537
  %conv9 = trunc i64 %add to i16, !dbg !4537
  store i16 %conv9, i16* %offset, align 2, !dbg !4537
  %13 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !4538
  %y = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %13, i32 0, i32 1, !dbg !4539
  %14 = bitcast i16* %y to i8*, !dbg !4540
  %15 = load i8*, i8** %buf.addr, align 8, !dbg !4541
  %16 = load i16, i16* %offset, align 2, !dbg !4542
  %conv10 = zext i16 %16 to i32, !dbg !4542
  %idx.ext11 = sext i32 %conv10 to i64, !dbg !4543
  %add.ptr12 = getelementptr inbounds i8, i8* %15, i64 %idx.ext11, !dbg !4543
  %call13 = call i8* @cgc_memcpy(i8* %14, i8* %add.ptr12, i64 2) #15, !dbg !4544
  %17 = load i16, i16* %offset, align 2, !dbg !4545
  %conv14 = zext i16 %17 to i64, !dbg !4545
  %add15 = add i64 %conv14, 2, !dbg !4545
  %conv16 = trunc i64 %add15 to i16, !dbg !4545
  store i16 %conv16, i16* %offset, align 2, !dbg !4545
  %18 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !4546
  %z = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %18, i32 0, i32 2, !dbg !4547
  %19 = bitcast i16* %z to i8*, !dbg !4548
  %20 = load i8*, i8** %buf.addr, align 8, !dbg !4549
  %21 = load i16, i16* %offset, align 2, !dbg !4550
  %conv17 = zext i16 %21 to i32, !dbg !4550
  %idx.ext18 = sext i32 %conv17 to i64, !dbg !4551
  %add.ptr19 = getelementptr inbounds i8, i8* %20, i64 %idx.ext18, !dbg !4551
  %call20 = call i8* @cgc_memcpy(i8* %19, i8* %add.ptr19, i64 2) #15, !dbg !4552
  %22 = load i16, i16* %offset, align 2, !dbg !4553
  %conv21 = zext i16 %22 to i64, !dbg !4553
  %add22 = add i64 %conv21, 2, !dbg !4553
  %conv23 = trunc i64 %add22 to i16, !dbg !4553
  store i16 %conv23, i16* %offset, align 2, !dbg !4553
  %23 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !4554
  %r = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %23, i32 0, i32 3, !dbg !4555
  %24 = load i8*, i8** %buf.addr, align 8, !dbg !4556
  %25 = load i16, i16* %offset, align 2, !dbg !4557
  %conv24 = zext i16 %25 to i32, !dbg !4557
  %idx.ext25 = sext i32 %conv24 to i64, !dbg !4558
  %add.ptr26 = getelementptr inbounds i8, i8* %24, i64 %idx.ext25, !dbg !4558
  %call27 = call i8* @cgc_memcpy(i8* %r, i8* %add.ptr26, i64 1) #15, !dbg !4559
  %26 = load i16, i16* %offset, align 2, !dbg !4560
  %conv28 = zext i16 %26 to i64, !dbg !4560
  %add29 = add i64 %conv28, 1, !dbg !4560
  %conv30 = trunc i64 %add29 to i16, !dbg !4560
  store i16 %conv30, i16* %offset, align 2, !dbg !4560
  %27 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !4561
  %g = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %27, i32 0, i32 4, !dbg !4562
  %28 = load i8*, i8** %buf.addr, align 8, !dbg !4563
  %29 = load i16, i16* %offset, align 2, !dbg !4564
  %conv31 = zext i16 %29 to i32, !dbg !4564
  %idx.ext32 = sext i32 %conv31 to i64, !dbg !4565
  %add.ptr33 = getelementptr inbounds i8, i8* %28, i64 %idx.ext32, !dbg !4565
  %call34 = call i8* @cgc_memcpy(i8* %g, i8* %add.ptr33, i64 1) #15, !dbg !4566
  %30 = load i16, i16* %offset, align 2, !dbg !4567
  %conv35 = zext i16 %30 to i64, !dbg !4567
  %add36 = add i64 %conv35, 1, !dbg !4567
  %conv37 = trunc i64 %add36 to i16, !dbg !4567
  store i16 %conv37, i16* %offset, align 2, !dbg !4567
  %31 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !4568
  %b = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %31, i32 0, i32 5, !dbg !4569
  %32 = load i8*, i8** %buf.addr, align 8, !dbg !4570
  %33 = load i16, i16* %offset, align 2, !dbg !4571
  %conv38 = zext i16 %33 to i32, !dbg !4571
  %idx.ext39 = sext i32 %conv38 to i64, !dbg !4572
  %add.ptr40 = getelementptr inbounds i8, i8* %32, i64 %idx.ext39, !dbg !4572
  %call41 = call i8* @cgc_memcpy(i8* %b, i8* %add.ptr40, i64 1) #15, !dbg !4573
  %34 = load i16, i16* %offset, align 2, !dbg !4574
  %conv42 = zext i16 %34 to i64, !dbg !4574
  %add43 = add i64 %conv42, 1, !dbg !4574
  %conv44 = trunc i64 %add43 to i16, !dbg !4574
  store i16 %conv44, i16* %offset, align 2, !dbg !4574
  %35 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !4575
  %a = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %35, i32 0, i32 6, !dbg !4576
  %36 = load i8*, i8** %buf.addr, align 8, !dbg !4577
  %37 = load i16, i16* %offset, align 2, !dbg !4578
  %conv45 = zext i16 %37 to i32, !dbg !4578
  %idx.ext46 = sext i32 %conv45 to i64, !dbg !4579
  %add.ptr47 = getelementptr inbounds i8, i8* %36, i64 %idx.ext46, !dbg !4579
  %call48 = call i8* @cgc_memcpy(i8* %a, i8* %add.ptr47, i64 1) #15, !dbg !4580
  %38 = load i16, i16* %offset, align 2, !dbg !4581
  %conv49 = zext i16 %38 to i64, !dbg !4581
  %add50 = add i64 %conv49, 1, !dbg !4581
  %conv51 = trunc i64 %add50 to i16, !dbg !4581
  store i16 %conv51, i16* %offset, align 2, !dbg !4581
  br label %while.cond, !dbg !4522, !llvm.loop !4582

while.end:                                        ; preds = %while.cond
  %call52 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.10, i64 0, i64 0)) #15, !dbg !4584
  ret void, !dbg !4585
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_ShowPixel(%struct.t3DCPixel* %px) #6 !dbg !4586 {
entry:
  %px.addr = alloca %struct.t3DCPixel*, align 8
  store %struct.t3DCPixel* %px, %struct.t3DCPixel** %px.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %px.addr, metadata !4589, metadata !DIExpression()), !dbg !4590
  %0 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4591
  %x = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %0, i32 0, i32 0, !dbg !4592
  %1 = load i16, i16* %x, align 1, !dbg !4592
  %conv = sext i16 %1 to i32, !dbg !4591
  %2 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4593
  %y = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %2, i32 0, i32 1, !dbg !4594
  %3 = load i16, i16* %y, align 1, !dbg !4594
  %conv1 = sext i16 %3 to i32, !dbg !4593
  %4 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4595
  %z = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %4, i32 0, i32 2, !dbg !4596
  %5 = load i16, i16* %z, align 1, !dbg !4596
  %conv2 = sext i16 %5 to i32, !dbg !4595
  %call = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2.37, i64 0, i64 0), i32 %conv, i32 %conv1, i32 %conv2) #15, !dbg !4597
  %6 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4598
  %r = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %6, i32 0, i32 3, !dbg !4599
  %7 = load i8, i8* %r, align 1, !dbg !4599
  %conv3 = zext i8 %7 to i32, !dbg !4598
  %8 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4600
  %g = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %8, i32 0, i32 4, !dbg !4601
  %9 = load i8, i8* %g, align 1, !dbg !4601
  %conv4 = zext i8 %9 to i32, !dbg !4600
  %10 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4602
  %b = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %10, i32 0, i32 5, !dbg !4603
  %11 = load i8, i8* %b, align 1, !dbg !4603
  %conv5 = zext i8 %11 to i32, !dbg !4602
  %12 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4604
  %a = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %12, i32 0, i32 6, !dbg !4605
  %13 = load i8, i8* %a, align 1, !dbg !4605
  %conv6 = zext i8 %13 to i32, !dbg !4604
  %call7 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3.38, i64 0, i64 0), i32 %conv3, i32 %conv4, i32 %conv5, i32 %conv6) #15, !dbg !4606
  %call8 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.39, i64 0, i64 0)) #15, !dbg !4607
  ret void, !dbg !4608
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_CheckFile(%struct.t3DCPixel** %px, i16 signext %num) #6 !dbg !4609 {
entry:
  %px.addr = alloca %struct.t3DCPixel**, align 8
  %num.addr = alloca i16, align 2
  %i = alloca i32, align 4
  store %struct.t3DCPixel** %px, %struct.t3DCPixel*** %px.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel*** %px.addr, metadata !4612, metadata !DIExpression()), !dbg !4613
  store i16 %num, i16* %num.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %num.addr, metadata !4614, metadata !DIExpression()), !dbg !4615
  %0 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px.addr, align 8, !dbg !4616
  %cmp = icmp eq %struct.t3DCPixel** %0, null, !dbg !4618
  br i1 %cmp, label %if.then, label %if.end, !dbg !4619

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !4620

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4621, metadata !DIExpression()), !dbg !4623
  store i32 0, i32* %i, align 4, !dbg !4623
  br label %for.cond, !dbg !4624

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4, !dbg !4625
  %2 = load i16, i16* %num.addr, align 2, !dbg !4627
  %conv = sext i16 %2 to i32, !dbg !4627
  %cmp1 = icmp slt i32 %1, %conv, !dbg !4628
  br i1 %cmp1, label %for.body, label %for.end, !dbg !4629

for.body:                                         ; preds = %for.cond
  %3 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px.addr, align 8, !dbg !4630
  %4 = load i32, i32* %i, align 4, !dbg !4632
  %idxprom = sext i32 %4 to i64, !dbg !4630
  %arrayidx = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %3, i64 %idxprom, !dbg !4630
  %5 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx, align 8, !dbg !4630
  %x = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %5, i32 0, i32 0, !dbg !4633
  %6 = load i16, i16* %x, align 1, !dbg !4633
  %conv3 = sext i16 %6 to i32, !dbg !4630
  %7 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px.addr, align 8, !dbg !4634
  %8 = load i32, i32* %i, align 4, !dbg !4635
  %idxprom4 = sext i32 %8 to i64, !dbg !4634
  %arrayidx5 = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %7, i64 %idxprom4, !dbg !4634
  %9 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx5, align 8, !dbg !4634
  %y = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %9, i32 0, i32 1, !dbg !4636
  %10 = load i16, i16* %y, align 1, !dbg !4636
  %conv6 = sext i16 %10 to i32, !dbg !4634
  %11 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px.addr, align 8, !dbg !4637
  %12 = load i32, i32* %i, align 4, !dbg !4638
  %idxprom7 = sext i32 %12 to i64, !dbg !4637
  %arrayidx8 = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %11, i64 %idxprom7, !dbg !4637
  %13 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx8, align 8, !dbg !4637
  %z = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %13, i32 0, i32 2, !dbg !4639
  %14 = load i16, i16* %z, align 1, !dbg !4639
  %conv9 = sext i16 %14 to i32, !dbg !4637
  %call = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2.37, i64 0, i64 0), i32 %conv3, i32 %conv6, i32 %conv9) #15, !dbg !4640
  %15 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px.addr, align 8, !dbg !4641
  %16 = load i32, i32* %i, align 4, !dbg !4642
  %idxprom10 = sext i32 %16 to i64, !dbg !4641
  %arrayidx11 = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %15, i64 %idxprom10, !dbg !4641
  %17 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx11, align 8, !dbg !4641
  %r = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %17, i32 0, i32 3, !dbg !4643
  %18 = load i8, i8* %r, align 1, !dbg !4643
  %conv12 = zext i8 %18 to i32, !dbg !4641
  %19 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px.addr, align 8, !dbg !4644
  %20 = load i32, i32* %i, align 4, !dbg !4645
  %idxprom13 = sext i32 %20 to i64, !dbg !4644
  %arrayidx14 = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %19, i64 %idxprom13, !dbg !4644
  %21 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx14, align 8, !dbg !4644
  %g = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %21, i32 0, i32 4, !dbg !4646
  %22 = load i8, i8* %g, align 1, !dbg !4646
  %conv15 = zext i8 %22 to i32, !dbg !4644
  %23 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px.addr, align 8, !dbg !4647
  %24 = load i32, i32* %i, align 4, !dbg !4648
  %idxprom16 = sext i32 %24 to i64, !dbg !4647
  %arrayidx17 = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %23, i64 %idxprom16, !dbg !4647
  %25 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx17, align 8, !dbg !4647
  %b = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %25, i32 0, i32 5, !dbg !4649
  %26 = load i8, i8* %b, align 1, !dbg !4649
  %conv18 = zext i8 %26 to i32, !dbg !4647
  %27 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px.addr, align 8, !dbg !4650
  %28 = load i32, i32* %i, align 4, !dbg !4651
  %idxprom19 = sext i32 %28 to i64, !dbg !4650
  %arrayidx20 = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %27, i64 %idxprom19, !dbg !4650
  %29 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx20, align 8, !dbg !4650
  %a = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %29, i32 0, i32 6, !dbg !4652
  %30 = load i8, i8* %a, align 1, !dbg !4652
  %conv21 = zext i8 %30 to i32, !dbg !4650
  %call22 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3.38, i64 0, i64 0), i32 %conv12, i32 %conv15, i32 %conv18, i32 %conv21) #15, !dbg !4653
  %call23 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.39, i64 0, i64 0)) #15, !dbg !4654
  br label %for.inc, !dbg !4655

for.inc:                                          ; preds = %for.body
  %31 = load i32, i32* %i, align 4, !dbg !4656
  %inc = add nsw i32 %31, 1, !dbg !4656
  store i32 %inc, i32* %i, align 4, !dbg !4656
  br label %for.cond, !dbg !4657, !llvm.loop !4658

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !4660
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_RotateX(%struct.t3DCPixel* %px, i16 signext %degree) #6 !dbg !4661 {
entry:
  %px.addr = alloca %struct.t3DCPixel*, align 8
  %degree.addr = alloca i16, align 2
  %a = alloca double, align 8
  store %struct.t3DCPixel* %px, %struct.t3DCPixel** %px.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %px.addr, metadata !4662, metadata !DIExpression()), !dbg !4663
  store i16 %degree, i16* %degree.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %degree.addr, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.declare(metadata double* %a, metadata !4666, metadata !DIExpression()), !dbg !4667
  %0 = load i16, i16* %degree.addr, align 2, !dbg !4668
  %call = call signext i16 @cgc_degree_to_radian(i16 signext %0) #15, !dbg !4669
  %conv = sitofp i16 %call to double, !dbg !4669
  store double %conv, double* %a, align 8, !dbg !4667
  %1 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4670
  %y = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %1, i32 0, i32 1, !dbg !4671
  %2 = load i16, i16* %y, align 1, !dbg !4671
  %conv1 = sitofp i16 %2 to double, !dbg !4670
  %3 = load double, double* %a, align 8, !dbg !4672
  %call2 = call double @cgc_cos(double %3) #15, !dbg !4673
  %call3 = call i32 @cgc_multiply(double %conv1, double %call2) #15, !dbg !4674
  %conv4 = trunc i32 %call3 to i16, !dbg !4675
  %conv5 = sext i16 %conv4 to i32, !dbg !4675
  %4 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4676
  %z = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %4, i32 0, i32 2, !dbg !4677
  %5 = load i16, i16* %z, align 1, !dbg !4677
  %conv6 = sitofp i16 %5 to double, !dbg !4676
  %6 = load double, double* %a, align 8, !dbg !4678
  %call7 = call double @cgc_sin(double %6) #15, !dbg !4679
  %call8 = call i32 @cgc_multiply(double %conv6, double %call7) #15, !dbg !4680
  %sub = sub nsw i32 %conv5, %call8, !dbg !4681
  %conv9 = trunc i32 %sub to i16, !dbg !4675
  %7 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4682
  %y10 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %7, i32 0, i32 1, !dbg !4683
  store i16 %conv9, i16* %y10, align 1, !dbg !4684
  %8 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4685
  %y11 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %8, i32 0, i32 1, !dbg !4686
  %9 = load i16, i16* %y11, align 1, !dbg !4686
  %conv12 = sitofp i16 %9 to double, !dbg !4685
  %10 = load double, double* %a, align 8, !dbg !4687
  %call13 = call double @cgc_sin(double %10) #15, !dbg !4688
  %call14 = call i32 @cgc_multiply(double %conv12, double %call13) #15, !dbg !4689
  %conv15 = trunc i32 %call14 to i16, !dbg !4690
  %conv16 = sext i16 %conv15 to i32, !dbg !4690
  %11 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4691
  %z17 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %11, i32 0, i32 2, !dbg !4692
  %12 = load i16, i16* %z17, align 1, !dbg !4692
  %conv18 = sitofp i16 %12 to double, !dbg !4691
  %13 = load double, double* %a, align 8, !dbg !4693
  %call19 = call double @cgc_cos(double %13) #15, !dbg !4694
  %call20 = call i32 @cgc_multiply(double %conv18, double %call19) #15, !dbg !4695
  %add = add nsw i32 %conv16, %call20, !dbg !4696
  %conv21 = trunc i32 %add to i16, !dbg !4690
  %14 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4697
  %z22 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %14, i32 0, i32 2, !dbg !4698
  store i16 %conv21, i16* %z22, align 1, !dbg !4699
  ret void, !dbg !4700
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i16 @cgc_degree_to_radian(i16 signext %degree) #6 !dbg !4701 {
entry:
  %degree.addr = alloca i16, align 2
  store i16 %degree, i16* %degree.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %degree.addr, metadata !4704, metadata !DIExpression()), !dbg !4705
  %0 = load i16, i16* %degree.addr, align 2, !dbg !4706
  %conv = sitofp i16 %0 to double, !dbg !4706
  %call = call signext i16 @cgc_divide(double 0x400921FB54442D18, double 1.800000e+02) #15, !dbg !4707
  %conv1 = sitofp i16 %call to double, !dbg !4707
  %call2 = call i32 @cgc_multiply(double %conv, double %conv1) #15, !dbg !4708
  %conv3 = trunc i32 %call2 to i16, !dbg !4708
  ret i16 %conv3, !dbg !4709
}

declare dso_local double @cgc_cos(double) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cgc_multiply(double %a, double %b) #6 !dbg !4710 {
entry:
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  store double %a, double* %a.addr, align 8
  call void @llvm.dbg.declare(metadata double* %a.addr, metadata !4713, metadata !DIExpression()), !dbg !4714
  store double %b, double* %b.addr, align 8
  call void @llvm.dbg.declare(metadata double* %b.addr, metadata !4715, metadata !DIExpression()), !dbg !4716
  %0 = load double, double* %a.addr, align 8, !dbg !4717
  %1 = load double, double* %b.addr, align 8, !dbg !4718
  %mul = fmul double %0, %1, !dbg !4719
  %conv = fptosi double %mul to i32, !dbg !4720
  ret i32 %conv, !dbg !4721
}

declare dso_local double @cgc_sin(double) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local signext i16 @cgc_divide(double %a, double %b) #6 !dbg !4722 {
entry:
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  store double %a, double* %a.addr, align 8
  call void @llvm.dbg.declare(metadata double* %a.addr, metadata !4725, metadata !DIExpression()), !dbg !4726
  store double %b, double* %b.addr, align 8
  call void @llvm.dbg.declare(metadata double* %b.addr, metadata !4727, metadata !DIExpression()), !dbg !4728
  %0 = load double, double* %a.addr, align 8, !dbg !4729
  %1 = load double, double* %b.addr, align 8, !dbg !4730
  %div = fdiv double %0, %1, !dbg !4731
  %conv = fptosi double %div to i16, !dbg !4732
  ret i16 %conv, !dbg !4733
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_RotateY(%struct.t3DCPixel* %px, i16 signext %degree) #6 !dbg !4734 {
entry:
  %px.addr = alloca %struct.t3DCPixel*, align 8
  %degree.addr = alloca i16, align 2
  %a = alloca double, align 8
  store %struct.t3DCPixel* %px, %struct.t3DCPixel** %px.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %px.addr, metadata !4735, metadata !DIExpression()), !dbg !4736
  store i16 %degree, i16* %degree.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %degree.addr, metadata !4737, metadata !DIExpression()), !dbg !4738
  call void @llvm.dbg.declare(metadata double* %a, metadata !4739, metadata !DIExpression()), !dbg !4740
  %0 = load i16, i16* %degree.addr, align 2, !dbg !4741
  %call = call signext i16 @cgc_degree_to_radian(i16 signext %0) #15, !dbg !4742
  %conv = sitofp i16 %call to double, !dbg !4742
  store double %conv, double* %a, align 8, !dbg !4740
  %1 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4743
  %z = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %1, i32 0, i32 2, !dbg !4744
  %2 = load i16, i16* %z, align 1, !dbg !4744
  %conv1 = sitofp i16 %2 to double, !dbg !4743
  %3 = load double, double* %a, align 8, !dbg !4745
  %call2 = call double @cgc_sin(double %3) #15, !dbg !4746
  %call3 = call i32 @cgc_multiply(double %conv1, double %call2) #15, !dbg !4747
  %conv4 = trunc i32 %call3 to i16, !dbg !4748
  %conv5 = sext i16 %conv4 to i32, !dbg !4748
  %4 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4749
  %x = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %4, i32 0, i32 0, !dbg !4750
  %5 = load i16, i16* %x, align 1, !dbg !4750
  %conv6 = sitofp i16 %5 to double, !dbg !4749
  %6 = load double, double* %a, align 8, !dbg !4751
  %call7 = call double @cgc_cos(double %6) #15, !dbg !4752
  %call8 = call i32 @cgc_multiply(double %conv6, double %call7) #15, !dbg !4753
  %add = add nsw i32 %conv5, %call8, !dbg !4754
  %conv9 = trunc i32 %add to i16, !dbg !4748
  %7 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4755
  %x10 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %7, i32 0, i32 0, !dbg !4756
  store i16 %conv9, i16* %x10, align 1, !dbg !4757
  %8 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4758
  %z11 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %8, i32 0, i32 2, !dbg !4759
  %9 = load i16, i16* %z11, align 1, !dbg !4759
  %conv12 = sitofp i16 %9 to double, !dbg !4758
  %10 = load double, double* %a, align 8, !dbg !4760
  %call13 = call double @cgc_cos(double %10) #15, !dbg !4761
  %call14 = call i32 @cgc_multiply(double %conv12, double %call13) #15, !dbg !4762
  %conv15 = trunc i32 %call14 to i16, !dbg !4763
  %conv16 = sext i16 %conv15 to i32, !dbg !4763
  %11 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4764
  %x17 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %11, i32 0, i32 0, !dbg !4765
  %12 = load i16, i16* %x17, align 1, !dbg !4765
  %conv18 = sitofp i16 %12 to double, !dbg !4764
  %13 = load double, double* %a, align 8, !dbg !4766
  %call19 = call double @cgc_sin(double %13) #15, !dbg !4767
  %call20 = call i32 @cgc_multiply(double %conv18, double %call19) #15, !dbg !4768
  %sub = sub nsw i32 %conv16, %call20, !dbg !4769
  %conv21 = trunc i32 %sub to i16, !dbg !4763
  %14 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4770
  %z22 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %14, i32 0, i32 2, !dbg !4771
  store i16 %conv21, i16* %z22, align 1, !dbg !4772
  ret void, !dbg !4773
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_RotateZ(%struct.t3DCPixel* %px, i16 signext %degree) #6 !dbg !4774 {
entry:
  %px.addr = alloca %struct.t3DCPixel*, align 8
  %degree.addr = alloca i16, align 2
  %a = alloca double, align 8
  store %struct.t3DCPixel* %px, %struct.t3DCPixel** %px.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %px.addr, metadata !4775, metadata !DIExpression()), !dbg !4776
  store i16 %degree, i16* %degree.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %degree.addr, metadata !4777, metadata !DIExpression()), !dbg !4778
  call void @llvm.dbg.declare(metadata double* %a, metadata !4779, metadata !DIExpression()), !dbg !4780
  %0 = load i16, i16* %degree.addr, align 2, !dbg !4781
  %call = call signext i16 @cgc_degree_to_radian(i16 signext %0) #15, !dbg !4782
  %conv = sitofp i16 %call to double, !dbg !4782
  store double %conv, double* %a, align 8, !dbg !4780
  %1 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4783
  %x = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %1, i32 0, i32 0, !dbg !4784
  %2 = load i16, i16* %x, align 1, !dbg !4784
  %conv1 = sitofp i16 %2 to double, !dbg !4783
  %3 = load double, double* %a, align 8, !dbg !4785
  %call2 = call double @cgc_cos(double %3) #15, !dbg !4786
  %call3 = call i32 @cgc_multiply(double %conv1, double %call2) #15, !dbg !4787
  %conv4 = trunc i32 %call3 to i16, !dbg !4788
  %conv5 = sext i16 %conv4 to i32, !dbg !4788
  %4 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4789
  %y = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %4, i32 0, i32 1, !dbg !4790
  %5 = load i16, i16* %y, align 1, !dbg !4790
  %conv6 = sitofp i16 %5 to double, !dbg !4789
  %6 = load double, double* %a, align 8, !dbg !4791
  %call7 = call double @cgc_sin(double %6) #15, !dbg !4792
  %call8 = call i32 @cgc_multiply(double %conv6, double %call7) #15, !dbg !4793
  %sub = sub nsw i32 %conv5, %call8, !dbg !4794
  %conv9 = trunc i32 %sub to i16, !dbg !4788
  %7 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4795
  %x10 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %7, i32 0, i32 0, !dbg !4796
  store i16 %conv9, i16* %x10, align 1, !dbg !4797
  %8 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4798
  %x11 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %8, i32 0, i32 0, !dbg !4799
  %9 = load i16, i16* %x11, align 1, !dbg !4799
  %conv12 = sitofp i16 %9 to double, !dbg !4798
  %10 = load double, double* %a, align 8, !dbg !4800
  %call13 = call double @cgc_sin(double %10) #15, !dbg !4801
  %call14 = call i32 @cgc_multiply(double %conv12, double %call13) #15, !dbg !4802
  %conv15 = trunc i32 %call14 to i16, !dbg !4803
  %conv16 = sext i16 %conv15 to i32, !dbg !4803
  %11 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4804
  %y17 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %11, i32 0, i32 1, !dbg !4805
  %12 = load i16, i16* %y17, align 1, !dbg !4805
  %conv18 = sitofp i16 %12 to double, !dbg !4804
  %13 = load double, double* %a, align 8, !dbg !4806
  %call19 = call double @cgc_cos(double %13) #15, !dbg !4807
  %call20 = call i32 @cgc_multiply(double %conv18, double %call19) #15, !dbg !4808
  %add = add nsw i32 %conv16, %call20, !dbg !4809
  %conv21 = trunc i32 %add to i16, !dbg !4803
  %14 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4810
  %y22 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %14, i32 0, i32 1, !dbg !4811
  store i16 %conv21, i16* %y22, align 1, !dbg !4812
  ret void, !dbg !4813
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_SkewX(%struct.t3DCPixel* %px, i16 signext %skew_val) #6 !dbg !4814 {
entry:
  %px.addr = alloca %struct.t3DCPixel*, align 8
  %skew_val.addr = alloca i16, align 2
  store %struct.t3DCPixel* %px, %struct.t3DCPixel** %px.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %px.addr, metadata !4815, metadata !DIExpression()), !dbg !4816
  store i16 %skew_val, i16* %skew_val.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %skew_val.addr, metadata !4817, metadata !DIExpression()), !dbg !4818
  %0 = load i16, i16* %skew_val.addr, align 2, !dbg !4819
  %conv = sext i16 %0 to i32, !dbg !4819
  %1 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4820
  %x = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %1, i32 0, i32 0, !dbg !4821
  %2 = load i16, i16* %x, align 1, !dbg !4821
  %conv1 = sext i16 %2 to i32, !dbg !4820
  %add = add nsw i32 %conv, %conv1, !dbg !4822
  %conv2 = trunc i32 %add to i16, !dbg !4823
  %3 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4824
  %x3 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %3, i32 0, i32 0, !dbg !4825
  store i16 %conv2, i16* %x3, align 1, !dbg !4826
  ret void, !dbg !4827
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_SkewY(%struct.t3DCPixel* %px, i16 signext %skew_val) #6 !dbg !4828 {
entry:
  %px.addr = alloca %struct.t3DCPixel*, align 8
  %skew_val.addr = alloca i16, align 2
  store %struct.t3DCPixel* %px, %struct.t3DCPixel** %px.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %px.addr, metadata !4829, metadata !DIExpression()), !dbg !4830
  store i16 %skew_val, i16* %skew_val.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %skew_val.addr, metadata !4831, metadata !DIExpression()), !dbg !4832
  %0 = load i16, i16* %skew_val.addr, align 2, !dbg !4833
  %conv = sext i16 %0 to i32, !dbg !4833
  %1 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4834
  %y = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %1, i32 0, i32 1, !dbg !4835
  %2 = load i16, i16* %y, align 1, !dbg !4836
  %conv1 = sext i16 %2 to i32, !dbg !4836
  %add = add nsw i32 %conv1, %conv, !dbg !4836
  %conv2 = trunc i32 %add to i16, !dbg !4836
  store i16 %conv2, i16* %y, align 1, !dbg !4836
  ret void, !dbg !4837
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_SkewZ(%struct.t3DCPixel* %px, i16 signext %skew_val) #6 !dbg !4838 {
entry:
  %px.addr = alloca %struct.t3DCPixel*, align 8
  %skew_val.addr = alloca i16, align 2
  store %struct.t3DCPixel* %px, %struct.t3DCPixel** %px.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %px.addr, metadata !4839, metadata !DIExpression()), !dbg !4840
  store i16 %skew_val, i16* %skew_val.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %skew_val.addr, metadata !4841, metadata !DIExpression()), !dbg !4842
  %0 = load i16, i16* %skew_val.addr, align 2, !dbg !4843
  %conv = sext i16 %0 to i32, !dbg !4843
  %1 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4844
  %z = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %1, i32 0, i32 2, !dbg !4845
  %2 = load i16, i16* %z, align 1, !dbg !4846
  %conv1 = sext i16 %2 to i32, !dbg !4846
  %add = add nsw i32 %conv1, %conv, !dbg !4846
  %conv2 = trunc i32 %add to i16, !dbg !4846
  store i16 %conv2, i16* %z, align 1, !dbg !4846
  ret void, !dbg !4847
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_Scale(%struct.t3DCPixel* %px, i16 signext %scale_val) #6 !dbg !4848 {
entry:
  %px.addr = alloca %struct.t3DCPixel*, align 8
  %scale_val.addr = alloca i16, align 2
  %percent = alloca double, align 8
  %tmp_x = alloca i32, align 4
  %tmp_y = alloca i32, align 4
  %tmp_z = alloca i32, align 4
  store %struct.t3DCPixel* %px, %struct.t3DCPixel** %px.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %px.addr, metadata !4849, metadata !DIExpression()), !dbg !4850
  store i16 %scale_val, i16* %scale_val.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %scale_val.addr, metadata !4851, metadata !DIExpression()), !dbg !4852
  %0 = load i16, i16* %scale_val.addr, align 2, !dbg !4853
  %conv = sext i16 %0 to i32, !dbg !4853
  %cmp = icmp slt i32 %conv, 1, !dbg !4855
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4856

lor.lhs.false:                                    ; preds = %entry
  %1 = load i16, i16* %scale_val.addr, align 2, !dbg !4857
  %conv2 = sext i16 %1 to i32, !dbg !4857
  %cmp3 = icmp sgt i32 %conv2, 200, !dbg !4858
  br i1 %cmp3, label %if.then, label %if.end, !dbg !4859

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end59, !dbg !4860

if.end:                                           ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata double* %percent, metadata !4862, metadata !DIExpression()), !dbg !4863
  %2 = load i16, i16* %scale_val.addr, align 2, !dbg !4864
  %conv5 = sitofp i16 %2 to double, !dbg !4864
  %call = call signext i16 @cgc_divide(double %conv5, double 1.000000e+02) #15, !dbg !4865
  %conv6 = sitofp i16 %call to double, !dbg !4865
  store double %conv6, double* %percent, align 8, !dbg !4863
  call void @llvm.dbg.declare(metadata i32* %tmp_x, metadata !4866, metadata !DIExpression()), !dbg !4867
  call void @llvm.dbg.declare(metadata i32* %tmp_y, metadata !4868, metadata !DIExpression()), !dbg !4869
  call void @llvm.dbg.declare(metadata i32* %tmp_z, metadata !4870, metadata !DIExpression()), !dbg !4871
  %3 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4872
  %x = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %3, i32 0, i32 0, !dbg !4873
  %4 = load i16, i16* %x, align 1, !dbg !4873
  %conv7 = sitofp i16 %4 to double, !dbg !4872
  %5 = load double, double* %percent, align 8, !dbg !4874
  %call8 = call i32 @cgc_multiply(double %conv7, double %5) #15, !dbg !4875
  store i32 %call8, i32* %tmp_x, align 4, !dbg !4876
  %6 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4877
  %y = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %6, i32 0, i32 1, !dbg !4878
  %7 = load i16, i16* %y, align 1, !dbg !4878
  %conv9 = sitofp i16 %7 to double, !dbg !4877
  %8 = load double, double* %percent, align 8, !dbg !4879
  %call10 = call i32 @cgc_multiply(double %conv9, double %8) #15, !dbg !4880
  store i32 %call10, i32* %tmp_y, align 4, !dbg !4881
  %9 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4882
  %z = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %9, i32 0, i32 2, !dbg !4883
  %10 = load i16, i16* %z, align 1, !dbg !4883
  %conv11 = sitofp i16 %10 to double, !dbg !4882
  %11 = load double, double* %percent, align 8, !dbg !4884
  %call12 = call i32 @cgc_multiply(double %conv11, double %11) #15, !dbg !4885
  store i32 %call12, i32* %tmp_z, align 4, !dbg !4886
  %12 = load i32, i32* %tmp_x, align 4, !dbg !4887
  %cmp13 = icmp sgt i32 %12, 65535, !dbg !4889
  br i1 %cmp13, label %if.then15, label %if.else24, !dbg !4890

if.then15:                                        ; preds = %if.end
  %13 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4891
  %x16 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %13, i32 0, i32 0, !dbg !4894
  %14 = load i16, i16* %x16, align 1, !dbg !4894
  %conv17 = sext i16 %14 to i32, !dbg !4891
  %cmp18 = icmp slt i32 %conv17, 0, !dbg !4895
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !4896

if.then20:                                        ; preds = %if.then15
  %15 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4897
  %x21 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %15, i32 0, i32 0, !dbg !4899
  store i16 -32768, i16* %x21, align 1, !dbg !4900
  br label %if.end23, !dbg !4901

if.else:                                          ; preds = %if.then15
  %16 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4902
  %x22 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %16, i32 0, i32 0, !dbg !4904
  store i16 32767, i16* %x22, align 1, !dbg !4905
  br label %if.end23

if.end23:                                         ; preds = %if.else, %if.then20
  br label %if.end27, !dbg !4906

if.else24:                                        ; preds = %if.end
  %17 = load i32, i32* %tmp_x, align 4, !dbg !4907
  %conv25 = trunc i32 %17 to i16, !dbg !4909
  %18 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4910
  %x26 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %18, i32 0, i32 0, !dbg !4911
  store i16 %conv25, i16* %x26, align 1, !dbg !4912
  br label %if.end27

if.end27:                                         ; preds = %if.else24, %if.end23
  %19 = load i32, i32* %tmp_y, align 4, !dbg !4913
  %cmp28 = icmp sgt i32 %19, 65535, !dbg !4915
  br i1 %cmp28, label %if.then30, label %if.else40, !dbg !4916

if.then30:                                        ; preds = %if.end27
  %20 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4917
  %y31 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %20, i32 0, i32 1, !dbg !4920
  %21 = load i16, i16* %y31, align 1, !dbg !4920
  %conv32 = sext i16 %21 to i32, !dbg !4917
  %cmp33 = icmp slt i32 %conv32, 0, !dbg !4921
  br i1 %cmp33, label %if.then35, label %if.else37, !dbg !4922

if.then35:                                        ; preds = %if.then30
  %22 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4923
  %y36 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %22, i32 0, i32 1, !dbg !4925
  store i16 -32768, i16* %y36, align 1, !dbg !4926
  br label %if.end39, !dbg !4927

if.else37:                                        ; preds = %if.then30
  %23 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4928
  %y38 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %23, i32 0, i32 1, !dbg !4930
  store i16 32767, i16* %y38, align 1, !dbg !4931
  br label %if.end39

if.end39:                                         ; preds = %if.else37, %if.then35
  br label %if.end43, !dbg !4932

if.else40:                                        ; preds = %if.end27
  %24 = load i32, i32* %tmp_y, align 4, !dbg !4933
  %conv41 = trunc i32 %24 to i16, !dbg !4935
  %25 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4936
  %y42 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %25, i32 0, i32 1, !dbg !4937
  store i16 %conv41, i16* %y42, align 1, !dbg !4938
  br label %if.end43

if.end43:                                         ; preds = %if.else40, %if.end39
  %26 = load i32, i32* %tmp_z, align 4, !dbg !4939
  %cmp44 = icmp sgt i32 %26, 65535, !dbg !4941
  br i1 %cmp44, label %if.then46, label %if.else56, !dbg !4942

if.then46:                                        ; preds = %if.end43
  %27 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4943
  %z47 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %27, i32 0, i32 2, !dbg !4946
  %28 = load i16, i16* %z47, align 1, !dbg !4946
  %conv48 = sext i16 %28 to i32, !dbg !4943
  %cmp49 = icmp slt i32 %conv48, 0, !dbg !4947
  br i1 %cmp49, label %if.then51, label %if.else53, !dbg !4948

if.then51:                                        ; preds = %if.then46
  %29 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4949
  %z52 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %29, i32 0, i32 2, !dbg !4951
  store i16 -32768, i16* %z52, align 1, !dbg !4952
  br label %if.end55, !dbg !4953

if.else53:                                        ; preds = %if.then46
  %30 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4954
  %z54 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %30, i32 0, i32 2, !dbg !4956
  store i16 32767, i16* %z54, align 1, !dbg !4957
  br label %if.end55

if.end55:                                         ; preds = %if.else53, %if.then51
  br label %if.end59, !dbg !4958

if.else56:                                        ; preds = %if.end43
  %31 = load i32, i32* %tmp_z, align 4, !dbg !4959
  %conv57 = trunc i32 %31 to i16, !dbg !4961
  %32 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4962
  %z58 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %32, i32 0, i32 2, !dbg !4963
  store i16 %conv57, i16* %z58, align 1, !dbg !4964
  br label %if.end59

if.end59:                                         ; preds = %if.then, %if.else56, %if.end55
  ret void, !dbg !4965
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_Brightness(%struct.t3DCPixel* %px, i16 signext %bright_val) #6 !dbg !4966 {
entry:
  %px.addr = alloca %struct.t3DCPixel*, align 8
  %bright_val.addr = alloca i16, align 2
  %new_r = alloca i16, align 2
  %new_g = alloca i16, align 2
  %new_b = alloca i16, align 2
  store %struct.t3DCPixel* %px, %struct.t3DCPixel** %px.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %px.addr, metadata !4967, metadata !DIExpression()), !dbg !4968
  store i16 %bright_val, i16* %bright_val.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %bright_val.addr, metadata !4969, metadata !DIExpression()), !dbg !4970
  %0 = load i16, i16* %bright_val.addr, align 2, !dbg !4971
  %conv = sext i16 %0 to i32, !dbg !4971
  %cmp = icmp slt i32 %conv, -255, !dbg !4973
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4974

lor.lhs.false:                                    ; preds = %entry
  %1 = load i16, i16* %bright_val.addr, align 2, !dbg !4975
  %conv2 = sext i16 %1 to i32, !dbg !4975
  %cmp3 = icmp sgt i32 %conv2, 255, !dbg !4976
  br i1 %cmp3, label %if.then, label %if.end, !dbg !4977

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !4978

if.end:                                           ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata i16* %new_r, metadata !4980, metadata !DIExpression()), !dbg !4981
  call void @llvm.dbg.declare(metadata i16* %new_g, metadata !4982, metadata !DIExpression()), !dbg !4983
  call void @llvm.dbg.declare(metadata i16* %new_b, metadata !4984, metadata !DIExpression()), !dbg !4985
  %2 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4986
  %r = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %2, i32 0, i32 3, !dbg !4987
  %3 = load i8, i8* %r, align 1, !dbg !4987
  %conv5 = zext i8 %3 to i32, !dbg !4986
  %4 = load i16, i16* %bright_val.addr, align 2, !dbg !4988
  %conv6 = sext i16 %4 to i32, !dbg !4988
  %add = add nsw i32 %conv5, %conv6, !dbg !4989
  %conv7 = trunc i32 %add to i16, !dbg !4990
  store i16 %conv7, i16* %new_r, align 2, !dbg !4991
  %5 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4992
  %g = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %5, i32 0, i32 4, !dbg !4993
  %6 = load i8, i8* %g, align 1, !dbg !4993
  %conv8 = zext i8 %6 to i32, !dbg !4992
  %7 = load i16, i16* %bright_val.addr, align 2, !dbg !4994
  %conv9 = sext i16 %7 to i32, !dbg !4994
  %add10 = add nsw i32 %conv8, %conv9, !dbg !4995
  %conv11 = trunc i32 %add10 to i16, !dbg !4996
  store i16 %conv11, i16* %new_g, align 2, !dbg !4997
  %8 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !4998
  %b = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %8, i32 0, i32 5, !dbg !4999
  %9 = load i8, i8* %b, align 1, !dbg !4999
  %conv12 = zext i8 %9 to i32, !dbg !4998
  %10 = load i16, i16* %bright_val.addr, align 2, !dbg !5000
  %conv13 = sext i16 %10 to i32, !dbg !5000
  %add14 = add nsw i32 %conv12, %conv13, !dbg !5001
  %conv15 = trunc i32 %add14 to i16, !dbg !5002
  store i16 %conv15, i16* %new_b, align 2, !dbg !5003
  %11 = load i16, i16* %new_r, align 2, !dbg !5004
  %conv16 = sext i16 %11 to i32, !dbg !5004
  %cmp17 = icmp sgt i32 %conv16, 255, !dbg !5006
  br i1 %cmp17, label %if.then19, label %if.else, !dbg !5007

if.then19:                                        ; preds = %if.end
  %12 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !5008
  %r20 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %12, i32 0, i32 3, !dbg !5010
  store i8 -1, i8* %r20, align 1, !dbg !5011
  br label %if.end30, !dbg !5012

if.else:                                          ; preds = %if.end
  %13 = load i16, i16* %new_r, align 2, !dbg !5013
  %conv21 = sext i16 %13 to i32, !dbg !5013
  %cmp22 = icmp slt i32 %conv21, 0, !dbg !5015
  br i1 %cmp22, label %if.then24, label %if.else26, !dbg !5016

if.then24:                                        ; preds = %if.else
  %14 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !5017
  %r25 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %14, i32 0, i32 3, !dbg !5019
  store i8 0, i8* %r25, align 1, !dbg !5020
  br label %if.end29, !dbg !5021

if.else26:                                        ; preds = %if.else
  %15 = load i16, i16* %new_r, align 2, !dbg !5022
  %conv27 = trunc i16 %15 to i8, !dbg !5024
  %16 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !5025
  %r28 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %16, i32 0, i32 3, !dbg !5026
  store i8 %conv27, i8* %r28, align 1, !dbg !5027
  br label %if.end29

if.end29:                                         ; preds = %if.else26, %if.then24
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then19
  %17 = load i16, i16* %new_g, align 2, !dbg !5028
  %conv31 = sext i16 %17 to i32, !dbg !5028
  %cmp32 = icmp sgt i32 %conv31, 255, !dbg !5030
  br i1 %cmp32, label %if.then34, label %if.else36, !dbg !5031

if.then34:                                        ; preds = %if.end30
  %18 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !5032
  %g35 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %18, i32 0, i32 4, !dbg !5034
  store i8 -1, i8* %g35, align 1, !dbg !5035
  br label %if.end46, !dbg !5036

if.else36:                                        ; preds = %if.end30
  %19 = load i16, i16* %new_g, align 2, !dbg !5037
  %conv37 = sext i16 %19 to i32, !dbg !5037
  %cmp38 = icmp slt i32 %conv37, 0, !dbg !5039
  br i1 %cmp38, label %if.then40, label %if.else42, !dbg !5040

if.then40:                                        ; preds = %if.else36
  %20 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !5041
  %g41 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %20, i32 0, i32 4, !dbg !5043
  store i8 0, i8* %g41, align 1, !dbg !5044
  br label %if.end45, !dbg !5045

if.else42:                                        ; preds = %if.else36
  %21 = load i16, i16* %new_g, align 2, !dbg !5046
  %conv43 = trunc i16 %21 to i8, !dbg !5048
  %22 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !5049
  %g44 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %22, i32 0, i32 4, !dbg !5050
  store i8 %conv43, i8* %g44, align 1, !dbg !5051
  br label %if.end45

if.end45:                                         ; preds = %if.else42, %if.then40
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then34
  %23 = load i16, i16* %new_b, align 2, !dbg !5052
  %conv47 = sext i16 %23 to i32, !dbg !5052
  %cmp48 = icmp sgt i32 %conv47, 255, !dbg !5054
  br i1 %cmp48, label %if.then50, label %if.else52, !dbg !5055

if.then50:                                        ; preds = %if.end46
  %24 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !5056
  %b51 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %24, i32 0, i32 5, !dbg !5058
  store i8 -1, i8* %b51, align 1, !dbg !5059
  br label %if.end62, !dbg !5060

if.else52:                                        ; preds = %if.end46
  %25 = load i16, i16* %new_b, align 2, !dbg !5061
  %conv53 = sext i16 %25 to i32, !dbg !5061
  %cmp54 = icmp slt i32 %conv53, 0, !dbg !5063
  br i1 %cmp54, label %if.then56, label %if.else58, !dbg !5064

if.then56:                                        ; preds = %if.else52
  %26 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !5065
  %b57 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %26, i32 0, i32 5, !dbg !5067
  store i8 0, i8* %b57, align 1, !dbg !5068
  br label %if.end61, !dbg !5069

if.else58:                                        ; preds = %if.else52
  %27 = load i16, i16* %new_b, align 2, !dbg !5070
  %conv59 = trunc i16 %27 to i8, !dbg !5072
  %28 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !5073
  %b60 = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %28, i32 0, i32 5, !dbg !5074
  store i8 %conv59, i8* %b60, align 1, !dbg !5075
  br label %if.end61

if.end61:                                         ; preds = %if.else58, %if.then56
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then50
  br label %return, !dbg !5076

return:                                           ; preds = %if.end62, %if.then
  ret void, !dbg !5077
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_Opacity(%struct.t3DCPixel* %px, i16 signext %opacity_val) #6 !dbg !5078 {
entry:
  %px.addr = alloca %struct.t3DCPixel*, align 8
  %opacity_val.addr = alloca i16, align 2
  store %struct.t3DCPixel* %px, %struct.t3DCPixel** %px.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %px.addr, metadata !5079, metadata !DIExpression()), !dbg !5080
  store i16 %opacity_val, i16* %opacity_val.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %opacity_val.addr, metadata !5081, metadata !DIExpression()), !dbg !5082
  %0 = load i16, i16* %opacity_val.addr, align 2, !dbg !5083
  %conv = trunc i16 %0 to i8, !dbg !5084
  %1 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px.addr, align 8, !dbg !5085
  %a = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %1, i32 0, i32 6, !dbg !5086
  store i8 %conv, i8* %a, align 1, !dbg !5087
  ret void, !dbg !5088
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @cgc_cosine(i16 signext %a) #6 !dbg !5089 {
entry:
  %a.addr = alloca i16, align 2
  store i16 %a, i16* %a.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %a.addr, metadata !5092, metadata !DIExpression()), !dbg !5093
  %0 = load i16, i16* %a.addr, align 2, !dbg !5094
  %conv = sitofp i16 %0 to double, !dbg !5094
  %call = call double @cgc_cos(double %conv) #15, !dbg !5095
  ret double %call, !dbg !5096
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @cgc_sine(i16 signext %a) #6 !dbg !5097 {
entry:
  %a.addr = alloca i16, align 2
  store i16 %a, i16* %a.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %a.addr, metadata !5098, metadata !DIExpression()), !dbg !5099
  %0 = load i16, i16* %a.addr, align 2, !dbg !5100
  %conv = sitofp i16 %0 to double, !dbg !5100
  %call = call double @cgc_sin(double %conv) #15, !dbg !5101
  ret double %call, !dbg !5102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @cgc_ClosestMatch(i8 zeroext %type, i16 signext %val) #6 !dbg !5103 {
entry:
  %type.addr = alloca i8, align 1
  %val.addr = alloca i16, align 2
  %close_diff = alloca i8, align 1
  %temp_diff = alloca i8, align 1
  %max_idx = alloca i8, align 1
  %close_idx = alloca i8, align 1
  %i = alloca i32, align 4
  store i8 %type, i8* %type.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %type.addr, metadata !5106, metadata !DIExpression()), !dbg !5107
  store i16 %val, i16* %val.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %val.addr, metadata !5108, metadata !DIExpression()), !dbg !5109
  call void @llvm.dbg.declare(metadata i8* %close_diff, metadata !5110, metadata !DIExpression()), !dbg !5111
  store i8 -1, i8* %close_diff, align 1, !dbg !5111
  call void @llvm.dbg.declare(metadata i8* %temp_diff, metadata !5112, metadata !DIExpression()), !dbg !5113
  store i8 0, i8* %temp_diff, align 1, !dbg !5113
  call void @llvm.dbg.declare(metadata i8* %max_idx, metadata !5114, metadata !DIExpression()), !dbg !5115
  %0 = load i8, i8* %type.addr, align 1, !dbg !5116
  %conv = zext i8 %0 to i32, !dbg !5116
  %cmp = icmp eq i32 %conv, 0, !dbg !5117
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !5118

lor.rhs:                                          ; preds = %entry
  %1 = load i8, i8* %type.addr, align 1, !dbg !5119
  %conv2 = zext i8 %1 to i32, !dbg !5119
  %cmp3 = icmp eq i32 %conv2, 2, !dbg !5120
  br label %lor.end, !dbg !5118

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp3, %lor.rhs ]
  %3 = zext i1 %2 to i64, !dbg !5121
  %cond = select i1 %2, i32 8, i32 4, !dbg !5121
  %conv5 = trunc i32 %cond to i8, !dbg !5122
  store i8 %conv5, i8* %max_idx, align 1, !dbg !5115
  call void @llvm.dbg.declare(metadata i8* %close_idx, metadata !5123, metadata !DIExpression()), !dbg !5124
  %4 = load i8, i8* %max_idx, align 1, !dbg !5125
  store i8 %4, i8* %close_idx, align 1, !dbg !5124
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5126, metadata !DIExpression()), !dbg !5127
  store i32 0, i32* %i, align 4, !dbg !5128
  br label %for.cond, !dbg !5130

for.cond:                                         ; preds = %for.inc, %lor.end
  %5 = load i32, i32* %i, align 4, !dbg !5131
  %6 = load i8, i8* %max_idx, align 1, !dbg !5133
  %conv6 = zext i8 %6 to i32, !dbg !5133
  %cmp7 = icmp slt i32 %5, %conv6, !dbg !5134
  br i1 %cmp7, label %for.body, label %for.end, !dbg !5135

for.body:                                         ; preds = %for.cond
  %7 = load i8, i8* %type.addr, align 1, !dbg !5136
  %conv9 = zext i8 %7 to i32, !dbg !5136
  %cmp10 = icmp eq i32 %conv9, 0, !dbg !5139
  br i1 %cmp10, label %if.then, label %lor.lhs.false, !dbg !5140

lor.lhs.false:                                    ; preds = %for.body
  %8 = load i8, i8* %type.addr, align 1, !dbg !5141
  %conv12 = zext i8 %8 to i32, !dbg !5141
  %cmp13 = icmp eq i32 %conv12, 2, !dbg !5142
  br i1 %cmp13, label %if.then, label %if.else, !dbg !5143

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %9 = load i16, i16* %val.addr, align 2, !dbg !5144
  %conv15 = sext i16 %9 to i32, !dbg !5144
  %10 = load i32, i32* %i, align 4, !dbg !5144
  %idxprom = sext i32 %10 to i64, !dbg !5144
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* @red_blue, i64 0, i64 %idxprom, !dbg !5144
  %11 = load i32, i32* %arrayidx, align 4, !dbg !5144
  %sub = sub nsw i32 %conv15, %11, !dbg !5144
  %cmp16 = icmp slt i32 %sub, 0, !dbg !5144
  br i1 %cmp16, label %cond.true, label %cond.false, !dbg !5144

cond.true:                                        ; preds = %if.then
  %12 = load i16, i16* %val.addr, align 2, !dbg !5144
  %conv18 = sext i16 %12 to i32, !dbg !5144
  %13 = load i32, i32* %i, align 4, !dbg !5144
  %idxprom19 = sext i32 %13 to i64, !dbg !5144
  %arrayidx20 = getelementptr inbounds [8 x i32], [8 x i32]* @red_blue, i64 0, i64 %idxprom19, !dbg !5144
  %14 = load i32, i32* %arrayidx20, align 4, !dbg !5144
  %sub21 = sub nsw i32 %conv18, %14, !dbg !5144
  %sub22 = sub nsw i32 0, %sub21, !dbg !5144
  br label %cond.end, !dbg !5144

cond.false:                                       ; preds = %if.then
  %15 = load i16, i16* %val.addr, align 2, !dbg !5144
  %conv23 = sext i16 %15 to i32, !dbg !5144
  %16 = load i32, i32* %i, align 4, !dbg !5144
  %idxprom24 = sext i32 %16 to i64, !dbg !5144
  %arrayidx25 = getelementptr inbounds [8 x i32], [8 x i32]* @red_blue, i64 0, i64 %idxprom24, !dbg !5144
  %17 = load i32, i32* %arrayidx25, align 4, !dbg !5144
  %sub26 = sub nsw i32 %conv23, %17, !dbg !5144
  br label %cond.end, !dbg !5144

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond27 = phi i32 [ %sub22, %cond.true ], [ %sub26, %cond.false ], !dbg !5144
  %conv28 = trunc i32 %cond27 to i8, !dbg !5144
  store i8 %conv28, i8* %temp_diff, align 1, !dbg !5145
  br label %if.end, !dbg !5146

if.else:                                          ; preds = %lor.lhs.false
  %18 = load i16, i16* %val.addr, align 2, !dbg !5147
  %conv29 = sext i16 %18 to i32, !dbg !5147
  %19 = load i32, i32* %i, align 4, !dbg !5147
  %idxprom30 = sext i32 %19 to i64, !dbg !5147
  %arrayidx31 = getelementptr inbounds [4 x i32], [4 x i32]* @green, i64 0, i64 %idxprom30, !dbg !5147
  %20 = load i32, i32* %arrayidx31, align 4, !dbg !5147
  %sub32 = sub nsw i32 %conv29, %20, !dbg !5147
  %cmp33 = icmp slt i32 %sub32, 0, !dbg !5147
  br i1 %cmp33, label %cond.true35, label %cond.false41, !dbg !5147

cond.true35:                                      ; preds = %if.else
  %21 = load i16, i16* %val.addr, align 2, !dbg !5147
  %conv36 = sext i16 %21 to i32, !dbg !5147
  %22 = load i32, i32* %i, align 4, !dbg !5147
  %idxprom37 = sext i32 %22 to i64, !dbg !5147
  %arrayidx38 = getelementptr inbounds [4 x i32], [4 x i32]* @green, i64 0, i64 %idxprom37, !dbg !5147
  %23 = load i32, i32* %arrayidx38, align 4, !dbg !5147
  %sub39 = sub nsw i32 %conv36, %23, !dbg !5147
  %sub40 = sub nsw i32 0, %sub39, !dbg !5147
  br label %cond.end46, !dbg !5147

cond.false41:                                     ; preds = %if.else
  %24 = load i16, i16* %val.addr, align 2, !dbg !5147
  %conv42 = sext i16 %24 to i32, !dbg !5147
  %25 = load i32, i32* %i, align 4, !dbg !5147
  %idxprom43 = sext i32 %25 to i64, !dbg !5147
  %arrayidx44 = getelementptr inbounds [4 x i32], [4 x i32]* @green, i64 0, i64 %idxprom43, !dbg !5147
  %26 = load i32, i32* %arrayidx44, align 4, !dbg !5147
  %sub45 = sub nsw i32 %conv42, %26, !dbg !5147
  br label %cond.end46, !dbg !5147

cond.end46:                                       ; preds = %cond.false41, %cond.true35
  %cond47 = phi i32 [ %sub40, %cond.true35 ], [ %sub45, %cond.false41 ], !dbg !5147
  %conv48 = trunc i32 %cond47 to i8, !dbg !5147
  store i8 %conv48, i8* %temp_diff, align 1, !dbg !5148
  br label %if.end

if.end:                                           ; preds = %cond.end46, %cond.end
  %27 = load i8, i8* %temp_diff, align 1, !dbg !5149
  %conv49 = zext i8 %27 to i32, !dbg !5149
  %28 = load i8, i8* %close_diff, align 1, !dbg !5151
  %conv50 = zext i8 %28 to i32, !dbg !5151
  %cmp51 = icmp slt i32 %conv49, %conv50, !dbg !5152
  br i1 %cmp51, label %if.then53, label %if.end55, !dbg !5153

if.then53:                                        ; preds = %if.end
  %29 = load i8, i8* %temp_diff, align 1, !dbg !5154
  store i8 %29, i8* %close_diff, align 1, !dbg !5156
  %30 = load i32, i32* %i, align 4, !dbg !5157
  %conv54 = trunc i32 %30 to i8, !dbg !5157
  store i8 %conv54, i8* %close_idx, align 1, !dbg !5158
  br label %if.end55, !dbg !5159

if.end55:                                         ; preds = %if.then53, %if.end
  br label %for.inc, !dbg !5160

for.inc:                                          ; preds = %if.end55
  %31 = load i32, i32* %i, align 4, !dbg !5161
  %inc = add nsw i32 %31, 1, !dbg !5161
  store i32 %inc, i32* %i, align 4, !dbg !5161
  br label %for.cond, !dbg !5162, !llvm.loop !5163

for.end:                                          ; preds = %for.cond
  %32 = load i8, i8* %close_idx, align 1, !dbg !5165
  ret i8 %32, !dbg !5166
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_Compress(%struct.t3DCPixel** %px_list, i8* %compressed_data, i16* %data_len) #6 !dbg !5167 {
entry:
  %px_list.addr = alloca %struct.t3DCPixel**, align 8
  %compressed_data.addr = alloca i8*, align 8
  %data_len.addr = alloca i16*, align 8
  %color = alloca i8, align 1
  %coord = alloca i8, align 1
  %px = alloca %struct.t3DCPixel*, align 8
  %count = alloca i16, align 2
  %i = alloca i16, align 2
  %p_idx = alloca i32, align 4
  store %struct.t3DCPixel** %px_list, %struct.t3DCPixel*** %px_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel*** %px_list.addr, metadata !5183, metadata !DIExpression()), !dbg !5184
  store i8* %compressed_data, i8** %compressed_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %compressed_data.addr, metadata !5185, metadata !DIExpression()), !dbg !5186
  store i16* %data_len, i16** %data_len.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %data_len.addr, metadata !5187, metadata !DIExpression()), !dbg !5188
  %0 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list.addr, align 8, !dbg !5189
  %cmp = icmp eq %struct.t3DCPixel** %0, null, !dbg !5191
  br i1 %cmp, label %if.then, label %if.end, !dbg !5192

if.then:                                          ; preds = %entry
  br label %return, !dbg !5193

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %color, metadata !5195, metadata !DIExpression()), !dbg !5196
  store i8 0, i8* %color, align 1, !dbg !5196
  call void @llvm.dbg.declare(metadata i8* %coord, metadata !5197, metadata !DIExpression()), !dbg !5198
  store i8 0, i8* %coord, align 1, !dbg !5198
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %px, metadata !5199, metadata !DIExpression()), !dbg !5200
  store %struct.t3DCPixel* null, %struct.t3DCPixel** %px, align 8, !dbg !5200
  call void @llvm.dbg.declare(metadata i16* %count, metadata !5201, metadata !DIExpression()), !dbg !5202
  store i16 2863, i16* %count, align 2, !dbg !5202
  call void @llvm.dbg.declare(metadata i16* %i, metadata !5203, metadata !DIExpression()), !dbg !5204
  store i16 0, i16* %i, align 2, !dbg !5204
  call void @llvm.dbg.declare(metadata i32* %p_idx, metadata !5205, metadata !DIExpression()), !dbg !5206
  store i32 0, i32* %p_idx, align 4, !dbg !5206
  br label %while.cond, !dbg !5207

while.cond:                                       ; preds = %while.body, %if.end
  %1 = load i16, i16* %i, align 2, !dbg !5208
  %conv = zext i16 %1 to i32, !dbg !5208
  %2 = load i16, i16* %count, align 2, !dbg !5209
  %conv1 = zext i16 %2 to i32, !dbg !5209
  %cmp2 = icmp slt i32 %conv, %conv1, !dbg !5210
  br i1 %cmp2, label %while.body, label %while.end, !dbg !5207

while.body:                                       ; preds = %while.cond
  store i8 0, i8* %color, align 1, !dbg !5211
  %3 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list.addr, align 8, !dbg !5213
  %4 = load i32, i32* %p_idx, align 4, !dbg !5214
  %inc = add nsw i32 %4, 1, !dbg !5214
  store i32 %inc, i32* %p_idx, align 4, !dbg !5214
  %idxprom = sext i32 %4 to i64, !dbg !5213
  %arrayidx = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %3, i64 %idxprom, !dbg !5213
  %5 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx, align 8, !dbg !5213
  store %struct.t3DCPixel* %5, %struct.t3DCPixel** %px, align 8, !dbg !5215
  %6 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !5216
  %r = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %6, i32 0, i32 3, !dbg !5217
  %7 = load i8, i8* %r, align 1, !dbg !5217
  %conv4 = zext i8 %7 to i16, !dbg !5216
  %call = call zeroext i8 @cgc_ClosestMatch(i8 zeroext 0, i16 signext %conv4) #15, !dbg !5218
  %conv5 = zext i8 %call to i32, !dbg !5218
  %shl = shl i32 %conv5, 5, !dbg !5219
  %8 = load i8, i8* %color, align 1, !dbg !5220
  %conv6 = zext i8 %8 to i32, !dbg !5220
  %add = add nsw i32 %conv6, %shl, !dbg !5220
  %conv7 = trunc i32 %add to i8, !dbg !5220
  store i8 %conv7, i8* %color, align 1, !dbg !5220
  %9 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !5221
  %g = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %9, i32 0, i32 4, !dbg !5222
  %10 = load i8, i8* %g, align 1, !dbg !5222
  %conv8 = zext i8 %10 to i16, !dbg !5221
  %call9 = call zeroext i8 @cgc_ClosestMatch(i8 zeroext 1, i16 signext %conv8) #15, !dbg !5223
  %conv10 = zext i8 %call9 to i32, !dbg !5223
  %shl11 = shl i32 %conv10, 3, !dbg !5224
  %11 = load i8, i8* %color, align 1, !dbg !5225
  %conv12 = zext i8 %11 to i32, !dbg !5225
  %add13 = add nsw i32 %conv12, %shl11, !dbg !5225
  %conv14 = trunc i32 %add13 to i8, !dbg !5225
  store i8 %conv14, i8* %color, align 1, !dbg !5225
  %12 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !5226
  %b = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %12, i32 0, i32 5, !dbg !5227
  %13 = load i8, i8* %b, align 1, !dbg !5227
  %conv15 = zext i8 %13 to i16, !dbg !5226
  %call16 = call zeroext i8 @cgc_ClosestMatch(i8 zeroext 2, i16 signext %conv15) #15, !dbg !5228
  %conv17 = zext i8 %call16 to i32, !dbg !5228
  %shl18 = shl i32 %conv17, 0, !dbg !5229
  %14 = load i8, i8* %color, align 1, !dbg !5230
  %conv19 = zext i8 %14 to i32, !dbg !5230
  %add20 = add nsw i32 %conv19, %shl18, !dbg !5230
  %conv21 = trunc i32 %add20 to i8, !dbg !5230
  store i8 %conv21, i8* %color, align 1, !dbg !5230
  %15 = load i8*, i8** %compressed_data.addr, align 8, !dbg !5231
  %16 = load i16, i16* %i, align 2, !dbg !5232
  %conv22 = zext i16 %16 to i32, !dbg !5232
  %idx.ext = sext i32 %conv22 to i64, !dbg !5233
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %idx.ext, !dbg !5233
  %17 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !5234
  %x = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %17, i32 0, i32 0, !dbg !5235
  %18 = bitcast i16* %x to i8*, !dbg !5236
  %call23 = call i8* @cgc_memcpy(i8* %add.ptr, i8* %18, i64 2) #15, !dbg !5237
  %19 = load i16, i16* %i, align 2, !dbg !5238
  %conv24 = zext i16 %19 to i64, !dbg !5238
  %add25 = add i64 %conv24, 2, !dbg !5238
  %conv26 = trunc i64 %add25 to i16, !dbg !5238
  store i16 %conv26, i16* %i, align 2, !dbg !5238
  %20 = load i8*, i8** %compressed_data.addr, align 8, !dbg !5239
  %21 = load i16, i16* %i, align 2, !dbg !5240
  %conv27 = zext i16 %21 to i32, !dbg !5240
  %idx.ext28 = sext i32 %conv27 to i64, !dbg !5241
  %add.ptr29 = getelementptr inbounds i8, i8* %20, i64 %idx.ext28, !dbg !5241
  %22 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !5242
  %y = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %22, i32 0, i32 1, !dbg !5243
  %23 = bitcast i16* %y to i8*, !dbg !5244
  %call30 = call i8* @cgc_memcpy(i8* %add.ptr29, i8* %23, i64 2) #15, !dbg !5245
  %24 = load i16, i16* %i, align 2, !dbg !5246
  %conv31 = zext i16 %24 to i64, !dbg !5246
  %add32 = add i64 %conv31, 2, !dbg !5246
  %conv33 = trunc i64 %add32 to i16, !dbg !5246
  store i16 %conv33, i16* %i, align 2, !dbg !5246
  %25 = load i8*, i8** %compressed_data.addr, align 8, !dbg !5247
  %26 = load i16, i16* %i, align 2, !dbg !5248
  %conv34 = zext i16 %26 to i32, !dbg !5248
  %idx.ext35 = sext i32 %conv34 to i64, !dbg !5249
  %add.ptr36 = getelementptr inbounds i8, i8* %25, i64 %idx.ext35, !dbg !5249
  %27 = load %struct.t3DCPixel*, %struct.t3DCPixel** %px, align 8, !dbg !5250
  %z = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %27, i32 0, i32 2, !dbg !5251
  %28 = bitcast i16* %z to i8*, !dbg !5252
  %call37 = call i8* @cgc_memcpy(i8* %add.ptr36, i8* %28, i64 2) #15, !dbg !5253
  %29 = load i16, i16* %i, align 2, !dbg !5254
  %conv38 = zext i16 %29 to i64, !dbg !5254
  %add39 = add i64 %conv38, 2, !dbg !5254
  %conv40 = trunc i64 %add39 to i16, !dbg !5254
  store i16 %conv40, i16* %i, align 2, !dbg !5254
  %30 = load i8*, i8** %compressed_data.addr, align 8, !dbg !5255
  %31 = load i16, i16* %i, align 2, !dbg !5256
  %conv41 = zext i16 %31 to i32, !dbg !5256
  %idx.ext42 = sext i32 %conv41 to i64, !dbg !5257
  %add.ptr43 = getelementptr inbounds i8, i8* %30, i64 %idx.ext42, !dbg !5257
  %call44 = call i8* @cgc_memcpy(i8* %add.ptr43, i8* %color, i64 1) #15, !dbg !5258
  %32 = load i16, i16* %i, align 2, !dbg !5259
  %inc45 = add i16 %32, 1, !dbg !5259
  store i16 %inc45, i16* %i, align 2, !dbg !5259
  br label %while.cond, !dbg !5207, !llvm.loop !5260

while.end:                                        ; preds = %while.cond
  %33 = load i16*, i16** %data_len.addr, align 8, !dbg !5262
  %34 = bitcast i16* %33 to i8*, !dbg !5262
  %35 = bitcast i16* %i to i8*, !dbg !5263
  %call46 = call i8* @cgc_memcpy(i8* %34, i8* %35, i64 2) #15, !dbg !5264
  br label %return, !dbg !5265

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !5266
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_Decompress(i8* %in_data, i8* %out_data, i16* %data_len) #6 !dbg !5267 {
entry:
  %in_data.addr = alloca i8*, align 8
  %out_data.addr = alloca i8*, align 8
  %data_len.addr = alloca i16*, align 8
  %in_offset = alloca i32, align 4
  %out_offset = alloca i32, align 4
  %p_idx = alloca i32, align 4
  %color = alloca i8, align 1
  %r = alloca i8, align 1
  %g = alloca i8, align 1
  %b = alloca i8, align 1
  store i8* %in_data, i8** %in_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %in_data.addr, metadata !5270, metadata !DIExpression()), !dbg !5271
  store i8* %out_data, i8** %out_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %out_data.addr, metadata !5272, metadata !DIExpression()), !dbg !5273
  store i16* %data_len, i16** %data_len.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %data_len.addr, metadata !5274, metadata !DIExpression()), !dbg !5275
  call void @llvm.dbg.declare(metadata i32* %in_offset, metadata !5276, metadata !DIExpression()), !dbg !5277
  store i32 0, i32* %in_offset, align 4, !dbg !5277
  call void @llvm.dbg.declare(metadata i32* %out_offset, metadata !5278, metadata !DIExpression()), !dbg !5279
  store i32 0, i32* %out_offset, align 4, !dbg !5279
  call void @llvm.dbg.declare(metadata i32* %p_idx, metadata !5280, metadata !DIExpression()), !dbg !5281
  store i32 0, i32* %p_idx, align 4, !dbg !5281
  call void @llvm.dbg.declare(metadata i8* %color, metadata !5282, metadata !DIExpression()), !dbg !5283
  call void @llvm.dbg.declare(metadata i8* %r, metadata !5284, metadata !DIExpression()), !dbg !5285
  call void @llvm.dbg.declare(metadata i8* %g, metadata !5286, metadata !DIExpression()), !dbg !5287
  call void @llvm.dbg.declare(metadata i8* %b, metadata !5288, metadata !DIExpression()), !dbg !5289
  br label %while.cond, !dbg !5290

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %in_offset, align 4, !dbg !5291
  %1 = load i16*, i16** %data_len.addr, align 8, !dbg !5292
  %2 = load i16, i16* %1, align 2, !dbg !5293
  %conv = zext i16 %2 to i32, !dbg !5293
  %cmp = icmp ult i32 %0, %conv, !dbg !5294
  br i1 %cmp, label %while.body, label %while.end, !dbg !5290

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %out_data.addr, align 8, !dbg !5295
  %4 = load i32, i32* %out_offset, align 4, !dbg !5297
  %idx.ext = zext i32 %4 to i64, !dbg !5298
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !5298
  %5 = load i8*, i8** %in_data.addr, align 8, !dbg !5299
  %6 = load i32, i32* %in_offset, align 4, !dbg !5300
  %idx.ext2 = zext i32 %6 to i64, !dbg !5301
  %add.ptr3 = getelementptr inbounds i8, i8* %5, i64 %idx.ext2, !dbg !5301
  %call = call i8* @cgc_memcpy(i8* %add.ptr, i8* %add.ptr3, i64 2) #15, !dbg !5302
  %7 = load i32, i32* %out_offset, align 4, !dbg !5303
  %conv4 = zext i32 %7 to i64, !dbg !5303
  %add = add i64 %conv4, 2, !dbg !5303
  %conv5 = trunc i64 %add to i32, !dbg !5303
  store i32 %conv5, i32* %out_offset, align 4, !dbg !5303
  %8 = load i32, i32* %in_offset, align 4, !dbg !5304
  %conv6 = zext i32 %8 to i64, !dbg !5304
  %add7 = add i64 %conv6, 2, !dbg !5304
  %conv8 = trunc i64 %add7 to i32, !dbg !5304
  store i32 %conv8, i32* %in_offset, align 4, !dbg !5304
  %9 = load i8*, i8** %out_data.addr, align 8, !dbg !5305
  %10 = load i32, i32* %out_offset, align 4, !dbg !5306
  %idx.ext9 = zext i32 %10 to i64, !dbg !5307
  %add.ptr10 = getelementptr inbounds i8, i8* %9, i64 %idx.ext9, !dbg !5307
  %11 = load i8*, i8** %in_data.addr, align 8, !dbg !5308
  %12 = load i32, i32* %in_offset, align 4, !dbg !5309
  %idx.ext11 = zext i32 %12 to i64, !dbg !5310
  %add.ptr12 = getelementptr inbounds i8, i8* %11, i64 %idx.ext11, !dbg !5310
  %call13 = call i8* @cgc_memcpy(i8* %add.ptr10, i8* %add.ptr12, i64 2) #15, !dbg !5311
  %13 = load i32, i32* %out_offset, align 4, !dbg !5312
  %conv14 = zext i32 %13 to i64, !dbg !5312
  %add15 = add i64 %conv14, 2, !dbg !5312
  %conv16 = trunc i64 %add15 to i32, !dbg !5312
  store i32 %conv16, i32* %out_offset, align 4, !dbg !5312
  %14 = load i32, i32* %in_offset, align 4, !dbg !5313
  %conv17 = zext i32 %14 to i64, !dbg !5313
  %add18 = add i64 %conv17, 2, !dbg !5313
  %conv19 = trunc i64 %add18 to i32, !dbg !5313
  store i32 %conv19, i32* %in_offset, align 4, !dbg !5313
  %15 = load i8*, i8** %out_data.addr, align 8, !dbg !5314
  %16 = load i32, i32* %out_offset, align 4, !dbg !5315
  %idx.ext20 = zext i32 %16 to i64, !dbg !5316
  %add.ptr21 = getelementptr inbounds i8, i8* %15, i64 %idx.ext20, !dbg !5316
  %17 = load i8*, i8** %in_data.addr, align 8, !dbg !5317
  %18 = load i32, i32* %in_offset, align 4, !dbg !5318
  %idx.ext22 = zext i32 %18 to i64, !dbg !5319
  %add.ptr23 = getelementptr inbounds i8, i8* %17, i64 %idx.ext22, !dbg !5319
  %call24 = call i8* @cgc_memcpy(i8* %add.ptr21, i8* %add.ptr23, i64 2) #15, !dbg !5320
  %19 = load i32, i32* %out_offset, align 4, !dbg !5321
  %conv25 = zext i32 %19 to i64, !dbg !5321
  %add26 = add i64 %conv25, 2, !dbg !5321
  %conv27 = trunc i64 %add26 to i32, !dbg !5321
  store i32 %conv27, i32* %out_offset, align 4, !dbg !5321
  %20 = load i32, i32* %in_offset, align 4, !dbg !5322
  %conv28 = zext i32 %20 to i64, !dbg !5322
  %add29 = add i64 %conv28, 2, !dbg !5322
  %conv30 = trunc i64 %add29 to i32, !dbg !5322
  store i32 %conv30, i32* %in_offset, align 4, !dbg !5322
  %21 = load i8*, i8** %in_data.addr, align 8, !dbg !5323
  %22 = load i32, i32* %in_offset, align 4, !dbg !5324
  %inc = add i32 %22, 1, !dbg !5324
  store i32 %inc, i32* %in_offset, align 4, !dbg !5324
  %idxprom = zext i32 %22 to i64, !dbg !5323
  %arrayidx = getelementptr inbounds i8, i8* %21, i64 %idxprom, !dbg !5323
  %23 = load i8, i8* %arrayidx, align 1, !dbg !5323
  store i8 %23, i8* %color, align 1, !dbg !5325
  %24 = load i8, i8* %color, align 1, !dbg !5326
  %conv31 = zext i8 %24 to i32, !dbg !5326
  %and = and i32 224, %conv31, !dbg !5327
  %shr = ashr i32 %and, 5, !dbg !5328
  %conv32 = trunc i32 %shr to i8, !dbg !5329
  store i8 %conv32, i8* %r, align 1, !dbg !5330
  %25 = load i8, i8* %color, align 1, !dbg !5331
  %conv33 = zext i8 %25 to i32, !dbg !5331
  %and34 = and i32 24, %conv33, !dbg !5332
  %shr35 = ashr i32 %and34, 3, !dbg !5333
  %conv36 = trunc i32 %shr35 to i8, !dbg !5334
  store i8 %conv36, i8* %g, align 1, !dbg !5335
  %26 = load i8, i8* %color, align 1, !dbg !5336
  %conv37 = zext i8 %26 to i32, !dbg !5336
  %and38 = and i32 7, %conv37, !dbg !5337
  %shr39 = ashr i32 %and38, 0, !dbg !5338
  %conv40 = trunc i32 %shr39 to i8, !dbg !5339
  store i8 %conv40, i8* %b, align 1, !dbg !5340
  %27 = load i8, i8* %r, align 1, !dbg !5341
  %idxprom41 = zext i8 %27 to i64, !dbg !5342
  %arrayidx42 = getelementptr inbounds [8 x i32], [8 x i32]* @red_blue, i64 0, i64 %idxprom41, !dbg !5342
  %28 = load i32, i32* %arrayidx42, align 4, !dbg !5342
  %conv43 = trunc i32 %28 to i8, !dbg !5342
  %29 = load i8*, i8** %out_data.addr, align 8, !dbg !5343
  %30 = load i32, i32* %out_offset, align 4, !dbg !5344
  %inc44 = add i32 %30, 1, !dbg !5344
  store i32 %inc44, i32* %out_offset, align 4, !dbg !5344
  %idxprom45 = zext i32 %30 to i64, !dbg !5343
  %arrayidx46 = getelementptr inbounds i8, i8* %29, i64 %idxprom45, !dbg !5343
  store i8 %conv43, i8* %arrayidx46, align 1, !dbg !5345
  %31 = load i8, i8* %g, align 1, !dbg !5346
  %idxprom47 = zext i8 %31 to i64, !dbg !5347
  %arrayidx48 = getelementptr inbounds [4 x i32], [4 x i32]* @green, i64 0, i64 %idxprom47, !dbg !5347
  %32 = load i32, i32* %arrayidx48, align 4, !dbg !5347
  %conv49 = trunc i32 %32 to i8, !dbg !5347
  %33 = load i8*, i8** %out_data.addr, align 8, !dbg !5348
  %34 = load i32, i32* %out_offset, align 4, !dbg !5349
  %inc50 = add i32 %34, 1, !dbg !5349
  store i32 %inc50, i32* %out_offset, align 4, !dbg !5349
  %idxprom51 = zext i32 %34 to i64, !dbg !5348
  %arrayidx52 = getelementptr inbounds i8, i8* %33, i64 %idxprom51, !dbg !5348
  store i8 %conv49, i8* %arrayidx52, align 1, !dbg !5350
  %35 = load i8, i8* %b, align 1, !dbg !5351
  %idxprom53 = zext i8 %35 to i64, !dbg !5352
  %arrayidx54 = getelementptr inbounds [8 x i32], [8 x i32]* @red_blue, i64 0, i64 %idxprom53, !dbg !5352
  %36 = load i32, i32* %arrayidx54, align 4, !dbg !5352
  %conv55 = trunc i32 %36 to i8, !dbg !5352
  %37 = load i8*, i8** %out_data.addr, align 8, !dbg !5353
  %38 = load i32, i32* %out_offset, align 4, !dbg !5354
  %inc56 = add i32 %38, 1, !dbg !5354
  store i32 %inc56, i32* %out_offset, align 4, !dbg !5354
  %idxprom57 = zext i32 %38 to i64, !dbg !5353
  %arrayidx58 = getelementptr inbounds i8, i8* %37, i64 %idxprom57, !dbg !5353
  store i8 %conv55, i8* %arrayidx58, align 1, !dbg !5355
  %39 = load i8*, i8** %out_data.addr, align 8, !dbg !5356
  %40 = load i32, i32* %out_offset, align 4, !dbg !5357
  %inc59 = add i32 %40, 1, !dbg !5357
  store i32 %inc59, i32* %out_offset, align 4, !dbg !5357
  %idxprom60 = zext i32 %40 to i64, !dbg !5356
  %arrayidx61 = getelementptr inbounds i8, i8* %39, i64 %idxprom60, !dbg !5356
  store i8 -1, i8* %arrayidx61, align 1, !dbg !5358
  br label %while.cond, !dbg !5290, !llvm.loop !5359

while.end:                                        ; preds = %while.cond
  %41 = load i16*, i16** %data_len.addr, align 8, !dbg !5361
  %42 = bitcast i16* %41 to i8*, !dbg !5361
  %43 = bitcast i32* %out_offset to i8*, !dbg !5362
  %call62 = call i8* @cgc_memcpy(i8* %42, i8* %43, i64 2) #15, !dbg !5363
  ret void, !dbg !5364
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_WriteOut(%struct.t3DCPixel** %px_list, i8* %data, i16 zeroext %data_len) #6 !dbg !5365 {
entry:
  %px_list.addr = alloca %struct.t3DCPixel**, align 8
  %data.addr = alloca i8*, align 8
  %data_len.addr = alloca i16, align 2
  %offset = alloca i16, align 2
  %i = alloca i16, align 2
  %tmp = alloca %struct.t3DCPixel*, align 8
  store %struct.t3DCPixel** %px_list, %struct.t3DCPixel*** %px_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel*** %px_list.addr, metadata !5368, metadata !DIExpression()), !dbg !5369
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5370, metadata !DIExpression()), !dbg !5371
  store i16 %data_len, i16* %data_len.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %data_len.addr, metadata !5372, metadata !DIExpression()), !dbg !5373
  %0 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list.addr, align 8, !dbg !5374
  %cmp = icmp eq %struct.t3DCPixel** %0, null, !dbg !5376
  br i1 %cmp, label %if.then, label %if.end, !dbg !5377

if.then:                                          ; preds = %entry
  br label %while.end, !dbg !5378

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i16* %offset, metadata !5380, metadata !DIExpression()), !dbg !5381
  store i16 0, i16* %offset, align 2, !dbg !5381
  call void @llvm.dbg.declare(metadata i16* %i, metadata !5382, metadata !DIExpression()), !dbg !5383
  store i16 0, i16* %i, align 2, !dbg !5383
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %tmp, metadata !5384, metadata !DIExpression()), !dbg !5385
  br label %while.cond, !dbg !5386

while.cond:                                       ; preds = %while.body, %if.end
  %1 = load i16, i16* %offset, align 2, !dbg !5387
  %conv = zext i16 %1 to i32, !dbg !5387
  %2 = load i16, i16* %data_len.addr, align 2, !dbg !5388
  %conv1 = zext i16 %2 to i32, !dbg !5388
  %cmp2 = icmp slt i32 %conv, %conv1, !dbg !5389
  br i1 %cmp2, label %while.body, label %while.end, !dbg !5386

while.body:                                       ; preds = %while.cond
  %3 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list.addr, align 8, !dbg !5390
  %4 = load i16, i16* %i, align 2, !dbg !5392
  %idxprom = zext i16 %4 to i64, !dbg !5390
  %arrayidx = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %3, i64 %idxprom, !dbg !5390
  %5 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx, align 8, !dbg !5390
  store %struct.t3DCPixel* %5, %struct.t3DCPixel** %tmp, align 8, !dbg !5393
  %6 = load i16, i16* %offset, align 2, !dbg !5394
  %conv4 = zext i16 %6 to i32, !dbg !5394
  %add = add nsw i32 %conv4, 6, !dbg !5394
  %conv5 = trunc i32 %add to i16, !dbg !5394
  store i16 %conv5, i16* %offset, align 2, !dbg !5394
  %7 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !5395
  %r = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %7, i32 0, i32 3, !dbg !5396
  %8 = load i8*, i8** %data.addr, align 8, !dbg !5397
  %9 = load i16, i16* %offset, align 2, !dbg !5398
  %conv6 = zext i16 %9 to i32, !dbg !5398
  %idx.ext = sext i32 %conv6 to i64, !dbg !5399
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %idx.ext, !dbg !5399
  %call = call i8* @cgc_memcpy(i8* %r, i8* %add.ptr, i64 1) #15, !dbg !5400
  %10 = load i16, i16* %offset, align 2, !dbg !5401
  %inc = add i16 %10, 1, !dbg !5401
  store i16 %inc, i16* %offset, align 2, !dbg !5401
  %11 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !5402
  %g = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %11, i32 0, i32 4, !dbg !5403
  %12 = load i8*, i8** %data.addr, align 8, !dbg !5404
  %13 = load i16, i16* %offset, align 2, !dbg !5405
  %conv7 = zext i16 %13 to i32, !dbg !5405
  %idx.ext8 = sext i32 %conv7 to i64, !dbg !5406
  %add.ptr9 = getelementptr inbounds i8, i8* %12, i64 %idx.ext8, !dbg !5406
  %call10 = call i8* @cgc_memcpy(i8* %g, i8* %add.ptr9, i64 1) #15, !dbg !5407
  %14 = load i16, i16* %offset, align 2, !dbg !5408
  %inc11 = add i16 %14, 1, !dbg !5408
  store i16 %inc11, i16* %offset, align 2, !dbg !5408
  %15 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !5409
  %b = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %15, i32 0, i32 5, !dbg !5410
  %16 = load i8*, i8** %data.addr, align 8, !dbg !5411
  %17 = load i16, i16* %offset, align 2, !dbg !5412
  %conv12 = zext i16 %17 to i32, !dbg !5412
  %idx.ext13 = sext i32 %conv12 to i64, !dbg !5413
  %add.ptr14 = getelementptr inbounds i8, i8* %16, i64 %idx.ext13, !dbg !5413
  %call15 = call i8* @cgc_memcpy(i8* %b, i8* %add.ptr14, i64 1) #15, !dbg !5414
  %18 = load i16, i16* %offset, align 2, !dbg !5415
  %inc16 = add i16 %18, 1, !dbg !5415
  store i16 %inc16, i16* %offset, align 2, !dbg !5415
  %19 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !5416
  %a = getelementptr inbounds %struct.t3DCPixel, %struct.t3DCPixel* %19, i32 0, i32 6, !dbg !5417
  store i8 -1, i8* %a, align 1, !dbg !5418
  %20 = load i16, i16* %offset, align 2, !dbg !5419
  %inc17 = add i16 %20, 1, !dbg !5419
  store i16 %inc17, i16* %offset, align 2, !dbg !5419
  %21 = load i16, i16* %i, align 2, !dbg !5420
  %inc18 = add i16 %21, 1, !dbg !5420
  store i16 %inc18, i16* %i, align 2, !dbg !5420
  br label %while.cond, !dbg !5386, !llvm.loop !5421

while.end:                                        ; preds = %if.then, %while.cond
  ret void, !dbg !5423
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cgc_menu() #6 !dbg !5424 {
entry:
  %choice = alloca i8, align 1
  %coord = alloca i8, align 1
  %val = alloca i16, align 2
  %new_init = alloca [4096 x i8], align 16
  %last_shown = alloca %struct.t3DCPixel*, align 8
  %out_data = alloca [3072 x i8], align 16
  %in_data = alloca [3072 x i8], align 16
  %compress_len = alloca i16, align 2
  %decompress_flag = alloca i8, align 1
  %pixelCount = alloca i16, align 2
  %px_list = alloca %struct.t3DCPixel**, align 8
  %decompressed = alloca i8*, align 8
  %tmp = alloca %struct.t3DCPixel*, align 8
  call void @llvm.dbg.declare(metadata i8* %choice, metadata !5425, metadata !DIExpression()), !dbg !5426
  call void @llvm.dbg.declare(metadata i8* %coord, metadata !5427, metadata !DIExpression()), !dbg !5428
  call void @llvm.dbg.declare(metadata i16* %val, metadata !5429, metadata !DIExpression()), !dbg !5430
  call void @llvm.dbg.declare(metadata [4096 x i8]* %new_init, metadata !5431, metadata !DIExpression()), !dbg !5435
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %last_shown, metadata !5436, metadata !DIExpression()), !dbg !5448
  store %struct.t3DCPixel* null, %struct.t3DCPixel** %last_shown, align 8, !dbg !5448
  call void @llvm.dbg.declare(metadata [3072 x i8]* %out_data, metadata !5449, metadata !DIExpression()), !dbg !5453
  call void @llvm.dbg.declare(metadata [3072 x i8]* %in_data, metadata !5454, metadata !DIExpression()), !dbg !5455
  call void @llvm.dbg.declare(metadata i16* %compress_len, metadata !5456, metadata !DIExpression()), !dbg !5457
  store i16 0, i16* %compress_len, align 2, !dbg !5457
  call void @llvm.dbg.declare(metadata i8* %decompress_flag, metadata !5458, metadata !DIExpression()), !dbg !5459
  store i8 0, i8* %decompress_flag, align 1, !dbg !5459
  call void @llvm.dbg.declare(metadata i16* %pixelCount, metadata !5460, metadata !DIExpression()), !dbg !5461
  store i16 409, i16* %pixelCount, align 2, !dbg !5461
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel*** %px_list, metadata !5462, metadata !DIExpression()), !dbg !5464
  %0 = load i16, i16* %pixelCount, align 2, !dbg !5465
  %conv = zext i16 %0 to i64, !dbg !5465
  %mul = mul i64 %conv, 8, !dbg !5466
  %call = call i8* @cgc_malloc(i64 %mul) #15, !dbg !5467
  %1 = bitcast i8* %call to %struct.t3DCPixel**, !dbg !5467
  store %struct.t3DCPixel** %1, %struct.t3DCPixel*** %px_list, align 8, !dbg !5464
  %2 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5468
  %3 = bitcast %struct.t3DCPixel** %2 to i8*, !dbg !5468
  %4 = load i16, i16* %pixelCount, align 2, !dbg !5469
  %conv1 = zext i16 %4 to i64, !dbg !5469
  %mul2 = mul i64 %conv1, 8, !dbg !5470
  %call3 = call i8* @cgc_memset(i8* %3, i32 0, i64 %mul2) #15, !dbg !5471
  %5 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5472
  call void @cgc_ReadFile(%struct.t3DCPixel** %5) #15, !dbg !5473
  br label %while.cond, !dbg !5474

while.cond:                                       ; preds = %sw.epilog86, %entry
  %6 = load i8, i8* %choice, align 1, !dbg !5475
  %tobool = icmp ne i8 %6, 0, !dbg !5474
  br i1 %tobool, label %while.body, label %while.end, !dbg !5474

while.body:                                       ; preds = %while.cond
  %call4 = call i32 @cgc_receive_bytes(i8* %choice, i64 1) #15, !dbg !5476
  %7 = load i8, i8* %choice, align 1, !dbg !5478
  %conv5 = sext i8 %7 to i32, !dbg !5478
  switch i32 %conv5, label %sw.default84 [
    i32 1, label %sw.bb
    i32 2, label %sw.bb9
    i32 3, label %sw.bb11
    i32 4, label %sw.bb20
    i32 10, label %sw.bb31
    i32 5, label %sw.bb34
    i32 6, label %sw.bb37
    i32 7, label %sw.bb40
    i32 8, label %sw.bb43
    i32 9, label %sw.bb57
    i32 11, label %sw.bb82
  ], !dbg !5479

sw.bb:                                            ; preds = %while.body
  %call6 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11.40, i64 0, i64 0)) #15, !dbg !5480
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %new_init, i64 0, i64 0, !dbg !5483
  %call7 = call i8* @cgc_memset(i8* %arraydecay, i32 0, i64 4096) #15, !dbg !5484
  %8 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5485
  %arraydecay8 = getelementptr inbounds [4096 x i8], [4096 x i8]* %new_init, i64 0, i64 0, !dbg !5486
  call void @cgc_NewFile(%struct.t3DCPixel** %8, i8* %arraydecay8) #15, !dbg !5487
  br label %sw.epilog86, !dbg !5488

sw.bb9:                                           ; preds = %while.body
  %call10 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1.12, i64 0, i64 0)) #15, !dbg !5489
  %9 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5491
  call void @cgc_CheckFile(%struct.t3DCPixel** %9, i16 signext 409) #15, !dbg !5492
  br label %sw.epilog86, !dbg !5493

sw.bb11:                                          ; preds = %while.body
  %call12 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2.13, i64 0, i64 0)) #15, !dbg !5494
  %call13 = call i32 @cgc_receive_bytes(i8* %coord, i64 1) #15, !dbg !5496
  %10 = bitcast i16* %val to i8*, !dbg !5497
  %call14 = call i32 @cgc_receive_bytes(i8* %10, i64 2) #15, !dbg !5498
  %11 = load i8, i8* %coord, align 1, !dbg !5499
  %conv15 = sext i8 %11 to i32, !dbg !5499
  switch i32 %conv15, label %sw.default [
    i32 0, label %sw.bb16
    i32 1, label %sw.bb17
    i32 2, label %sw.bb18
  ], !dbg !5500

sw.bb16:                                          ; preds = %sw.bb11
  %12 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5501
  %13 = load i16, i16* %val, align 2, !dbg !5503
  call void @cgc_RunTask(%struct.t3DCPixel** %12, void (%struct.t3DCPixel*, i16)* @cgc_SkewX, i16 signext %13) #15, !dbg !5504
  br label %sw.epilog, !dbg !5505

sw.bb17:                                          ; preds = %sw.bb11
  %14 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5506
  %15 = load i16, i16* %val, align 2, !dbg !5507
  call void @cgc_RunTask(%struct.t3DCPixel** %14, void (%struct.t3DCPixel*, i16)* @cgc_SkewY, i16 signext %15) #15, !dbg !5508
  br label %sw.epilog, !dbg !5509

sw.bb18:                                          ; preds = %sw.bb11
  %16 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5510
  %17 = load i16, i16* %val, align 2, !dbg !5511
  call void @cgc_RunTask(%struct.t3DCPixel** %16, void (%struct.t3DCPixel*, i16)* @cgc_SkewZ, i16 signext %17) #15, !dbg !5512
  br label %sw.epilog, !dbg !5513

sw.default:                                       ; preds = %sw.bb11
  %call19 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3.14, i64 0, i64 0)) #15, !dbg !5514
  br label %sw.epilog, !dbg !5515

sw.epilog:                                        ; preds = %sw.default, %sw.bb18, %sw.bb17, %sw.bb16
  br label %sw.epilog86, !dbg !5516

sw.bb20:                                          ; preds = %while.body
  %call21 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4.15, i64 0, i64 0)) #15, !dbg !5517
  %call22 = call i32 @cgc_receive_bytes(i8* %coord, i64 1) #15, !dbg !5519
  %18 = bitcast i16* %val to i8*, !dbg !5520
  %call23 = call i32 @cgc_receive_bytes(i8* %18, i64 2) #15, !dbg !5521
  %19 = load i8, i8* %coord, align 1, !dbg !5522
  %conv24 = sext i8 %19 to i32, !dbg !5522
  switch i32 %conv24, label %sw.default28 [
    i32 0, label %sw.bb25
    i32 1, label %sw.bb26
    i32 2, label %sw.bb27
  ], !dbg !5523

sw.bb25:                                          ; preds = %sw.bb20
  %20 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5524
  %21 = load i16, i16* %val, align 2, !dbg !5526
  call void @cgc_RunTask(%struct.t3DCPixel** %20, void (%struct.t3DCPixel*, i16)* @cgc_RotateX, i16 signext %21) #15, !dbg !5527
  br label %sw.epilog30, !dbg !5528

sw.bb26:                                          ; preds = %sw.bb20
  %22 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5529
  %23 = load i16, i16* %val, align 2, !dbg !5530
  call void @cgc_RunTask(%struct.t3DCPixel** %22, void (%struct.t3DCPixel*, i16)* @cgc_RotateY, i16 signext %23) #15, !dbg !5531
  br label %sw.epilog30, !dbg !5532

sw.bb27:                                          ; preds = %sw.bb20
  %24 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5533
  %25 = load i16, i16* %val, align 2, !dbg !5534
  call void @cgc_RunTask(%struct.t3DCPixel** %24, void (%struct.t3DCPixel*, i16)* @cgc_RotateZ, i16 signext %25) #15, !dbg !5535
  br label %sw.epilog30, !dbg !5536

sw.default28:                                     ; preds = %sw.bb20
  %call29 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3.14, i64 0, i64 0)) #15, !dbg !5537
  br label %sw.epilog30, !dbg !5538

sw.epilog30:                                      ; preds = %sw.default28, %sw.bb27, %sw.bb26, %sw.bb25
  br label %sw.epilog86, !dbg !5539

sw.bb31:                                          ; preds = %while.body
  %call32 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5.41, i64 0, i64 0)) #15, !dbg !5540
  %26 = bitcast i16* %val to i8*, !dbg !5542
  %call33 = call i32 @cgc_receive_bytes(i8* %26, i64 2) #15, !dbg !5543
  %27 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5544
  %28 = load i16, i16* %val, align 2, !dbg !5545
  call void @cgc_RunTask(%struct.t3DCPixel** %27, void (%struct.t3DCPixel*, i16)* @cgc_Scale, i16 signext %28) #15, !dbg !5546
  br label %sw.epilog86, !dbg !5547

sw.bb34:                                          ; preds = %while.body
  %call35 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6.42, i64 0, i64 0)) #15, !dbg !5548
  %29 = bitcast i16* %val to i8*, !dbg !5550
  %call36 = call i32 @cgc_receive_bytes(i8* %29, i64 2) #15, !dbg !5551
  %30 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5552
  %31 = load i16, i16* %val, align 2, !dbg !5553
  call void @cgc_RunTask(%struct.t3DCPixel** %30, void (%struct.t3DCPixel*, i16)* @cgc_Brightness, i16 signext %31) #15, !dbg !5554
  br label %sw.epilog86, !dbg !5555

sw.bb37:                                          ; preds = %while.body
  %call38 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7.43, i64 0, i64 0)) #15, !dbg !5556
  %32 = bitcast i16* %val to i8*, !dbg !5558
  %call39 = call i32 @cgc_receive_bytes(i8* %32, i64 1) #15, !dbg !5559
  %33 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5560
  %34 = load i16, i16* %val, align 2, !dbg !5561
  call void @cgc_RunTask(%struct.t3DCPixel** %33, void (%struct.t3DCPixel*, i16)* @cgc_Opacity, i16 signext %34) #15, !dbg !5562
  br label %sw.epilog86, !dbg !5563

sw.bb40:                                          ; preds = %while.body
  %call41 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8.44, i64 0, i64 0)) #15, !dbg !5564
  %35 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5566
  %arraydecay42 = getelementptr inbounds [3072 x i8], [3072 x i8]* %in_data, i64 0, i64 0, !dbg !5567
  call void @cgc_Compress(%struct.t3DCPixel** %35, i8* %arraydecay42, i16* %compress_len) #15, !dbg !5568
  store i8 0, i8* %decompress_flag, align 1, !dbg !5569
  br label %sw.epilog86, !dbg !5570

sw.bb43:                                          ; preds = %while.body
  %call44 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9.16, i64 0, i64 0)) #15, !dbg !5571
  %36 = load i16, i16* %compress_len, align 2, !dbg !5573
  %conv45 = zext i16 %36 to i32, !dbg !5573
  %cmp = icmp eq i32 %conv45, 0, !dbg !5575
  br i1 %cmp, label %if.then, label %if.else, !dbg !5576

if.then:                                          ; preds = %sw.bb43
  %call47 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10.45, i64 0, i64 0)) #15, !dbg !5577
  br label %sw.epilog86, !dbg !5579

if.else:                                          ; preds = %sw.bb43
  %37 = load i8, i8* %decompress_flag, align 1, !dbg !5580
  %tobool48 = icmp ne i8 %37, 0, !dbg !5580
  br i1 %tobool48, label %if.then49, label %if.end, !dbg !5582

if.then49:                                        ; preds = %if.else
  %call50 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11.17, i64 0, i64 0)) #15, !dbg !5583
  br label %sw.epilog86, !dbg !5585

if.end:                                           ; preds = %if.else
  br label %if.end51

if.end51:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8** %decompressed, metadata !5586, metadata !DIExpression()), !dbg !5587
  %call52 = call i8* @cgc_malloc(i64 4090) #15, !dbg !5588
  store i8* %call52, i8** %decompressed, align 8, !dbg !5587
  %arraydecay53 = getelementptr inbounds [3072 x i8], [3072 x i8]* %in_data, i64 0, i64 0, !dbg !5589
  %38 = load i8*, i8** %decompressed, align 8, !dbg !5590
  call void @cgc_Decompress(i8* %arraydecay53, i8* %38, i16* %compress_len) #15, !dbg !5591
  %39 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5592
  %40 = load i8*, i8** %decompressed, align 8, !dbg !5593
  %41 = load i16, i16* %compress_len, align 2, !dbg !5594
  call void @cgc_WriteOut(%struct.t3DCPixel** %39, i8* %40, i16 zeroext %41) #15, !dbg !5595
  %arraydecay54 = getelementptr inbounds [3072 x i8], [3072 x i8]* %out_data, i64 0, i64 0, !dbg !5596
  %42 = load i8*, i8** %decompressed, align 8, !dbg !5597
  %43 = load i16, i16* %compress_len, align 2, !dbg !5598
  %conv55 = zext i16 %43 to i64, !dbg !5598
  %call56 = call i8* @cgc_memcpy(i8* %arraydecay54, i8* %42, i64 %conv55) #15, !dbg !5599
  %44 = load i8*, i8** %decompressed, align 8, !dbg !5600
  call void @cgc_free(i8* %44) #15, !dbg !5601
  store i8 1, i8* %decompress_flag, align 1, !dbg !5602
  br label %sw.epilog86, !dbg !5603

sw.bb57:                                          ; preds = %while.body
  %call58 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12.46, i64 0, i64 0)) #15, !dbg !5604
  %call59 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13.47, i64 0, i64 0)) #15, !dbg !5606
  %45 = bitcast i16* %val to i8*, !dbg !5607
  %call60 = call i32 @cgc_receive_bytes(i8* %45, i64 2) #15, !dbg !5608
  %46 = load i16, i16* %val, align 2, !dbg !5609
  %conv61 = zext i16 %46 to i32, !dbg !5609
  %47 = load i16, i16* %pixelCount, align 2, !dbg !5611
  %conv62 = zext i16 %47 to i32, !dbg !5611
  %cmp63 = icmp slt i32 %conv61, %conv62, !dbg !5612
  br i1 %cmp63, label %land.lhs.true, label %if.else73, !dbg !5613

land.lhs.true:                                    ; preds = %sw.bb57
  %48 = load i16, i16* %val, align 2, !dbg !5614
  %conv65 = zext i16 %48 to i32, !dbg !5614
  %cmp66 = icmp sge i32 %conv65, 0, !dbg !5615
  br i1 %cmp66, label %if.then68, label %if.else73, !dbg !5616

if.then68:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.t3DCPixel** %tmp, metadata !5617, metadata !DIExpression()), !dbg !5619
  %call69 = call i8* @cgc_malloc(i64 10) #15, !dbg !5620
  %49 = bitcast i8* %call69 to %struct.t3DCPixel*, !dbg !5620
  store %struct.t3DCPixel* %49, %struct.t3DCPixel** %tmp, align 8, !dbg !5619
  %50 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !5621
  %51 = bitcast %struct.t3DCPixel* %50 to i8*, !dbg !5621
  %52 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5622
  %53 = load i16, i16* %val, align 2, !dbg !5623
  %idxprom = zext i16 %53 to i64, !dbg !5622
  %arrayidx = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %52, i64 %idxprom, !dbg !5622
  %54 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx, align 8, !dbg !5622
  %55 = bitcast %struct.t3DCPixel* %54 to i8*, !dbg !5622
  %call70 = call i8* @cgc_memcpy(i8* %51, i8* %55, i64 10) #15, !dbg !5624
  %56 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !5625
  call void @cgc_ShowPixel(%struct.t3DCPixel* %56) #15, !dbg !5626
  %57 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5627
  %58 = load i16, i16* %val, align 2, !dbg !5628
  %idxprom71 = zext i16 %58 to i64, !dbg !5627
  %arrayidx72 = getelementptr inbounds %struct.t3DCPixel*, %struct.t3DCPixel** %57, i64 %idxprom71, !dbg !5627
  %59 = load %struct.t3DCPixel*, %struct.t3DCPixel** %arrayidx72, align 8, !dbg !5627
  store %struct.t3DCPixel* %59, %struct.t3DCPixel** %last_shown, align 8, !dbg !5629
  %60 = load %struct.t3DCPixel*, %struct.t3DCPixel** %tmp, align 8, !dbg !5630
  %61 = bitcast %struct.t3DCPixel* %60 to i8*, !dbg !5630
  call void @cgc_free(i8* %61) #15, !dbg !5631
  br label %if.end81, !dbg !5632

if.else73:                                        ; preds = %land.lhs.true, %sw.bb57
  %62 = load %struct.t3DCPixel*, %struct.t3DCPixel** %last_shown, align 8, !dbg !5633
  %cmp74 = icmp ne %struct.t3DCPixel* %62, null, !dbg !5635
  br i1 %cmp74, label %if.then76, label %if.else78, !dbg !5636

if.then76:                                        ; preds = %if.else73
  %call77 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.14.48, i64 0, i64 0)) #15, !dbg !5637
  %63 = load %struct.t3DCPixel*, %struct.t3DCPixel** %last_shown, align 8, !dbg !5639
  call void @cgc_ShowPixel(%struct.t3DCPixel* %63) #15, !dbg !5640
  br label %if.end80, !dbg !5641

if.else78:                                        ; preds = %if.else73
  %call79 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.15.49, i64 0, i64 0)) #15, !dbg !5642
  br label %if.end80

if.end80:                                         ; preds = %if.else78, %if.then76
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.then68
  br label %sw.epilog86, !dbg !5644

sw.bb82:                                          ; preds = %while.body
  %call83 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16.50, i64 0, i64 0)) #15, !dbg !5645
  store i8 0, i8* %choice, align 1, !dbg !5647
  %64 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5648
  %65 = bitcast %struct.t3DCPixel** %64 to i8*, !dbg !5648
  call void @cgc_free(i8* %65) #15, !dbg !5649
  br label %return, !dbg !5650

sw.default84:                                     ; preds = %while.body
  %call85 = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.17.51, i64 0, i64 0)) #15, !dbg !5651
  store i8 0, i8* %choice, align 1, !dbg !5653
  %66 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5654
  %67 = bitcast %struct.t3DCPixel** %66 to i8*, !dbg !5654
  call void @cgc_free(i8* %67) #15, !dbg !5655
  br label %return, !dbg !5656

sw.epilog86:                                      ; preds = %if.end81, %if.end51, %if.then49, %if.then, %sw.bb40, %sw.bb37, %sw.bb34, %sw.bb31, %sw.epilog30, %sw.epilog, %sw.bb9, %sw.bb
  br label %while.cond, !dbg !5474, !llvm.loop !5657

while.end:                                        ; preds = %while.cond
  %68 = load %struct.t3DCPixel**, %struct.t3DCPixel*** %px_list, align 8, !dbg !5659
  %69 = bitcast %struct.t3DCPixel** %68 to i8*, !dbg !5659
  call void @cgc_free(i8* %69) #15, !dbg !5660
  br label %return, !dbg !5661

return:                                           ; preds = %while.end, %sw.default84, %sw.bb82
  ret void, !dbg !5661
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @__klee_posix_wrapped_main(i32 %cgc_argc, i8** %cgc_argv) #6 !dbg !5662 {
entry:
  %retval = alloca i32, align 4
  %cgc_argc.addr = alloca i32, align 4
  %cgc_argv.addr = alloca i8**, align 8
  store i32 0, i32* %retval, align 4
  store i32 %cgc_argc, i32* %cgc_argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cgc_argc.addr, metadata !5665, metadata !DIExpression()), !dbg !5666
  store i8** %cgc_argv, i8*** %cgc_argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %cgc_argv.addr, metadata !5667, metadata !DIExpression()), !dbg !5668
  %call = call i32 (i8*, ...) @cgc_printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.18.54, i64 0, i64 0)) #15, !dbg !5669
  call void @cgc_menu() #15, !dbg !5670
  ret i32 0, !dbg !5671
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @klee_init_fds(i32 %n_files, i32 %file_length, i32 %stdin_length, i32 %sym_stdout_flag, i32 %save_all_writes_flag, i32 %max_failures) #0 !dbg !5672 {
entry:
  %n_files.addr = alloca i32, align 4
  %file_length.addr = alloca i32, align 4
  %stdin_length.addr = alloca i32, align 4
  %sym_stdout_flag.addr = alloca i32, align 4
  %save_all_writes_flag.addr = alloca i32, align 4
  %max_failures.addr = alloca i32, align 4
  %k = alloca i32, align 4
  %name = alloca [7 x i8], align 1
  %s = alloca %struct.stat64.16, align 8
  store i32 %n_files, i32* %n_files.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_files.addr, metadata !5675, metadata !DIExpression()), !dbg !5676
  store i32 %file_length, i32* %file_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %file_length.addr, metadata !5677, metadata !DIExpression()), !dbg !5678
  store i32 %stdin_length, i32* %stdin_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stdin_length.addr, metadata !5679, metadata !DIExpression()), !dbg !5680
  store i32 %sym_stdout_flag, i32* %sym_stdout_flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sym_stdout_flag.addr, metadata !5681, metadata !DIExpression()), !dbg !5682
  store i32 %save_all_writes_flag, i32* %save_all_writes_flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %save_all_writes_flag.addr, metadata !5683, metadata !DIExpression()), !dbg !5684
  store i32 %max_failures, i32* %max_failures.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_failures.addr, metadata !5685, metadata !DIExpression()), !dbg !5686
  call void @llvm.dbg.declare(metadata i32* %k, metadata !5687, metadata !DIExpression()), !dbg !5688
  call void @llvm.dbg.declare(metadata [7 x i8]* %name, metadata !5689, metadata !DIExpression()), !dbg !5693
  %0 = bitcast [7 x i8]* %name to i8*, !dbg !5693
  %1 = call i8* @memcpy(i8* %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__const.klee_init_fds.name, i32 0, i32 0), i64 7), !dbg !5693
  call void @llvm.dbg.declare(metadata %struct.stat64.16* %s, metadata !5694, metadata !DIExpression()), !dbg !5695
  %call = call i32 @stat64(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.57, i64 0, i64 0), %struct.stat64.16* %s) #7, !dbg !5696
  %2 = load i32, i32* %n_files.addr, align 4, !dbg !5697
  store i32 %2, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 0), align 8, !dbg !5698
  %3 = load i32, i32* %n_files.addr, align 4, !dbg !5699
  %conv = zext i32 %3 to i64, !dbg !5699
  %mul = mul i64 24, %conv, !dbg !5700
  %call1 = call noalias i8* @malloc(i64 %mul) #7, !dbg !5701
  %4 = bitcast i8* %call1 to %struct.exe_disk_file_t.17*, !dbg !5701
  store %struct.exe_disk_file_t.17* %4, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 4), align 8, !dbg !5702
  store i32 0, i32* %k, align 4, !dbg !5703
  br label %for.cond, !dbg !5705

for.cond:                                         ; preds = %for.body, %entry
  %5 = load i32, i32* %k, align 4, !dbg !5706
  %6 = load i32, i32* %n_files.addr, align 4, !dbg !5708
  %cmp = icmp ult i32 %5, %6, !dbg !5709
  br i1 %cmp, label %for.body, label %for.end, !dbg !5710

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4, !dbg !5711
  %add = add i32 65, %7, !dbg !5713
  %conv3 = trunc i32 %add to i8, !dbg !5714
  %arrayidx = getelementptr inbounds [7 x i8], [7 x i8]* %name, i64 0, i64 0, !dbg !5715
  store i8 %conv3, i8* %arrayidx, align 1, !dbg !5716
  %8 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 4), align 8, !dbg !5717
  %9 = load i32, i32* %k, align 4, !dbg !5718
  %idxprom = zext i32 %9 to i64, !dbg !5719
  %arrayidx4 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %8, i64 %idxprom, !dbg !5719
  %10 = load i32, i32* %file_length.addr, align 4, !dbg !5720
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %name, i64 0, i64 0, !dbg !5721
  call void @__create_new_dfile(%struct.exe_disk_file_t.17* %arrayidx4, i32 %10, i8* %arraydecay, %struct.stat64.16* %s), !dbg !5722
  %11 = load i32, i32* %k, align 4, !dbg !5723
  %inc = add i32 %11, 1, !dbg !5723
  store i32 %inc, i32* %k, align 4, !dbg !5723
  br label %for.cond, !dbg !5724, !llvm.loop !5725

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %stdin_length.addr, align 4, !dbg !5727
  %tobool = icmp ne i32 %12, 0, !dbg !5727
  br i1 %tobool, label %if.then, label %if.else, !dbg !5729

if.then:                                          ; preds = %for.end
  %call5 = call noalias i8* @malloc(i64 24) #7, !dbg !5730
  %13 = bitcast i8* %call5 to %struct.exe_disk_file_t.17*, !dbg !5730
  store %struct.exe_disk_file_t.17* %13, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 1), align 8, !dbg !5732
  %14 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 1), align 8, !dbg !5733
  %15 = load i32, i32* %stdin_length.addr, align 4, !dbg !5734
  call void @__create_new_dfile(%struct.exe_disk_file_t.17* %14, i32 %15, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.58, i64 0, i64 0), %struct.stat64.16* %s), !dbg !5735
  %16 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 1), align 8, !dbg !5736
  store %struct.exe_disk_file_t.17* %16, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 0, i64 0, i32 3), align 8, !dbg !5737
  br label %if.end, !dbg !5738

if.else:                                          ; preds = %for.end
  store %struct.exe_disk_file_t.17* null, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 1), align 8, !dbg !5739
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = load i32, i32* %max_failures.addr, align 4, !dbg !5740
  store i32 %17, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !5741
  %18 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !5742
  %tobool6 = icmp ne i32 %18, 0, !dbg !5744
  br i1 %tobool6, label %if.then7, label %if.end13, !dbg !5745

if.then7:                                         ; preds = %if.end
  %call8 = call noalias i8* @malloc(i64 4) #7, !dbg !5746
  %19 = bitcast i8* %call8 to i32*, !dbg !5746
  store i32* %19, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 6), align 8, !dbg !5748
  %call9 = call noalias i8* @malloc(i64 4) #7, !dbg !5749
  %20 = bitcast i8* %call9 to i32*, !dbg !5749
  store i32* %20, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 7), align 8, !dbg !5750
  %call10 = call noalias i8* @malloc(i64 4) #7, !dbg !5751
  %21 = bitcast i8* %call10 to i32*, !dbg !5751
  store i32* %21, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 8), align 8, !dbg !5752
  %call11 = call noalias i8* @malloc(i64 4) #7, !dbg !5753
  %22 = bitcast i8* %call11 to i32*, !dbg !5753
  store i32* %22, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 9), align 8, !dbg !5754
  %call12 = call noalias i8* @malloc(i64 4) #7, !dbg !5755
  %23 = bitcast i8* %call12 to i32*, !dbg !5755
  store i32* %23, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 10), align 8, !dbg !5756
  %24 = load i32*, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 6), align 8, !dbg !5757
  %25 = bitcast i32* %24 to i8*, !dbg !5758
  call void @klee_make_symbolic(i8* %25, i64 4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2.59, i64 0, i64 0)), !dbg !5759
  %26 = load i32*, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 7), align 8, !dbg !5760
  %27 = bitcast i32* %26 to i8*, !dbg !5761
  call void @klee_make_symbolic(i8* %27, i64 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3.60, i64 0, i64 0)), !dbg !5762
  %28 = load i32*, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 8), align 8, !dbg !5763
  %29 = bitcast i32* %28 to i8*, !dbg !5764
  call void @klee_make_symbolic(i8* %29, i64 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4.61, i64 0, i64 0)), !dbg !5765
  %30 = load i32*, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 9), align 8, !dbg !5766
  %31 = bitcast i32* %30 to i8*, !dbg !5767
  call void @klee_make_symbolic(i8* %31, i64 4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5.62, i64 0, i64 0)), !dbg !5768
  %32 = load i32*, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 10), align 8, !dbg !5769
  %33 = bitcast i32* %32 to i8*, !dbg !5770
  call void @klee_make_symbolic(i8* %33, i64 4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6.63, i64 0, i64 0)), !dbg !5771
  br label %if.end13, !dbg !5772

if.end13:                                         ; preds = %if.then7, %if.end
  %34 = load i32, i32* %sym_stdout_flag.addr, align 4, !dbg !5773
  %tobool14 = icmp ne i32 %34, 0, !dbg !5773
  br i1 %tobool14, label %if.then15, label %if.else17, !dbg !5775

if.then15:                                        ; preds = %if.end13
  %call16 = call noalias i8* @malloc(i64 24) #7, !dbg !5776
  %35 = bitcast i8* %call16 to %struct.exe_disk_file_t.17*, !dbg !5776
  store %struct.exe_disk_file_t.17* %35, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 2), align 8, !dbg !5778
  %36 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 2), align 8, !dbg !5779
  call void @__create_new_dfile(%struct.exe_disk_file_t.17* %36, i32 1024, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7.64, i64 0, i64 0), %struct.stat64.16* %s), !dbg !5780
  %37 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 2), align 8, !dbg !5781
  store %struct.exe_disk_file_t.17* %37, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 0, i64 1, i32 3), align 8, !dbg !5782
  store i32 0, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 3), align 8, !dbg !5783
  br label %if.end18, !dbg !5784

if.else17:                                        ; preds = %if.end13
  store %struct.exe_disk_file_t.17* null, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 2), align 8, !dbg !5785
  br label %if.end18

if.end18:                                         ; preds = %if.else17, %if.then15
  %38 = load i32, i32* %save_all_writes_flag.addr, align 4, !dbg !5786
  store i32 %38, i32* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 3), align 8, !dbg !5787
  %call19 = call i32 @__sym_uint32(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.65, i64 0, i64 0)), !dbg !5788
  store i32 %call19, i32* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 2), align 4, !dbg !5789
  %39 = load i32, i32* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 2), align 4, !dbg !5790
  %cmp20 = icmp eq i32 %39, 1, !dbg !5791
  %conv21 = zext i1 %cmp20 to i32, !dbg !5791
  %conv22 = sext i32 %conv21 to i64, !dbg !5792
  call void @klee_assume(i64 %conv22), !dbg !5793
  ret void, !dbg !5794
}

; Function Attrs: noinline nounwind uwtable
define internal void @__create_new_dfile(%struct.exe_disk_file_t.17* %dfile, i32 %size, i8* %name, %struct.stat64.16* %defaults) #0 !dbg !5795 {
entry:
  %dfile.addr = alloca %struct.exe_disk_file_t.17*, align 8
  %size.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %defaults.addr = alloca %struct.stat64.16*, align 8
  %s = alloca %struct.stat64.16*, align 8
  %sp = alloca i8*, align 8
  %sname = alloca [64 x i8], align 16
  store %struct.exe_disk_file_t.17* %dfile, %struct.exe_disk_file_t.17** %dfile.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %dfile.addr, metadata !5798, metadata !DIExpression()), !dbg !5799
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !5800, metadata !DIExpression()), !dbg !5801
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !5802, metadata !DIExpression()), !dbg !5803
  store %struct.stat64.16* %defaults, %struct.stat64.16** %defaults.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %defaults.addr, metadata !5804, metadata !DIExpression()), !dbg !5805
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %s, metadata !5806, metadata !DIExpression()), !dbg !5807
  %call = call noalias i8* @malloc(i64 144) #7, !dbg !5808
  %0 = bitcast i8* %call to %struct.stat64.16*, !dbg !5808
  store %struct.stat64.16* %0, %struct.stat64.16** %s, align 8, !dbg !5807
  call void @llvm.dbg.declare(metadata i8** %sp, metadata !5809, metadata !DIExpression()), !dbg !5810
  call void @llvm.dbg.declare(metadata [64 x i8]* %sname, metadata !5811, metadata !DIExpression()), !dbg !5815
  %1 = load i8*, i8** %name.addr, align 8, !dbg !5816
  store i8* %1, i8** %sp, align 8, !dbg !5818
  br label %for.cond, !dbg !5819

for.cond:                                         ; preds = %for.body, %entry
  %2 = load i8*, i8** %sp, align 8, !dbg !5820
  %3 = load i8, i8* %2, align 1, !dbg !5822
  %tobool = icmp ne i8 %3, 0, !dbg !5823
  %4 = load i8*, i8** %sp, align 8, !dbg !5824
  br i1 %tobool, label %for.body, label %for.end, !dbg !5823

for.body:                                         ; preds = %for.cond
  %5 = load i8, i8* %4, align 1, !dbg !5825
  %6 = load i8*, i8** %sp, align 8, !dbg !5826
  %7 = load i8*, i8** %name.addr, align 8, !dbg !5827
  %sub.ptr.lhs.cast = ptrtoint i8* %6 to i64, !dbg !5828
  %sub.ptr.rhs.cast = ptrtoint i8* %7 to i64, !dbg !5828
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !5828
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* %sname, i64 0, i64 %sub.ptr.sub, !dbg !5829
  store i8 %5, i8* %arrayidx, align 1, !dbg !5830
  %8 = load i8*, i8** %sp, align 8, !dbg !5831
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1, !dbg !5831
  store i8* %incdec.ptr, i8** %sp, align 8, !dbg !5831
  br label %for.cond, !dbg !5832, !llvm.loop !5833

for.end:                                          ; preds = %for.cond
  %9 = load i8*, i8** %name.addr, align 8, !dbg !5835
  %sub.ptr.lhs.cast1 = ptrtoint i8* %4 to i64, !dbg !5836
  %sub.ptr.rhs.cast2 = ptrtoint i8* %9 to i64, !dbg !5836
  %sub.ptr.sub3 = sub i64 %sub.ptr.lhs.cast1, %sub.ptr.rhs.cast2, !dbg !5836
  %arrayidx4 = getelementptr inbounds [64 x i8], [64 x i8]* %sname, i64 0, i64 %sub.ptr.sub3, !dbg !5837
  %10 = call i8* @memcpy(i8* %arrayidx4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9.66, i64 0, i64 0), i64 6), !dbg !5838
  %11 = load i32, i32* %size.addr, align 4, !dbg !5839
  %tobool5 = icmp ne i32 %11, 0, !dbg !5839
  br i1 %tobool5, label %if.end, label %if.else, !dbg !5842

if.else:                                          ; preds = %for.end
  call void @__assert_fail(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.67, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.11.68, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @__PRETTY_FUNCTION__.__create_new_dfile, i64 0, i64 0)) #18, !dbg !5839
  unreachable, !dbg !5839

if.end:                                           ; preds = %for.end
  %12 = load i32, i32* %size.addr, align 4, !dbg !5843
  %13 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile.addr, align 8, !dbg !5844
  %size6 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %13, i32 0, i32 0, !dbg !5845
  store i32 %12, i32* %size6, align 8, !dbg !5846
  %14 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile.addr, align 8, !dbg !5847
  %size7 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %14, i32 0, i32 0, !dbg !5848
  %15 = load i32, i32* %size7, align 8, !dbg !5848
  %conv = zext i32 %15 to i64, !dbg !5847
  %call8 = call noalias i8* @malloc(i64 %conv) #7, !dbg !5849
  %16 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile.addr, align 8, !dbg !5850
  %contents = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %16, i32 0, i32 1, !dbg !5851
  store i8* %call8, i8** %contents, align 8, !dbg !5852
  %17 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile.addr, align 8, !dbg !5853
  %contents9 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %17, i32 0, i32 1, !dbg !5854
  %18 = load i8*, i8** %contents9, align 8, !dbg !5854
  %19 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile.addr, align 8, !dbg !5855
  %size10 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %19, i32 0, i32 0, !dbg !5856
  %20 = load i32, i32* %size10, align 8, !dbg !5856
  %conv11 = zext i32 %20 to i64, !dbg !5855
  %21 = load i8*, i8** %name.addr, align 8, !dbg !5857
  call void @klee_make_symbolic(i8* %18, i64 %conv11, i8* %21), !dbg !5858
  %22 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5859
  %23 = bitcast %struct.stat64.16* %22 to i8*, !dbg !5859
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %sname, i64 0, i64 0, !dbg !5860
  call void @klee_make_symbolic(i8* %23, i64 144, i8* %arraydecay), !dbg !5861
  %24 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5862
  %st_ino = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %24, i32 0, i32 1, !dbg !5864
  %25 = load i64, i64* %st_ino, align 8, !dbg !5864
  %call12 = call i32 @klee_is_symbolic(i64 %25), !dbg !5865
  %tobool13 = icmp ne i32 %call12, 0, !dbg !5865
  br i1 %tobool13, label %if.end19, label %land.lhs.true, !dbg !5866

land.lhs.true:                                    ; preds = %if.end
  %26 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5867
  %st_ino14 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %26, i32 0, i32 1, !dbg !5868
  %27 = load i64, i64* %st_ino14, align 8, !dbg !5868
  %and = and i64 %27, 2147483647, !dbg !5869
  %cmp = icmp eq i64 %and, 0, !dbg !5870
  br i1 %cmp, label %if.then16, label %if.end19, !dbg !5871

if.then16:                                        ; preds = %land.lhs.true
  %28 = load %struct.stat64.16*, %struct.stat64.16** %defaults.addr, align 8, !dbg !5872
  %st_ino17 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %28, i32 0, i32 1, !dbg !5873
  %29 = load i64, i64* %st_ino17, align 8, !dbg !5873
  %30 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5874
  %st_ino18 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %30, i32 0, i32 1, !dbg !5875
  store i64 %29, i64* %st_ino18, align 8, !dbg !5876
  br label %if.end19, !dbg !5874

if.end19:                                         ; preds = %if.then16, %land.lhs.true, %if.end
  %31 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5877
  %st_ino20 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %31, i32 0, i32 1, !dbg !5878
  %32 = load i64, i64* %st_ino20, align 8, !dbg !5878
  %and21 = and i64 %32, 2147483647, !dbg !5879
  %cmp22 = icmp ne i64 %and21, 0, !dbg !5880
  %conv23 = zext i1 %cmp22 to i32, !dbg !5880
  %conv24 = sext i32 %conv23 to i64, !dbg !5881
  call void @klee_assume(i64 %conv24), !dbg !5882
  %33 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5883
  %st_blksize = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %33, i32 0, i32 9, !dbg !5884
  %34 = load i64, i64* %st_blksize, align 8, !dbg !5884
  %and25 = and i64 %34, -65536, !dbg !5885
  %cmp26 = icmp eq i64 %and25, 0, !dbg !5886
  %conv27 = zext i1 %cmp26 to i32, !dbg !5886
  %conv28 = sext i32 %conv27 to i64, !dbg !5887
  call void @klee_assume(i64 %conv28), !dbg !5888
  %35 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5889
  %36 = bitcast %struct.stat64.16* %35 to i8*, !dbg !5889
  %37 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5890
  %st_mode = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %37, i32 0, i32 3, !dbg !5891
  %38 = load i32, i32* %st_mode, align 8, !dbg !5891
  %and29 = and i32 %38, -61952, !dbg !5892
  %tobool30 = icmp ne i32 %and29, 0, !dbg !5893
  %lnot = xor i1 %tobool30, true, !dbg !5893
  %lnot.ext = zext i1 %lnot to i32, !dbg !5893
  %conv31 = sext i32 %lnot.ext to i64, !dbg !5893
  call void @klee_prefer_cex(i8* %36, i64 %conv31), !dbg !5894
  %39 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5895
  %40 = bitcast %struct.stat64.16* %39 to i8*, !dbg !5895
  %41 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5896
  %st_dev = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %41, i32 0, i32 0, !dbg !5897
  %42 = load i64, i64* %st_dev, align 8, !dbg !5897
  %43 = load %struct.stat64.16*, %struct.stat64.16** %defaults.addr, align 8, !dbg !5898
  %st_dev32 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %43, i32 0, i32 0, !dbg !5899
  %44 = load i64, i64* %st_dev32, align 8, !dbg !5899
  %cmp33 = icmp eq i64 %42, %44, !dbg !5900
  %conv34 = zext i1 %cmp33 to i32, !dbg !5900
  %conv35 = sext i32 %conv34 to i64, !dbg !5896
  call void @klee_prefer_cex(i8* %40, i64 %conv35), !dbg !5901
  %45 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5902
  %46 = bitcast %struct.stat64.16* %45 to i8*, !dbg !5902
  %47 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5903
  %st_rdev = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %47, i32 0, i32 7, !dbg !5904
  %48 = load i64, i64* %st_rdev, align 8, !dbg !5904
  %49 = load %struct.stat64.16*, %struct.stat64.16** %defaults.addr, align 8, !dbg !5905
  %st_rdev36 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %49, i32 0, i32 7, !dbg !5906
  %50 = load i64, i64* %st_rdev36, align 8, !dbg !5906
  %cmp37 = icmp eq i64 %48, %50, !dbg !5907
  %conv38 = zext i1 %cmp37 to i32, !dbg !5907
  %conv39 = sext i32 %conv38 to i64, !dbg !5903
  call void @klee_prefer_cex(i8* %46, i64 %conv39), !dbg !5908
  %51 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5909
  %52 = bitcast %struct.stat64.16* %51 to i8*, !dbg !5909
  %53 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5910
  %st_mode40 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %53, i32 0, i32 3, !dbg !5911
  %54 = load i32, i32* %st_mode40, align 8, !dbg !5911
  %and41 = and i32 %54, 448, !dbg !5912
  %cmp42 = icmp eq i32 %and41, 384, !dbg !5913
  %conv43 = zext i1 %cmp42 to i32, !dbg !5913
  %conv44 = sext i32 %conv43 to i64, !dbg !5914
  call void @klee_prefer_cex(i8* %52, i64 %conv44), !dbg !5915
  %55 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5916
  %56 = bitcast %struct.stat64.16* %55 to i8*, !dbg !5916
  %57 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5917
  %st_mode45 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %57, i32 0, i32 3, !dbg !5918
  %58 = load i32, i32* %st_mode45, align 8, !dbg !5918
  %and46 = and i32 %58, 56, !dbg !5919
  %cmp47 = icmp eq i32 %and46, 32, !dbg !5920
  %conv48 = zext i1 %cmp47 to i32, !dbg !5920
  %conv49 = sext i32 %conv48 to i64, !dbg !5921
  call void @klee_prefer_cex(i8* %56, i64 %conv49), !dbg !5922
  %59 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5923
  %60 = bitcast %struct.stat64.16* %59 to i8*, !dbg !5923
  %61 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5924
  %st_mode50 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %61, i32 0, i32 3, !dbg !5925
  %62 = load i32, i32* %st_mode50, align 8, !dbg !5925
  %and51 = and i32 %62, 7, !dbg !5926
  %cmp52 = icmp eq i32 %and51, 4, !dbg !5927
  %conv53 = zext i1 %cmp52 to i32, !dbg !5927
  %conv54 = sext i32 %conv53 to i64, !dbg !5928
  call void @klee_prefer_cex(i8* %60, i64 %conv54), !dbg !5929
  %63 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5930
  %64 = bitcast %struct.stat64.16* %63 to i8*, !dbg !5930
  %65 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5931
  %st_mode55 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %65, i32 0, i32 3, !dbg !5932
  %66 = load i32, i32* %st_mode55, align 8, !dbg !5932
  %and56 = and i32 %66, 61440, !dbg !5933
  %cmp57 = icmp eq i32 %and56, 32768, !dbg !5934
  %conv58 = zext i1 %cmp57 to i32, !dbg !5934
  %conv59 = sext i32 %conv58 to i64, !dbg !5935
  call void @klee_prefer_cex(i8* %64, i64 %conv59), !dbg !5936
  %67 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5937
  %68 = bitcast %struct.stat64.16* %67 to i8*, !dbg !5937
  %69 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5938
  %st_nlink = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %69, i32 0, i32 2, !dbg !5939
  %70 = load i64, i64* %st_nlink, align 8, !dbg !5939
  %cmp60 = icmp eq i64 %70, 1, !dbg !5940
  %conv61 = zext i1 %cmp60 to i32, !dbg !5940
  %conv62 = sext i32 %conv61 to i64, !dbg !5938
  call void @klee_prefer_cex(i8* %68, i64 %conv62), !dbg !5941
  %71 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5942
  %72 = bitcast %struct.stat64.16* %71 to i8*, !dbg !5942
  %73 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5943
  %st_uid = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %73, i32 0, i32 4, !dbg !5944
  %74 = load i32, i32* %st_uid, align 4, !dbg !5944
  %75 = load %struct.stat64.16*, %struct.stat64.16** %defaults.addr, align 8, !dbg !5945
  %st_uid63 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %75, i32 0, i32 4, !dbg !5946
  %76 = load i32, i32* %st_uid63, align 4, !dbg !5946
  %cmp64 = icmp eq i32 %74, %76, !dbg !5947
  %conv65 = zext i1 %cmp64 to i32, !dbg !5947
  %conv66 = sext i32 %conv65 to i64, !dbg !5943
  call void @klee_prefer_cex(i8* %72, i64 %conv66), !dbg !5948
  %77 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5949
  %78 = bitcast %struct.stat64.16* %77 to i8*, !dbg !5949
  %79 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5950
  %st_gid = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %79, i32 0, i32 5, !dbg !5951
  %80 = load i32, i32* %st_gid, align 8, !dbg !5951
  %81 = load %struct.stat64.16*, %struct.stat64.16** %defaults.addr, align 8, !dbg !5952
  %st_gid67 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %81, i32 0, i32 5, !dbg !5953
  %82 = load i32, i32* %st_gid67, align 8, !dbg !5953
  %cmp68 = icmp eq i32 %80, %82, !dbg !5954
  %conv69 = zext i1 %cmp68 to i32, !dbg !5954
  %conv70 = sext i32 %conv69 to i64, !dbg !5950
  call void @klee_prefer_cex(i8* %78, i64 %conv70), !dbg !5955
  %83 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5956
  %84 = bitcast %struct.stat64.16* %83 to i8*, !dbg !5956
  %85 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5957
  %st_blksize71 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %85, i32 0, i32 9, !dbg !5958
  %86 = load i64, i64* %st_blksize71, align 8, !dbg !5958
  %cmp72 = icmp eq i64 %86, 4096, !dbg !5959
  %conv73 = zext i1 %cmp72 to i32, !dbg !5959
  %conv74 = sext i32 %conv73 to i64, !dbg !5957
  call void @klee_prefer_cex(i8* %84, i64 %conv74), !dbg !5960
  %87 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5961
  %88 = bitcast %struct.stat64.16* %87 to i8*, !dbg !5961
  %89 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5962
  %st_atim = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %89, i32 0, i32 11, !dbg !5963
  %tv_sec = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %st_atim, i32 0, i32 0, !dbg !5963
  %90 = load i64, i64* %tv_sec, align 8, !dbg !5963
  %91 = load %struct.stat64.16*, %struct.stat64.16** %defaults.addr, align 8, !dbg !5964
  %st_atim75 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %91, i32 0, i32 11, !dbg !5965
  %tv_sec76 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %st_atim75, i32 0, i32 0, !dbg !5965
  %92 = load i64, i64* %tv_sec76, align 8, !dbg !5965
  %cmp77 = icmp eq i64 %90, %92, !dbg !5966
  %conv78 = zext i1 %cmp77 to i32, !dbg !5966
  %conv79 = sext i32 %conv78 to i64, !dbg !5962
  call void @klee_prefer_cex(i8* %88, i64 %conv79), !dbg !5967
  %93 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5968
  %94 = bitcast %struct.stat64.16* %93 to i8*, !dbg !5968
  %95 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5969
  %st_mtim = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %95, i32 0, i32 12, !dbg !5970
  %tv_sec80 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %st_mtim, i32 0, i32 0, !dbg !5970
  %96 = load i64, i64* %tv_sec80, align 8, !dbg !5970
  %97 = load %struct.stat64.16*, %struct.stat64.16** %defaults.addr, align 8, !dbg !5971
  %st_mtim81 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %97, i32 0, i32 12, !dbg !5972
  %tv_sec82 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %st_mtim81, i32 0, i32 0, !dbg !5972
  %98 = load i64, i64* %tv_sec82, align 8, !dbg !5972
  %cmp83 = icmp eq i64 %96, %98, !dbg !5973
  %conv84 = zext i1 %cmp83 to i32, !dbg !5973
  %conv85 = sext i32 %conv84 to i64, !dbg !5969
  call void @klee_prefer_cex(i8* %94, i64 %conv85), !dbg !5974
  %99 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5975
  %100 = bitcast %struct.stat64.16* %99 to i8*, !dbg !5975
  %101 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5976
  %st_ctim = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %101, i32 0, i32 13, !dbg !5977
  %tv_sec86 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %st_ctim, i32 0, i32 0, !dbg !5977
  %102 = load i64, i64* %tv_sec86, align 8, !dbg !5977
  %103 = load %struct.stat64.16*, %struct.stat64.16** %defaults.addr, align 8, !dbg !5978
  %st_ctim87 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %103, i32 0, i32 13, !dbg !5979
  %tv_sec88 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %st_ctim87, i32 0, i32 0, !dbg !5979
  %104 = load i64, i64* %tv_sec88, align 8, !dbg !5979
  %cmp89 = icmp eq i64 %102, %104, !dbg !5980
  %conv90 = zext i1 %cmp89 to i32, !dbg !5980
  %conv91 = sext i32 %conv90 to i64, !dbg !5976
  call void @klee_prefer_cex(i8* %100, i64 %conv91), !dbg !5981
  %105 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile.addr, align 8, !dbg !5982
  %size92 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %105, i32 0, i32 0, !dbg !5983
  %106 = load i32, i32* %size92, align 8, !dbg !5983
  %conv93 = zext i32 %106 to i64, !dbg !5982
  %107 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5984
  %st_size = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %107, i32 0, i32 8, !dbg !5985
  store i64 %conv93, i64* %st_size, align 8, !dbg !5986
  %108 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5987
  %st_blocks = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %108, i32 0, i32 10, !dbg !5988
  store i64 8, i64* %st_blocks, align 8, !dbg !5989
  %109 = load %struct.stat64.16*, %struct.stat64.16** %s, align 8, !dbg !5990
  %110 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile.addr, align 8, !dbg !5991
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %110, i32 0, i32 2, !dbg !5992
  store %struct.stat64.16* %109, %struct.stat64.16** %stat, align 8, !dbg !5993
  ret void, !dbg !5994
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @__sym_uint32(i8* %name) #0 !dbg !5995 {
entry:
  %name.addr = alloca i8*, align 8
  %x = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !5998, metadata !DIExpression()), !dbg !5999
  call void @llvm.dbg.declare(metadata i32* %x, metadata !6000, metadata !DIExpression()), !dbg !6001
  %0 = bitcast i32* %x to i8*, !dbg !6002
  %1 = load i8*, i8** %name.addr, align 8, !dbg !6003
  call void @klee_make_symbolic(i8* %0, i64 4, i8* %1), !dbg !6004
  %2 = load i32, i32* %x, align 4, !dbg !6005
  ret i32 %2, !dbg !6006
}

declare dso_local void @klee_assume(i64) #4

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #8

declare dso_local i32 @klee_is_symbolic(i64) #4

declare dso_local void @klee_prefer_cex(i8*, i64) #4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @klee_range(i32 %start, i32 %end, i8* %name) #0 !dbg !6007 {
entry:
  %retval = alloca i32, align 4
  %start.addr = alloca i32, align 4
  %end.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %x = alloca i32, align 4
  store i32 %start, i32* %start.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start.addr, metadata !6011, metadata !DIExpression()), !dbg !6012
  store i32 %end, i32* %end.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %end.addr, metadata !6013, metadata !DIExpression()), !dbg !6014
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !6015, metadata !DIExpression()), !dbg !6016
  call void @llvm.dbg.declare(metadata i32* %x, metadata !6017, metadata !DIExpression()), !dbg !6018
  %0 = load i32, i32* %start.addr, align 4, !dbg !6019
  %1 = load i32, i32* %end.addr, align 4, !dbg !6021
  %cmp = icmp sge i32 %0, %1, !dbg !6022
  br i1 %cmp, label %if.then, label %if.end, !dbg !6023

if.then:                                          ; preds = %entry
  call void @klee_report_error(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.71, i64 0, i64 0), i32 18, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.72, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2.73, i64 0, i64 0)) #14, !dbg !6024
  unreachable, !dbg !6024

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %start.addr, align 4, !dbg !6025
  %add = add nsw i32 %2, 1, !dbg !6027
  %3 = load i32, i32* %end.addr, align 4, !dbg !6028
  %cmp1 = icmp eq i32 %add, %3, !dbg !6029
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !6030

if.then2:                                         ; preds = %if.end
  %4 = load i32, i32* %start.addr, align 4, !dbg !6031
  store i32 %4, i32* %retval, align 4, !dbg !6033
  br label %return, !dbg !6033

if.else:                                          ; preds = %if.end
  %5 = bitcast i32* %x to i8*, !dbg !6034
  %6 = load i8*, i8** %name.addr, align 8, !dbg !6036
  call void @klee_make_symbolic(i8* %5, i64 4, i8* %6), !dbg !6037
  %7 = load i32, i32* %start.addr, align 4, !dbg !6038
  %cmp3 = icmp eq i32 %7, 0, !dbg !6040
  br i1 %cmp3, label %if.then4, label %if.else7, !dbg !6041

if.then4:                                         ; preds = %if.else
  %8 = load i32, i32* %x, align 4, !dbg !6042
  %9 = load i32, i32* %end.addr, align 4, !dbg !6044
  %cmp5 = icmp ult i32 %8, %9, !dbg !6045
  %conv = zext i1 %cmp5 to i32, !dbg !6045
  %conv6 = sext i32 %conv to i64, !dbg !6046
  call void @klee_assume(i64 %conv6), !dbg !6047
  br label %if.end14, !dbg !6048

if.else7:                                         ; preds = %if.else
  %10 = load i32, i32* %start.addr, align 4, !dbg !6049
  %11 = load i32, i32* %x, align 4, !dbg !6051
  %cmp8 = icmp sle i32 %10, %11, !dbg !6052
  %conv9 = zext i1 %cmp8 to i32, !dbg !6052
  %conv10 = sext i32 %conv9 to i64, !dbg !6049
  call void @klee_assume(i64 %conv10), !dbg !6053
  %12 = load i32, i32* %x, align 4, !dbg !6054
  %13 = load i32, i32* %end.addr, align 4, !dbg !6055
  %cmp11 = icmp slt i32 %12, %13, !dbg !6056
  %conv12 = zext i1 %cmp11 to i32, !dbg !6056
  %conv13 = sext i32 %conv12 to i64, !dbg !6054
  call void @klee_assume(i64 %conv13), !dbg !6057
  br label %if.end14

if.end14:                                         ; preds = %if.else7, %if.then4
  %14 = load i32, i32* %x, align 4, !dbg !6058
  store i32 %14, i32* %retval, align 4, !dbg !6059
  br label %return, !dbg !6059

return:                                           ; preds = %if.end14, %if.then2
  %15 = load i32, i32* %retval, align 4, !dbg !6060
  ret i32 %15, !dbg !6060
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @open64(i8* nonnull %pathname, i32 %flags, ...) #0 !dbg !6061 {
entry:
  %pathname.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %mode = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !6065, metadata !DIExpression()), !dbg !6066
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6067, metadata !DIExpression()), !dbg !6068
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !6069, metadata !DIExpression()), !dbg !6070
  store i32 0, i32* %mode, align 4, !dbg !6070
  %0 = load i32, i32* %flags.addr, align 4, !dbg !6071
  %and = and i32 %0, 64, !dbg !6073
  %tobool = icmp ne i32 %and, 0, !dbg !6073
  br i1 %tobool, label %if.then, label %if.end, !dbg !6074

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !6075, metadata !DIExpression()), !dbg !6089
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !6090
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !6090
  call void @llvm.va_start(i8* %arraydecay1), !dbg !6090
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !6091
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 0, !dbg !6091
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !6091
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !6091
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !6091

vaarg.in_reg:                                     ; preds = %if.then
  %1 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 3, !dbg !6091
  %reg_save_area = load i8*, i8** %1, align 16, !dbg !6091
  %2 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !6091
  %3 = bitcast i8* %2 to i32*, !dbg !6091
  %4 = add i32 %gp_offset, 8, !dbg !6091
  store i32 %4, i32* %gp_offset_p, align 16, !dbg !6091
  br label %vaarg.end, !dbg !6091

vaarg.in_mem:                                     ; preds = %if.then
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 2, !dbg !6091
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !6091
  %5 = bitcast i8* %overflow_arg_area to i32*, !dbg !6091
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !6091
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !6091
  br label %vaarg.end, !dbg !6091

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i32* [ %3, %vaarg.in_reg ], [ %5, %vaarg.in_mem ], !dbg !6091
  %6 = load i32, i32* %vaarg.addr, align 4, !dbg !6091
  store i32 %6, i32* %mode, align 4, !dbg !6092
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !6093
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*, !dbg !6093
  call void @llvm.va_end(i8* %arraydecay34), !dbg !6093
  br label %if.end, !dbg !6094

if.end:                                           ; preds = %vaarg.end, %entry
  %7 = load i8*, i8** %pathname.addr, align 8, !dbg !6095
  %8 = load i32, i32* %flags.addr, align 4, !dbg !6096
  %9 = load i32, i32* %mode, align 4, !dbg !6097
  %call = call i32 @__fd_open(i8* %7, i32 %8, i32 %9), !dbg !6098
  ret i32 %call, !dbg !6099
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @openat64(i32 %fd, i8* nonnull %pathname, i32 %flags, ...) #0 !dbg !6100 {
entry:
  %fd.addr = alloca i32, align 4
  %pathname.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %mode = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !6103, metadata !DIExpression()), !dbg !6104
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !6105, metadata !DIExpression()), !dbg !6106
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6107, metadata !DIExpression()), !dbg !6108
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !6109, metadata !DIExpression()), !dbg !6110
  store i32 0, i32* %mode, align 4, !dbg !6110
  %0 = load i32, i32* %flags.addr, align 4, !dbg !6111
  %and = and i32 %0, 64, !dbg !6113
  %tobool = icmp ne i32 %and, 0, !dbg !6113
  br i1 %tobool, label %if.then, label %if.end, !dbg !6114

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !6115, metadata !DIExpression()), !dbg !6117
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !6118
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !6118
  call void @llvm.va_start(i8* %arraydecay1), !dbg !6118
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !6119
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 0, !dbg !6119
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !6119
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !6119
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !6119

vaarg.in_reg:                                     ; preds = %if.then
  %1 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 3, !dbg !6119
  %reg_save_area = load i8*, i8** %1, align 16, !dbg !6119
  %2 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !6119
  %3 = bitcast i8* %2 to i32*, !dbg !6119
  %4 = add i32 %gp_offset, 8, !dbg !6119
  store i32 %4, i32* %gp_offset_p, align 16, !dbg !6119
  br label %vaarg.end, !dbg !6119

vaarg.in_mem:                                     ; preds = %if.then
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 2, !dbg !6119
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !6119
  %5 = bitcast i8* %overflow_arg_area to i32*, !dbg !6119
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !6119
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !6119
  br label %vaarg.end, !dbg !6119

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i32* [ %3, %vaarg.in_reg ], [ %5, %vaarg.in_mem ], !dbg !6119
  %6 = load i32, i32* %vaarg.addr, align 4, !dbg !6119
  store i32 %6, i32* %mode, align 4, !dbg !6120
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !6121
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*, !dbg !6121
  call void @llvm.va_end(i8* %arraydecay34), !dbg !6121
  br label %if.end, !dbg !6122

if.end:                                           ; preds = %vaarg.end, %entry
  %7 = load i32, i32* %fd.addr, align 4, !dbg !6123
  %8 = load i8*, i8** %pathname.addr, align 8, !dbg !6124
  %9 = load i32, i32* %flags.addr, align 4, !dbg !6125
  %10 = load i32, i32* %mode, align 4, !dbg !6126
  %call = call i32 @__fd_openat(i32 %7, i8* %8, i32 %9, i32 %10), !dbg !6127
  ret i32 %call, !dbg !6128
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @lseek64(i32 %fd, i64 %offset, i32 %whence) #0 !dbg !6129 {
entry:
  %fd.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  %whence.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !6132, metadata !DIExpression()), !dbg !6133
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !6134, metadata !DIExpression()), !dbg !6135
  store i32 %whence, i32* %whence.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %whence.addr, metadata !6136, metadata !DIExpression()), !dbg !6137
  %0 = load i32, i32* %fd.addr, align 4, !dbg !6138
  %1 = load i64, i64* %offset.addr, align 8, !dbg !6139
  %2 = load i32, i32* %whence.addr, align 4, !dbg !6140
  %call = call i64 @__fd_lseek(i32 %0, i64 %1, i32 %2), !dbg !6141
  ret i64 %call, !dbg !6142
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @__xstat64(i32 %vers, i8* nonnull %path, %struct.stat64.16* nonnull %buf) #0 !dbg !6143 {
entry:
  %vers.addr = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  %buf.addr = alloca %struct.stat64.16*, align 8
  store i32 %vers, i32* %vers.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vers.addr, metadata !6164, metadata !DIExpression()), !dbg !6165
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !6166, metadata !DIExpression()), !dbg !6167
  store %struct.stat64.16* %buf, %struct.stat64.16** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %buf.addr, metadata !6168, metadata !DIExpression()), !dbg !6169
  %0 = load i8*, i8** %path.addr, align 8, !dbg !6170
  %1 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !6171
  %2 = bitcast %struct.stat64.16* %1 to %struct.stat64.16*, !dbg !6172
  %call = call i32 @__fd_stat(i8* %0, %struct.stat64.16* %2), !dbg !6173
  ret i32 %call, !dbg !6174
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @stat64(i8* nonnull %path, %struct.stat64.16* nonnull %buf) #0 !dbg !6175 {
entry:
  %path.addr = alloca i8*, align 8
  %buf.addr = alloca %struct.stat64.16*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !6178, metadata !DIExpression()), !dbg !6179
  store %struct.stat64.16* %buf, %struct.stat64.16** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %buf.addr, metadata !6180, metadata !DIExpression()), !dbg !6181
  %0 = load i8*, i8** %path.addr, align 8, !dbg !6182
  %1 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !6183
  %2 = bitcast %struct.stat64.16* %1 to %struct.stat64.16*, !dbg !6184
  %call = call i32 @__fd_stat(i8* %0, %struct.stat64.16* %2), !dbg !6185
  ret i32 %call, !dbg !6186
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @__lxstat64(i32 %vers, i8* nonnull %path, %struct.stat64.16* nonnull %buf) #0 !dbg !6187 {
entry:
  %vers.addr = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  %buf.addr = alloca %struct.stat64.16*, align 8
  store i32 %vers, i32* %vers.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vers.addr, metadata !6188, metadata !DIExpression()), !dbg !6189
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !6190, metadata !DIExpression()), !dbg !6191
  store %struct.stat64.16* %buf, %struct.stat64.16** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %buf.addr, metadata !6192, metadata !DIExpression()), !dbg !6193
  %0 = load i8*, i8** %path.addr, align 8, !dbg !6194
  %1 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !6195
  %2 = bitcast %struct.stat64.16* %1 to %struct.stat64.16*, !dbg !6196
  %call = call i32 @__fd_lstat(i8* %0, %struct.stat64.16* %2), !dbg !6197
  ret i32 %call, !dbg !6198
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @lstat64(i8* nonnull %path, %struct.stat64.16* nonnull %buf) #0 !dbg !6199 {
entry:
  %path.addr = alloca i8*, align 8
  %buf.addr = alloca %struct.stat64.16*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !6200, metadata !DIExpression()), !dbg !6201
  store %struct.stat64.16* %buf, %struct.stat64.16** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %buf.addr, metadata !6202, metadata !DIExpression()), !dbg !6203
  %0 = load i8*, i8** %path.addr, align 8, !dbg !6204
  %1 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !6205
  %2 = bitcast %struct.stat64.16* %1 to %struct.stat64.16*, !dbg !6206
  %call = call i32 @__fd_lstat(i8* %0, %struct.stat64.16* %2), !dbg !6207
  ret i32 %call, !dbg !6208
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @__fxstat64(i32 %vers, i32 %fd, %struct.stat64.16* nonnull %buf) #0 !dbg !6209 {
entry:
  %vers.addr = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %buf.addr = alloca %struct.stat64.16*, align 8
  store i32 %vers, i32* %vers.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vers.addr, metadata !6212, metadata !DIExpression()), !dbg !6213
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !6214, metadata !DIExpression()), !dbg !6215
  store %struct.stat64.16* %buf, %struct.stat64.16** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %buf.addr, metadata !6216, metadata !DIExpression()), !dbg !6217
  %0 = load i32, i32* %fd.addr, align 4, !dbg !6218
  %1 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !6219
  %2 = bitcast %struct.stat64.16* %1 to %struct.stat64.16*, !dbg !6220
  %call = call i32 @__fd_fstat(i32 %0, %struct.stat64.16* %2), !dbg !6221
  ret i32 %call, !dbg !6222
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @fstat64(i32 %fd, %struct.stat64.16* nonnull %buf) #0 !dbg !6223 {
entry:
  %fd.addr = alloca i32, align 4
  %buf.addr = alloca %struct.stat64.16*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !6226, metadata !DIExpression()), !dbg !6227
  store %struct.stat64.16* %buf, %struct.stat64.16** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %buf.addr, metadata !6228, metadata !DIExpression()), !dbg !6229
  %0 = load i32, i32* %fd.addr, align 4, !dbg !6230
  %1 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !6231
  %2 = bitcast %struct.stat64.16* %1 to %struct.stat64.16*, !dbg !6232
  %call = call i32 @__fd_fstat(i32 %0, %struct.stat64.16* %2), !dbg !6233
  ret i32 %call, !dbg !6234
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftruncate64(i32 %fd, i64 %length) #0 !dbg !6235 {
entry:
  %fd.addr = alloca i32, align 4
  %length.addr = alloca i64, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !6236, metadata !DIExpression()), !dbg !6237
  store i64 %length, i64* %length.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %length.addr, metadata !6238, metadata !DIExpression()), !dbg !6239
  %0 = load i32, i32* %fd.addr, align 4, !dbg !6240
  %1 = load i64, i64* %length.addr, align 8, !dbg !6241
  %call = call i32 @__fd_ftruncate(i32 %0, i64 %1), !dbg !6242
  ret i32 %call, !dbg !6243
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @statfs64(i8* nonnull %path, %struct.statfs.12* nonnull %buf) #0 !dbg !6244 {
entry:
  %path.addr = alloca i8*, align 8
  %buf.addr = alloca %struct.statfs.12*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !6272, metadata !DIExpression()), !dbg !6273
  store %struct.statfs.12* %buf, %struct.statfs.12** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.statfs.12** %buf.addr, metadata !6274, metadata !DIExpression()), !dbg !6275
  %0 = load i8*, i8** %path.addr, align 8, !dbg !6276
  %1 = load %struct.statfs.12*, %struct.statfs.12** %buf.addr, align 8, !dbg !6277
  %call = call i32 @__fd_statfs(i8* %0, %struct.statfs.12* %1), !dbg !6278
  ret i32 %call, !dbg !6279
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @getdents64(i32 %fd, i8* %dirp, i64 %count) #0 !dbg !6280 {
entry:
  %fd.addr = alloca i32, align 4
  %dirp.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !6281, metadata !DIExpression()), !dbg !6282
  store i8* %dirp, i8** %dirp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dirp.addr, metadata !6283, metadata !DIExpression()), !dbg !6284
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !6285, metadata !DIExpression()), !dbg !6286
  %0 = load i32, i32* %fd.addr, align 4, !dbg !6287
  %1 = load i8*, i8** %dirp.addr, align 8, !dbg !6288
  %2 = bitcast i8* %1 to %struct.dirent64.13*, !dbg !6289
  %3 = load i64, i64* %count.addr, align 8, !dbg !6290
  %conv = trunc i64 %3 to i32, !dbg !6290
  %call = call i32 @__fd_getdents(i32 %0, %struct.dirent64.13* %2, i32 %conv), !dbg !6291
  %conv1 = sext i32 %call to i64, !dbg !6291
  ret i64 %conv1, !dbg !6292
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cgc_initialize_flag_page() #6 {
entry:
  %mmap_addr = alloca i8*, align 8
  %call = call noalias i8* @malloc(i64 4096) #19
  store i8* %call, i8** %mmap_addr, align 8
  call void @cgc_try_init_prng() #15
  %0 = load %struct.cgc_prng*, %struct.cgc_prng** @cgc_internal_prng, align 8
  %1 = load i8*, i8** %mmap_addr, align 8
  call void @cgc_aes_get_bytes(%struct.cgc_prng* %0, i32 4096, i8* %1) #15
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cgc_try_init_prng() #6 {
entry:
  %prng_seed = alloca [48 x i8], align 16
  %prng_seed_hex = alloca i8*, align 8
  %pos = alloca i8*, align 8
  %i = alloca i32, align 4
  %seed = alloca %struct.cgc_aes_state*, align 8
  %0 = load %struct.cgc_prng*, %struct.cgc_prng** @cgc_internal_prng, align 8
  %cmp = icmp ne %struct.cgc_prng* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = bitcast [48 x i8]* %prng_seed to i8*
  %2 = call i8* @memcpy(i8* %1, i8* getelementptr inbounds (<{ [32 x i8], [16 x i8] }>, <{ [32 x i8], [16 x i8] }>* @__const.cgc_try_init_prng.prng_seed, i32 0, i32 0, i32 0), i64 48)
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.76, i64 0, i64 0)) #19
  store i8* %call, i8** %prng_seed_hex, align 8
  %3 = load i8*, i8** %prng_seed_hex, align 8
  %cmp1 = icmp ne i8* %3, null
  br i1 %cmp1, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %if.end
  %4 = load i8*, i8** %prng_seed_hex, align 8
  %call2 = call i64 @strlen(i8* %4) #20
  %cmp3 = icmp eq i64 %call2, 96
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %land.lhs.true
  %5 = load i8*, i8** %prng_seed_hex, align 8
  store i8* %5, i8** %pos, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then4
  %6 = load i32, i32* %i, align 4
  %cmp5 = icmp slt i32 %6, 48
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8*, i8** %pos, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* %prng_seed, i64 0, i64 %idxprom
  %call6 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.77, i64 0, i64 0), i8* %arrayidx) #19
  %9 = load i8*, i8** %pos, align 8
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 2
  store i8* %add.ptr, i8** %pos, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end7

if.end7:                                          ; preds = %for.end, %land.lhs.true, %if.end
  %call8 = call noalias i8* @malloc(i64 81) #19
  %11 = bitcast i8* %call8 to %struct.cgc_prng*
  store %struct.cgc_prng* %11, %struct.cgc_prng** @cgc_internal_prng, align 8
  %arraydecay = getelementptr inbounds [48 x i8], [48 x i8]* %prng_seed, i64 0, i64 0
  %12 = bitcast i8* %arraydecay to %struct.cgc_aes_state*
  store %struct.cgc_aes_state* %12, %struct.cgc_aes_state** %seed, align 8
  %13 = load %struct.cgc_prng*, %struct.cgc_prng** @cgc_internal_prng, align 8
  %14 = load %struct.cgc_aes_state*, %struct.cgc_aes_state** %seed, align 8
  call void @cgc_init_prng(%struct.cgc_prng* %13, %struct.cgc_aes_state* %14) #15
  br label %return

return:                                           ; preds = %if.end7, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @cgc_aes_get_bytes(%struct.cgc_prng* %prng, i32 %len, i8* %buf) #6 {
entry:
  %prng.addr = alloca %struct.cgc_prng*, align 8
  %len.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %buf_idx = alloca i32, align 4
  store %struct.cgc_prng* %prng, %struct.cgc_prng** %prng.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i32 0, i32* %buf_idx, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end, %entry
  %0 = load i32, i32* %buf_idx, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end15

while.body:                                       ; preds = %while.cond
  %2 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %random_idx = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %2, i32 0, i32 3
  %3 = load i8, i8* %random_idx, align 1
  %conv = zext i8 %3 to i32
  %cmp1 = icmp sge i32 %conv, 16
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  call void @cgc_gen_block(%struct.cgc_prng* %4) #15
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond3

while.cond3:                                      ; preds = %while.body10, %if.end
  %5 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %random_idx4 = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %5, i32 0, i32 3
  %6 = load i8, i8* %random_idx4, align 1
  %conv5 = zext i8 %6 to i32
  %cmp6 = icmp slt i32 %conv5, 16
  br i1 %cmp6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond3
  %7 = load i32, i32* %buf_idx, align 4
  %8 = load i32, i32* %len.addr, align 4
  %cmp8 = icmp ult i32 %7, %8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond3
  %9 = phi i1 [ false, %while.cond3 ], [ %cmp8, %land.rhs ]
  br i1 %9, label %while.body10, label %while.end

while.body10:                                     ; preds = %land.end
  %10 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %random_data = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %10, i32 0, i32 2
  %11 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %random_idx11 = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %11, i32 0, i32 3
  %12 = load i8, i8* %random_idx11, align 1
  %inc = add i8 %12, 1
  store i8 %inc, i8* %random_idx11, align 1
  %idxprom = zext i8 %12 to i64
  %arrayidx = getelementptr inbounds [16 x i8], [16 x i8]* %random_data, i64 0, i64 %idxprom
  %13 = load i8, i8* %arrayidx, align 1
  %14 = load i8*, i8** %buf.addr, align 8
  %15 = load i32, i32* %buf_idx, align 4
  %inc12 = add i32 %15, 1
  store i32 %inc12, i32* %buf_idx, align 4
  %idxprom13 = zext i32 %15 to i64
  %arrayidx14 = getelementptr inbounds i8, i8* %14, i64 %idxprom13
  store i8 %13, i8* %arrayidx14, align 1
  br label %while.cond3

while.end:                                        ; preds = %land.end
  br label %while.cond

while.end15:                                      ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @cgc_gen_block(%struct.cgc_prng* %prng) #6 {
entry:
  %prng.addr = alloca %struct.cgc_prng*, align 8
  %tmp = alloca [16 x i8], align 16
  %i = alloca i8, align 1
  store %struct.cgc_prng* %prng, %struct.cgc_prng** %prng.addr, align 8
  %0 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %state = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %0, i32 0, i32 0
  %datetime = getelementptr inbounds %struct.cgc_aes_state, %struct.cgc_aes_state* %state, i32 0, i32 2
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %datetime, i64 0, i64 0
  %1 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %state1 = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %1, i32 0, i32 0
  %key = getelementptr inbounds %struct.cgc_aes_state, %struct.cgc_aes_state* %state1, i32 0, i32 1
  %arraydecay2 = getelementptr inbounds [16 x i8], [16 x i8]* %key, i64 0, i64 0
  %2 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %intermediate = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %2, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [16 x i8], [16 x i8]* %intermediate, i64 0, i64 0
  call void @AES128_ECB_encrypt(i8* %arraydecay, i8* %arraydecay2, i8* %arraydecay3) #15
  %3 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %intermediate4 = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %3, i32 0, i32 1
  %arraydecay5 = getelementptr inbounds [16 x i8], [16 x i8]* %intermediate4, i64 0, i64 0
  %4 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %state6 = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %4, i32 0, i32 0
  %vec = getelementptr inbounds %struct.cgc_aes_state, %struct.cgc_aes_state* %state6, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [16 x i8], [16 x i8]* %vec, i64 0, i64 0
  %arraydecay8 = getelementptr inbounds [16 x i8], [16 x i8]* %tmp, i64 0, i64 0
  call void @cgc_xor(i8* %arraydecay5, i8* %arraydecay7, i8* %arraydecay8) #15
  %arraydecay9 = getelementptr inbounds [16 x i8], [16 x i8]* %tmp, i64 0, i64 0
  %5 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %state10 = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %5, i32 0, i32 0
  %key11 = getelementptr inbounds %struct.cgc_aes_state, %struct.cgc_aes_state* %state10, i32 0, i32 1
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %key11, i64 0, i64 0
  %6 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %random_data = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %6, i32 0, i32 2
  %arraydecay13 = getelementptr inbounds [16 x i8], [16 x i8]* %random_data, i64 0, i64 0
  call void @AES128_ECB_encrypt(i8* %arraydecay9, i8* %arraydecay12, i8* %arraydecay13) #15
  %7 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %random_idx = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %7, i32 0, i32 3
  store i8 0, i8* %random_idx, align 1
  %8 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %intermediate14 = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %8, i32 0, i32 1
  %arraydecay15 = getelementptr inbounds [16 x i8], [16 x i8]* %intermediate14, i64 0, i64 0
  %9 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %random_data16 = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %9, i32 0, i32 2
  %arraydecay17 = getelementptr inbounds [16 x i8], [16 x i8]* %random_data16, i64 0, i64 0
  %arraydecay18 = getelementptr inbounds [16 x i8], [16 x i8]* %tmp, i64 0, i64 0
  call void @cgc_xor(i8* %arraydecay15, i8* %arraydecay17, i8* %arraydecay18) #15
  %arraydecay19 = getelementptr inbounds [16 x i8], [16 x i8]* %tmp, i64 0, i64 0
  %10 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %state20 = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %10, i32 0, i32 0
  %key21 = getelementptr inbounds %struct.cgc_aes_state, %struct.cgc_aes_state* %state20, i32 0, i32 1
  %arraydecay22 = getelementptr inbounds [16 x i8], [16 x i8]* %key21, i64 0, i64 0
  %11 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %state23 = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %11, i32 0, i32 0
  %vec24 = getelementptr inbounds %struct.cgc_aes_state, %struct.cgc_aes_state* %state23, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [16 x i8], [16 x i8]* %vec24, i64 0, i64 0
  call void @AES128_ECB_encrypt(i8* %arraydecay19, i8* %arraydecay22, i8* %arraydecay25) #15
  store i8 15, i8* %i, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %12 = load i8, i8* %i, align 1
  %conv = zext i8 %12 to i32
  %cmp = icmp sge i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %state27 = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %13, i32 0, i32 0
  %datetime28 = getelementptr inbounds %struct.cgc_aes_state, %struct.cgc_aes_state* %state27, i32 0, i32 2
  %14 = load i8, i8* %i, align 1
  %idxprom = zext i8 %14 to i64
  %arrayidx = getelementptr inbounds [16 x i8], [16 x i8]* %datetime28, i64 0, i64 %idxprom
  %15 = load i8, i8* %arrayidx, align 1
  %inc = add i8 %15, 1
  store i8 %inc, i8* %arrayidx, align 1
  %16 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %state29 = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %16, i32 0, i32 0
  %datetime30 = getelementptr inbounds %struct.cgc_aes_state, %struct.cgc_aes_state* %state29, i32 0, i32 2
  %17 = load i8, i8* %i, align 1
  %idxprom31 = zext i8 %17 to i64
  %arrayidx32 = getelementptr inbounds [16 x i8], [16 x i8]* %datetime30, i64 0, i64 %idxprom31
  %18 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %18 to i32
  %cmp34 = icmp ne i32 %conv33, 0
  br i1 %cmp34, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %19 = load i8, i8* %i, align 1
  %conv36 = zext i8 %19 to i32
  %sub = sub nsw i32 %conv36, 1
  %conv37 = trunc i32 %sub to i8
  store i8 %conv37, i8* %i, align 1
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @cgc_xor(i8* %a, i8* %b, i8* %buf) #6 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %buf.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 8
  store i8* %b, i8** %b.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** %a.addr, align 8
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  %4 = load i8*, i8** %b.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %5 to i64
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i64 %idxprom1
  %6 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %6 to i32
  %xor = xor i32 %conv, %conv3
  %conv4 = trunc i32 %xor to i8
  %7 = load i8*, i8** %buf.addr, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom5 = sext i32 %8 to i64
  %arrayidx6 = getelementptr inbounds i8, i8* %7, i64 %idxprom5
  store i8 %conv4, i8* %arrayidx6, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind
declare i8* @getenv(i8*) #3

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #9

; Function Attrs: nounwind
declare i32 @__isoc99_sscanf(i8*, i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define void @cgc_init_prng(%struct.cgc_prng* %prng, %struct.cgc_aes_state* %seed) #6 {
entry:
  %prng.addr = alloca %struct.cgc_prng*, align 8
  %seed.addr = alloca %struct.cgc_aes_state*, align 8
  store %struct.cgc_prng* %prng, %struct.cgc_prng** %prng.addr, align 8
  store %struct.cgc_aes_state* %seed, %struct.cgc_aes_state** %seed.addr, align 8
  %0 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %1 = bitcast %struct.cgc_prng* %0 to i8*
  %call = call i8* @memset(i8* %1, i32 0, i64 81) #19
  %2 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %state = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %2, i32 0, i32 0
  %3 = bitcast %struct.cgc_aes_state* %state to i8*
  %4 = load %struct.cgc_aes_state*, %struct.cgc_aes_state** %seed.addr, align 8
  %5 = bitcast %struct.cgc_aes_state* %4 to i8*
  %call1 = call i8* @memcpy(i8* %3, i8* %5, i64 48) #19
  %6 = load %struct.cgc_prng*, %struct.cgc_prng** %prng.addr, align 8
  %random_idx = getelementptr inbounds %struct.cgc_prng, %struct.cgc_prng* %6, i32 0, i32 3
  store i8 16, i8* %random_idx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @cgc_check_timeout(%struct.cgc_timeval* %timeout) #6 {
entry:
  %retval = alloca i32, align 4
  %timeout.addr = alloca %struct.cgc_timeval*, align 8
  store %struct.cgc_timeval* %timeout, %struct.cgc_timeval** %timeout.addr, align 8
  %0 = load %struct.cgc_timeval*, %struct.cgc_timeval** %timeout.addr, align 8
  %tobool = icmp ne %struct.cgc_timeval* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %1 = load %struct.cgc_timeval*, %struct.cgc_timeval** %timeout.addr, align 8
  %tv_sec = getelementptr inbounds %struct.cgc_timeval, %struct.cgc_timeval* %1, i32 0, i32 0
  %2 = load i32, i32* %tv_sec, align 4
  %cmp = icmp sgt i32 0, %2
  br i1 %cmp, label %if.then2, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %3 = load %struct.cgc_timeval*, %struct.cgc_timeval** %timeout.addr, align 8
  %tv_usec = getelementptr inbounds %struct.cgc_timeval, %struct.cgc_timeval* %3, i32 0, i32 1
  %4 = load i32, i32* %tv_usec, align 4
  %cmp1 = icmp sgt i32 0, %4
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %lor.lhs.false, %if.else
  store i32 3, i32* %retval, align 4
  br label %return

if.else3:                                         ; preds = %lor.lhs.false
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define void @cgc__terminate(i32 %status) #10 {
entry:
  %status.addr = alloca i32, align 4
  store i32 %status, i32* %status.addr, align 4
  %0 = load i32, i32* %status.addr, align 4
  call void @exit(i32 %0) #21
  unreachable
}

; Function Attrs: noreturn nounwind
declare void @exit(i32) #8

; Function Attrs: noinline nounwind optnone uwtable
define i32 @cgc_transmit(i32 %fd, i8* %buf, i64 %count, i64* %tx_bytes) #6 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %tx_bytes.addr = alloca i64*, align 8
  %ret = alloca i64, align 8
  store i32 %fd, i32* %fd.addr, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i64* %tx_bytes, i64** %tx_bytes.addr, align 8
  %0 = load i32, i32* %fd.addr, align 4
  %1 = load i8*, i8** %buf.addr, align 8
  %2 = load i64, i64* %count.addr, align 8
  %call = call i64 @write(i32 %0, i8* %1, i64 %2) #15
  store i64 %call, i64* %ret, align 8
  %3 = load i64, i64* %ret, align 8
  %cmp = icmp slt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #22
  %4 = load i32, i32* %call1, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %5 = load i64*, i64** %tx_bytes.addr, align 8
  %cmp2 = icmp ne i64* %5, null
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %6 = load i64, i64* %ret, align 8
  %7 = load i64*, i64** %tx_bytes.addr, align 8
  store i64 %6, i64* %7, align 8
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.else
  br label %if.end4

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end4, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #11

; Function Attrs: noinline nounwind optnone uwtable
define i32 @cgc_receive(i32 %fd, i8* %buf, i64 %count, i64* %rx_bytes) #6 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %rx_bytes.addr = alloca i64*, align 8
  %ret = alloca i64, align 8
  store i32 %fd, i32* %fd.addr, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i64* %rx_bytes, i64** %rx_bytes.addr, align 8
  %0 = load i32, i32* %fd.addr, align 4
  %1 = load i8*, i8** %buf.addr, align 8
  %2 = load i64, i64* %count.addr, align 8
  %call = call i64 @read(i32 %0, i8* %1, i64 %2) #15
  store i64 %call, i64* %ret, align 8
  %3 = load i64, i64* %ret, align 8
  %cmp = icmp slt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #22
  %4 = load i32, i32* %call1, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %5 = load i64*, i64** %rx_bytes.addr, align 8
  %cmp2 = icmp ne i64* %5, null
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %6 = load i64, i64* %ret, align 8
  %7 = load i64*, i64** %rx_bytes.addr, align 8
  store i64 %6, i64* %7, align 8
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.else
  br label %if.end4

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end4, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @cgc_fdwait(i32 %nfds, %struct.cgc_fd_set* %readfds, %struct.cgc_fd_set* %writefds, %struct.cgc_timeval* %timeout, i32* %readyfds) #6 {
entry:
  %retval = alloca i32, align 4
  %nfds.addr = alloca i32, align 4
  %readfds.addr = alloca %struct.cgc_fd_set*, align 8
  %writefds.addr = alloca %struct.cgc_fd_set*, align 8
  %timeout.addr = alloca %struct.cgc_timeval*, align 8
  %readyfds.addr = alloca i32*, align 8
  %ret = alloca i32, align 4
  %actual_num_fds = alloca i32, align 4
  %max_wait_time = alloca %struct.timespec.15, align 8
  %read_fds = alloca %struct.cgc_fd_set, align 8
  %write_fds = alloca %struct.cgc_fd_set, align 8
  %__d0 = alloca i32, align 4
  %__d1 = alloca i32, align 4
  %__d07 = alloca i32, align 4
  %__d18 = alloca i32, align 4
  %__i = alloca i32, align 4
  %__i46 = alloca i32, align 4
  %num_selected_fds = alloca i32, align 4
  store i32 %nfds, i32* %nfds.addr, align 4
  store %struct.cgc_fd_set* %readfds, %struct.cgc_fd_set** %readfds.addr, align 8
  store %struct.cgc_fd_set* %writefds, %struct.cgc_fd_set** %writefds.addr, align 8
  store %struct.cgc_timeval* %timeout, %struct.cgc_timeval** %timeout.addr, align 8
  store i32* %readyfds, i32** %readyfds.addr, align 8
  %0 = load %struct.cgc_timeval*, %struct.cgc_timeval** %timeout.addr, align 8
  %call = call i32 @cgc_check_timeout(%struct.cgc_timeval* %0) #15
  store i32 %call, i32* %ret, align 4
  store i32 0, i32* %actual_num_fds, align 4
  %1 = bitcast %struct.timespec.15* %max_wait_time to i8*
  %2 = call i8* @memset(i8* %1, i32 0, i64 16)
  %3 = load i32, i32* %ret, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %ret, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %nfds.addr, align 4
  %cmp = icmp sgt i32 0, %5
  br i1 %cmp, label %if.then3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load i32, i32* %nfds.addr, align 4
  %conv = sext i32 %6 to i64
  %cmp1 = icmp ult i64 64, %conv
  br i1 %cmp1, label %if.then3, label %if.end

if.then3:                                         ; preds = %lor.lhs.false, %if.else
  store i32 3, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end4

if.end4:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end4
  %__fds_bits = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %read_fds, i32 0, i32 0
  %arrayidx = getelementptr inbounds [16 x i64], [16 x i64]* %__fds_bits, i64 0, i64 0
  %7 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %arrayidx) #7, !srcloc !6293
  %asmresult = extractvalue { i64, i64* } %7, 0
  %asmresult5 = extractvalue { i64, i64* } %7, 1
  %8 = trunc i64 %asmresult to i32
  store i32 %8, i32* %__d0, align 4
  %9 = ptrtoint i64* %asmresult5 to i64
  %10 = trunc i64 %9 to i32
  store i32 %10, i32* %__d1, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body6

do.body6:                                         ; preds = %do.end
  %__fds_bits9 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %write_fds, i32 0, i32 0
  %arrayidx10 = getelementptr inbounds [16 x i64], [16 x i64]* %__fds_bits9, i64 0, i64 0
  %11 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %arrayidx10) #7, !srcloc !6294
  %asmresult11 = extractvalue { i64, i64* } %11, 0
  %asmresult12 = extractvalue { i64, i64* } %11, 1
  %12 = trunc i64 %asmresult11 to i32
  store i32 %12, i32* %__d07, align 4
  %13 = ptrtoint i64* %asmresult12 to i64
  %14 = trunc i64 %13 to i32
  store i32 %14, i32* %__d18, align 4
  br label %do.end13

do.end13:                                         ; preds = %do.body6
  %15 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %readfds.addr, align 8
  %tobool14 = icmp ne %struct.cgc_fd_set* %15, null
  br i1 %tobool14, label %if.then15, label %if.end21

if.then15:                                        ; preds = %do.end13
  %16 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %readfds.addr, align 8
  %call16 = call i32 @cgc_copy_cgc_fd_set(%struct.cgc_fd_set* %16, %struct.cgc_fd_set* %read_fds, i32* %actual_num_fds) #15
  store i32 %call16, i32* %ret, align 4
  %cmp17 = icmp ne i32 0, %call16
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.then15
  %17 = load i32, i32* %ret, align 4
  store i32 %17, i32* %retval, align 4
  br label %return

if.end20:                                         ; preds = %if.then15
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %do.end13
  %18 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %writefds.addr, align 8
  %tobool22 = icmp ne %struct.cgc_fd_set* %18, null
  br i1 %tobool22, label %if.then23, label %if.end29

if.then23:                                        ; preds = %if.end21
  %19 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %writefds.addr, align 8
  %call24 = call i32 @cgc_copy_cgc_fd_set(%struct.cgc_fd_set* %19, %struct.cgc_fd_set* %write_fds, i32* %actual_num_fds) #15
  store i32 %call24, i32* %ret, align 4
  %cmp25 = icmp ne i32 0, %call24
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.then23
  %20 = load i32, i32* %ret, align 4
  store i32 %20, i32* %retval, align 4
  br label %return

if.end28:                                         ; preds = %if.then23
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.end21
  %21 = load i32, i32* %actual_num_fds, align 4
  %22 = load i32, i32* %nfds.addr, align 4
  %cmp30 = icmp ne i32 %21, %22
  br i1 %cmp30, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.end29
  store i32 22, i32* %retval, align 4
  br label %return

if.end33:                                         ; preds = %if.end29
  %23 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %readfds.addr, align 8
  %tobool34 = icmp ne %struct.cgc_fd_set* %23, null
  br i1 %tobool34, label %if.then35, label %if.end42

if.then35:                                        ; preds = %if.end33
  br label %do.body36

do.body36:                                        ; preds = %if.then35
  store i32 0, i32* %__i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.body36
  %24 = load i32, i32* %__i, align 4
  %conv37 = sext i32 %24 to i64
  %cmp38 = icmp ult i64 %conv37, 16
  br i1 %cmp38, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %25 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %readfds.addr, align 8
  %_fd_bits = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %25, i32 0, i32 0
  %26 = load i32, i32* %__i, align 4
  %idxprom = sext i32 %26 to i64
  %arrayidx40 = getelementptr inbounds [16 x i64], [16 x i64]* %_fd_bits, i64 0, i64 %idxprom
  store i64 0, i64* %arrayidx40, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %__i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %__i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.end41

do.end41:                                         ; preds = %for.end
  br label %if.end42

if.end42:                                         ; preds = %do.end41, %if.end33
  %28 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %writefds.addr, align 8
  %tobool43 = icmp ne %struct.cgc_fd_set* %28, null
  br i1 %tobool43, label %if.then44, label %if.end59

if.then44:                                        ; preds = %if.end42
  br label %do.body45

do.body45:                                        ; preds = %if.then44
  store i32 0, i32* %__i46, align 4
  br label %for.cond47

for.cond47:                                       ; preds = %for.inc55, %do.body45
  %29 = load i32, i32* %__i46, align 4
  %conv48 = sext i32 %29 to i64
  %cmp49 = icmp ult i64 %conv48, 16
  br i1 %cmp49, label %for.body51, label %for.end57

for.body51:                                       ; preds = %for.cond47
  %30 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %writefds.addr, align 8
  %_fd_bits52 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %30, i32 0, i32 0
  %31 = load i32, i32* %__i46, align 4
  %idxprom53 = sext i32 %31 to i64
  %arrayidx54 = getelementptr inbounds [16 x i64], [16 x i64]* %_fd_bits52, i64 0, i64 %idxprom53
  store i64 0, i64* %arrayidx54, align 8
  br label %for.inc55

for.inc55:                                        ; preds = %for.body51
  %32 = load i32, i32* %__i46, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %__i46, align 4
  br label %for.cond47

for.end57:                                        ; preds = %for.cond47
  br label %do.end58

do.end58:                                         ; preds = %for.end57
  br label %if.end59

if.end59:                                         ; preds = %do.end58, %if.end42
  %33 = load %struct.cgc_timeval*, %struct.cgc_timeval** %timeout.addr, align 8
  %tobool60 = icmp ne %struct.cgc_timeval* %33, null
  br i1 %tobool60, label %if.then61, label %if.end66

if.then61:                                        ; preds = %if.end59
  %34 = load %struct.cgc_timeval*, %struct.cgc_timeval** %timeout.addr, align 8
  %tv_sec = getelementptr inbounds %struct.cgc_timeval, %struct.cgc_timeval* %34, i32 0, i32 0
  %35 = load i32, i32* %tv_sec, align 4
  %conv62 = sext i32 %35 to i64
  %tv_sec63 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %max_wait_time, i32 0, i32 0
  store i64 %conv62, i64* %tv_sec63, align 8
  %36 = load %struct.cgc_timeval*, %struct.cgc_timeval** %timeout.addr, align 8
  %tv_usec = getelementptr inbounds %struct.cgc_timeval, %struct.cgc_timeval* %36, i32 0, i32 1
  %37 = load i32, i32* %tv_usec, align 4
  %conv64 = sext i32 %37 to i64
  %tv_usec65 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %max_wait_time, i32 0, i32 1
  store i64 %conv64, i64* %tv_usec65, align 8
  br label %if.end66

if.end66:                                         ; preds = %if.then61, %if.end59
  %38 = load i32, i32* %nfds.addr, align 4
  %39 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %readfds.addr, align 8
  %tobool67 = icmp ne %struct.cgc_fd_set* %39, null
  br i1 %tobool67, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end66
  br label %cond.end

cond.false:                                       ; preds = %if.end66
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.cgc_fd_set* [ %read_fds, %cond.true ], [ null, %cond.false ]
  %40 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %writefds.addr, align 8
  %tobool68 = icmp ne %struct.cgc_fd_set* %40, null
  br i1 %tobool68, label %cond.true69, label %cond.false70

cond.true69:                                      ; preds = %cond.end
  br label %cond.end71

cond.false70:                                     ; preds = %cond.end
  br label %cond.end71

cond.end71:                                       ; preds = %cond.false70, %cond.true69
  %cond72 = phi %struct.cgc_fd_set* [ %write_fds, %cond.true69 ], [ null, %cond.false70 ]
  %41 = load %struct.cgc_timeval*, %struct.cgc_timeval** %timeout.addr, align 8
  %tobool73 = icmp ne %struct.cgc_timeval* %41, null
  br i1 %tobool73, label %cond.true74, label %cond.false75

cond.true74:                                      ; preds = %cond.end71
  br label %cond.end76

cond.false75:                                     ; preds = %cond.end71
  br label %cond.end76

cond.end76:                                       ; preds = %cond.false75, %cond.true74
  %cond77 = phi %struct.timespec.15* [ %max_wait_time, %cond.true74 ], [ null, %cond.false75 ]
  %call78 = call i32 @select(i32 %38, %struct.cgc_fd_set* %cond, %struct.cgc_fd_set* %cond72, %struct.cgc_fd_set* null, %struct.timespec.15* %cond77) #15
  store i32 %call78, i32* %num_selected_fds, align 4
  %42 = load i32, i32* %num_selected_fds, align 4
  %cmp79 = icmp slt i32 %42, 0
  br i1 %cmp79, label %if.then81, label %if.end83

if.then81:                                        ; preds = %cond.end76
  %call82 = call i32* @__errno_location() #22
  %43 = load i32, i32* %call82, align 4
  store i32 %43, i32* %retval, align 4
  br label %return

if.end83:                                         ; preds = %cond.end76
  %44 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %readfds.addr, align 8
  %tobool84 = icmp ne %struct.cgc_fd_set* %44, null
  br i1 %tobool84, label %if.then85, label %if.end86

if.then85:                                        ; preds = %if.end83
  %45 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %readfds.addr, align 8
  call void @cgc_copy_os_fd_set(%struct.cgc_fd_set* %read_fds, %struct.cgc_fd_set* %45) #15
  br label %if.end86

if.end86:                                         ; preds = %if.then85, %if.end83
  %46 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %writefds.addr, align 8
  %tobool87 = icmp ne %struct.cgc_fd_set* %46, null
  br i1 %tobool87, label %if.then88, label %if.end89

if.then88:                                        ; preds = %if.end86
  %47 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %writefds.addr, align 8
  call void @cgc_copy_os_fd_set(%struct.cgc_fd_set* %write_fds, %struct.cgc_fd_set* %47) #15
  br label %if.end89

if.end89:                                         ; preds = %if.then88, %if.end86
  %48 = load i32*, i32** %readyfds.addr, align 8
  %tobool90 = icmp ne i32* %48, null
  br i1 %tobool90, label %if.then91, label %if.end92

if.then91:                                        ; preds = %if.end89
  %49 = load i32, i32* %num_selected_fds, align 4
  %50 = load i32*, i32** %readyfds.addr, align 8
  store i32 %49, i32* %50, align 4
  br label %if.end92

if.end92:                                         ; preds = %if.then91, %if.end89
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end92, %if.then81, %if.then32, %if.then27, %if.then19, %if.then3, %if.then
  %51 = load i32, i32* %retval, align 4
  ret i32 %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cgc_copy_cgc_fd_set(%struct.cgc_fd_set* %cgc_fds, %struct.cgc_fd_set* %os_fds, i32* %num_fds) #6 {
entry:
  %retval = alloca i32, align 4
  %cgc_fds.addr = alloca %struct.cgc_fd_set*, align 8
  %os_fds.addr = alloca %struct.cgc_fd_set*, align 8
  %num_fds.addr = alloca i32*, align 8
  %fd = alloca i32, align 4
  store %struct.cgc_fd_set* %cgc_fds, %struct.cgc_fd_set** %cgc_fds.addr, align 8
  store %struct.cgc_fd_set* %os_fds, %struct.cgc_fd_set** %os_fds.addr, align 8
  store i32* %num_fds, i32** %num_fds.addr, align 8
  store i32 0, i32* %fd, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %fd, align 4
  %conv = zext i32 %0 to i64
  %cmp = icmp ult i64 %conv, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %cgc_fds.addr, align 8
  %_fd_bits = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %1, i32 0, i32 0
  %2 = load i32, i32* %fd, align 4
  %conv2 = zext i32 %2 to i64
  %div = udiv i64 %conv2, 64
  %arrayidx = getelementptr inbounds [16 x i64], [16 x i64]* %_fd_bits, i64 0, i64 %div
  %3 = load i64, i64* %arrayidx, align 8
  %4 = load i32, i32* %fd, align 4
  %conv3 = zext i32 %4 to i64
  %and = and i64 %conv3, 63
  %sh_prom = trunc i64 %and to i32
  %int_cast_to_i64 = zext i32 %sh_prom to i64
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i64)
  %shl = shl i32 1, %sh_prom, !klee.check.shift !2755
  %conv4 = sext i32 %shl to i64
  %and5 = and i64 %3, %conv4
  %tobool = icmp ne i64 %and5, 0
  br i1 %tobool, label %if.then, label %if.end17

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %fd, align 4
  %cmp6 = icmp uge i32 %5, 23
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load i32, i32* %fd, align 4
  %cmp9 = icmp ugt i32 %6, 64
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  br label %for.inc

if.end12:                                         ; preds = %if.end
  %7 = load i32, i32* %fd, align 4
  %rem = urem i32 %7, 64
  %sh_prom13 = zext i32 %rem to i64
  call void @klee_overshift_check(i64 64, i64 %sh_prom13)
  %shl14 = shl i64 1, %sh_prom13, !klee.check.shift !2755
  %8 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %os_fds.addr, align 8
  %__fds_bits = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %8, i32 0, i32 0
  %9 = load i32, i32* %fd, align 4
  %div15 = udiv i32 %9, 64
  %idxprom = zext i32 %div15 to i64
  %arrayidx16 = getelementptr inbounds [16 x i64], [16 x i64]* %__fds_bits, i64 0, i64 %idxprom
  %10 = load i64, i64* %arrayidx16, align 8
  %or = or i64 %10, %shl14
  store i64 %or, i64* %arrayidx16, align 8
  %11 = load i32*, i32** %num_fds.addr, align 8
  %12 = load i32, i32* %11, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %11, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.end12, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end17, %if.then11
  %13 = load i32, i32* %fd, align 4
  %inc18 = add i32 %13, 1
  store i32 %inc18, i32* %fd, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then8
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cgc_copy_os_fd_set(%struct.cgc_fd_set* %os_fds, %struct.cgc_fd_set* %cgc_fds) #6 {
entry:
  %os_fds.addr = alloca %struct.cgc_fd_set*, align 8
  %cgc_fds.addr = alloca %struct.cgc_fd_set*, align 8
  %fd = alloca i32, align 4
  store %struct.cgc_fd_set* %os_fds, %struct.cgc_fd_set** %os_fds.addr, align 8
  store %struct.cgc_fd_set* %cgc_fds, %struct.cgc_fd_set** %cgc_fds.addr, align 8
  store i32 0, i32* %fd, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %fd, align 4
  %conv = zext i32 %0 to i64
  %cmp = icmp ult i64 %conv, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %os_fds.addr, align 8
  %__fds_bits = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %1, i32 0, i32 0
  %2 = load i32, i32* %fd, align 4
  %div = udiv i32 %2, 64
  %idxprom = zext i32 %div to i64
  %arrayidx = getelementptr inbounds [16 x i64], [16 x i64]* %__fds_bits, i64 0, i64 %idxprom
  %3 = load i64, i64* %arrayidx, align 8
  %4 = load i32, i32* %fd, align 4
  %rem = urem i32 %4, 64
  %sh_prom = zext i32 %rem to i64
  call void @klee_overshift_check(i64 64, i64 %sh_prom)
  %shl = shl i64 1, %sh_prom, !klee.check.shift !2755
  %and = and i64 %3, %shl
  %cmp2 = icmp ne i64 %and, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %fd, align 4
  %conv4 = zext i32 %5 to i64
  %and5 = and i64 %conv4, 63
  %sh_prom6 = trunc i64 %and5 to i32
  %int_cast_to_i64 = zext i32 %sh_prom6 to i64
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i64)
  %shl7 = shl i32 1, %sh_prom6, !klee.check.shift !2755
  %conv8 = sext i32 %shl7 to i64
  %6 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %cgc_fds.addr, align 8
  %_fd_bits = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %6, i32 0, i32 0
  %7 = load i32, i32* %fd, align 4
  %conv9 = zext i32 %7 to i64
  %div10 = udiv i64 %conv9, 64
  %arrayidx11 = getelementptr inbounds [16 x i64], [16 x i64]* %_fd_bits, i64 0, i64 %div10
  %8 = load i64, i64* %arrayidx11, align 8
  %or = or i64 %8, %conv8
  store i64 %or, i64* %arrayidx11, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %fd, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %fd, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @cgc_allocate(i64 %length, i32 %is_executable, i8** %addr) #6 {
entry:
  %retval = alloca i32, align 4
  %length.addr = alloca i64, align 8
  %is_executable.addr = alloca i32, align 4
  %addr.addr = alloca i8**, align 8
  %page_perms = alloca i32, align 4
  %return_address = alloca i8*, align 8
  store i64 %length, i64* %length.addr, align 8
  store i32 %is_executable, i32* %is_executable.addr, align 4
  store i8** %addr, i8*** %addr.addr, align 8
  store i32 3, i32* %page_perms, align 4
  %0 = load i32, i32* %is_executable.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %page_perms, align 4
  %or = or i32 %1, 4
  store i32 %or, i32* %page_perms, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %length.addr, align 8
  %call = call noalias i8* @malloc(i64 %2) #19
  store i8* %call, i8** %return_address, align 8
  %3 = load i8*, i8** %return_address, align 8
  %cmp = icmp eq i8* %3, null
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %call2 = call i32* @__errno_location() #22
  %4 = load i32, i32* %call2, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %5 = load i8*, i8** %return_address, align 8
  %6 = load i64, i64* %length.addr, align 8
  %7 = load i32, i32* %page_perms, align 4
  %call4 = call i32 @mprotect(i8* %5, i64 %6, i32 %7) #19
  %8 = load i8**, i8*** %addr.addr, align 8
  %tobool5 = icmp ne i8** %8, null
  br i1 %tobool5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end3
  %9 = load i8*, i8** %return_address, align 8
  %10 = load i8**, i8*** %addr.addr, align 8
  store i8* %9, i8** %10, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end3
  %11 = load i8*, i8** %return_address, align 8
  %12 = load i64, i64* %length.addr, align 8
  %call8 = call i8* @memset(i8* %11, i32 0, i64 %12) #19
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end7, %if.then1
  %13 = load i32, i32* %retval, align 4
  ret i32 %13
}

; Function Attrs: nounwind
declare i32 @mprotect(i8*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define i32 @cgc_deallocate(i8* %addr, i64 %length) #6 {
entry:
  %retval = alloca i32, align 4
  %addr.addr = alloca i8*, align 8
  %length.addr = alloca i64, align 8
  %ret = alloca i32, align 4
  store i8* %addr, i8** %addr.addr, align 8
  store i64 %length, i64* %length.addr, align 8
  %0 = load i8*, i8** %addr.addr, align 8
  %1 = load i64, i64* %length.addr, align 8
  %call = call i32 @munmap(i8* %0, i64 %1) #19
  store i32 %call, i32* %ret, align 4
  %2 = load i32, i32* %ret, align 4
  %cmp = icmp slt i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #22
  %3 = load i32, i32* %call1, align 4
  store i32 %3, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @cgc_random(i8* %buf, i64 %count, i64* %rnd_bytes) #6 {
entry:
  %buf.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %rnd_bytes.addr = alloca i64*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i64* %rnd_bytes, i64** %rnd_bytes.addr, align 8
  call void @cgc_try_init_prng() #15
  %0 = load %struct.cgc_prng*, %struct.cgc_prng** @cgc_internal_prng, align 8
  %1 = load i64, i64* %count.addr, align 8
  %conv = trunc i64 %1 to i32
  %2 = load i8*, i8** %buf.addr, align 8
  call void @cgc_aes_get_bytes(%struct.cgc_prng* %0, i32 %conv, i8* %2) #15
  %3 = load i64*, i64** %rnd_bytes.addr, align 8
  %tobool = icmp ne i64* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %count.addr, align 8
  %5 = load i64*, i64** %rnd_bytes.addr, align 8
  store i64 %4, i64* %5, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @access(i8* nonnull %pathname, i32 %mode) #0 !dbg !6295 {
entry:
  %retval = alloca i32, align 4
  %pathname.addr = alloca i8*, align 8
  %mode.addr = alloca i32, align 4
  %dfile = alloca %struct.exe_disk_file_t.17*, align 8
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !6298, metadata !DIExpression()), !dbg !6299
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6300, metadata !DIExpression()), !dbg !6301
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %dfile, metadata !6302, metadata !DIExpression()), !dbg !6328
  %0 = load i8*, i8** %pathname.addr, align 8, !dbg !6329
  %call = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %0), !dbg !6330
  store %struct.exe_disk_file_t.17* %call, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !6328
  %1 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !6331
  %tobool = icmp ne %struct.exe_disk_file_t.17* %1, null, !dbg !6331
  br i1 %tobool, label %if.then, label %if.end, !dbg !6333

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !6334
  br label %return, !dbg !6334

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %pathname.addr, align 8, !dbg !6336
  %call1 = call i8* @__concretize_string(i8* %2), !dbg !6337
  %3 = load i32, i32* %mode.addr, align 4, !dbg !6338
  %call2 = call i64 (i64, ...) @syscall(i64 21, i8* %call1, i32 %3) #7, !dbg !6339
  %conv = trunc i64 %call2 to i32, !dbg !6339
  store i32 %conv, i32* %retval, align 4, !dbg !6340
  br label %return, !dbg !6340

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4, !dbg !6341
  ret i32 %4, !dbg !6341
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.exe_disk_file_t.17* @__get_sym_file(i8* %pathname) #0 !dbg !6342 {
entry:
  %retval = alloca %struct.exe_disk_file_t.17*, align 8
  %pathname.addr = alloca i8*, align 8
  %c = alloca i8, align 1
  %i = alloca i32, align 4
  %df = alloca %struct.exe_disk_file_t.17*, align 8
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !6345, metadata !DIExpression()), !dbg !6346
  %0 = load i8*, i8** %pathname.addr, align 8, !dbg !6347
  %tobool = icmp ne i8* %0, null, !dbg !6347
  br i1 %tobool, label %if.end, label %if.then, !dbg !6349

if.then:                                          ; preds = %entry
  store %struct.exe_disk_file_t.17* null, %struct.exe_disk_file_t.17** %retval, align 8, !dbg !6350
  br label %return, !dbg !6350

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %c, metadata !6351, metadata !DIExpression()), !dbg !6352
  %1 = load i8*, i8** %pathname.addr, align 8, !dbg !6353
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !6353
  %2 = load i8, i8* %arrayidx, align 1, !dbg !6353
  store i8 %2, i8* %c, align 1, !dbg !6352
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6354, metadata !DIExpression()), !dbg !6355
  %3 = load i8, i8* %c, align 1, !dbg !6356
  %conv = sext i8 %3 to i32, !dbg !6356
  %cmp = icmp eq i32 %conv, 0, !dbg !6358
  br i1 %cmp, label %if.then6, label %lor.lhs.false, !dbg !6359

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i8*, i8** %pathname.addr, align 8, !dbg !6360
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i64 1, !dbg !6360
  %5 = load i8, i8* %arrayidx2, align 1, !dbg !6360
  %conv3 = sext i8 %5 to i32, !dbg !6360
  %cmp4 = icmp ne i32 %conv3, 0, !dbg !6361
  br i1 %cmp4, label %if.then6, label %if.end7, !dbg !6362

if.then6:                                         ; preds = %lor.lhs.false, %if.end
  store %struct.exe_disk_file_t.17* null, %struct.exe_disk_file_t.17** %retval, align 8, !dbg !6363
  br label %return, !dbg !6363

if.end7:                                          ; preds = %lor.lhs.false
  store i32 0, i32* %i, align 4, !dbg !6364
  br label %for.cond, !dbg !6366

for.cond:                                         ; preds = %for.inc, %if.end7
  %6 = load i32, i32* %i, align 4, !dbg !6367
  %7 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 0), align 8, !dbg !6369
  %cmp8 = icmp ult i32 %6, %7, !dbg !6370
  br i1 %cmp8, label %for.body, label %for.end, !dbg !6371

for.body:                                         ; preds = %for.cond
  %8 = load i8, i8* %c, align 1, !dbg !6372
  %conv10 = sext i8 %8 to i32, !dbg !6372
  %9 = load i32, i32* %i, align 4, !dbg !6375
  %conv11 = trunc i32 %9 to i8, !dbg !6376
  %conv12 = sext i8 %conv11 to i32, !dbg !6376
  %add = add nsw i32 65, %conv12, !dbg !6377
  %cmp13 = icmp eq i32 %conv10, %add, !dbg !6378
  br i1 %cmp13, label %if.then15, label %for.inc, !dbg !6379

if.then15:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %df, metadata !6380, metadata !DIExpression()), !dbg !6382
  %10 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 4), align 8, !dbg !6383
  %11 = load i32, i32* %i, align 4, !dbg !6384
  %idxprom = zext i32 %11 to i64, !dbg !6385
  %arrayidx16 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %10, i64 %idxprom, !dbg !6385
  store %struct.exe_disk_file_t.17* %arrayidx16, %struct.exe_disk_file_t.17** %df, align 8, !dbg !6382
  %12 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df, align 8, !dbg !6386
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %12, i32 0, i32 2, !dbg !6388
  %13 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !6388
  %st_ino = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %13, i32 0, i32 1, !dbg !6389
  %14 = load i64, i64* %st_ino, align 8, !dbg !6389
  %cmp17 = icmp eq i64 %14, 0, !dbg !6390
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !6391

if.then19:                                        ; preds = %if.then15
  store %struct.exe_disk_file_t.17* null, %struct.exe_disk_file_t.17** %retval, align 8, !dbg !6392
  br label %return, !dbg !6392

if.end20:                                         ; preds = %if.then15
  %15 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df, align 8, !dbg !6393
  store %struct.exe_disk_file_t.17* %15, %struct.exe_disk_file_t.17** %retval, align 8, !dbg !6394
  br label %return, !dbg !6394

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4, !dbg !6395
  %inc = add i32 %16, 1, !dbg !6395
  store i32 %inc, i32* %i, align 4, !dbg !6395
  br label %for.cond, !dbg !6396, !llvm.loop !6397

for.end:                                          ; preds = %for.cond
  store %struct.exe_disk_file_t.17* null, %struct.exe_disk_file_t.17** %retval, align 8, !dbg !6399
  br label %return, !dbg !6399

return:                                           ; preds = %for.end, %if.end20, %if.then19, %if.then6, %if.then
  %17 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %retval, align 8, !dbg !6400
  ret %struct.exe_disk_file_t.17* %17, !dbg !6400
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @__concretize_string(i8* %s) #0 !dbg !6401 {
entry:
  %s.addr = alloca i8*, align 8
  %sc = alloca i8*, align 8
  %i = alloca i32, align 4
  %c = alloca i8, align 1
  %cc = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !6404, metadata !DIExpression()), !dbg !6405
  call void @llvm.dbg.declare(metadata i8** %sc, metadata !6406, metadata !DIExpression()), !dbg !6407
  %0 = load i8*, i8** %s.addr, align 8, !dbg !6408
  %call = call i8* @__concretize_ptr(i8* %0), !dbg !6409
  store i8* %call, i8** %sc, align 8, !dbg !6407
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6410, metadata !DIExpression()), !dbg !6411
  store i32 0, i32* %i, align 4, !dbg !6412
  br label %for.cond, !dbg !6414

for.cond:                                         ; preds = %for.inc, %entry
  call void @llvm.dbg.declare(metadata i8* %c, metadata !6415, metadata !DIExpression()), !dbg !6418
  %1 = load i8*, i8** %sc, align 8, !dbg !6419
  %2 = load i8, i8* %1, align 1, !dbg !6420
  store i8 %2, i8* %c, align 1, !dbg !6418
  %3 = load i8, i8* %c, align 1, !dbg !6421
  %conv = sext i8 %3 to i64, !dbg !6421
  %call1 = call i32 @klee_is_symbolic(i64 %conv), !dbg !6423
  %tobool = icmp ne i32 %call1, 0, !dbg !6423
  br i1 %tobool, label %if.end4, label %if.then, !dbg !6424

if.then:                                          ; preds = %for.cond
  %4 = load i8, i8* %c, align 1, !dbg !6425
  %tobool2 = icmp ne i8 %4, 0, !dbg !6425
  br i1 %tobool2, label %for.inc, label %for.end, !dbg !6428

if.end4:                                          ; preds = %for.cond
  %5 = load i32, i32* %i, align 4, !dbg !6429
  %6 = load i32, i32* %i, align 4, !dbg !6431
  %sub = sub i32 %6, 1, !dbg !6432
  %and = and i32 %5, %sub, !dbg !6433
  %tobool5 = icmp ne i32 %and, 0, !dbg !6433
  %7 = load i8, i8* %c, align 1, !dbg !6434
  br i1 %tobool5, label %if.else14, label %if.then6, !dbg !6435

if.then6:                                         ; preds = %if.end4
  %tobool7 = icmp ne i8 %7, 0, !dbg !6436
  br i1 %tobool7, label %if.else, label %if.then8, !dbg !6439

if.then8:                                         ; preds = %if.then6
  %8 = load i8*, i8** %sc, align 8, !dbg !6440
  store i8 0, i8* %8, align 1, !dbg !6442
  br label %for.end, !dbg !6443

if.else:                                          ; preds = %if.then6
  %9 = load i8, i8* %c, align 1, !dbg !6444
  %conv9 = sext i8 %9 to i32, !dbg !6444
  %cmp = icmp eq i32 %conv9, 47, !dbg !6446
  br i1 %cmp, label %if.then11, label %for.inc, !dbg !6447

if.then11:                                        ; preds = %if.else
  %10 = load i8*, i8** %sc, align 8, !dbg !6448
  store i8 47, i8* %10, align 1, !dbg !6450
  br label %for.inc, !dbg !6451

if.else14:                                        ; preds = %if.end4
  call void @llvm.dbg.declare(metadata i8* %cc, metadata !6452, metadata !DIExpression()), !dbg !6454
  %conv15 = sext i8 %7 to i64, !dbg !6455
  %call16 = call i64 @klee_get_valuel(i64 %conv15), !dbg !6456
  %conv17 = trunc i64 %call16 to i8, !dbg !6457
  store i8 %conv17, i8* %cc, align 1, !dbg !6454
  %11 = load i8, i8* %cc, align 1, !dbg !6458
  %conv18 = sext i8 %11 to i32, !dbg !6458
  %12 = load i8, i8* %c, align 1, !dbg !6459
  %conv19 = sext i8 %12 to i32, !dbg !6459
  %cmp20 = icmp eq i32 %conv18, %conv19, !dbg !6460
  %conv21 = zext i1 %cmp20 to i32, !dbg !6460
  %conv22 = sext i32 %conv21 to i64, !dbg !6458
  call void @klee_assume(i64 %conv22), !dbg !6461
  %13 = load i8, i8* %cc, align 1, !dbg !6462
  %14 = load i8*, i8** %sc, align 8, !dbg !6463
  store i8 %13, i8* %14, align 1, !dbg !6464
  %15 = load i8, i8* %cc, align 1, !dbg !6465
  %tobool23 = icmp ne i8 %15, 0, !dbg !6465
  br i1 %tobool23, label %for.inc, label %for.end, !dbg !6467

for.inc:                                          ; preds = %if.else, %if.then11, %if.else14, %if.then
  %16 = load i32, i32* %i, align 4, !dbg !6468
  %inc = add i32 %16, 1, !dbg !6468
  store i32 %inc, i32* %i, align 4, !dbg !6468
  %17 = load i8*, i8** %sc, align 8, !dbg !6469
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1, !dbg !6469
  store i8* %incdec.ptr, i8** %sc, align 8, !dbg !6469
  br label %for.cond, !dbg !6470, !llvm.loop !6471

for.end:                                          ; preds = %if.else14, %if.then, %if.then8
  %18 = load i8*, i8** %s.addr, align 8, !dbg !6474
  ret i8* %18, !dbg !6475
}

; Function Attrs: nounwind
declare dso_local i64 @syscall(i64, ...) #3

; Function Attrs: noinline nounwind uwtable
define internal i8* @__concretize_ptr(i8* %p) #0 !dbg !6476 {
entry:
  %p.addr = alloca i8*, align 8
  %pc = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !6479, metadata !DIExpression()), !dbg !6480
  call void @llvm.dbg.declare(metadata i8** %pc, metadata !6481, metadata !DIExpression()), !dbg !6482
  %0 = load i8*, i8** %p.addr, align 8, !dbg !6483
  %1 = ptrtoint i8* %0 to i64, !dbg !6484
  %call = call i64 @klee_get_valuel(i64 %1), !dbg !6485
  %2 = inttoptr i64 %call to i8*, !dbg !6486
  store i8* %2, i8** %pc, align 8, !dbg !6482
  %3 = load i8*, i8** %pc, align 8, !dbg !6487
  %4 = load i8*, i8** %p.addr, align 8, !dbg !6488
  %cmp = icmp eq i8* %3, %4, !dbg !6489
  %conv = zext i1 %cmp to i32, !dbg !6489
  %conv1 = sext i32 %conv to i64, !dbg !6487
  call void @klee_assume(i64 %conv1), !dbg !6490
  %5 = load i8*, i8** %pc, align 8, !dbg !6491
  ret i8* %5, !dbg !6492
}

declare dso_local i64 @klee_get_valuel(i64) #4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @umask(i32 %mask) #0 !dbg !6493 {
entry:
  %mask.addr = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %mask, i32* %mask.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mask.addr, metadata !6496, metadata !DIExpression()), !dbg !6497
  call void @llvm.dbg.declare(metadata i32* %r, metadata !6498, metadata !DIExpression()), !dbg !6499
  %0 = load i32, i32* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 1), align 8, !dbg !6500
  store i32 %0, i32* %r, align 4, !dbg !6499
  %1 = load i32, i32* %mask.addr, align 4, !dbg !6501
  %and = and i32 %1, 511, !dbg !6502
  store i32 %and, i32* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 1), align 8, !dbg !6503
  %2 = load i32, i32* %r, align 4, !dbg !6504
  ret i32 %2, !dbg !6505
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @__fd_open(i8* %pathname, i32 %flags, i32 %mode) #0 !dbg !6506 {
entry:
  %retval = alloca i32, align 4
  %pathname.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %df = alloca %struct.exe_disk_file_t.17*, align 8
  %f = alloca %struct.exe_file_t.18*, align 8
  %fd = alloca i32, align 4
  %os_fd = alloca i32, align 4
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !6509, metadata !DIExpression()), !dbg !6510
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6511, metadata !DIExpression()), !dbg !6512
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6513, metadata !DIExpression()), !dbg !6514
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %df, metadata !6515, metadata !DIExpression()), !dbg !6516
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !6517, metadata !DIExpression()), !dbg !6526
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !6527, metadata !DIExpression()), !dbg !6528
  store i32 0, i32* %fd, align 4, !dbg !6529
  br label %for.cond, !dbg !6531

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %fd, align 4, !dbg !6532
  %cmp = icmp slt i32 %0, 32, !dbg !6534
  br i1 %cmp, label %for.body, label %for.end, !dbg !6535

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %fd, align 4, !dbg !6536
  %idxprom = sext i32 %1 to i64, !dbg !6538
  %arrayidx = getelementptr inbounds [32 x %struct.exe_file_t.18], [32 x %struct.exe_file_t.18]* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 0), i64 0, i64 %idxprom, !dbg !6538
  %flags1 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %arrayidx, i32 0, i32 1, !dbg !6539
  %2 = load i32, i32* %flags1, align 4, !dbg !6539
  %and = and i32 %2, 1, !dbg !6540
  %tobool = icmp ne i32 %and, 0, !dbg !6540
  br i1 %tobool, label %for.inc, label %for.end, !dbg !6541

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %fd, align 4, !dbg !6542
  %inc = add nsw i32 %3, 1, !dbg !6542
  store i32 %inc, i32* %fd, align 4, !dbg !6542
  br label %for.cond, !dbg !6543, !llvm.loop !6544

for.end:                                          ; preds = %for.body, %for.cond
  %4 = load i32, i32* %fd, align 4, !dbg !6546
  %cmp2 = icmp eq i32 %4, 32, !dbg !6548
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !6549

if.then3:                                         ; preds = %for.end
  %call = call i32* @__errno_location() #23, !dbg !6550
  store i32 24, i32* %call, align 4, !dbg !6552
  store i32 -1, i32* %retval, align 4, !dbg !6553
  br label %return, !dbg !6553

if.end4:                                          ; preds = %for.end
  %5 = load i32, i32* %fd, align 4, !dbg !6554
  %idxprom5 = sext i32 %5 to i64, !dbg !6555
  %arrayidx6 = getelementptr inbounds [32 x %struct.exe_file_t.18], [32 x %struct.exe_file_t.18]* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 0), i64 0, i64 %idxprom5, !dbg !6555
  store %struct.exe_file_t.18* %arrayidx6, %struct.exe_file_t.18** %f, align 8, !dbg !6556
  %6 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6557
  %7 = bitcast %struct.exe_file_t.18* %6 to i8*, !dbg !6558
  %8 = call i8* @memset(i8* %7, i32 0, i64 24), !dbg !6558
  %9 = load i8*, i8** %pathname.addr, align 8, !dbg !6559
  %call7 = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %9), !dbg !6560
  store %struct.exe_disk_file_t.17* %call7, %struct.exe_disk_file_t.17** %df, align 8, !dbg !6561
  %10 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df, align 8, !dbg !6562
  %tobool8 = icmp ne %struct.exe_disk_file_t.17* %10, null, !dbg !6562
  br i1 %tobool8, label %if.then9, label %if.else45, !dbg !6564

if.then9:                                         ; preds = %if.end4
  %11 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df, align 8, !dbg !6565
  %12 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6567
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %12, i32 0, i32 3, !dbg !6568
  store %struct.exe_disk_file_t.17* %11, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !6569
  %13 = load i32, i32* %flags.addr, align 4, !dbg !6570
  %and10 = and i32 %13, 64, !dbg !6572
  %tobool11 = icmp ne i32 %and10, 0, !dbg !6572
  br i1 %tobool11, label %land.lhs.true, label %if.end16, !dbg !6573

land.lhs.true:                                    ; preds = %if.then9
  %14 = load i32, i32* %flags.addr, align 4, !dbg !6574
  %and12 = and i32 %14, 128, !dbg !6575
  %tobool13 = icmp ne i32 %and12, 0, !dbg !6575
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !6576

if.then14:                                        ; preds = %land.lhs.true
  %call15 = call i32* @__errno_location() #23, !dbg !6577
  store i32 17, i32* %call15, align 4, !dbg !6579
  store i32 -1, i32* %retval, align 4, !dbg !6580
  br label %return, !dbg !6580

if.end16:                                         ; preds = %land.lhs.true, %if.then9
  %15 = load i32, i32* %flags.addr, align 4, !dbg !6581
  %and17 = and i32 %15, 512, !dbg !6583
  %tobool18 = icmp ne i32 %and17, 0, !dbg !6583
  br i1 %tobool18, label %land.lhs.true19, label %if.end24, !dbg !6584

land.lhs.true19:                                  ; preds = %if.end16
  %16 = load i32, i32* %flags.addr, align 4, !dbg !6585
  %and20 = and i32 %16, 0, !dbg !6586
  %tobool21 = icmp ne i32 %and20, 0, !dbg !6586
  br i1 %tobool21, label %if.then22, label %if.end24, !dbg !6587

if.then22:                                        ; preds = %land.lhs.true19
  call void @klee_warning(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.88, i64 0, i64 0)), !dbg !6588
  %call23 = call i32* @__errno_location() #23, !dbg !6590
  store i32 13, i32* %call23, align 4, !dbg !6591
  store i32 -1, i32* %retval, align 4, !dbg !6592
  br label %return, !dbg !6592

if.end24:                                         ; preds = %land.lhs.true19, %if.end16
  %17 = load i32, i32* %flags.addr, align 4, !dbg !6593
  %and25 = and i32 %17, 128, !dbg !6595
  %tobool26 = icmp ne i32 %and25, 0, !dbg !6595
  br i1 %tobool26, label %land.lhs.true27, label %if.end32, !dbg !6596

land.lhs.true27:                                  ; preds = %if.end24
  %18 = load i32, i32* %flags.addr, align 4, !dbg !6597
  %and28 = and i32 %18, 64, !dbg !6598
  %tobool29 = icmp ne i32 %and28, 0, !dbg !6598
  br i1 %tobool29, label %if.end32, label %if.then30, !dbg !6599

if.then30:                                        ; preds = %land.lhs.true27
  call void @klee_warning(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1.89, i64 0, i64 0)), !dbg !6600
  %call31 = call i32* @__errno_location() #23, !dbg !6602
  store i32 13, i32* %call31, align 4, !dbg !6603
  store i32 -1, i32* %retval, align 4, !dbg !6604
  br label %return, !dbg !6604

if.end32:                                         ; preds = %land.lhs.true27, %if.end24
  %19 = load i32, i32* %flags.addr, align 4, !dbg !6605
  %20 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df, align 8, !dbg !6607
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %20, i32 0, i32 2, !dbg !6608
  %21 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !6608
  %call33 = call i32 @has_permission(i32 %19, %struct.stat64.16* %21), !dbg !6609
  %tobool34 = icmp ne i32 %call33, 0, !dbg !6609
  br i1 %tobool34, label %if.else, label %if.then35, !dbg !6610

if.then35:                                        ; preds = %if.end32
  %call36 = call i32* @__errno_location() #23, !dbg !6611
  store i32 13, i32* %call36, align 4, !dbg !6613
  store i32 -1, i32* %retval, align 4, !dbg !6614
  br label %return, !dbg !6614

if.else:                                          ; preds = %if.end32
  %22 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6615
  %dfile37 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %22, i32 0, i32 3, !dbg !6616
  %23 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile37, align 8, !dbg !6616
  %stat38 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %23, i32 0, i32 2, !dbg !6617
  %24 = load %struct.stat64.16*, %struct.stat64.16** %stat38, align 8, !dbg !6617
  %st_mode = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %24, i32 0, i32 3, !dbg !6618
  %25 = load i32, i32* %st_mode, align 8, !dbg !6618
  %and39 = and i32 %25, -512, !dbg !6619
  %26 = load i32, i32* %mode.addr, align 4, !dbg !6620
  %27 = load i32, i32* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 1), align 8, !dbg !6621
  %neg = xor i32 %27, -1, !dbg !6622
  %and40 = and i32 %26, %neg, !dbg !6623
  %or = or i32 %and39, %and40, !dbg !6624
  %28 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6625
  %dfile41 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %28, i32 0, i32 3, !dbg !6626
  %29 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile41, align 8, !dbg !6626
  %stat42 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %29, i32 0, i32 2, !dbg !6627
  %30 = load %struct.stat64.16*, %struct.stat64.16** %stat42, align 8, !dbg !6627
  %st_mode43 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %30, i32 0, i32 3, !dbg !6628
  store i32 %or, i32* %st_mode43, align 8, !dbg !6629
  br label %if.end53, !dbg !6630

if.else45:                                        ; preds = %if.end4
  call void @llvm.dbg.declare(metadata i32* %os_fd, metadata !6631, metadata !DIExpression()), !dbg !6633
  %31 = load i8*, i8** %pathname.addr, align 8, !dbg !6634
  %call46 = call i8* @__concretize_string(i8* %31), !dbg !6635
  %32 = load i32, i32* %flags.addr, align 4, !dbg !6636
  %33 = load i32, i32* %mode.addr, align 4, !dbg !6637
  %call47 = call i64 (i64, ...) @syscall(i64 2, i8* %call46, i32 %32, i32 %33) #7, !dbg !6638
  %conv = trunc i64 %call47 to i32, !dbg !6638
  store i32 %conv, i32* %os_fd, align 4, !dbg !6633
  %34 = load i32, i32* %os_fd, align 4, !dbg !6639
  %cmp48 = icmp eq i32 %34, -1, !dbg !6641
  br i1 %cmp48, label %if.then50, label %if.end51, !dbg !6642

if.then50:                                        ; preds = %if.else45
  store i32 -1, i32* %retval, align 4, !dbg !6643
  br label %return, !dbg !6643

if.end51:                                         ; preds = %if.else45
  %35 = load i32, i32* %os_fd, align 4, !dbg !6644
  %36 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6645
  %fd52 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %36, i32 0, i32 0, !dbg !6646
  store i32 %35, i32* %fd52, align 8, !dbg !6647
  br label %if.end53

if.end53:                                         ; preds = %if.end51, %if.else
  %37 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6648
  %flags54 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %37, i32 0, i32 1, !dbg !6649
  store i32 1, i32* %flags54, align 4, !dbg !6650
  %38 = load i32, i32* %flags.addr, align 4, !dbg !6651
  %and55 = and i32 %38, 3, !dbg !6653
  %cmp56 = icmp eq i32 %and55, 0, !dbg !6654
  br i1 %cmp56, label %if.then58, label %if.else61, !dbg !6655

if.then58:                                        ; preds = %if.end53
  %39 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6656
  %flags59 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %39, i32 0, i32 1, !dbg !6658
  %40 = load i32, i32* %flags59, align 4, !dbg !6659
  %or60 = or i32 %40, 4, !dbg !6659
  store i32 %or60, i32* %flags59, align 4, !dbg !6659
  br label %if.end72, !dbg !6660

if.else61:                                        ; preds = %if.end53
  %41 = load i32, i32* %flags.addr, align 4, !dbg !6661
  %and62 = and i32 %41, 3, !dbg !6663
  %cmp63 = icmp eq i32 %and62, 1, !dbg !6664
  %42 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6665
  %flags66 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %42, i32 0, i32 1, !dbg !6665
  %43 = load i32, i32* %flags66, align 4, !dbg !6665
  br i1 %cmp63, label %if.then65, label %if.else68, !dbg !6666

if.then65:                                        ; preds = %if.else61
  %or67 = or i32 %43, 8, !dbg !6667
  store i32 %or67, i32* %flags66, align 4, !dbg !6667
  br label %if.end72, !dbg !6669

if.else68:                                        ; preds = %if.else61
  %or70 = or i32 %43, 12, !dbg !6670
  store i32 %or70, i32* %flags66, align 4, !dbg !6670
  br label %if.end72

if.end72:                                         ; preds = %if.then65, %if.else68, %if.then58
  %44 = load i32, i32* %fd, align 4, !dbg !6672
  store i32 %44, i32* %retval, align 4, !dbg !6673
  br label %return, !dbg !6673

return:                                           ; preds = %if.end72, %if.then50, %if.then35, %if.then30, %if.then22, %if.then14, %if.then3
  %45 = load i32, i32* %retval, align 4, !dbg !6674
  ret i32 %45, !dbg !6674
}

declare dso_local void @klee_warning(i8*) #4

; Function Attrs: noinline nounwind uwtable
define internal i32 @has_permission(i32 %flags, %struct.stat64.16* %s) #0 !dbg !6675 {
entry:
  %retval = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %s.addr = alloca %struct.stat64.16*, align 8
  %write_access = alloca i32, align 4
  %read_access = alloca i32, align 4
  %mode = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6678, metadata !DIExpression()), !dbg !6679
  store %struct.stat64.16* %s, %struct.stat64.16** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %s.addr, metadata !6680, metadata !DIExpression()), !dbg !6681
  call void @llvm.dbg.declare(metadata i32* %write_access, metadata !6682, metadata !DIExpression()), !dbg !6683
  call void @llvm.dbg.declare(metadata i32* %read_access, metadata !6684, metadata !DIExpression()), !dbg !6685
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !6686, metadata !DIExpression()), !dbg !6687
  %0 = load %struct.stat64.16*, %struct.stat64.16** %s.addr, align 8, !dbg !6688
  %st_mode = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %0, i32 0, i32 3, !dbg !6689
  %1 = load i32, i32* %st_mode, align 8, !dbg !6689
  store i32 %1, i32* %mode, align 4, !dbg !6687
  %2 = load i32, i32* %flags.addr, align 4, !dbg !6690
  %and = and i32 %2, 0, !dbg !6692
  %tobool = icmp ne i32 %and, 0, !dbg !6692
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !6693

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %flags.addr, align 4, !dbg !6694
  %and1 = and i32 %3, 2, !dbg !6695
  %tobool2 = icmp ne i32 %and1, 0, !dbg !6695
  br i1 %tobool2, label %if.then, label %if.else, !dbg !6696

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %read_access, align 4, !dbg !6697
  br label %if.end, !dbg !6698

if.else:                                          ; preds = %lor.lhs.false
  store i32 0, i32* %read_access, align 4, !dbg !6699
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load i32, i32* %flags.addr, align 4, !dbg !6700
  %and3 = and i32 %4, 1, !dbg !6702
  %tobool4 = icmp ne i32 %and3, 0, !dbg !6702
  br i1 %tobool4, label %if.then8, label %lor.lhs.false5, !dbg !6703

lor.lhs.false5:                                   ; preds = %if.end
  %5 = load i32, i32* %flags.addr, align 4, !dbg !6704
  %and6 = and i32 %5, 2, !dbg !6705
  %tobool7 = icmp ne i32 %and6, 0, !dbg !6705
  br i1 %tobool7, label %if.then8, label %if.else9, !dbg !6706

if.then8:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 1, i32* %write_access, align 4, !dbg !6707
  br label %if.end10, !dbg !6708

if.else9:                                         ; preds = %lor.lhs.false5
  store i32 0, i32* %write_access, align 4, !dbg !6709
  br label %if.end10

if.end10:                                         ; preds = %if.else9, %if.then8
  %6 = load i32, i32* %read_access, align 4, !dbg !6710
  %tobool11 = icmp ne i32 %6, 0, !dbg !6710
  br i1 %tobool11, label %land.lhs.true, label %if.end18, !dbg !6712

land.lhs.true:                                    ; preds = %if.end10
  %7 = load i32, i32* %mode, align 4, !dbg !6713
  %and12 = and i32 %7, 256, !dbg !6714
  %8 = load i32, i32* %mode, align 4, !dbg !6715
  %and13 = and i32 %8, 32, !dbg !6716
  %or = or i32 %and12, %and13, !dbg !6717
  %9 = load i32, i32* %mode, align 4, !dbg !6718
  %and14 = and i32 %9, 4, !dbg !6719
  %or15 = or i32 %or, %and14, !dbg !6720
  %tobool16 = icmp ne i32 %or15, 0, !dbg !6720
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !6721

if.then17:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !6722
  br label %return, !dbg !6722

if.end18:                                         ; preds = %land.lhs.true, %if.end10
  %10 = load i32, i32* %write_access, align 4, !dbg !6723
  %tobool19 = icmp ne i32 %10, 0, !dbg !6723
  br i1 %tobool19, label %land.lhs.true20, label %if.end28, !dbg !6725

land.lhs.true20:                                  ; preds = %if.end18
  %11 = load i32, i32* %mode, align 4, !dbg !6726
  %and21 = and i32 %11, 128, !dbg !6727
  %12 = load i32, i32* %mode, align 4, !dbg !6728
  %and22 = and i32 %12, 16, !dbg !6729
  %or23 = or i32 %and21, %and22, !dbg !6730
  %13 = load i32, i32* %mode, align 4, !dbg !6731
  %and24 = and i32 %13, 2, !dbg !6732
  %or25 = or i32 %or23, %and24, !dbg !6733
  %tobool26 = icmp ne i32 %or25, 0, !dbg !6733
  br i1 %tobool26, label %if.end28, label %if.then27, !dbg !6734

if.then27:                                        ; preds = %land.lhs.true20
  store i32 0, i32* %retval, align 4, !dbg !6735
  br label %return, !dbg !6735

if.end28:                                         ; preds = %land.lhs.true20, %if.end18
  store i32 1, i32* %retval, align 4, !dbg !6736
  br label %return, !dbg !6736

return:                                           ; preds = %if.end28, %if.then27, %if.then17
  %14 = load i32, i32* %retval, align 4, !dbg !6737
  ret i32 %14, !dbg !6737
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @__fd_openat(i32 %basefd, i8* %pathname, i32 %flags, i32 %mode) #0 !dbg !6738 {
entry:
  %retval = alloca i32, align 4
  %basefd.addr = alloca i32, align 4
  %pathname.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %f = alloca %struct.exe_file_t.18*, align 8
  %fd = alloca i32, align 4
  %bf = alloca %struct.exe_file_t.18*, align 8
  %os_fd = alloca i32, align 4
  store i32 %basefd, i32* %basefd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %basefd.addr, metadata !6741, metadata !DIExpression()), !dbg !6742
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !6743, metadata !DIExpression()), !dbg !6744
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6745, metadata !DIExpression()), !dbg !6746
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6747, metadata !DIExpression()), !dbg !6748
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !6749, metadata !DIExpression()), !dbg !6750
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !6751, metadata !DIExpression()), !dbg !6752
  %0 = load i32, i32* %basefd.addr, align 4, !dbg !6753
  %cmp = icmp ne i32 %0, -100, !dbg !6755
  br i1 %cmp, label %if.then, label %if.end8, !dbg !6756

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %bf, metadata !6757, metadata !DIExpression()), !dbg !6759
  %1 = load i32, i32* %basefd.addr, align 4, !dbg !6760
  %call = call %struct.exe_file_t.18* @__get_file(i32 %1), !dbg !6761
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %bf, align 8, !dbg !6759
  %2 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %bf, align 8, !dbg !6762
  %tobool = icmp ne %struct.exe_file_t.18* %2, null, !dbg !6762
  br i1 %tobool, label %if.else, label %if.then1, !dbg !6764

if.then1:                                         ; preds = %if.then
  %call2 = call i32* @__errno_location() #23, !dbg !6765
  store i32 9, i32* %call2, align 4, !dbg !6767
  store i32 -1, i32* %retval, align 4, !dbg !6768
  br label %return, !dbg !6768

if.else:                                          ; preds = %if.then
  %3 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %bf, align 8, !dbg !6769
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %3, i32 0, i32 3, !dbg !6771
  %4 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !6771
  %tobool3 = icmp ne %struct.exe_disk_file_t.17* %4, null, !dbg !6769
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !6772

if.then4:                                         ; preds = %if.else
  call void @klee_warning(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2.92, i64 0, i64 0)), !dbg !6773
  %call5 = call i32* @__errno_location() #23, !dbg !6775
  store i32 2, i32* %call5, align 4, !dbg !6776
  store i32 -1, i32* %retval, align 4, !dbg !6777
  br label %return, !dbg !6777

if.end6:                                          ; preds = %if.else
  %5 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %bf, align 8, !dbg !6778
  %fd7 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %5, i32 0, i32 0, !dbg !6779
  %6 = load i32, i32* %fd7, align 8, !dbg !6779
  store i32 %6, i32* %basefd.addr, align 4, !dbg !6780
  br label %if.end8, !dbg !6781

if.end8:                                          ; preds = %if.end6, %entry
  %7 = load i8*, i8** %pathname.addr, align 8, !dbg !6782
  %call9 = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %7), !dbg !6784
  %tobool10 = icmp ne %struct.exe_disk_file_t.17* %call9, null, !dbg !6784
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !6785

if.then11:                                        ; preds = %if.end8
  %8 = load i8*, i8** %pathname.addr, align 8, !dbg !6786
  %9 = load i32, i32* %flags.addr, align 4, !dbg !6788
  %10 = load i32, i32* %mode.addr, align 4, !dbg !6789
  %call12 = call i32 @__fd_open(i8* %8, i32 %9, i32 %10), !dbg !6790
  store i32 %call12, i32* %retval, align 4, !dbg !6791
  br label %return, !dbg !6791

if.end13:                                         ; preds = %if.end8
  store i32 0, i32* %fd, align 4, !dbg !6792
  br label %for.cond, !dbg !6794

for.cond:                                         ; preds = %for.inc, %if.end13
  %11 = load i32, i32* %fd, align 4, !dbg !6795
  %cmp14 = icmp slt i32 %11, 32, !dbg !6797
  br i1 %cmp14, label %for.body, label %for.end, !dbg !6798

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %fd, align 4, !dbg !6799
  %idxprom = sext i32 %12 to i64, !dbg !6801
  %arrayidx = getelementptr inbounds [32 x %struct.exe_file_t.18], [32 x %struct.exe_file_t.18]* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 0), i64 0, i64 %idxprom, !dbg !6801
  %flags15 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %arrayidx, i32 0, i32 1, !dbg !6802
  %13 = load i32, i32* %flags15, align 4, !dbg !6802
  %and = and i32 %13, 1, !dbg !6803
  %tobool16 = icmp ne i32 %and, 0, !dbg !6803
  br i1 %tobool16, label %for.inc, label %for.end, !dbg !6804

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %fd, align 4, !dbg !6805
  %inc = add nsw i32 %14, 1, !dbg !6805
  store i32 %inc, i32* %fd, align 4, !dbg !6805
  br label %for.cond, !dbg !6806, !llvm.loop !6807

for.end:                                          ; preds = %for.body, %for.cond
  %15 = load i32, i32* %fd, align 4, !dbg !6809
  %cmp19 = icmp eq i32 %15, 32, !dbg !6811
  br i1 %cmp19, label %if.then20, label %if.end22, !dbg !6812

if.then20:                                        ; preds = %for.end
  %call21 = call i32* @__errno_location() #23, !dbg !6813
  store i32 24, i32* %call21, align 4, !dbg !6815
  store i32 -1, i32* %retval, align 4, !dbg !6816
  br label %return, !dbg !6816

if.end22:                                         ; preds = %for.end
  %16 = load i32, i32* %fd, align 4, !dbg !6817
  %idxprom23 = sext i32 %16 to i64, !dbg !6818
  %arrayidx24 = getelementptr inbounds [32 x %struct.exe_file_t.18], [32 x %struct.exe_file_t.18]* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 0), i64 0, i64 %idxprom23, !dbg !6818
  store %struct.exe_file_t.18* %arrayidx24, %struct.exe_file_t.18** %f, align 8, !dbg !6819
  %17 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6820
  %18 = bitcast %struct.exe_file_t.18* %17 to i8*, !dbg !6821
  %19 = call i8* @memset(i8* %18, i32 0, i64 24), !dbg !6821
  call void @llvm.dbg.declare(metadata i32* %os_fd, metadata !6822, metadata !DIExpression()), !dbg !6823
  %20 = load i32, i32* %basefd.addr, align 4, !dbg !6824
  %conv = sext i32 %20 to i64, !dbg !6825
  %21 = load i8*, i8** %pathname.addr, align 8, !dbg !6826
  %call25 = call i8* @__concretize_string(i8* %21), !dbg !6827
  %22 = load i32, i32* %flags.addr, align 4, !dbg !6828
  %conv26 = sext i32 %22 to i64, !dbg !6829
  %23 = load i32, i32* %mode.addr, align 4, !dbg !6830
  %call27 = call i64 (i64, ...) @syscall(i64 257, i64 %conv, i8* %call25, i64 %conv26, i32 %23) #7, !dbg !6831
  %conv28 = trunc i64 %call27 to i32, !dbg !6831
  store i32 %conv28, i32* %os_fd, align 4, !dbg !6823
  %24 = load i32, i32* %os_fd, align 4, !dbg !6832
  %cmp29 = icmp eq i32 %24, -1, !dbg !6834
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !6835

if.then31:                                        ; preds = %if.end22
  store i32 -1, i32* %retval, align 4, !dbg !6836
  br label %return, !dbg !6836

if.end32:                                         ; preds = %if.end22
  %25 = load i32, i32* %os_fd, align 4, !dbg !6837
  %26 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6838
  %fd33 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %26, i32 0, i32 0, !dbg !6839
  store i32 %25, i32* %fd33, align 8, !dbg !6840
  %27 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6841
  %flags34 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %27, i32 0, i32 1, !dbg !6842
  store i32 1, i32* %flags34, align 4, !dbg !6843
  %28 = load i32, i32* %flags.addr, align 4, !dbg !6844
  %and35 = and i32 %28, 3, !dbg !6846
  %cmp36 = icmp eq i32 %and35, 0, !dbg !6847
  br i1 %cmp36, label %if.then38, label %if.else40, !dbg !6848

if.then38:                                        ; preds = %if.end32
  %29 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6849
  %flags39 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %29, i32 0, i32 1, !dbg !6851
  %30 = load i32, i32* %flags39, align 4, !dbg !6852
  %or = or i32 %30, 4, !dbg !6852
  store i32 %or, i32* %flags39, align 4, !dbg !6852
  br label %if.end51, !dbg !6853

if.else40:                                        ; preds = %if.end32
  %31 = load i32, i32* %flags.addr, align 4, !dbg !6854
  %and41 = and i32 %31, 3, !dbg !6856
  %cmp42 = icmp eq i32 %and41, 1, !dbg !6857
  %32 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6858
  %flags45 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %32, i32 0, i32 1, !dbg !6858
  %33 = load i32, i32* %flags45, align 4, !dbg !6858
  br i1 %cmp42, label %if.then44, label %if.else47, !dbg !6859

if.then44:                                        ; preds = %if.else40
  %or46 = or i32 %33, 8, !dbg !6860
  store i32 %or46, i32* %flags45, align 4, !dbg !6860
  br label %if.end51, !dbg !6862

if.else47:                                        ; preds = %if.else40
  %or49 = or i32 %33, 12, !dbg !6863
  store i32 %or49, i32* %flags45, align 4, !dbg !6863
  br label %if.end51

if.end51:                                         ; preds = %if.then44, %if.else47, %if.then38
  %34 = load i32, i32* %fd, align 4, !dbg !6865
  store i32 %34, i32* %retval, align 4, !dbg !6866
  br label %return, !dbg !6866

return:                                           ; preds = %if.end51, %if.then31, %if.then20, %if.then11, %if.then4, %if.then1
  %35 = load i32, i32* %retval, align 4, !dbg !6867
  ret i32 %35, !dbg !6867
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.exe_file_t.18* @__get_file(i32 %fd) #0 !dbg !6868 {
entry:
  %retval = alloca %struct.exe_file_t.18*, align 8
  %fd.addr = alloca i32, align 4
  %f = alloca %struct.exe_file_t.18*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !6871, metadata !DIExpression()), !dbg !6872
  %0 = load i32, i32* %fd.addr, align 4, !dbg !6873
  %cmp = icmp sge i32 %0, 0, !dbg !6875
  %1 = load i32, i32* %fd.addr, align 4, !dbg !6876
  %cmp1 = icmp slt i32 %1, 32, !dbg !6877
  %or.cond = and i1 %cmp, %cmp1, !dbg !6878
  br i1 %or.cond, label %if.then, label %if.end3, !dbg !6878

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !6879, metadata !DIExpression()), !dbg !6881
  %2 = load i32, i32* %fd.addr, align 4, !dbg !6882
  %idxprom = sext i32 %2 to i64, !dbg !6883
  %arrayidx = getelementptr inbounds [32 x %struct.exe_file_t.18], [32 x %struct.exe_file_t.18]* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 0), i64 0, i64 %idxprom, !dbg !6883
  store %struct.exe_file_t.18* %arrayidx, %struct.exe_file_t.18** %f, align 8, !dbg !6881
  %3 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6884
  %flags = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %3, i32 0, i32 1, !dbg !6886
  %4 = load i32, i32* %flags, align 4, !dbg !6886
  %and = and i32 %4, 1, !dbg !6887
  %tobool = icmp ne i32 %and, 0, !dbg !6887
  br i1 %tobool, label %if.then2, label %if.end3, !dbg !6888

if.then2:                                         ; preds = %if.then
  %5 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6889
  store %struct.exe_file_t.18* %5, %struct.exe_file_t.18** %retval, align 8, !dbg !6890
  br label %return, !dbg !6890

if.end3:                                          ; preds = %if.then, %entry
  store %struct.exe_file_t.18* null, %struct.exe_file_t.18** %retval, align 8, !dbg !6891
  br label %return, !dbg !6891

return:                                           ; preds = %if.end3, %if.then2
  %6 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %retval, align 8, !dbg !6892
  ret %struct.exe_file_t.18* %6, !dbg !6892
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @utimes(i8* nonnull %path, %struct.timespec.15* %times) #0 !dbg !6893 {
entry:
  %retval = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  %times.addr = alloca %struct.timespec.15*, align 8
  %dfile = alloca %struct.exe_disk_file_t.17*, align 8
  %newTimes = alloca [2 x %struct.timespec.15], align 16
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !6904, metadata !DIExpression()), !dbg !6905
  store %struct.timespec.15* %times, %struct.timespec.15** %times.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec.15** %times.addr, metadata !6906, metadata !DIExpression()), !dbg !6907
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %dfile, metadata !6908, metadata !DIExpression()), !dbg !6909
  %0 = load i8*, i8** %path.addr, align 8, !dbg !6910
  %call = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %0), !dbg !6911
  store %struct.exe_disk_file_t.17* %call, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !6909
  %1 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !6912
  %tobool = icmp ne %struct.exe_disk_file_t.17* %1, null, !dbg !6912
  br i1 %tobool, label %if.then, label %if.end12, !dbg !6914

if.then:                                          ; preds = %entry
  %2 = load %struct.timespec.15*, %struct.timespec.15** %times.addr, align 8, !dbg !6915
  %tobool1 = icmp ne %struct.timespec.15* %2, null, !dbg !6915
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !6918

if.then2:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata [2 x %struct.timespec.15]* %newTimes, metadata !6919, metadata !DIExpression()), !dbg !6922
  %arrayidx = getelementptr inbounds [2 x %struct.timespec.15], [2 x %struct.timespec.15]* %newTimes, i64 0, i64 0, !dbg !6923
  %call3 = call i32 @gettimeofday(%struct.timespec.15* %arrayidx, %struct.cgc_timeval* null) #7, !dbg !6924
  %arrayidx4 = getelementptr inbounds [2 x %struct.timespec.15], [2 x %struct.timespec.15]* %newTimes, i64 0, i64 1, !dbg !6925
  %arrayidx5 = getelementptr inbounds [2 x %struct.timespec.15], [2 x %struct.timespec.15]* %newTimes, i64 0, i64 0, !dbg !6926
  %3 = bitcast %struct.timespec.15* %arrayidx4 to i8*, !dbg !6926
  %4 = bitcast %struct.timespec.15* %arrayidx5 to i8*, !dbg !6926
  %5 = call i8* @memcpy(i8* %3, i8* %4, i64 16), !dbg !6926
  %arraydecay = getelementptr inbounds [2 x %struct.timespec.15], [2 x %struct.timespec.15]* %newTimes, i64 0, i64 0, !dbg !6927
  store %struct.timespec.15* %arraydecay, %struct.timespec.15** %times.addr, align 8, !dbg !6928
  br label %if.end, !dbg !6929

if.end:                                           ; preds = %if.then2, %if.then
  %6 = load %struct.timespec.15*, %struct.timespec.15** %times.addr, align 8, !dbg !6930
  %arrayidx6 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %6, i64 0, !dbg !6930
  %tv_sec = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %arrayidx6, i32 0, i32 0, !dbg !6931
  %7 = load i64, i64* %tv_sec, align 8, !dbg !6931
  %8 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !6932
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %8, i32 0, i32 2, !dbg !6933
  %9 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !6933
  %st_atim = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %9, i32 0, i32 11, !dbg !6934
  %tv_sec7 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %st_atim, i32 0, i32 0, !dbg !6934
  store i64 %7, i64* %tv_sec7, align 8, !dbg !6935
  %10 = load %struct.timespec.15*, %struct.timespec.15** %times.addr, align 8, !dbg !6936
  %arrayidx8 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %10, i64 1, !dbg !6936
  %tv_sec9 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %arrayidx8, i32 0, i32 0, !dbg !6937
  %11 = load i64, i64* %tv_sec9, align 8, !dbg !6937
  %12 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !6938
  %stat10 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %12, i32 0, i32 2, !dbg !6939
  %13 = load %struct.stat64.16*, %struct.stat64.16** %stat10, align 8, !dbg !6939
  %st_mtim = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %13, i32 0, i32 12, !dbg !6940
  %tv_sec11 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %st_mtim, i32 0, i32 0, !dbg !6940
  store i64 %11, i64* %tv_sec11, align 8, !dbg !6941
  store i32 0, i32* %retval, align 4, !dbg !6942
  br label %return, !dbg !6942

if.end12:                                         ; preds = %entry
  %14 = load i8*, i8** %path.addr, align 8, !dbg !6943
  %call13 = call i8* @__concretize_string(i8* %14), !dbg !6944
  %15 = load %struct.timespec.15*, %struct.timespec.15** %times.addr, align 8, !dbg !6945
  %call14 = call i64 (i64, ...) @syscall(i64 235, i8* %call13, %struct.timespec.15* %15) #7, !dbg !6946
  %conv = trunc i64 %call14 to i32, !dbg !6946
  store i32 %conv, i32* %retval, align 4, !dbg !6947
  br label %return, !dbg !6947

return:                                           ; preds = %if.end12, %if.end
  %16 = load i32, i32* %retval, align 4, !dbg !6948
  ret i32 %16, !dbg !6948
}

; Function Attrs: nounwind
declare dso_local i32 @gettimeofday(%struct.timespec.15*, %struct.cgc_timeval*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @futimesat(i32 %fd, i8* %path, %struct.timespec.15* %times) #0 !dbg !6949 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  %times.addr = alloca %struct.timespec.15*, align 8
  %f = alloca %struct.exe_file_t.18*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !6952, metadata !DIExpression()), !dbg !6953
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !6954, metadata !DIExpression()), !dbg !6955
  store %struct.timespec.15* %times, %struct.timespec.15** %times.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec.15** %times.addr, metadata !6956, metadata !DIExpression()), !dbg !6957
  %0 = load i32, i32* %fd.addr, align 4, !dbg !6958
  %cmp = icmp ne i32 %0, -100, !dbg !6960
  br i1 %cmp, label %if.then, label %if.end8, !dbg !6961

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !6962, metadata !DIExpression()), !dbg !6964
  %1 = load i32, i32* %fd.addr, align 4, !dbg !6965
  %call = call %struct.exe_file_t.18* @__get_file(i32 %1), !dbg !6966
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !6964
  %2 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6967
  %tobool = icmp ne %struct.exe_file_t.18* %2, null, !dbg !6967
  br i1 %tobool, label %if.else, label %if.then1, !dbg !6969

if.then1:                                         ; preds = %if.then
  %call2 = call i32* @__errno_location() #23, !dbg !6970
  store i32 9, i32* %call2, align 4, !dbg !6972
  store i32 -1, i32* %retval, align 4, !dbg !6973
  br label %return, !dbg !6973

if.else:                                          ; preds = %if.then
  %3 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6974
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %3, i32 0, i32 3, !dbg !6976
  %4 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !6976
  %tobool3 = icmp ne %struct.exe_disk_file_t.17* %4, null, !dbg !6974
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !6977

if.then4:                                         ; preds = %if.else
  call void @klee_warning(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2.92, i64 0, i64 0)), !dbg !6978
  %call5 = call i32* @__errno_location() #23, !dbg !6980
  store i32 2, i32* %call5, align 4, !dbg !6981
  store i32 -1, i32* %retval, align 4, !dbg !6982
  br label %return, !dbg !6982

if.end6:                                          ; preds = %if.else
  %5 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !6983
  %fd7 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %5, i32 0, i32 0, !dbg !6984
  %6 = load i32, i32* %fd7, align 8, !dbg !6984
  store i32 %6, i32* %fd.addr, align 4, !dbg !6985
  br label %if.end8, !dbg !6986

if.end8:                                          ; preds = %if.end6, %entry
  %7 = load i8*, i8** %path.addr, align 8, !dbg !6987
  %call9 = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %7), !dbg !6989
  %tobool10 = icmp ne %struct.exe_disk_file_t.17* %call9, null, !dbg !6989
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !6990

if.then11:                                        ; preds = %if.end8
  %8 = load i8*, i8** %path.addr, align 8, !dbg !6991
  %9 = load %struct.timespec.15*, %struct.timespec.15** %times.addr, align 8, !dbg !6993
  %call12 = call i32 @utimes(i8* %8, %struct.timespec.15* %9) #7, !dbg !6994
  store i32 %call12, i32* %retval, align 4, !dbg !6995
  br label %return, !dbg !6995

if.end13:                                         ; preds = %if.end8
  %10 = load i32, i32* %fd.addr, align 4, !dbg !6996
  %conv = sext i32 %10 to i64, !dbg !6997
  %11 = load i8*, i8** %path.addr, align 8, !dbg !6998
  %tobool14 = icmp ne i8* %11, null, !dbg !6998
  br i1 %tobool14, label %cond.true, label %cond.end, !dbg !6998

cond.true:                                        ; preds = %if.end13
  %12 = load i8*, i8** %path.addr, align 8, !dbg !6999
  %call15 = call i8* @__concretize_string(i8* %12), !dbg !7000
  br label %cond.end, !dbg !6998

cond.end:                                         ; preds = %if.end13, %cond.true
  %cond = phi i8* [ %call15, %cond.true ], [ null, %if.end13 ], !dbg !6998
  %13 = load %struct.timespec.15*, %struct.timespec.15** %times.addr, align 8, !dbg !7001
  %call16 = call i64 (i64, ...) @syscall(i64 261, i64 %conv, i8* %cond, %struct.timespec.15* %13) #7, !dbg !7002
  %conv17 = trunc i64 %call16 to i32, !dbg !7002
  store i32 %conv17, i32* %retval, align 4, !dbg !7003
  br label %return, !dbg !7003

return:                                           ; preds = %cond.end, %if.then11, %if.then4, %if.then1
  %14 = load i32, i32* %retval, align 4, !dbg !7004
  ret i32 %14, !dbg !7004
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @close(i32 %fd) #0 !dbg !213 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %f = alloca %struct.exe_file_t.18*, align 8
  %r = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !7005, metadata !DIExpression()), !dbg !7006
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !7007, metadata !DIExpression()), !dbg !7008
  call void @llvm.dbg.declare(metadata i32* %r, metadata !7009, metadata !DIExpression()), !dbg !7010
  store i32 0, i32* %r, align 4, !dbg !7010
  %0 = load i32, i32* @close.n_calls, align 4, !dbg !7011
  %inc = add nsw i32 %0, 1, !dbg !7011
  store i32 %inc, i32* @close.n_calls, align 4, !dbg !7011
  %1 = load i32, i32* %fd.addr, align 4, !dbg !7012
  %call = call %struct.exe_file_t.18* @__get_file(i32 %1), !dbg !7013
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !7014
  %2 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7015
  %tobool = icmp ne %struct.exe_file_t.18* %2, null, !dbg !7015
  br i1 %tobool, label %if.end, label %if.then, !dbg !7017

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !7018
  store i32 9, i32* %call1, align 4, !dbg !7020
  store i32 -1, i32* %retval, align 4, !dbg !7021
  br label %return, !dbg !7021

if.end:                                           ; preds = %entry
  %3 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7022
  %tobool2 = icmp ne i32 %3, 0, !dbg !7024
  br i1 %tobool2, label %land.lhs.true, label %if.end5, !dbg !7025

land.lhs.true:                                    ; preds = %if.end
  %4 = load i32*, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 8), align 8, !dbg !7026
  %5 = load i32, i32* %4, align 4, !dbg !7027
  %6 = load i32, i32* @close.n_calls, align 4, !dbg !7028
  %cmp = icmp eq i32 %5, %6, !dbg !7029
  br i1 %cmp, label %if.then3, label %if.end5, !dbg !7030

if.then3:                                         ; preds = %land.lhs.true
  %7 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7031
  %dec = add i32 %7, -1, !dbg !7031
  store i32 %dec, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7031
  %call4 = call i32* @__errno_location() #23, !dbg !7033
  store i32 5, i32* %call4, align 4, !dbg !7034
  store i32 -1, i32* %retval, align 4, !dbg !7035
  br label %return, !dbg !7035

if.end5:                                          ; preds = %land.lhs.true, %if.end
  %8 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7036
  %9 = bitcast %struct.exe_file_t.18* %8 to i8*, !dbg !7037
  %10 = call i8* @memset(i8* %9, i32 0, i64 24), !dbg !7037
  %11 = load i32, i32* %r, align 4, !dbg !7038
  store i32 %11, i32* %retval, align 4, !dbg !7039
  br label %return, !dbg !7039

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7040
  ret i32 %12, !dbg !7040
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @read(i32 %fd, i8* %buf, i64 %count) #0 !dbg !256 {
entry:
  %retval = alloca i64, align 8
  %fd.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %f = alloca %struct.exe_file_t.18*, align 8
  %r = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !7041, metadata !DIExpression()), !dbg !7042
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !7043, metadata !DIExpression()), !dbg !7044
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !7045, metadata !DIExpression()), !dbg !7046
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !7047, metadata !DIExpression()), !dbg !7048
  %0 = load i32, i32* @read.n_calls, align 4, !dbg !7049
  %inc = add nsw i32 %0, 1, !dbg !7049
  store i32 %inc, i32* @read.n_calls, align 4, !dbg !7049
  %1 = load i64, i64* %count.addr, align 8, !dbg !7050
  %cmp = icmp eq i64 %1, 0, !dbg !7052
  br i1 %cmp, label %if.then, label %if.end, !dbg !7053

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8, !dbg !7054
  br label %return, !dbg !7054

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !7055
  %cmp1 = icmp eq i8* %2, null, !dbg !7057
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !7058

if.then2:                                         ; preds = %if.end
  %call = call i32* @__errno_location() #23, !dbg !7059
  store i32 14, i32* %call, align 4, !dbg !7061
  store i64 -1, i64* %retval, align 8, !dbg !7062
  br label %return, !dbg !7062

if.end3:                                          ; preds = %if.end
  %3 = load i32, i32* %fd.addr, align 4, !dbg !7063
  %call4 = call %struct.exe_file_t.18* @__get_file(i32 %3), !dbg !7064
  store %struct.exe_file_t.18* %call4, %struct.exe_file_t.18** %f, align 8, !dbg !7065
  %4 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7066
  %tobool = icmp ne %struct.exe_file_t.18* %4, null, !dbg !7066
  br i1 %tobool, label %if.end7, label %if.then5, !dbg !7068

if.then5:                                         ; preds = %if.end3
  %call6 = call i32* @__errno_location() #23, !dbg !7069
  store i32 9, i32* %call6, align 4, !dbg !7071
  store i64 -1, i64* %retval, align 8, !dbg !7072
  br label %return, !dbg !7072

if.end7:                                          ; preds = %if.end3
  %5 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7073
  %tobool8 = icmp ne i32 %5, 0, !dbg !7075
  br i1 %tobool8, label %land.lhs.true, label %if.end12, !dbg !7076

land.lhs.true:                                    ; preds = %if.end7
  %6 = load i32*, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 6), align 8, !dbg !7077
  %7 = load i32, i32* %6, align 4, !dbg !7078
  %8 = load i32, i32* @read.n_calls, align 4, !dbg !7079
  %cmp9 = icmp eq i32 %7, %8, !dbg !7080
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !7081

if.then10:                                        ; preds = %land.lhs.true
  %9 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7082
  %dec = add i32 %9, -1, !dbg !7082
  store i32 %dec, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7082
  %call11 = call i32* @__errno_location() #23, !dbg !7084
  store i32 5, i32* %call11, align 4, !dbg !7085
  store i64 -1, i64* %retval, align 8, !dbg !7086
  br label %return, !dbg !7086

if.end12:                                         ; preds = %land.lhs.true, %if.end7
  %10 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7087
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %10, i32 0, i32 3, !dbg !7089
  %11 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7089
  %tobool13 = icmp ne %struct.exe_disk_file_t.17* %11, null, !dbg !7087
  br i1 %tobool13, label %if.else38, label %if.then14, !dbg !7090

if.then14:                                        ; preds = %if.end12
  call void @llvm.dbg.declare(metadata i32* %r, metadata !7091, metadata !DIExpression()), !dbg !7093
  %12 = load i8*, i8** %buf.addr, align 8, !dbg !7094
  %call15 = call i8* @__concretize_ptr(i8* %12), !dbg !7095
  store i8* %call15, i8** %buf.addr, align 8, !dbg !7096
  %13 = load i64, i64* %count.addr, align 8, !dbg !7097
  %call16 = call i64 @__concretize_size(i64 %13), !dbg !7098
  store i64 %call16, i64* %count.addr, align 8, !dbg !7099
  %14 = load i8*, i8** %buf.addr, align 8, !dbg !7100
  %15 = load i64, i64* %count.addr, align 8, !dbg !7101
  call void @klee_check_memory_access(i8* %14, i64 %15), !dbg !7102
  %16 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7103
  %fd17 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %16, i32 0, i32 0, !dbg !7105
  %17 = load i32, i32* %fd17, align 8, !dbg !7105
  %cmp18 = icmp eq i32 %17, 0, !dbg !7106
  %18 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7107
  %fd20 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %18, i32 0, i32 0, !dbg !7107
  %19 = load i32, i32* %fd20, align 8, !dbg !7107
  %20 = load i8*, i8** %buf.addr, align 8, !dbg !7107
  %21 = load i64, i64* %count.addr, align 8, !dbg !7107
  br i1 %cmp18, label %if.then19, label %if.else, !dbg !7108

if.then19:                                        ; preds = %if.then14
  %call21 = call i64 (i64, ...) @syscall(i64 0, i32 %19, i8* %20, i64 %21) #7, !dbg !7109
  %conv = trunc i64 %call21 to i32, !dbg !7109
  store i32 %conv, i32* %r, align 4, !dbg !7110
  br label %if.end25, !dbg !7111

if.else:                                          ; preds = %if.then14
  %22 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7112
  %off = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %22, i32 0, i32 2, !dbg !7113
  %23 = load i64, i64* %off, align 8, !dbg !7113
  %call23 = call i64 (i64, ...) @syscall(i64 17, i32 %19, i8* %20, i64 %21, i64 %23) #7, !dbg !7114
  %conv24 = trunc i64 %call23 to i32, !dbg !7114
  store i32 %conv24, i32* %r, align 4, !dbg !7115
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then19
  %24 = load i32, i32* %r, align 4, !dbg !7116
  %cmp26 = icmp eq i32 %24, -1, !dbg !7118
  br i1 %cmp26, label %if.then28, label %if.end29, !dbg !7119

if.then28:                                        ; preds = %if.end25
  store i64 -1, i64* %retval, align 8, !dbg !7120
  br label %return, !dbg !7120

if.end29:                                         ; preds = %if.end25
  %25 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7121
  %fd30 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %25, i32 0, i32 0, !dbg !7123
  %26 = load i32, i32* %fd30, align 8, !dbg !7123
  %cmp31 = icmp ne i32 %26, 0, !dbg !7124
  br i1 %cmp31, label %if.then33, label %if.end36, !dbg !7125

if.then33:                                        ; preds = %if.end29
  %27 = load i32, i32* %r, align 4, !dbg !7126
  %conv34 = sext i32 %27 to i64, !dbg !7126
  %28 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7127
  %off35 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %28, i32 0, i32 2, !dbg !7128
  %29 = load i64, i64* %off35, align 8, !dbg !7129
  %add = add nsw i64 %29, %conv34, !dbg !7129
  store i64 %add, i64* %off35, align 8, !dbg !7129
  br label %if.end36, !dbg !7127

if.end36:                                         ; preds = %if.then33, %if.end29
  %30 = load i32, i32* %r, align 4, !dbg !7130
  %conv37 = sext i32 %30 to i64, !dbg !7130
  store i64 %conv37, i64* %retval, align 8, !dbg !7131
  br label %return, !dbg !7131

if.else38:                                        ; preds = %if.end12
  %31 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7132
  %off39 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %31, i32 0, i32 2, !dbg !7132
  %32 = load i64, i64* %off39, align 8, !dbg !7132
  %cmp40 = icmp sge i64 %32, 0, !dbg !7132
  br i1 %cmp40, label %if.end44, label %if.else43, !dbg !7136

if.else43:                                        ; preds = %if.else38
  call void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3.95, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4.96, i64 0, i64 0), i32 377, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__.read, i64 0, i64 0)) #18, !dbg !7132
  unreachable, !dbg !7132

if.end44:                                         ; preds = %if.else38
  %33 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7137
  %dfile45 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %33, i32 0, i32 3, !dbg !7139
  %34 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile45, align 8, !dbg !7139
  %size = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %34, i32 0, i32 0, !dbg !7140
  %35 = load i32, i32* %size, align 8, !dbg !7140
  %conv46 = zext i32 %35 to i64, !dbg !7141
  %36 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7142
  %off47 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %36, i32 0, i32 2, !dbg !7143
  %37 = load i64, i64* %off47, align 8, !dbg !7143
  %cmp48 = icmp slt i64 %conv46, %37, !dbg !7144
  br i1 %cmp48, label %if.then50, label %if.end51, !dbg !7145

if.then50:                                        ; preds = %if.end44
  store i64 0, i64* %retval, align 8, !dbg !7146
  br label %return, !dbg !7146

if.end51:                                         ; preds = %if.end44
  %38 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7147
  %off52 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %38, i32 0, i32 2, !dbg !7149
  %39 = load i64, i64* %off52, align 8, !dbg !7149
  %40 = load i64, i64* %count.addr, align 8, !dbg !7150
  %add53 = add i64 %39, %40, !dbg !7151
  %41 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7152
  %dfile54 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %41, i32 0, i32 3, !dbg !7153
  %42 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile54, align 8, !dbg !7153
  %size55 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %42, i32 0, i32 0, !dbg !7154
  %43 = load i32, i32* %size55, align 8, !dbg !7154
  %conv56 = zext i32 %43 to i64, !dbg !7152
  %cmp57 = icmp ugt i64 %add53, %conv56, !dbg !7155
  br i1 %cmp57, label %if.then59, label %if.end64, !dbg !7156

if.then59:                                        ; preds = %if.end51
  %44 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7157
  %dfile60 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %44, i32 0, i32 3, !dbg !7159
  %45 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile60, align 8, !dbg !7159
  %size61 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %45, i32 0, i32 0, !dbg !7160
  %46 = load i32, i32* %size61, align 8, !dbg !7160
  %conv62 = zext i32 %46 to i64, !dbg !7157
  %47 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7161
  %off63 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %47, i32 0, i32 2, !dbg !7162
  %48 = load i64, i64* %off63, align 8, !dbg !7162
  %sub = sub nsw i64 %conv62, %48, !dbg !7163
  store i64 %sub, i64* %count.addr, align 8, !dbg !7164
  br label %if.end64, !dbg !7165

if.end64:                                         ; preds = %if.then59, %if.end51
  %49 = load i8*, i8** %buf.addr, align 8, !dbg !7166
  %50 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7167
  %dfile65 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %50, i32 0, i32 3, !dbg !7168
  %51 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile65, align 8, !dbg !7168
  %contents = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %51, i32 0, i32 1, !dbg !7169
  %52 = load i8*, i8** %contents, align 8, !dbg !7169
  %53 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7170
  %off66 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %53, i32 0, i32 2, !dbg !7171
  %54 = load i64, i64* %off66, align 8, !dbg !7171
  %add.ptr = getelementptr inbounds i8, i8* %52, i64 %54, !dbg !7172
  %55 = load i64, i64* %count.addr, align 8, !dbg !7173
  %56 = call i8* @memcpy(i8* %49, i8* %add.ptr, i64 %55), !dbg !7174
  %57 = load i64, i64* %count.addr, align 8, !dbg !7175
  %58 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7176
  %off67 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %58, i32 0, i32 2, !dbg !7177
  %59 = load i64, i64* %off67, align 8, !dbg !7178
  %add68 = add i64 %59, %57, !dbg !7178
  store i64 %add68, i64* %off67, align 8, !dbg !7178
  %60 = load i64, i64* %count.addr, align 8, !dbg !7179
  store i64 %60, i64* %retval, align 8, !dbg !7180
  br label %return, !dbg !7180

return:                                           ; preds = %if.end64, %if.then50, %if.end36, %if.then28, %if.then10, %if.then5, %if.then2, %if.then
  %61 = load i64, i64* %retval, align 8, !dbg !7181
  ret i64 %61, !dbg !7181
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @__concretize_size(i64 %s) #0 !dbg !7182 {
entry:
  %s.addr = alloca i64, align 8
  %sc = alloca i64, align 8
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !7185, metadata !DIExpression()), !dbg !7186
  call void @llvm.dbg.declare(metadata i64* %sc, metadata !7187, metadata !DIExpression()), !dbg !7188
  %0 = load i64, i64* %s.addr, align 8, !dbg !7189
  %call = call i64 @klee_get_valuel(i64 %0), !dbg !7190
  store i64 %call, i64* %sc, align 8, !dbg !7188
  %1 = load i64, i64* %sc, align 8, !dbg !7191
  %2 = load i64, i64* %s.addr, align 8, !dbg !7192
  %cmp = icmp eq i64 %1, %2, !dbg !7193
  %conv = zext i1 %cmp to i32, !dbg !7193
  %conv1 = sext i32 %conv to i64, !dbg !7191
  call void @klee_assume(i64 %conv1), !dbg !7194
  %3 = load i64, i64* %sc, align 8, !dbg !7195
  ret i64 %3, !dbg !7196
}

declare dso_local void @klee_check_memory_access(i8*, i64) #4

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @write(i32 %fd, i8* %buf, i64 %count) #0 !dbg !265 {
entry:
  %retval = alloca i64, align 8
  %fd.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %f = alloca %struct.exe_file_t.18*, align 8
  %r = alloca i32, align 4
  %actual_count = alloca i64, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !7197, metadata !DIExpression()), !dbg !7198
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !7199, metadata !DIExpression()), !dbg !7200
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !7201, metadata !DIExpression()), !dbg !7202
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !7203, metadata !DIExpression()), !dbg !7204
  %0 = load i32, i32* @write.n_calls, align 4, !dbg !7205
  %inc = add nsw i32 %0, 1, !dbg !7205
  store i32 %inc, i32* @write.n_calls, align 4, !dbg !7205
  %1 = load i32, i32* %fd.addr, align 4, !dbg !7206
  %call = call %struct.exe_file_t.18* @__get_file(i32 %1), !dbg !7207
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !7208
  %2 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7209
  %tobool = icmp ne %struct.exe_file_t.18* %2, null, !dbg !7209
  br i1 %tobool, label %if.end, label %if.then, !dbg !7211

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !7212
  store i32 9, i32* %call1, align 4, !dbg !7214
  store i64 -1, i64* %retval, align 8, !dbg !7215
  br label %return, !dbg !7215

if.end:                                           ; preds = %entry
  %3 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7216
  %tobool2 = icmp ne i32 %3, 0, !dbg !7218
  br i1 %tobool2, label %land.lhs.true, label %if.end5, !dbg !7219

land.lhs.true:                                    ; preds = %if.end
  %4 = load i32*, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 7), align 8, !dbg !7220
  %5 = load i32, i32* %4, align 4, !dbg !7221
  %6 = load i32, i32* @write.n_calls, align 4, !dbg !7222
  %cmp = icmp eq i32 %5, %6, !dbg !7223
  br i1 %cmp, label %if.then3, label %if.end5, !dbg !7224

if.then3:                                         ; preds = %land.lhs.true
  %7 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7225
  %dec = add i32 %7, -1, !dbg !7225
  store i32 %dec, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7225
  %call4 = call i32* @__errno_location() #23, !dbg !7227
  store i32 5, i32* %call4, align 4, !dbg !7228
  store i64 -1, i64* %retval, align 8, !dbg !7229
  br label %return, !dbg !7229

if.end5:                                          ; preds = %land.lhs.true, %if.end
  %8 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7230
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %8, i32 0, i32 3, !dbg !7232
  %9 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7232
  %tobool6 = icmp ne %struct.exe_disk_file_t.17* %9, null, !dbg !7230
  br i1 %tobool6, label %if.else42, label %if.then7, !dbg !7233

if.then7:                                         ; preds = %if.end5
  call void @llvm.dbg.declare(metadata i32* %r, metadata !7234, metadata !DIExpression()), !dbg !7236
  %10 = load i8*, i8** %buf.addr, align 8, !dbg !7237
  %call8 = call i8* @__concretize_ptr(i8* %10), !dbg !7238
  store i8* %call8, i8** %buf.addr, align 8, !dbg !7239
  %11 = load i64, i64* %count.addr, align 8, !dbg !7240
  %call9 = call i64 @__concretize_size(i64 %11), !dbg !7241
  store i64 %call9, i64* %count.addr, align 8, !dbg !7242
  %12 = load i8*, i8** %buf.addr, align 8, !dbg !7243
  %13 = load i64, i64* %count.addr, align 8, !dbg !7244
  call void @klee_check_memory_access(i8* %12, i64 %13), !dbg !7245
  %14 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7246
  %fd10 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %14, i32 0, i32 0, !dbg !7248
  %15 = load i32, i32* %fd10, align 8, !dbg !7248
  %cmp11 = icmp eq i32 %15, 1, !dbg !7249
  br i1 %cmp11, label %if.then14, label %lor.lhs.false, !dbg !7250

lor.lhs.false:                                    ; preds = %if.then7
  %16 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7251
  %fd12 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %16, i32 0, i32 0, !dbg !7252
  %17 = load i32, i32* %fd12, align 8, !dbg !7252
  %cmp13 = icmp eq i32 %17, 2, !dbg !7253
  br i1 %cmp13, label %if.then14, label %if.else, !dbg !7254

if.then14:                                        ; preds = %lor.lhs.false, %if.then7
  %18 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7255
  %fd15 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %18, i32 0, i32 0, !dbg !7256
  %19 = load i32, i32* %fd15, align 8, !dbg !7256
  %20 = load i8*, i8** %buf.addr, align 8, !dbg !7257
  %21 = load i64, i64* %count.addr, align 8, !dbg !7258
  %call16 = call i64 (i64, ...) @syscall(i64 1, i32 %19, i8* %20, i64 %21) #7, !dbg !7259
  %conv = trunc i64 %call16 to i32, !dbg !7259
  store i32 %conv, i32* %r, align 4, !dbg !7260
  br label %if.end20, !dbg !7261

if.else:                                          ; preds = %lor.lhs.false
  %22 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7262
  %fd17 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %22, i32 0, i32 0, !dbg !7263
  %23 = load i32, i32* %fd17, align 8, !dbg !7263
  %24 = load i8*, i8** %buf.addr, align 8, !dbg !7264
  %25 = load i64, i64* %count.addr, align 8, !dbg !7265
  %26 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7266
  %off = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %26, i32 0, i32 2, !dbg !7267
  %27 = load i64, i64* %off, align 8, !dbg !7267
  %call18 = call i64 (i64, ...) @syscall(i64 18, i32 %23, i8* %24, i64 %25, i64 %27) #7, !dbg !7268
  %conv19 = trunc i64 %call18 to i32, !dbg !7268
  store i32 %conv19, i32* %r, align 4, !dbg !7269
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then14
  %28 = load i32, i32* %r, align 4, !dbg !7270
  %cmp21 = icmp eq i32 %28, -1, !dbg !7272
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !7273

if.then23:                                        ; preds = %if.end20
  store i64 -1, i64* %retval, align 8, !dbg !7274
  br label %return, !dbg !7274

if.end24:                                         ; preds = %if.end20
  %29 = load i32, i32* %r, align 4, !dbg !7275
  %cmp25 = icmp sge i32 %29, 0, !dbg !7275
  br i1 %cmp25, label %if.end29, label %if.else28, !dbg !7278

if.else28:                                        ; preds = %if.end24
  call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5.99, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4.96, i64 0, i64 0), i32 429, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @__PRETTY_FUNCTION__.write, i64 0, i64 0)) #18, !dbg !7275
  unreachable, !dbg !7275

if.end29:                                         ; preds = %if.end24
  %30 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7279
  %fd30 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %30, i32 0, i32 0, !dbg !7281
  %31 = load i32, i32* %fd30, align 8, !dbg !7281
  %cmp31 = icmp ne i32 %31, 1, !dbg !7282
  br i1 %cmp31, label %land.lhs.true33, label %if.end40, !dbg !7283

land.lhs.true33:                                  ; preds = %if.end29
  %32 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7284
  %fd34 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %32, i32 0, i32 0, !dbg !7285
  %33 = load i32, i32* %fd34, align 8, !dbg !7285
  %cmp35 = icmp ne i32 %33, 2, !dbg !7286
  br i1 %cmp35, label %if.then37, label %if.end40, !dbg !7287

if.then37:                                        ; preds = %land.lhs.true33
  %34 = load i32, i32* %r, align 4, !dbg !7288
  %conv38 = sext i32 %34 to i64, !dbg !7288
  %35 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7289
  %off39 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %35, i32 0, i32 2, !dbg !7290
  %36 = load i64, i64* %off39, align 8, !dbg !7291
  %add = add nsw i64 %36, %conv38, !dbg !7291
  store i64 %add, i64* %off39, align 8, !dbg !7291
  br label %if.end40, !dbg !7289

if.end40:                                         ; preds = %if.then37, %land.lhs.true33, %if.end29
  %37 = load i32, i32* %r, align 4, !dbg !7292
  %conv41 = sext i32 %37 to i64, !dbg !7292
  store i64 %conv41, i64* %retval, align 8, !dbg !7293
  br label %return, !dbg !7293

if.else42:                                        ; preds = %if.end5
  call void @llvm.dbg.declare(metadata i64* %actual_count, metadata !7294, metadata !DIExpression()), !dbg !7296
  store i64 0, i64* %actual_count, align 8, !dbg !7296
  %38 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7297
  %off43 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %38, i32 0, i32 2, !dbg !7299
  %39 = load i64, i64* %off43, align 8, !dbg !7299
  %40 = load i64, i64* %count.addr, align 8, !dbg !7300
  %add44 = add i64 %39, %40, !dbg !7301
  %41 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7302
  %dfile45 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %41, i32 0, i32 3, !dbg !7303
  %42 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile45, align 8, !dbg !7303
  %size = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %42, i32 0, i32 0, !dbg !7304
  %43 = load i32, i32* %size, align 8, !dbg !7304
  %conv46 = zext i32 %43 to i64, !dbg !7302
  %cmp47 = icmp ule i64 %add44, %conv46, !dbg !7305
  br i1 %cmp47, label %if.then49, label %if.else50, !dbg !7306

if.then49:                                        ; preds = %if.else42
  %44 = load i64, i64* %count.addr, align 8, !dbg !7307
  store i64 %44, i64* %actual_count, align 8, !dbg !7308
  br label %if.end67, !dbg !7309

if.else50:                                        ; preds = %if.else42
  %45 = load i32, i32* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 3), align 8, !dbg !7310
  %tobool51 = icmp ne i32 %45, 0, !dbg !7313
  br i1 %tobool51, label %if.then52, label %if.else53, !dbg !7314

if.then52:                                        ; preds = %if.else50
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6.100, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4.96, i64 0, i64 0), i32 442, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @__PRETTY_FUNCTION__.write, i64 0, i64 0)) #18, !dbg !7315
  unreachable, !dbg !7315

if.else53:                                        ; preds = %if.else50
  %46 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7318
  %off54 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %46, i32 0, i32 2, !dbg !7321
  %47 = load i64, i64* %off54, align 8, !dbg !7321
  %48 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7322
  %dfile55 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %48, i32 0, i32 3, !dbg !7323
  %49 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile55, align 8, !dbg !7323
  %size56 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %49, i32 0, i32 0, !dbg !7324
  %50 = load i32, i32* %size56, align 8, !dbg !7324
  %conv57 = zext i32 %50 to i64, !dbg !7325
  %cmp58 = icmp slt i64 %47, %conv57, !dbg !7326
  br i1 %cmp58, label %if.then60, label %if.end67, !dbg !7327

if.then60:                                        ; preds = %if.else53
  %51 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7328
  %dfile61 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %51, i32 0, i32 3, !dbg !7329
  %52 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile61, align 8, !dbg !7329
  %size62 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %52, i32 0, i32 0, !dbg !7330
  %53 = load i32, i32* %size62, align 8, !dbg !7330
  %conv63 = zext i32 %53 to i64, !dbg !7328
  %54 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7331
  %off64 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %54, i32 0, i32 2, !dbg !7332
  %55 = load i64, i64* %off64, align 8, !dbg !7332
  %sub = sub nsw i64 %conv63, %55, !dbg !7333
  store i64 %sub, i64* %actual_count, align 8, !dbg !7334
  br label %if.end67, !dbg !7335

if.end67:                                         ; preds = %if.then60, %if.else53, %if.then49
  %56 = load i64, i64* %actual_count, align 8, !dbg !7336
  %tobool68 = icmp ne i64 %56, 0, !dbg !7336
  br i1 %tobool68, label %if.then69, label %if.end72, !dbg !7338

if.then69:                                        ; preds = %if.end67
  %57 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7339
  %dfile70 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %57, i32 0, i32 3, !dbg !7340
  %58 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile70, align 8, !dbg !7340
  %contents = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %58, i32 0, i32 1, !dbg !7341
  %59 = load i8*, i8** %contents, align 8, !dbg !7341
  %60 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7342
  %off71 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %60, i32 0, i32 2, !dbg !7343
  %61 = load i64, i64* %off71, align 8, !dbg !7343
  %add.ptr = getelementptr inbounds i8, i8* %59, i64 %61, !dbg !7344
  %62 = load i8*, i8** %buf.addr, align 8, !dbg !7345
  %63 = load i64, i64* %actual_count, align 8, !dbg !7346
  %64 = call i8* @memcpy(i8* %add.ptr, i8* %62, i64 %63), !dbg !7347
  br label %if.end72, !dbg !7347

if.end72:                                         ; preds = %if.then69, %if.end67
  %65 = load i64, i64* %count.addr, align 8, !dbg !7348
  %66 = load i64, i64* %actual_count, align 8, !dbg !7350
  %cmp73 = icmp ne i64 %65, %66, !dbg !7351
  br i1 %cmp73, label %if.then75, label %if.end76, !dbg !7352

if.then75:                                        ; preds = %if.end72
  call void @klee_warning(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7.101, i64 0, i64 0)), !dbg !7353
  br label %if.end76, !dbg !7353

if.end76:                                         ; preds = %if.then75, %if.end72
  %67 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7354
  %dfile77 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %67, i32 0, i32 3, !dbg !7356
  %68 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile77, align 8, !dbg !7356
  %69 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 2), align 8, !dbg !7357
  %cmp78 = icmp eq %struct.exe_disk_file_t.17* %68, %69, !dbg !7358
  br i1 %cmp78, label %if.then80, label %if.end84, !dbg !7359

if.then80:                                        ; preds = %if.end76
  %70 = load i64, i64* %actual_count, align 8, !dbg !7360
  %71 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 3), align 8, !dbg !7361
  %conv81 = zext i32 %71 to i64, !dbg !7361
  %add82 = add i64 %conv81, %70, !dbg !7361
  %conv83 = trunc i64 %add82 to i32, !dbg !7361
  store i32 %conv83, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 3), align 8, !dbg !7361
  br label %if.end84, !dbg !7362

if.end84:                                         ; preds = %if.then80, %if.end76
  %72 = load i64, i64* %count.addr, align 8, !dbg !7363
  %73 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7364
  %off85 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %73, i32 0, i32 2, !dbg !7365
  %74 = load i64, i64* %off85, align 8, !dbg !7366
  %add86 = add i64 %74, %72, !dbg !7366
  store i64 %add86, i64* %off85, align 8, !dbg !7366
  %75 = load i64, i64* %count.addr, align 8, !dbg !7367
  store i64 %75, i64* %retval, align 8, !dbg !7368
  br label %return, !dbg !7368

return:                                           ; preds = %if.end84, %if.end40, %if.then23, %if.then3, %if.then
  %76 = load i64, i64* %retval, align 8, !dbg !7369
  ret i64 %76, !dbg !7369
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @__fd_lseek(i32 %fd, i64 %offset, i32 %whence) #0 !dbg !7370 {
entry:
  %retval = alloca i64, align 8
  %fd.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  %whence.addr = alloca i32, align 4
  %new_off = alloca i64, align 8
  %f = alloca %struct.exe_file_t.18*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !7373, metadata !DIExpression()), !dbg !7374
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !7375, metadata !DIExpression()), !dbg !7376
  store i32 %whence, i32* %whence.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %whence.addr, metadata !7377, metadata !DIExpression()), !dbg !7378
  call void @llvm.dbg.declare(metadata i64* %new_off, metadata !7379, metadata !DIExpression()), !dbg !7380
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !7381, metadata !DIExpression()), !dbg !7382
  %0 = load i32, i32* %fd.addr, align 4, !dbg !7383
  %call = call %struct.exe_file_t.18* @__get_file(i32 %0), !dbg !7384
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !7382
  %1 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7385
  %tobool = icmp ne %struct.exe_file_t.18* %1, null, !dbg !7385
  br i1 %tobool, label %if.end, label %if.then, !dbg !7387

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !7388
  store i32 9, i32* %call1, align 4, !dbg !7390
  store i64 -1, i64* %retval, align 8, !dbg !7391
  br label %return, !dbg !7391

if.end:                                           ; preds = %entry
  %2 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7392
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %2, i32 0, i32 3, !dbg !7394
  %3 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7394
  %tobool2 = icmp ne %struct.exe_disk_file_t.17* %3, null, !dbg !7392
  %4 = load i32, i32* %whence.addr, align 4, !dbg !7395
  br i1 %tobool2, label %if.end24, label %if.then3, !dbg !7396

if.then3:                                         ; preds = %if.end
  %cmp = icmp eq i32 %4, 0, !dbg !7397
  %5 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7400
  %fd5 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %5, i32 0, i32 0, !dbg !7400
  %6 = load i32, i32* %fd5, align 8, !dbg !7400
  br i1 %cmp, label %if.then4, label %if.else, !dbg !7401

if.then4:                                         ; preds = %if.then3
  %7 = load i64, i64* %offset.addr, align 8, !dbg !7402
  %call6 = call i64 (i64, ...) @syscall(i64 8, i32 %6, i64 %7, i32 0) #7, !dbg !7404
  store i64 %call6, i64* %new_off, align 8, !dbg !7405
  br label %if.end19, !dbg !7406

if.else:                                          ; preds = %if.then3
  %8 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7407
  %off = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %8, i32 0, i32 2, !dbg !7409
  %9 = load i64, i64* %off, align 8, !dbg !7409
  %call8 = call i64 (i64, ...) @syscall(i64 8, i32 %6, i64 %9, i32 0) #7, !dbg !7410
  store i64 %call8, i64* %new_off, align 8, !dbg !7411
  %10 = load i64, i64* %new_off, align 8, !dbg !7412
  %cmp9 = icmp ne i64 %10, -1, !dbg !7414
  br i1 %cmp9, label %if.then10, label %if.end19, !dbg !7415

if.then10:                                        ; preds = %if.else
  %11 = load i64, i64* %new_off, align 8, !dbg !7416
  %12 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7416
  %off11 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %12, i32 0, i32 2, !dbg !7416
  %13 = load i64, i64* %off11, align 8, !dbg !7416
  %cmp12 = icmp eq i64 %11, %13, !dbg !7416
  br i1 %cmp12, label %if.end15, label %if.else14, !dbg !7420

if.else14:                                        ; preds = %if.then10
  call void @__assert_fail(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8.104, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4.96, i64 0, i64 0), i32 488, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @__PRETTY_FUNCTION__.__fd_lseek, i64 0, i64 0)) #18, !dbg !7416
  unreachable, !dbg !7416

if.end15:                                         ; preds = %if.then10
  %14 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7421
  %fd16 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %14, i32 0, i32 0, !dbg !7422
  %15 = load i32, i32* %fd16, align 8, !dbg !7422
  %16 = load i64, i64* %offset.addr, align 8, !dbg !7423
  %17 = load i32, i32* %whence.addr, align 4, !dbg !7424
  %call17 = call i64 (i64, ...) @syscall(i64 8, i32 %15, i64 %16, i32 %17) #7, !dbg !7425
  store i64 %call17, i64* %new_off, align 8, !dbg !7426
  br label %if.end19, !dbg !7427

if.end19:                                         ; preds = %if.else, %if.end15, %if.then4
  %18 = load i64, i64* %new_off, align 8, !dbg !7428
  %cmp20 = icmp eq i64 %18, -1, !dbg !7430
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !7431

if.then21:                                        ; preds = %if.end19
  store i64 -1, i64* %retval, align 8, !dbg !7432
  br label %return, !dbg !7432

if.end22:                                         ; preds = %if.end19
  %19 = load i64, i64* %new_off, align 8, !dbg !7433
  %20 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7434
  %off23 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %20, i32 0, i32 2, !dbg !7435
  store i64 %19, i64* %off23, align 8, !dbg !7436
  %21 = load i64, i64* %new_off, align 8, !dbg !7437
  store i64 %21, i64* %retval, align 8, !dbg !7438
  br label %return, !dbg !7438

if.end24:                                         ; preds = %if.end
  switch i32 %4, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb25
    i32 2, label %sw.bb27
  ], !dbg !7439

sw.bb:                                            ; preds = %if.end24
  %22 = load i64, i64* %offset.addr, align 8, !dbg !7440
  store i64 %22, i64* %new_off, align 8, !dbg !7442
  br label %sw.epilog, !dbg !7443

sw.bb25:                                          ; preds = %if.end24
  %23 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7444
  %off26 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %23, i32 0, i32 2, !dbg !7445
  %24 = load i64, i64* %off26, align 8, !dbg !7445
  %25 = load i64, i64* %offset.addr, align 8, !dbg !7446
  %add = add nsw i64 %24, %25, !dbg !7447
  store i64 %add, i64* %new_off, align 8, !dbg !7448
  br label %sw.epilog, !dbg !7449

sw.bb27:                                          ; preds = %if.end24
  %26 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7450
  %dfile28 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %26, i32 0, i32 3, !dbg !7451
  %27 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile28, align 8, !dbg !7451
  %size = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %27, i32 0, i32 0, !dbg !7452
  %28 = load i32, i32* %size, align 8, !dbg !7452
  %conv = zext i32 %28 to i64, !dbg !7450
  %29 = load i64, i64* %offset.addr, align 8, !dbg !7453
  %add29 = add nsw i64 %conv, %29, !dbg !7454
  store i64 %add29, i64* %new_off, align 8, !dbg !7455
  br label %sw.epilog, !dbg !7456

sw.default:                                       ; preds = %if.end24
  %call30 = call i32* @__errno_location() #23, !dbg !7457
  store i32 22, i32* %call30, align 4, !dbg !7459
  store i64 -1, i64* %retval, align 8, !dbg !7460
  br label %return, !dbg !7460

sw.epilog:                                        ; preds = %sw.bb27, %sw.bb25, %sw.bb
  %30 = load i64, i64* %new_off, align 8, !dbg !7461
  %cmp31 = icmp slt i64 %30, 0, !dbg !7463
  br i1 %cmp31, label %if.then33, label %if.end35, !dbg !7464

if.then33:                                        ; preds = %sw.epilog
  %call34 = call i32* @__errno_location() #23, !dbg !7465
  store i32 22, i32* %call34, align 4, !dbg !7467
  store i64 -1, i64* %retval, align 8, !dbg !7468
  br label %return, !dbg !7468

if.end35:                                         ; preds = %sw.epilog
  %31 = load i64, i64* %new_off, align 8, !dbg !7469
  %32 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7470
  %off36 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %32, i32 0, i32 2, !dbg !7471
  store i64 %31, i64* %off36, align 8, !dbg !7472
  %33 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7473
  %off37 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %33, i32 0, i32 2, !dbg !7474
  %34 = load i64, i64* %off37, align 8, !dbg !7474
  store i64 %34, i64* %retval, align 8, !dbg !7475
  br label %return, !dbg !7475

return:                                           ; preds = %if.end35, %if.then33, %sw.default, %if.end22, %if.then21, %if.then
  %35 = load i64, i64* %retval, align 8, !dbg !7476
  ret i64 %35, !dbg !7476
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @__fd_stat(i8* %path, %struct.stat64.16* %buf) #0 !dbg !7477 {
entry:
  %retval = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  %buf.addr = alloca %struct.stat64.16*, align 8
  %dfile = alloca %struct.exe_disk_file_t.17*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !7480, metadata !DIExpression()), !dbg !7481
  store %struct.stat64.16* %buf, %struct.stat64.16** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %buf.addr, metadata !7482, metadata !DIExpression()), !dbg !7483
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %dfile, metadata !7484, metadata !DIExpression()), !dbg !7485
  %0 = load i8*, i8** %path.addr, align 8, !dbg !7486
  %call = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %0), !dbg !7487
  store %struct.exe_disk_file_t.17* %call, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7485
  %1 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7488
  %tobool = icmp ne %struct.exe_disk_file_t.17* %1, null, !dbg !7488
  br i1 %tobool, label %if.then, label %if.end, !dbg !7490

if.then:                                          ; preds = %entry
  %2 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !7491
  %3 = bitcast %struct.stat64.16* %2 to i8*, !dbg !7493
  %4 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7494
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %4, i32 0, i32 2, !dbg !7495
  %5 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !7495
  %6 = bitcast %struct.stat64.16* %5 to i8*, !dbg !7493
  %7 = call i8* @memcpy(i8* %3, i8* %6, i64 144), !dbg !7493
  store i32 0, i32* %retval, align 4, !dbg !7496
  br label %return, !dbg !7496

if.end:                                           ; preds = %entry
  %8 = load i8*, i8** %path.addr, align 8, !dbg !7497
  %call1 = call i8* @__concretize_string(i8* %8), !dbg !7499
  %9 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !7500
  %call2 = call i64 (i64, ...) @syscall(i64 4, i8* %call1, %struct.stat64.16* %9) #7, !dbg !7501
  %conv = trunc i64 %call2 to i32, !dbg !7501
  store i32 %conv, i32* %retval, align 4, !dbg !7502
  br label %return, !dbg !7502

return:                                           ; preds = %if.end, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !7503
  ret i32 %10, !dbg !7503
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @fstatat(i32 %fd, i8* nonnull %path, %struct.stat64.16* nonnull %buf, i32 %flags) #0 !dbg !7504 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  %buf.addr = alloca %struct.stat64.16*, align 8
  %flags.addr = alloca i32, align 4
  %f = alloca %struct.exe_file_t.18*, align 8
  %dfile9 = alloca %struct.exe_disk_file_t.17*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !7507, metadata !DIExpression()), !dbg !7508
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !7509, metadata !DIExpression()), !dbg !7510
  store %struct.stat64.16* %buf, %struct.stat64.16** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %buf.addr, metadata !7511, metadata !DIExpression()), !dbg !7512
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7513, metadata !DIExpression()), !dbg !7514
  %0 = load i32, i32* %fd.addr, align 4, !dbg !7515
  %cmp = icmp ne i32 %0, -100, !dbg !7517
  br i1 %cmp, label %if.then, label %if.end8, !dbg !7518

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !7519, metadata !DIExpression()), !dbg !7521
  %1 = load i32, i32* %fd.addr, align 4, !dbg !7522
  %call = call %struct.exe_file_t.18* @__get_file(i32 %1), !dbg !7523
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !7521
  %2 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7524
  %tobool = icmp ne %struct.exe_file_t.18* %2, null, !dbg !7524
  br i1 %tobool, label %if.else, label %if.then1, !dbg !7526

if.then1:                                         ; preds = %if.then
  %call2 = call i32* @__errno_location() #23, !dbg !7527
  store i32 9, i32* %call2, align 4, !dbg !7529
  store i32 -1, i32* %retval, align 4, !dbg !7530
  br label %return, !dbg !7530

if.else:                                          ; preds = %if.then
  %3 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7531
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %3, i32 0, i32 3, !dbg !7533
  %4 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7533
  %tobool3 = icmp ne %struct.exe_disk_file_t.17* %4, null, !dbg !7531
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !7534

if.then4:                                         ; preds = %if.else
  call void @klee_warning(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2.92, i64 0, i64 0)), !dbg !7535
  %call5 = call i32* @__errno_location() #23, !dbg !7537
  store i32 2, i32* %call5, align 4, !dbg !7538
  store i32 -1, i32* %retval, align 4, !dbg !7539
  br label %return, !dbg !7539

if.end6:                                          ; preds = %if.else
  %5 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7540
  %fd7 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %5, i32 0, i32 0, !dbg !7541
  %6 = load i32, i32* %fd7, align 8, !dbg !7541
  store i32 %6, i32* %fd.addr, align 4, !dbg !7542
  br label %if.end8, !dbg !7543

if.end8:                                          ; preds = %if.end6, %entry
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %dfile9, metadata !7544, metadata !DIExpression()), !dbg !7545
  %7 = load i8*, i8** %path.addr, align 8, !dbg !7546
  %call10 = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %7), !dbg !7547
  store %struct.exe_disk_file_t.17* %call10, %struct.exe_disk_file_t.17** %dfile9, align 8, !dbg !7545
  %8 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile9, align 8, !dbg !7548
  %tobool11 = icmp ne %struct.exe_disk_file_t.17* %8, null, !dbg !7548
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !7550

if.then12:                                        ; preds = %if.end8
  %9 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !7551
  %10 = bitcast %struct.stat64.16* %9 to i8*, !dbg !7553
  %11 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile9, align 8, !dbg !7554
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %11, i32 0, i32 2, !dbg !7555
  %12 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !7555
  %13 = bitcast %struct.stat64.16* %12 to i8*, !dbg !7553
  %14 = call i8* @memcpy(i8* %10, i8* %13, i64 144), !dbg !7553
  store i32 0, i32* %retval, align 4, !dbg !7556
  br label %return, !dbg !7556

if.end13:                                         ; preds = %if.end8
  %15 = load i32, i32* %fd.addr, align 4, !dbg !7557
  %conv = sext i32 %15 to i64, !dbg !7558
  %16 = load i8*, i8** %path.addr, align 8, !dbg !7559
  %tobool14 = icmp ne i8* %16, null, !dbg !7559
  br i1 %tobool14, label %cond.true, label %cond.end, !dbg !7559

cond.true:                                        ; preds = %if.end13
  %17 = load i8*, i8** %path.addr, align 8, !dbg !7560
  %call15 = call i8* @__concretize_string(i8* %17), !dbg !7561
  br label %cond.end, !dbg !7559

cond.end:                                         ; preds = %if.end13, %cond.true
  %cond = phi i8* [ %call15, %cond.true ], [ null, %if.end13 ], !dbg !7559
  %18 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !7562
  %19 = load i32, i32* %flags.addr, align 4, !dbg !7563
  %conv16 = sext i32 %19 to i64, !dbg !7564
  %call17 = call i64 (i64, ...) @syscall(i64 262, i64 %conv, i8* %cond, %struct.stat64.16* %18, i64 %conv16) #7, !dbg !7565
  %conv18 = trunc i64 %call17 to i32, !dbg !7565
  store i32 %conv18, i32* %retval, align 4, !dbg !7566
  br label %return, !dbg !7566

return:                                           ; preds = %cond.end, %if.then12, %if.then4, %if.then1
  %20 = load i32, i32* %retval, align 4, !dbg !7567
  ret i32 %20, !dbg !7567
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @__fd_lstat(i8* %path, %struct.stat64.16* %buf) #0 !dbg !7568 {
entry:
  %retval = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  %buf.addr = alloca %struct.stat64.16*, align 8
  %dfile = alloca %struct.exe_disk_file_t.17*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !7569, metadata !DIExpression()), !dbg !7570
  store %struct.stat64.16* %buf, %struct.stat64.16** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %buf.addr, metadata !7571, metadata !DIExpression()), !dbg !7572
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %dfile, metadata !7573, metadata !DIExpression()), !dbg !7574
  %0 = load i8*, i8** %path.addr, align 8, !dbg !7575
  %call = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %0), !dbg !7576
  store %struct.exe_disk_file_t.17* %call, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7574
  %1 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7577
  %tobool = icmp ne %struct.exe_disk_file_t.17* %1, null, !dbg !7577
  br i1 %tobool, label %if.then, label %if.end, !dbg !7579

if.then:                                          ; preds = %entry
  %2 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !7580
  %3 = bitcast %struct.stat64.16* %2 to i8*, !dbg !7582
  %4 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7583
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %4, i32 0, i32 2, !dbg !7584
  %5 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !7584
  %6 = bitcast %struct.stat64.16* %5 to i8*, !dbg !7582
  %7 = call i8* @memcpy(i8* %3, i8* %6, i64 144), !dbg !7582
  store i32 0, i32* %retval, align 4, !dbg !7585
  br label %return, !dbg !7585

if.end:                                           ; preds = %entry
  %8 = load i8*, i8** %path.addr, align 8, !dbg !7586
  %call1 = call i8* @__concretize_string(i8* %8), !dbg !7588
  %9 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !7589
  %call2 = call i64 (i64, ...) @syscall(i64 6, i8* %call1, %struct.stat64.16* %9) #7, !dbg !7590
  %conv = trunc i64 %call2 to i32, !dbg !7590
  store i32 %conv, i32* %retval, align 4, !dbg !7591
  br label %return, !dbg !7591

return:                                           ; preds = %if.end, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !7592
  ret i32 %10, !dbg !7592
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @chdir(i8* nonnull %path) #0 !dbg !7593 {
entry:
  %retval = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  %dfile = alloca %struct.exe_disk_file_t.17*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !7594, metadata !DIExpression()), !dbg !7595
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %dfile, metadata !7596, metadata !DIExpression()), !dbg !7597
  %0 = load i8*, i8** %path.addr, align 8, !dbg !7598
  %call = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %0), !dbg !7599
  store %struct.exe_disk_file_t.17* %call, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7597
  %1 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7600
  %tobool = icmp ne %struct.exe_disk_file_t.17* %1, null, !dbg !7600
  br i1 %tobool, label %if.then, label %if.end, !dbg !7602

if.then:                                          ; preds = %entry
  call void @klee_warning(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9.109, i64 0, i64 0)), !dbg !7603
  %call1 = call i32* @__errno_location() #23, !dbg !7605
  store i32 2, i32* %call1, align 4, !dbg !7606
  store i32 -1, i32* %retval, align 4, !dbg !7607
  br label %return, !dbg !7607

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %path.addr, align 8, !dbg !7608
  %call2 = call i8* @__concretize_string(i8* %2), !dbg !7609
  %call3 = call i64 (i64, ...) @syscall(i64 80, i8* %call2) #7, !dbg !7610
  %conv = trunc i64 %call3 to i32, !dbg !7610
  store i32 %conv, i32* %retval, align 4, !dbg !7611
  br label %return, !dbg !7611

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !7612
  ret i32 %3, !dbg !7612
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @fchdir(i32 %fd) #0 !dbg !7613 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %f = alloca %struct.exe_file_t.18*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !7614, metadata !DIExpression()), !dbg !7615
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !7616, metadata !DIExpression()), !dbg !7617
  %0 = load i32, i32* %fd.addr, align 4, !dbg !7618
  %call = call %struct.exe_file_t.18* @__get_file(i32 %0), !dbg !7619
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !7617
  %1 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7620
  %tobool = icmp ne %struct.exe_file_t.18* %1, null, !dbg !7620
  br i1 %tobool, label %if.end, label %if.then, !dbg !7622

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !7623
  store i32 9, i32* %call1, align 4, !dbg !7625
  store i32 -1, i32* %retval, align 4, !dbg !7626
  br label %return, !dbg !7626

if.end:                                           ; preds = %entry
  %2 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7627
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %2, i32 0, i32 3, !dbg !7629
  %3 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7629
  %tobool2 = icmp ne %struct.exe_disk_file_t.17* %3, null, !dbg !7627
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !7630

if.then3:                                         ; preds = %if.end
  call void @klee_warning(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9.109, i64 0, i64 0)), !dbg !7631
  %call4 = call i32* @__errno_location() #23, !dbg !7633
  store i32 2, i32* %call4, align 4, !dbg !7634
  store i32 -1, i32* %retval, align 4, !dbg !7635
  br label %return, !dbg !7635

if.end5:                                          ; preds = %if.end
  %4 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7636
  %fd6 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %4, i32 0, i32 0, !dbg !7637
  %5 = load i32, i32* %fd6, align 8, !dbg !7637
  %call7 = call i64 (i64, ...) @syscall(i64 81, i32 %5) #7, !dbg !7638
  %conv = trunc i64 %call7 to i32, !dbg !7638
  store i32 %conv, i32* %retval, align 4, !dbg !7639
  br label %return, !dbg !7639

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !7640
  ret i32 %6, !dbg !7640
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @chmod(i8* nonnull %path, i32 %mode) #0 !dbg !270 {
entry:
  %retval = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  %mode.addr = alloca i32, align 4
  %dfile = alloca %struct.exe_disk_file_t.17*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !7641, metadata !DIExpression()), !dbg !7642
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !7643, metadata !DIExpression()), !dbg !7644
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %dfile, metadata !7645, metadata !DIExpression()), !dbg !7646
  %0 = load i8*, i8** %path.addr, align 8, !dbg !7647
  %call = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %0), !dbg !7648
  store %struct.exe_disk_file_t.17* %call, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7646
  %1 = load i32, i32* @chmod.n_calls, align 4, !dbg !7649
  %inc = add nsw i32 %1, 1, !dbg !7649
  store i32 %inc, i32* @chmod.n_calls, align 4, !dbg !7649
  %2 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7650
  %tobool = icmp ne i32 %2, 0, !dbg !7652
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7653

land.lhs.true:                                    ; preds = %entry
  %3 = load i32*, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 11), align 8, !dbg !7654
  %4 = load i32, i32* %3, align 4, !dbg !7655
  %5 = load i32, i32* @chmod.n_calls, align 4, !dbg !7656
  %cmp = icmp eq i32 %4, %5, !dbg !7657
  br i1 %cmp, label %if.then, label %if.end, !dbg !7658

if.then:                                          ; preds = %land.lhs.true
  %6 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7659
  %dec = add i32 %6, -1, !dbg !7659
  store i32 %dec, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7659
  %call1 = call i32* @__errno_location() #23, !dbg !7661
  store i32 5, i32* %call1, align 4, !dbg !7662
  store i32 -1, i32* %retval, align 4, !dbg !7663
  br label %return, !dbg !7663

if.end:                                           ; preds = %land.lhs.true, %entry
  %7 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7664
  %tobool2 = icmp ne %struct.exe_disk_file_t.17* %7, null, !dbg !7664
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !7666

if.then3:                                         ; preds = %if.end
  %8 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7667
  %9 = load i32, i32* %mode.addr, align 4, !dbg !7669
  %call4 = call i32 @__df_chmod(%struct.exe_disk_file_t.17* %8, i32 %9), !dbg !7670
  store i32 %call4, i32* %retval, align 4, !dbg !7671
  br label %return, !dbg !7671

if.end5:                                          ; preds = %if.end
  %10 = load i8*, i8** %path.addr, align 8, !dbg !7672
  %call6 = call i8* @__concretize_string(i8* %10), !dbg !7673
  %11 = load i32, i32* %mode.addr, align 4, !dbg !7674
  %call7 = call i64 (i64, ...) @syscall(i64 90, i8* %call6, i32 %11) #7, !dbg !7675
  %conv = trunc i64 %call7 to i32, !dbg !7675
  store i32 %conv, i32* %retval, align 4, !dbg !7676
  br label %return, !dbg !7676

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7677
  ret i32 %12, !dbg !7677
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @__df_chmod(%struct.exe_disk_file_t.17* %df, i32 %mode) #0 !dbg !7678 {
entry:
  %retval = alloca i32, align 4
  %df.addr = alloca %struct.exe_disk_file_t.17*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.exe_disk_file_t.17* %df, %struct.exe_disk_file_t.17** %df.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %df.addr, metadata !7681, metadata !DIExpression()), !dbg !7682
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !7683, metadata !DIExpression()), !dbg !7684
  %call = call i32 @geteuid() #7, !dbg !7685
  %0 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df.addr, align 8, !dbg !7687
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %0, i32 0, i32 2, !dbg !7688
  %1 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !7688
  %st_uid = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %1, i32 0, i32 4, !dbg !7689
  %2 = load i32, i32* %st_uid, align 4, !dbg !7689
  %cmp = icmp eq i32 %call, %2, !dbg !7690
  br i1 %cmp, label %if.then, label %if.else, !dbg !7691

if.then:                                          ; preds = %entry
  %call1 = call i32 @getgid() #7, !dbg !7692
  %3 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df.addr, align 8, !dbg !7695
  %stat2 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %3, i32 0, i32 2, !dbg !7696
  %4 = load %struct.stat64.16*, %struct.stat64.16** %stat2, align 8, !dbg !7696
  %st_gid = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %4, i32 0, i32 5, !dbg !7697
  %5 = load i32, i32* %st_gid, align 8, !dbg !7697
  %cmp3 = icmp ne i32 %call1, %5, !dbg !7698
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !7699

if.then4:                                         ; preds = %if.then
  %6 = load i32, i32* %mode.addr, align 4, !dbg !7700
  %and = and i32 %6, -1025, !dbg !7700
  store i32 %and, i32* %mode.addr, align 4, !dbg !7700
  br label %if.end, !dbg !7701

if.end:                                           ; preds = %if.then4, %if.then
  %7 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df.addr, align 8, !dbg !7702
  %stat5 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %7, i32 0, i32 2, !dbg !7703
  %8 = load %struct.stat64.16*, %struct.stat64.16** %stat5, align 8, !dbg !7703
  %st_mode = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %8, i32 0, i32 3, !dbg !7704
  %9 = load i32, i32* %st_mode, align 8, !dbg !7704
  %and6 = and i32 %9, -4096, !dbg !7705
  %10 = load i32, i32* %mode.addr, align 4, !dbg !7706
  %and7 = and i32 %10, 4095, !dbg !7707
  %or = or i32 %and6, %and7, !dbg !7708
  %11 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df.addr, align 8, !dbg !7709
  %stat8 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %11, i32 0, i32 2, !dbg !7710
  %12 = load %struct.stat64.16*, %struct.stat64.16** %stat8, align 8, !dbg !7710
  %st_mode9 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %12, i32 0, i32 3, !dbg !7711
  store i32 %or, i32* %st_mode9, align 8, !dbg !7712
  store i32 0, i32* %retval, align 4, !dbg !7713
  br label %return, !dbg !7713

if.else:                                          ; preds = %entry
  %call10 = call i32* @__errno_location() #23, !dbg !7714
  store i32 1, i32* %call10, align 4, !dbg !7716
  store i32 -1, i32* %retval, align 4, !dbg !7717
  br label %return, !dbg !7717

return:                                           ; preds = %if.else, %if.end
  %13 = load i32, i32* %retval, align 4, !dbg !7718
  ret i32 %13, !dbg !7718
}

; Function Attrs: nounwind
declare dso_local i32 @geteuid() #3

; Function Attrs: nounwind
declare dso_local i32 @getgid() #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @fchmod(i32 %fd, i32 %mode) #0 !dbg !277 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %f = alloca %struct.exe_file_t.18*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !7719, metadata !DIExpression()), !dbg !7720
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !7721, metadata !DIExpression()), !dbg !7722
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !7723, metadata !DIExpression()), !dbg !7724
  %0 = load i32, i32* %fd.addr, align 4, !dbg !7725
  %call = call %struct.exe_file_t.18* @__get_file(i32 %0), !dbg !7726
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !7724
  %1 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7727
  %tobool = icmp ne %struct.exe_file_t.18* %1, null, !dbg !7727
  br i1 %tobool, label %if.end, label %if.then, !dbg !7729

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !7730
  store i32 9, i32* %call1, align 4, !dbg !7732
  store i32 -1, i32* %retval, align 4, !dbg !7733
  br label %return, !dbg !7733

if.end:                                           ; preds = %entry
  %2 = load i32, i32* @fchmod.n_calls, align 4, !dbg !7734
  %inc = add nsw i32 %2, 1, !dbg !7734
  store i32 %inc, i32* @fchmod.n_calls, align 4, !dbg !7734
  %3 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7735
  %tobool2 = icmp ne i32 %3, 0, !dbg !7737
  br i1 %tobool2, label %land.lhs.true, label %if.end5, !dbg !7738

land.lhs.true:                                    ; preds = %if.end
  %4 = load i32*, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 12), align 8, !dbg !7739
  %5 = load i32, i32* %4, align 4, !dbg !7740
  %6 = load i32, i32* @fchmod.n_calls, align 4, !dbg !7741
  %cmp = icmp eq i32 %5, %6, !dbg !7742
  br i1 %cmp, label %if.then3, label %if.end5, !dbg !7743

if.then3:                                         ; preds = %land.lhs.true
  %7 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7744
  %dec = add i32 %7, -1, !dbg !7744
  store i32 %dec, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7744
  %call4 = call i32* @__errno_location() #23, !dbg !7746
  store i32 5, i32* %call4, align 4, !dbg !7747
  store i32 -1, i32* %retval, align 4, !dbg !7748
  br label %return, !dbg !7748

if.end5:                                          ; preds = %land.lhs.true, %if.end
  %8 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7749
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %8, i32 0, i32 3, !dbg !7751
  %9 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7751
  %tobool6 = icmp ne %struct.exe_disk_file_t.17* %9, null, !dbg !7749
  %10 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7752
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !7753

if.then7:                                         ; preds = %if.end5
  %dfile8 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %10, i32 0, i32 3, !dbg !7754
  %11 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile8, align 8, !dbg !7754
  %12 = load i32, i32* %mode.addr, align 4, !dbg !7756
  %call9 = call i32 @__df_chmod(%struct.exe_disk_file_t.17* %11, i32 %12), !dbg !7757
  store i32 %call9, i32* %retval, align 4, !dbg !7758
  br label %return, !dbg !7758

if.end10:                                         ; preds = %if.end5
  %fd11 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %10, i32 0, i32 0, !dbg !7759
  %13 = load i32, i32* %fd11, align 8, !dbg !7759
  %14 = load i32, i32* %mode.addr, align 4, !dbg !7760
  %call12 = call i64 (i64, ...) @syscall(i64 91, i32 %13, i32 %14) #7, !dbg !7761
  %conv = trunc i64 %call12 to i32, !dbg !7761
  store i32 %conv, i32* %retval, align 4, !dbg !7762
  br label %return, !dbg !7762

return:                                           ; preds = %if.end10, %if.then7, %if.then3, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !7763
  ret i32 %15, !dbg !7763
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @chown(i8* nonnull %path, i32 %owner, i32 %group) #0 !dbg !7764 {
entry:
  %retval = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  %owner.addr = alloca i32, align 4
  %group.addr = alloca i32, align 4
  %df = alloca %struct.exe_disk_file_t.17*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !7769, metadata !DIExpression()), !dbg !7770
  store i32 %owner, i32* %owner.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %owner.addr, metadata !7771, metadata !DIExpression()), !dbg !7772
  store i32 %group, i32* %group.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %group.addr, metadata !7773, metadata !DIExpression()), !dbg !7774
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %df, metadata !7775, metadata !DIExpression()), !dbg !7776
  %0 = load i8*, i8** %path.addr, align 8, !dbg !7777
  %call = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %0), !dbg !7778
  store %struct.exe_disk_file_t.17* %call, %struct.exe_disk_file_t.17** %df, align 8, !dbg !7776
  %1 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df, align 8, !dbg !7779
  %tobool = icmp ne %struct.exe_disk_file_t.17* %1, null, !dbg !7779
  br i1 %tobool, label %if.then, label %if.end, !dbg !7781

if.then:                                          ; preds = %entry
  %2 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df, align 8, !dbg !7782
  %3 = load i32, i32* %owner.addr, align 4, !dbg !7784
  %4 = load i32, i32* %group.addr, align 4, !dbg !7785
  %call1 = call i32 @__df_chown(%struct.exe_disk_file_t.17* %2, i32 %3, i32 %4), !dbg !7786
  store i32 %call1, i32* %retval, align 4, !dbg !7787
  br label %return, !dbg !7787

if.end:                                           ; preds = %entry
  %5 = load i8*, i8** %path.addr, align 8, !dbg !7788
  %call2 = call i8* @__concretize_string(i8* %5), !dbg !7789
  %6 = load i32, i32* %owner.addr, align 4, !dbg !7790
  %7 = load i32, i32* %group.addr, align 4, !dbg !7791
  %call3 = call i64 (i64, ...) @syscall(i64 92, i8* %call2, i32 %6, i32 %7) #7, !dbg !7792
  %conv = trunc i64 %call3 to i32, !dbg !7792
  store i32 %conv, i32* %retval, align 4, !dbg !7793
  br label %return, !dbg !7793

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !7794
  ret i32 %8, !dbg !7794
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @__df_chown(%struct.exe_disk_file_t.17* %df, i32 %owner, i32 %group) #0 !dbg !7795 {
entry:
  %df.addr = alloca %struct.exe_disk_file_t.17*, align 8
  %owner.addr = alloca i32, align 4
  %group.addr = alloca i32, align 4
  store %struct.exe_disk_file_t.17* %df, %struct.exe_disk_file_t.17** %df.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %df.addr, metadata !7798, metadata !DIExpression()), !dbg !7799
  store i32 %owner, i32* %owner.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %owner.addr, metadata !7800, metadata !DIExpression()), !dbg !7801
  store i32 %group, i32* %group.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %group.addr, metadata !7802, metadata !DIExpression()), !dbg !7803
  call void @klee_warning(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.25.110, i64 0, i64 0)), !dbg !7804
  %call = call i32* @__errno_location() #23, !dbg !7805
  store i32 1, i32* %call, align 4, !dbg !7806
  ret i32 -1, !dbg !7807
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @fchown(i32 %fd, i32 %owner, i32 %group) #0 !dbg !7808 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %owner.addr = alloca i32, align 4
  %group.addr = alloca i32, align 4
  %f = alloca %struct.exe_file_t.18*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !7811, metadata !DIExpression()), !dbg !7812
  store i32 %owner, i32* %owner.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %owner.addr, metadata !7813, metadata !DIExpression()), !dbg !7814
  store i32 %group, i32* %group.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %group.addr, metadata !7815, metadata !DIExpression()), !dbg !7816
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !7817, metadata !DIExpression()), !dbg !7818
  %0 = load i32, i32* %fd.addr, align 4, !dbg !7819
  %call = call %struct.exe_file_t.18* @__get_file(i32 %0), !dbg !7820
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !7818
  %1 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7821
  %tobool = icmp ne %struct.exe_file_t.18* %1, null, !dbg !7821
  br i1 %tobool, label %if.end, label %if.then, !dbg !7823

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !7824
  store i32 9, i32* %call1, align 4, !dbg !7826
  store i32 -1, i32* %retval, align 4, !dbg !7827
  br label %return, !dbg !7827

if.end:                                           ; preds = %entry
  %2 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7828
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %2, i32 0, i32 3, !dbg !7830
  %3 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7830
  %tobool2 = icmp ne %struct.exe_disk_file_t.17* %3, null, !dbg !7828
  br i1 %tobool2, label %if.then3, label %if.end6, !dbg !7831

if.then3:                                         ; preds = %if.end
  %4 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7832
  %dfile4 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %4, i32 0, i32 3, !dbg !7834
  %5 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile4, align 8, !dbg !7834
  %6 = load i32, i32* %owner.addr, align 4, !dbg !7835
  %7 = load i32, i32* %group.addr, align 4, !dbg !7836
  %call5 = call i32 @__df_chown(%struct.exe_disk_file_t.17* %5, i32 %6, i32 %7), !dbg !7837
  store i32 %call5, i32* %retval, align 4, !dbg !7838
  br label %return, !dbg !7838

if.end6:                                          ; preds = %if.end
  %8 = load i32, i32* %fd.addr, align 4, !dbg !7839
  %9 = load i32, i32* %owner.addr, align 4, !dbg !7840
  %10 = load i32, i32* %group.addr, align 4, !dbg !7841
  %call7 = call i64 (i64, ...) @syscall(i64 93, i32 %8, i32 %9, i32 %10) #7, !dbg !7842
  %conv = trunc i64 %call7 to i32, !dbg !7842
  store i32 %conv, i32* %retval, align 4, !dbg !7843
  br label %return, !dbg !7843

return:                                           ; preds = %if.end6, %if.then3, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !7844
  ret i32 %11, !dbg !7844
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @lchown(i8* nonnull %path, i32 %owner, i32 %group) #0 !dbg !7845 {
entry:
  %retval = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  %owner.addr = alloca i32, align 4
  %group.addr = alloca i32, align 4
  %df = alloca %struct.exe_disk_file_t.17*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !7846, metadata !DIExpression()), !dbg !7847
  store i32 %owner, i32* %owner.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %owner.addr, metadata !7848, metadata !DIExpression()), !dbg !7849
  store i32 %group, i32* %group.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %group.addr, metadata !7850, metadata !DIExpression()), !dbg !7851
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %df, metadata !7852, metadata !DIExpression()), !dbg !7853
  %0 = load i8*, i8** %path.addr, align 8, !dbg !7854
  %call = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %0), !dbg !7855
  store %struct.exe_disk_file_t.17* %call, %struct.exe_disk_file_t.17** %df, align 8, !dbg !7853
  %1 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df, align 8, !dbg !7856
  %tobool = icmp ne %struct.exe_disk_file_t.17* %1, null, !dbg !7856
  br i1 %tobool, label %if.then, label %if.end, !dbg !7858

if.then:                                          ; preds = %entry
  %2 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df, align 8, !dbg !7859
  %3 = load i32, i32* %owner.addr, align 4, !dbg !7861
  %4 = load i32, i32* %group.addr, align 4, !dbg !7862
  %call1 = call i32 @__df_chown(%struct.exe_disk_file_t.17* %2, i32 %3, i32 %4), !dbg !7863
  store i32 %call1, i32* %retval, align 4, !dbg !7864
  br label %return, !dbg !7864

if.end:                                           ; preds = %entry
  %5 = load i8*, i8** %path.addr, align 8, !dbg !7865
  %call2 = call i8* @__concretize_string(i8* %5), !dbg !7866
  %6 = load i32, i32* %owner.addr, align 4, !dbg !7867
  %7 = load i32, i32* %group.addr, align 4, !dbg !7868
  %call3 = call i64 (i64, ...) @syscall(i64 92, i8* %call2, i32 %6, i32 %7) #7, !dbg !7869
  %conv = trunc i64 %call3 to i32, !dbg !7869
  store i32 %conv, i32* %retval, align 4, !dbg !7870
  br label %return, !dbg !7870

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !7871
  ret i32 %8, !dbg !7871
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @__fd_fstat(i32 %fd, %struct.stat64.16* %buf) #0 !dbg !7872 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %buf.addr = alloca %struct.stat64.16*, align 8
  %f = alloca %struct.exe_file_t.18*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !7873, metadata !DIExpression()), !dbg !7874
  store %struct.stat64.16* %buf, %struct.stat64.16** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %buf.addr, metadata !7875, metadata !DIExpression()), !dbg !7876
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !7877, metadata !DIExpression()), !dbg !7878
  %0 = load i32, i32* %fd.addr, align 4, !dbg !7879
  %call = call %struct.exe_file_t.18* @__get_file(i32 %0), !dbg !7880
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !7878
  %1 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7881
  %tobool = icmp ne %struct.exe_file_t.18* %1, null, !dbg !7881
  br i1 %tobool, label %if.end, label %if.then, !dbg !7883

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !7884
  store i32 9, i32* %call1, align 4, !dbg !7886
  store i32 -1, i32* %retval, align 4, !dbg !7887
  br label %return, !dbg !7887

if.end:                                           ; preds = %entry
  %2 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7888
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %2, i32 0, i32 3, !dbg !7890
  %3 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7890
  %tobool2 = icmp ne %struct.exe_disk_file_t.17* %3, null, !dbg !7888
  br i1 %tobool2, label %if.end6, label %if.then3, !dbg !7891

if.then3:                                         ; preds = %if.end
  %4 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7892
  %fd4 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %4, i32 0, i32 0, !dbg !7894
  %5 = load i32, i32* %fd4, align 8, !dbg !7894
  %6 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !7895
  %call5 = call i64 (i64, ...) @syscall(i64 5, i32 %5, %struct.stat64.16* %6) #7, !dbg !7896
  %conv = trunc i64 %call5 to i32, !dbg !7896
  store i32 %conv, i32* %retval, align 4, !dbg !7897
  br label %return, !dbg !7897

if.end6:                                          ; preds = %if.end
  %7 = load %struct.stat64.16*, %struct.stat64.16** %buf.addr, align 8, !dbg !7898
  %8 = bitcast %struct.stat64.16* %7 to i8*, !dbg !7899
  %9 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7900
  %dfile7 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %9, i32 0, i32 3, !dbg !7901
  %10 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile7, align 8, !dbg !7901
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %10, i32 0, i32 2, !dbg !7902
  %11 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !7902
  %12 = bitcast %struct.stat64.16* %11 to i8*, !dbg !7899
  %13 = call i8* @memcpy(i8* %8, i8* %12, i64 144), !dbg !7899
  store i32 0, i32* %retval, align 4, !dbg !7903
  br label %return, !dbg !7903

return:                                           ; preds = %if.end6, %if.then3, %if.then
  %14 = load i32, i32* %retval, align 4, !dbg !7904
  ret i32 %14, !dbg !7904
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @__fd_ftruncate(i32 %fd, i64 %length) #0 !dbg !282 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %length.addr = alloca i64, align 8
  %f = alloca %struct.exe_file_t.18*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !7905, metadata !DIExpression()), !dbg !7906
  store i64 %length, i64* %length.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %length.addr, metadata !7907, metadata !DIExpression()), !dbg !7908
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !7909, metadata !DIExpression()), !dbg !7910
  %0 = load i32, i32* %fd.addr, align 4, !dbg !7911
  %call = call %struct.exe_file_t.18* @__get_file(i32 %0), !dbg !7912
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !7910
  %1 = load i32, i32* @__fd_ftruncate.n_calls, align 4, !dbg !7913
  %inc = add nsw i32 %1, 1, !dbg !7913
  store i32 %inc, i32* @__fd_ftruncate.n_calls, align 4, !dbg !7913
  %2 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7914
  %tobool = icmp ne %struct.exe_file_t.18* %2, null, !dbg !7914
  br i1 %tobool, label %if.end, label %if.then, !dbg !7916

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !7917
  store i32 9, i32* %call1, align 4, !dbg !7919
  store i32 -1, i32* %retval, align 4, !dbg !7920
  br label %return, !dbg !7920

if.end:                                           ; preds = %entry
  %3 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7921
  %tobool2 = icmp ne i32 %3, 0, !dbg !7923
  br i1 %tobool2, label %land.lhs.true, label %if.end5, !dbg !7924

land.lhs.true:                                    ; preds = %if.end
  %4 = load i32*, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 9), align 8, !dbg !7925
  %5 = load i32, i32* %4, align 4, !dbg !7926
  %6 = load i32, i32* @__fd_ftruncate.n_calls, align 4, !dbg !7927
  %cmp = icmp eq i32 %5, %6, !dbg !7928
  br i1 %cmp, label %if.then3, label %if.end5, !dbg !7929

if.then3:                                         ; preds = %land.lhs.true
  %7 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7930
  %dec = add i32 %7, -1, !dbg !7930
  store i32 %dec, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !7930
  %call4 = call i32* @__errno_location() #23, !dbg !7932
  store i32 5, i32* %call4, align 4, !dbg !7933
  store i32 -1, i32* %retval, align 4, !dbg !7934
  br label %return, !dbg !7934

if.end5:                                          ; preds = %land.lhs.true, %if.end
  %8 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7935
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %8, i32 0, i32 3, !dbg !7937
  %9 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7937
  %tobool6 = icmp ne %struct.exe_disk_file_t.17* %9, null, !dbg !7935
  br i1 %tobool6, label %if.then7, label %if.end9, !dbg !7938

if.then7:                                         ; preds = %if.end5
  call void @klee_warning(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10.115, i64 0, i64 0)), !dbg !7939
  %call8 = call i32* @__errno_location() #23, !dbg !7941
  store i32 5, i32* %call8, align 4, !dbg !7942
  store i32 -1, i32* %retval, align 4, !dbg !7943
  br label %return, !dbg !7943

if.end9:                                          ; preds = %if.end5
  %10 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7944
  %fd10 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %10, i32 0, i32 0, !dbg !7945
  %11 = load i32, i32* %fd10, align 8, !dbg !7945
  %12 = load i64, i64* %length.addr, align 8, !dbg !7946
  %call11 = call i64 (i64, ...) @syscall(i64 77, i32 %11, i64 %12) #7, !dbg !7947
  %conv = trunc i64 %call11 to i32, !dbg !7947
  store i32 %conv, i32* %retval, align 4, !dbg !7948
  br label %return, !dbg !7948

return:                                           ; preds = %if.end9, %if.then7, %if.then3, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !7949
  ret i32 %13, !dbg !7949
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @__fd_getdents(i32 %fd, %struct.dirent64.13* %dirp, i32 %count) #0 !dbg !7950 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %dirp.addr = alloca %struct.dirent64.13*, align 8
  %count.addr = alloca i32, align 4
  %f = alloca %struct.exe_file_t.18*, align 8
  %i = alloca i64, align 8
  %pad = alloca i64, align 8
  %bytes = alloca i64, align 8
  %df = alloca %struct.exe_disk_file_t.17*, align 8
  %os_pos = alloca i64, align 8
  %res = alloca i32, align 4
  %s = alloca i64, align 8
  %pos = alloca i32, align 4
  %dp = alloca %struct.dirent64.13*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !7953, metadata !DIExpression()), !dbg !7954
  store %struct.dirent64.13* %dirp, %struct.dirent64.13** %dirp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dirent64.13** %dirp.addr, metadata !7955, metadata !DIExpression()), !dbg !7956
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7957, metadata !DIExpression()), !dbg !7958
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !7959, metadata !DIExpression()), !dbg !7960
  %0 = load i32, i32* %fd.addr, align 4, !dbg !7961
  %call = call %struct.exe_file_t.18* @__get_file(i32 %0), !dbg !7962
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !7960
  %1 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7963
  %tobool = icmp ne %struct.exe_file_t.18* %1, null, !dbg !7963
  br i1 %tobool, label %if.end, label %if.then, !dbg !7965

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !7966
  store i32 9, i32* %call1, align 4, !dbg !7968
  store i32 -1, i32* %retval, align 4, !dbg !7969
  br label %return, !dbg !7969

if.end:                                           ; preds = %entry
  %2 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7970
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %2, i32 0, i32 3, !dbg !7972
  %3 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !7972
  %tobool2 = icmp ne %struct.exe_disk_file_t.17* %3, null, !dbg !7970
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !7973

if.then3:                                         ; preds = %if.end
  call void @klee_warning(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11.118, i64 0, i64 0)), !dbg !7974
  %call4 = call i32* @__errno_location() #23, !dbg !7976
  store i32 22, i32* %call4, align 4, !dbg !7977
  store i32 -1, i32* %retval, align 4, !dbg !7978
  br label %return, !dbg !7978

if.else:                                          ; preds = %if.end
  %4 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7979
  %off = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %4, i32 0, i32 2, !dbg !7982
  %5 = load i64, i64* %off, align 8, !dbg !7982
  %cmp = icmp ult i64 %5, 4096, !dbg !7983
  br i1 %cmp, label %if.then5, label %if.else43, !dbg !7984

if.then5:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7985, metadata !DIExpression()), !dbg !7987
  call void @llvm.dbg.declare(metadata i64* %pad, metadata !7988, metadata !DIExpression()), !dbg !7989
  call void @llvm.dbg.declare(metadata i64* %bytes, metadata !7990, metadata !DIExpression()), !dbg !7991
  store i64 0, i64* %bytes, align 8, !dbg !7991
  %6 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7992
  %off6 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %6, i32 0, i32 2, !dbg !7993
  %7 = load i64, i64* %off6, align 8, !dbg !7993
  %div = udiv i64 %7, 280, !dbg !7994
  store i64 %div, i64* %i, align 8, !dbg !7995
  %8 = load i64, i64* %i, align 8, !dbg !7996
  %mul = mul i64 %8, 280, !dbg !7998
  %9 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !7999
  %off7 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %9, i32 0, i32 2, !dbg !8000
  %10 = load i64, i64* %off7, align 8, !dbg !8000
  %cmp8 = icmp ne i64 %mul, %10, !dbg !8001
  br i1 %cmp8, label %if.then11, label %lor.lhs.false, !dbg !8002

lor.lhs.false:                                    ; preds = %if.then5
  %11 = load i64, i64* %i, align 8, !dbg !8003
  %12 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 0), align 8, !dbg !8004
  %conv = zext i32 %12 to i64, !dbg !8005
  %cmp9 = icmp sgt i64 %11, %conv, !dbg !8006
  br i1 %cmp9, label %if.then11, label %for.cond, !dbg !8007

if.then11:                                        ; preds = %lor.lhs.false, %if.then5
  %call12 = call i32* @__errno_location() #23, !dbg !8008
  store i32 22, i32* %call12, align 4, !dbg !8010
  store i32 -1, i32* %retval, align 4, !dbg !8011
  br label %return, !dbg !8011

for.cond:                                         ; preds = %lor.lhs.false, %for.body
  %13 = load i64, i64* %i, align 8, !dbg !8012
  %14 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 0), align 8, !dbg !8015
  %conv14 = zext i32 %14 to i64, !dbg !8016
  %cmp15 = icmp slt i64 %13, %conv14, !dbg !8017
  br i1 %cmp15, label %for.body, label %for.end, !dbg !8018

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %df, metadata !8019, metadata !DIExpression()), !dbg !8021
  %15 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 4), align 8, !dbg !8022
  %16 = load i64, i64* %i, align 8, !dbg !8023
  %arrayidx = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %15, i64 %16, !dbg !8024
  store %struct.exe_disk_file_t.17* %arrayidx, %struct.exe_disk_file_t.17** %df, align 8, !dbg !8021
  %17 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df, align 8, !dbg !8025
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %17, i32 0, i32 2, !dbg !8026
  %18 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !8026
  %st_ino = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %18, i32 0, i32 1, !dbg !8027
  %19 = load i64, i64* %st_ino, align 8, !dbg !8027
  %20 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8028
  %d_ino = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %20, i32 0, i32 0, !dbg !8029
  store i64 %19, i64* %d_ino, align 8, !dbg !8030
  %21 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8031
  %d_reclen = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %21, i32 0, i32 2, !dbg !8032
  store i16 280, i16* %d_reclen, align 8, !dbg !8033
  %22 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %df, align 8, !dbg !8034
  %stat17 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %22, i32 0, i32 2, !dbg !8034
  %23 = load %struct.stat64.16*, %struct.stat64.16** %stat17, align 8, !dbg !8034
  %st_mode = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %23, i32 0, i32 3, !dbg !8034
  %24 = load i32, i32* %st_mode, align 8, !dbg !8034
  %and = and i32 %24, 61440, !dbg !8034
  %shr = lshr i32 %and, 12, !dbg !8034
  %conv18 = trunc i32 %shr to i8, !dbg !8034
  %25 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8035
  %d_type = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %25, i32 0, i32 3, !dbg !8036
  store i8 %conv18, i8* %d_type, align 2, !dbg !8037
  %26 = load i64, i64* %i, align 8, !dbg !8038
  %add = add nsw i64 65, %26, !dbg !8039
  %conv19 = trunc i64 %add to i8, !dbg !8040
  %27 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8041
  %d_name = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %27, i32 0, i32 4, !dbg !8042
  %arrayidx20 = getelementptr inbounds [256 x i8], [256 x i8]* %d_name, i64 0, i64 0, !dbg !8041
  store i8 %conv19, i8* %arrayidx20, align 1, !dbg !8043
  %28 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8044
  %d_name21 = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %28, i32 0, i32 4, !dbg !8045
  %arrayidx22 = getelementptr inbounds [256 x i8], [256 x i8]* %d_name21, i64 0, i64 1, !dbg !8044
  store i8 0, i8* %arrayidx22, align 1, !dbg !8046
  %29 = load i64, i64* %i, align 8, !dbg !8047
  %add23 = add nsw i64 %29, 1, !dbg !8048
  %mul24 = mul i64 %add23, 280, !dbg !8049
  %30 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8050
  %d_off = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %30, i32 0, i32 1, !dbg !8051
  store i64 %mul24, i64* %d_off, align 8, !dbg !8052
  %31 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8053
  %d_reclen25 = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %31, i32 0, i32 2, !dbg !8054
  %32 = load i16, i16* %d_reclen25, align 8, !dbg !8054
  %conv26 = zext i16 %32 to i64, !dbg !8053
  %33 = load i64, i64* %bytes, align 8, !dbg !8055
  %add27 = add nsw i64 %33, %conv26, !dbg !8055
  store i64 %add27, i64* %bytes, align 8, !dbg !8055
  %34 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8056
  %incdec.ptr = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %34, i32 1, !dbg !8056
  store %struct.dirent64.13* %incdec.ptr, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8056
  %35 = load i64, i64* %i, align 8, !dbg !8057
  %inc = add nsw i64 %35, 1, !dbg !8057
  store i64 %inc, i64* %i, align 8, !dbg !8057
  br label %for.cond, !dbg !8058, !llvm.loop !8059

for.end:                                          ; preds = %for.cond
  %36 = load i32, i32* %count.addr, align 4, !dbg !8061
  %cmp28 = icmp uge i32 %36, 4096, !dbg !8062
  %37 = load i32, i32* %count.addr, align 4, !dbg !8061
  %cond = select i1 %cmp28, i32 4096, i32 %37, !dbg !8061
  %conv30 = zext i32 %cond to i64, !dbg !8061
  store i64 %conv30, i64* %pad, align 8, !dbg !8063
  %38 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8064
  %d_ino31 = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %38, i32 0, i32 0, !dbg !8065
  store i64 0, i64* %d_ino31, align 8, !dbg !8066
  %39 = load i64, i64* %pad, align 8, !dbg !8067
  %40 = load i64, i64* %bytes, align 8, !dbg !8068
  %sub = sub nsw i64 %39, %40, !dbg !8069
  %conv32 = trunc i64 %sub to i16, !dbg !8067
  %41 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8070
  %d_reclen33 = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %41, i32 0, i32 2, !dbg !8071
  store i16 %conv32, i16* %d_reclen33, align 8, !dbg !8072
  %42 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8073
  %d_type34 = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %42, i32 0, i32 3, !dbg !8074
  store i8 0, i8* %d_type34, align 2, !dbg !8075
  %43 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8076
  %d_name35 = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %43, i32 0, i32 4, !dbg !8077
  %arrayidx36 = getelementptr inbounds [256 x i8], [256 x i8]* %d_name35, i64 0, i64 0, !dbg !8076
  store i8 0, i8* %arrayidx36, align 1, !dbg !8078
  %44 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8079
  %d_off37 = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %44, i32 0, i32 1, !dbg !8080
  store i64 4096, i64* %d_off37, align 8, !dbg !8081
  %45 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8082
  %d_reclen38 = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %45, i32 0, i32 2, !dbg !8083
  %46 = load i16, i16* %d_reclen38, align 8, !dbg !8083
  %conv39 = zext i16 %46 to i64, !dbg !8082
  %47 = load i64, i64* %bytes, align 8, !dbg !8084
  %add40 = add nsw i64 %47, %conv39, !dbg !8084
  store i64 %add40, i64* %bytes, align 8, !dbg !8084
  %48 = load i64, i64* %pad, align 8, !dbg !8085
  %49 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8086
  %off41 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %49, i32 0, i32 2, !dbg !8087
  store i64 %48, i64* %off41, align 8, !dbg !8088
  %50 = load i64, i64* %bytes, align 8, !dbg !8089
  %conv42 = trunc i64 %50 to i32, !dbg !8089
  store i32 %conv42, i32* %retval, align 4, !dbg !8090
  br label %return, !dbg !8090

if.else43:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i64* %os_pos, metadata !8091, metadata !DIExpression()), !dbg !8093
  %51 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8094
  %off44 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %51, i32 0, i32 2, !dbg !8095
  %52 = load i64, i64* %off44, align 8, !dbg !8095
  %sub45 = sub nsw i64 %52, 4096, !dbg !8096
  store i64 %sub45, i64* %os_pos, align 8, !dbg !8093
  call void @llvm.dbg.declare(metadata i32* %res, metadata !8097, metadata !DIExpression()), !dbg !8098
  call void @llvm.dbg.declare(metadata i64* %s, metadata !8099, metadata !DIExpression()), !dbg !8100
  store i64 0, i64* %s, align 8, !dbg !8100
  %53 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8101
  %54 = bitcast %struct.dirent64.13* %53 to i8*, !dbg !8102
  %55 = load i32, i32* %count.addr, align 4, !dbg !8103
  %conv46 = zext i32 %55 to i64, !dbg !8103
  %56 = call i8* @memset(i8* %54, i32 0, i64 %conv46), !dbg !8102
  %57 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8104
  %fd47 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %57, i32 0, i32 0, !dbg !8105
  %58 = load i32, i32* %fd47, align 8, !dbg !8105
  %59 = load i64, i64* %os_pos, align 8, !dbg !8106
  %call48 = call i64 (i64, ...) @syscall(i64 8, i32 %58, i64 %59, i32 0) #7, !dbg !8107
  store i64 %call48, i64* %s, align 8, !dbg !8108
  %60 = load i64, i64* %s, align 8, !dbg !8109
  %cmp49 = icmp ne i64 %60, -1, !dbg !8109
  br i1 %cmp49, label %if.end53, label %if.else52, !dbg !8112

if.else52:                                        ; preds = %if.else43
  call void @__assert_fail(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12.119, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4.96, i64 0, i64 0), i32 824, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__.__fd_getdents, i64 0, i64 0)) #18, !dbg !8109
  unreachable, !dbg !8109

if.end53:                                         ; preds = %if.else43
  %61 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8113
  %fd54 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %61, i32 0, i32 0, !dbg !8114
  %62 = load i32, i32* %fd54, align 8, !dbg !8114
  %63 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8115
  %64 = load i32, i32* %count.addr, align 4, !dbg !8116
  %call55 = call i64 (i64, ...) @syscall(i64 217, i32 %62, %struct.dirent64.13* %63, i32 %64) #7, !dbg !8117
  %conv56 = trunc i64 %call55 to i32, !dbg !8117
  store i32 %conv56, i32* %res, align 4, !dbg !8118
  %65 = load i32, i32* %res, align 4, !dbg !8119
  %cmp57 = icmp sgt i32 %65, -1, !dbg !8121
  br i1 %cmp57, label %if.then59, label %if.end78, !dbg !8122

if.then59:                                        ; preds = %if.end53
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !8123, metadata !DIExpression()), !dbg !8125
  store i32 0, i32* %pos, align 4, !dbg !8125
  %66 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8126
  %fd60 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %66, i32 0, i32 0, !dbg !8127
  %67 = load i32, i32* %fd60, align 8, !dbg !8127
  %call61 = call i64 (i64, ...) @syscall(i64 8, i32 %67, i32 0, i32 1) #7, !dbg !8128
  %68 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8129
  %off62 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %68, i32 0, i32 2, !dbg !8130
  store i64 %call61, i64* %off62, align 8, !dbg !8131
  %69 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8132
  %off63 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %69, i32 0, i32 2, !dbg !8132
  %70 = load i64, i64* %off63, align 8, !dbg !8132
  %cmp64 = icmp ne i64 %70, -1, !dbg !8132
  br i1 %cmp64, label %if.end68, label %if.else67, !dbg !8135

if.else67:                                        ; preds = %if.then59
  call void @__assert_fail(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13.120, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4.96, i64 0, i64 0), i32 829, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__.__fd_getdents, i64 0, i64 0)) #18, !dbg !8132
  unreachable, !dbg !8132

if.end68:                                         ; preds = %if.then59
  %71 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8136
  %off69 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %71, i32 0, i32 2, !dbg !8137
  %72 = load i64, i64* %off69, align 8, !dbg !8138
  %add70 = add nsw i64 %72, 4096, !dbg !8138
  store i64 %add70, i64* %off69, align 8, !dbg !8138
  br label %while.cond, !dbg !8139

while.cond:                                       ; preds = %while.body, %if.end68
  %73 = load i32, i32* %pos, align 4, !dbg !8140
  %74 = load i32, i32* %res, align 4, !dbg !8141
  %cmp71 = icmp slt i32 %73, %74, !dbg !8142
  br i1 %cmp71, label %while.body, label %if.end78, !dbg !8139

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.dirent64.13** %dp, metadata !8143, metadata !DIExpression()), !dbg !8145
  %75 = load %struct.dirent64.13*, %struct.dirent64.13** %dirp.addr, align 8, !dbg !8146
  %76 = bitcast %struct.dirent64.13* %75 to i8*, !dbg !8147
  %77 = load i32, i32* %pos, align 4, !dbg !8148
  %idx.ext = sext i32 %77 to i64, !dbg !8149
  %add.ptr = getelementptr inbounds i8, i8* %76, i64 %idx.ext, !dbg !8149
  %78 = bitcast i8* %add.ptr to %struct.dirent64.13*, !dbg !8150
  store %struct.dirent64.13* %78, %struct.dirent64.13** %dp, align 8, !dbg !8145
  %79 = load %struct.dirent64.13*, %struct.dirent64.13** %dp, align 8, !dbg !8151
  %d_off73 = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %79, i32 0, i32 1, !dbg !8152
  %80 = load i64, i64* %d_off73, align 8, !dbg !8153
  %add74 = add nsw i64 %80, 4096, !dbg !8153
  store i64 %add74, i64* %d_off73, align 8, !dbg !8153
  %81 = load %struct.dirent64.13*, %struct.dirent64.13** %dp, align 8, !dbg !8154
  %d_reclen75 = getelementptr inbounds %struct.dirent64.13, %struct.dirent64.13* %81, i32 0, i32 2, !dbg !8155
  %82 = load i16, i16* %d_reclen75, align 8, !dbg !8155
  %conv76 = zext i16 %82 to i32, !dbg !8154
  %83 = load i32, i32* %pos, align 4, !dbg !8156
  %add77 = add nsw i32 %83, %conv76, !dbg !8156
  store i32 %add77, i32* %pos, align 4, !dbg !8156
  br label %while.cond, !dbg !8139, !llvm.loop !8157

if.end78:                                         ; preds = %while.cond, %if.end53
  %84 = load i32, i32* %res, align 4, !dbg !8159
  store i32 %84, i32* %retval, align 4, !dbg !8160
  br label %return, !dbg !8160

return:                                           ; preds = %if.end78, %for.end, %if.then11, %if.then3, %if.then
  %85 = load i32, i32* %retval, align 4, !dbg !8161
  ret i32 %85, !dbg !8161
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ioctl(i32 %fd, i64 %request, ...) #0 !dbg !8162 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %request.addr = alloca i64, align 8
  %f = alloca %struct.exe_file_t.18*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %buf = alloca i8*, align 8
  %stat = alloca %struct.stat64.16*, align 8
  %ts = alloca %struct.termios*, align 8
  %ws = alloca %struct.winsize*, align 8
  %res = alloca i32*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !8165, metadata !DIExpression()), !dbg !8166
  store i64 %request, i64* %request.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %request.addr, metadata !8167, metadata !DIExpression()), !dbg !8168
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !8169, metadata !DIExpression()), !dbg !8170
  %0 = load i32, i32* %fd.addr, align 4, !dbg !8171
  %call = call %struct.exe_file_t.18* @__get_file(i32 %0), !dbg !8172
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !8170
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !8173, metadata !DIExpression()), !dbg !8184
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !8185, metadata !DIExpression()), !dbg !8186
  %1 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8187
  %tobool = icmp ne %struct.exe_file_t.18* %1, null, !dbg !8187
  br i1 %tobool, label %if.end, label %if.then, !dbg !8189

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !8190
  store i32 9, i32* %call1, align 4, !dbg !8192
  store i32 -1, i32* %retval, align 4, !dbg !8193
  br label %return, !dbg !8193

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8194
  %arraydecay2 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8194
  call void @llvm.va_start(i8* %arraydecay2), !dbg !8194
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8195
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay3, i32 0, i32 0, !dbg !8195
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !8195
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !8195
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !8195

vaarg.in_reg:                                     ; preds = %if.end
  %2 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay3, i32 0, i32 3, !dbg !8195
  %reg_save_area = load i8*, i8** %2, align 16, !dbg !8195
  %3 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !8195
  %4 = bitcast i8* %3 to i8**, !dbg !8195
  %5 = add i32 %gp_offset, 8, !dbg !8195
  store i32 %5, i32* %gp_offset_p, align 16, !dbg !8195
  br label %vaarg.end, !dbg !8195

vaarg.in_mem:                                     ; preds = %if.end
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay3, i32 0, i32 2, !dbg !8195
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !8195
  %6 = bitcast i8* %overflow_arg_area to i8**, !dbg !8195
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !8195
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !8195
  br label %vaarg.end, !dbg !8195

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i8** [ %4, %vaarg.in_reg ], [ %6, %vaarg.in_mem ], !dbg !8195
  %7 = load i8*, i8** %vaarg.addr, align 8, !dbg !8195
  store i8* %7, i8** %buf, align 8, !dbg !8196
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8197
  %arraydecay45 = bitcast %struct.__va_list_tag* %arraydecay4 to i8*, !dbg !8197
  call void @llvm.va_end(i8* %arraydecay45), !dbg !8197
  %8 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8198
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %8, i32 0, i32 3, !dbg !8200
  %9 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8200
  %tobool6 = icmp ne %struct.exe_disk_file_t.17* %9, null, !dbg !8198
  %10 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8201
  br i1 %tobool6, label %if.then7, label %if.end103, !dbg !8202

if.then7:                                         ; preds = %vaarg.end
  call void @llvm.dbg.declare(metadata %struct.stat64.16** %stat, metadata !8203, metadata !DIExpression()), !dbg !8205
  %dfile8 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %10, i32 0, i32 3, !dbg !8206
  %11 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile8, align 8, !dbg !8206
  %stat9 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %11, i32 0, i32 2, !dbg !8207
  %12 = load %struct.stat64.16*, %struct.stat64.16** %stat9, align 8, !dbg !8207
  %13 = bitcast %struct.stat64.16* %12 to %struct.stat64.16*, !dbg !8208
  store %struct.stat64.16* %13, %struct.stat64.16** %stat, align 8, !dbg !8205
  %14 = load i64, i64* %request.addr, align 8, !dbg !8209
  switch i64 %14, label %sw.default [
    i64 21505, label %sw.bb
    i64 21506, label %sw.bb48
    i64 21507, label %sw.bb55
    i64 21508, label %sw.bb60
    i64 21523, label %sw.bb67
    i64 21524, label %sw.bb74
    i64 21531, label %sw.bb82
    i64 2150657282, label %sw.bb100
  ], !dbg !8210

sw.bb:                                            ; preds = %if.then7
  call void @llvm.dbg.declare(metadata %struct.termios** %ts, metadata !8211, metadata !DIExpression()), !dbg !8230
  %15 = load i8*, i8** %buf, align 8, !dbg !8231
  %16 = bitcast i8* %15 to %struct.termios*, !dbg !8231
  store %struct.termios* %16, %struct.termios** %ts, align 8, !dbg !8230
  call void @klee_warning_once(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.14.121, i64 0, i64 0)), !dbg !8232
  %17 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !8233
  %st_mode = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %17, i32 0, i32 3, !dbg !8233
  %18 = load i32, i32* %st_mode, align 8, !dbg !8233
  %and = and i32 %18, 61440, !dbg !8233
  %cmp = icmp eq i32 %and, 8192, !dbg !8233
  br i1 %cmp, label %if.then10, label %if.else, !dbg !8235

if.then10:                                        ; preds = %sw.bb
  %19 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8236
  %c_iflag = getelementptr inbounds %struct.termios, %struct.termios* %19, i32 0, i32 0, !dbg !8238
  store i32 27906, i32* %c_iflag, align 4, !dbg !8239
  %20 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8240
  %c_oflag = getelementptr inbounds %struct.termios, %struct.termios* %20, i32 0, i32 1, !dbg !8241
  store i32 5, i32* %c_oflag, align 4, !dbg !8242
  %21 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8243
  %c_cflag = getelementptr inbounds %struct.termios, %struct.termios* %21, i32 0, i32 2, !dbg !8244
  store i32 1215, i32* %c_cflag, align 4, !dbg !8245
  %22 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8246
  %c_lflag = getelementptr inbounds %struct.termios, %struct.termios* %22, i32 0, i32 3, !dbg !8247
  store i32 35287, i32* %c_lflag, align 4, !dbg !8248
  %23 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8249
  %c_line = getelementptr inbounds %struct.termios, %struct.termios* %23, i32 0, i32 4, !dbg !8250
  store i8 0, i8* %c_line, align 4, !dbg !8251
  %24 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8252
  %c_cc = getelementptr inbounds %struct.termios, %struct.termios* %24, i32 0, i32 5, !dbg !8253
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc, i64 0, i64 0, !dbg !8252
  store i8 3, i8* %arrayidx, align 1, !dbg !8254
  %25 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8255
  %c_cc11 = getelementptr inbounds %struct.termios, %struct.termios* %25, i32 0, i32 5, !dbg !8256
  %arrayidx12 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc11, i64 0, i64 1, !dbg !8255
  store i8 28, i8* %arrayidx12, align 1, !dbg !8257
  %26 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8258
  %c_cc13 = getelementptr inbounds %struct.termios, %struct.termios* %26, i32 0, i32 5, !dbg !8259
  %arrayidx14 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc13, i64 0, i64 2, !dbg !8258
  store i8 127, i8* %arrayidx14, align 1, !dbg !8260
  %27 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8261
  %c_cc15 = getelementptr inbounds %struct.termios, %struct.termios* %27, i32 0, i32 5, !dbg !8262
  %arrayidx16 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc15, i64 0, i64 3, !dbg !8261
  store i8 21, i8* %arrayidx16, align 1, !dbg !8263
  %28 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8264
  %c_cc17 = getelementptr inbounds %struct.termios, %struct.termios* %28, i32 0, i32 5, !dbg !8265
  %arrayidx18 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc17, i64 0, i64 4, !dbg !8264
  store i8 4, i8* %arrayidx18, align 1, !dbg !8266
  %29 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8267
  %c_cc19 = getelementptr inbounds %struct.termios, %struct.termios* %29, i32 0, i32 5, !dbg !8268
  %arrayidx20 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc19, i64 0, i64 5, !dbg !8267
  store i8 0, i8* %arrayidx20, align 1, !dbg !8269
  %30 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8270
  %c_cc21 = getelementptr inbounds %struct.termios, %struct.termios* %30, i32 0, i32 5, !dbg !8271
  %arrayidx22 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc21, i64 0, i64 6, !dbg !8270
  store i8 1, i8* %arrayidx22, align 1, !dbg !8272
  %31 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8273
  %c_cc23 = getelementptr inbounds %struct.termios, %struct.termios* %31, i32 0, i32 5, !dbg !8274
  %arrayidx24 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc23, i64 0, i64 7, !dbg !8273
  store i8 -1, i8* %arrayidx24, align 1, !dbg !8275
  %32 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8276
  %c_cc25 = getelementptr inbounds %struct.termios, %struct.termios* %32, i32 0, i32 5, !dbg !8277
  %arrayidx26 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc25, i64 0, i64 8, !dbg !8276
  store i8 17, i8* %arrayidx26, align 1, !dbg !8278
  %33 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8279
  %c_cc27 = getelementptr inbounds %struct.termios, %struct.termios* %33, i32 0, i32 5, !dbg !8280
  %arrayidx28 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc27, i64 0, i64 9, !dbg !8279
  store i8 19, i8* %arrayidx28, align 1, !dbg !8281
  %34 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8282
  %c_cc29 = getelementptr inbounds %struct.termios, %struct.termios* %34, i32 0, i32 5, !dbg !8283
  %arrayidx30 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc29, i64 0, i64 10, !dbg !8282
  store i8 26, i8* %arrayidx30, align 1, !dbg !8284
  %35 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8285
  %c_cc31 = getelementptr inbounds %struct.termios, %struct.termios* %35, i32 0, i32 5, !dbg !8286
  %arrayidx32 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc31, i64 0, i64 11, !dbg !8285
  store i8 -1, i8* %arrayidx32, align 1, !dbg !8287
  %36 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8288
  %c_cc33 = getelementptr inbounds %struct.termios, %struct.termios* %36, i32 0, i32 5, !dbg !8289
  %arrayidx34 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc33, i64 0, i64 12, !dbg !8288
  store i8 18, i8* %arrayidx34, align 1, !dbg !8290
  %37 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8291
  %c_cc35 = getelementptr inbounds %struct.termios, %struct.termios* %37, i32 0, i32 5, !dbg !8292
  %arrayidx36 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc35, i64 0, i64 13, !dbg !8291
  store i8 15, i8* %arrayidx36, align 1, !dbg !8293
  %38 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8294
  %c_cc37 = getelementptr inbounds %struct.termios, %struct.termios* %38, i32 0, i32 5, !dbg !8295
  %arrayidx38 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc37, i64 0, i64 14, !dbg !8294
  store i8 23, i8* %arrayidx38, align 1, !dbg !8296
  %39 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8297
  %c_cc39 = getelementptr inbounds %struct.termios, %struct.termios* %39, i32 0, i32 5, !dbg !8298
  %arrayidx40 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc39, i64 0, i64 15, !dbg !8297
  store i8 22, i8* %arrayidx40, align 1, !dbg !8299
  %40 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8300
  %c_cc41 = getelementptr inbounds %struct.termios, %struct.termios* %40, i32 0, i32 5, !dbg !8301
  %arrayidx42 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc41, i64 0, i64 16, !dbg !8300
  store i8 -1, i8* %arrayidx42, align 1, !dbg !8302
  %41 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8303
  %c_cc43 = getelementptr inbounds %struct.termios, %struct.termios* %41, i32 0, i32 5, !dbg !8304
  %arrayidx44 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc43, i64 0, i64 17, !dbg !8303
  store i8 0, i8* %arrayidx44, align 1, !dbg !8305
  %42 = load %struct.termios*, %struct.termios** %ts, align 8, !dbg !8306
  %c_cc45 = getelementptr inbounds %struct.termios, %struct.termios* %42, i32 0, i32 5, !dbg !8307
  %arrayidx46 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc45, i64 0, i64 18, !dbg !8306
  store i8 0, i8* %arrayidx46, align 1, !dbg !8308
  store i32 0, i32* %retval, align 4, !dbg !8309
  br label %return, !dbg !8309

if.else:                                          ; preds = %sw.bb
  %call47 = call i32* @__errno_location() #23, !dbg !8310
  store i32 25, i32* %call47, align 4, !dbg !8312
  store i32 -1, i32* %retval, align 4, !dbg !8313
  br label %return, !dbg !8313

sw.bb48:                                          ; preds = %if.then7
  call void @klee_warning_once(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.15.122, i64 0, i64 0)), !dbg !8314
  %43 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !8316
  %st_mode49 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %43, i32 0, i32 3, !dbg !8316
  %44 = load i32, i32* %st_mode49, align 8, !dbg !8316
  %and50 = and i32 %44, 61440, !dbg !8316
  %cmp51 = icmp eq i32 %and50, 8192, !dbg !8316
  br i1 %cmp51, label %if.then52, label %if.else53, !dbg !8318

if.then52:                                        ; preds = %sw.bb48
  store i32 0, i32* %retval, align 4, !dbg !8319
  br label %return, !dbg !8319

if.else53:                                        ; preds = %sw.bb48
  %call54 = call i32* @__errno_location() #23, !dbg !8321
  store i32 25, i32* %call54, align 4, !dbg !8323
  store i32 -1, i32* %retval, align 4, !dbg !8324
  br label %return, !dbg !8324

sw.bb55:                                          ; preds = %if.then7
  call void @klee_warning_once(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.16.123, i64 0, i64 0)), !dbg !8325
  %45 = load i32, i32* %fd.addr, align 4, !dbg !8327
  %cmp56 = icmp eq i32 %45, 0, !dbg !8329
  br i1 %cmp56, label %if.then57, label %if.else58, !dbg !8330

if.then57:                                        ; preds = %sw.bb55
  store i32 0, i32* %retval, align 4, !dbg !8331
  br label %return, !dbg !8331

if.else58:                                        ; preds = %sw.bb55
  %call59 = call i32* @__errno_location() #23, !dbg !8333
  store i32 25, i32* %call59, align 4, !dbg !8335
  store i32 -1, i32* %retval, align 4, !dbg !8336
  br label %return, !dbg !8336

sw.bb60:                                          ; preds = %if.then7
  call void @klee_warning_once(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.17.124, i64 0, i64 0)), !dbg !8337
  %46 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !8339
  %st_mode61 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %46, i32 0, i32 3, !dbg !8339
  %47 = load i32, i32* %st_mode61, align 8, !dbg !8339
  %and62 = and i32 %47, 61440, !dbg !8339
  %cmp63 = icmp eq i32 %and62, 8192, !dbg !8339
  br i1 %cmp63, label %if.then64, label %if.else65, !dbg !8341

if.then64:                                        ; preds = %sw.bb60
  store i32 0, i32* %retval, align 4, !dbg !8342
  br label %return, !dbg !8342

if.else65:                                        ; preds = %sw.bb60
  %call66 = call i32* @__errno_location() #23, !dbg !8344
  store i32 25, i32* %call66, align 4, !dbg !8346
  store i32 -1, i32* %retval, align 4, !dbg !8347
  br label %return, !dbg !8347

sw.bb67:                                          ; preds = %if.then7
  call void @llvm.dbg.declare(metadata %struct.winsize** %ws, metadata !8348, metadata !DIExpression()), !dbg !8358
  %48 = load i8*, i8** %buf, align 8, !dbg !8359
  %49 = bitcast i8* %48 to %struct.winsize*, !dbg !8359
  store %struct.winsize* %49, %struct.winsize** %ws, align 8, !dbg !8358
  %50 = load %struct.winsize*, %struct.winsize** %ws, align 8, !dbg !8360
  %ws_row = getelementptr inbounds %struct.winsize, %struct.winsize* %50, i32 0, i32 0, !dbg !8361
  store i16 24, i16* %ws_row, align 2, !dbg !8362
  %51 = load %struct.winsize*, %struct.winsize** %ws, align 8, !dbg !8363
  %ws_col = getelementptr inbounds %struct.winsize, %struct.winsize* %51, i32 0, i32 1, !dbg !8364
  store i16 80, i16* %ws_col, align 2, !dbg !8365
  call void @klee_warning_once(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.18.125, i64 0, i64 0)), !dbg !8366
  %52 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !8367
  %st_mode68 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %52, i32 0, i32 3, !dbg !8367
  %53 = load i32, i32* %st_mode68, align 8, !dbg !8367
  %and69 = and i32 %53, 61440, !dbg !8367
  %cmp70 = icmp eq i32 %and69, 8192, !dbg !8367
  br i1 %cmp70, label %if.then71, label %if.else72, !dbg !8369

if.then71:                                        ; preds = %sw.bb67
  store i32 0, i32* %retval, align 4, !dbg !8370
  br label %return, !dbg !8370

if.else72:                                        ; preds = %sw.bb67
  %call73 = call i32* @__errno_location() #23, !dbg !8372
  store i32 25, i32* %call73, align 4, !dbg !8374
  store i32 -1, i32* %retval, align 4, !dbg !8375
  br label %return, !dbg !8375

sw.bb74:                                          ; preds = %if.then7
  call void @klee_warning_once(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.19.126, i64 0, i64 0)), !dbg !8376
  %54 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !8378
  %st_mode75 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %54, i32 0, i32 3, !dbg !8378
  %55 = load i32, i32* %st_mode75, align 8, !dbg !8378
  %and76 = and i32 %55, 61440, !dbg !8378
  %cmp77 = icmp eq i32 %and76, 8192, !dbg !8378
  %call79 = call i32* @__errno_location() #23, !dbg !8380
  br i1 %cmp77, label %if.then78, label %if.else80, !dbg !8381

if.then78:                                        ; preds = %sw.bb74
  store i32 22, i32* %call79, align 4, !dbg !8382
  store i32 -1, i32* %retval, align 4, !dbg !8384
  br label %return, !dbg !8384

if.else80:                                        ; preds = %sw.bb74
  store i32 25, i32* %call79, align 4, !dbg !8385
  store i32 -1, i32* %retval, align 4, !dbg !8387
  br label %return, !dbg !8387

sw.bb82:                                          ; preds = %if.then7
  call void @llvm.dbg.declare(metadata i32** %res, metadata !8388, metadata !DIExpression()), !dbg !8390
  %56 = load i8*, i8** %buf, align 8, !dbg !8391
  %57 = bitcast i8* %56 to i32*, !dbg !8391
  store i32* %57, i32** %res, align 8, !dbg !8390
  call void @klee_warning_once(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.20.127, i64 0, i64 0)), !dbg !8392
  %58 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !8393
  %st_mode83 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %58, i32 0, i32 3, !dbg !8393
  %59 = load i32, i32* %st_mode83, align 8, !dbg !8393
  %and84 = and i32 %59, 61440, !dbg !8393
  %cmp85 = icmp eq i32 %and84, 8192, !dbg !8393
  br i1 %cmp85, label %if.then86, label %if.else98, !dbg !8395

if.then86:                                        ; preds = %sw.bb82
  %60 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8396
  %off = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %60, i32 0, i32 2, !dbg !8399
  %61 = load i64, i64* %off, align 8, !dbg !8399
  %62 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8400
  %dfile87 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %62, i32 0, i32 3, !dbg !8401
  %63 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile87, align 8, !dbg !8401
  %size = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %63, i32 0, i32 0, !dbg !8402
  %64 = load i32, i32* %size, align 8, !dbg !8402
  %conv = zext i32 %64 to i64, !dbg !8403
  %cmp88 = icmp slt i64 %61, %conv, !dbg !8404
  br i1 %cmp88, label %if.then90, label %if.else96, !dbg !8405

if.then90:                                        ; preds = %if.then86
  %65 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8406
  %dfile91 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %65, i32 0, i32 3, !dbg !8408
  %66 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile91, align 8, !dbg !8408
  %size92 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %66, i32 0, i32 0, !dbg !8409
  %67 = load i32, i32* %size92, align 8, !dbg !8409
  %conv93 = zext i32 %67 to i64, !dbg !8406
  %68 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8410
  %off94 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %68, i32 0, i32 2, !dbg !8411
  %69 = load i64, i64* %off94, align 8, !dbg !8411
  %sub = sub nsw i64 %conv93, %69, !dbg !8412
  %conv95 = trunc i64 %sub to i32, !dbg !8406
  %70 = load i32*, i32** %res, align 8, !dbg !8413
  store i32 %conv95, i32* %70, align 4, !dbg !8414
  br label %if.end97, !dbg !8415

if.else96:                                        ; preds = %if.then86
  %71 = load i32*, i32** %res, align 8, !dbg !8416
  store i32 0, i32* %71, align 4, !dbg !8418
  br label %if.end97

if.end97:                                         ; preds = %if.else96, %if.then90
  store i32 0, i32* %retval, align 4, !dbg !8419
  br label %return, !dbg !8419

if.else98:                                        ; preds = %sw.bb82
  %call99 = call i32* @__errno_location() #23, !dbg !8420
  store i32 25, i32* %call99, align 4, !dbg !8422
  store i32 -1, i32* %retval, align 4, !dbg !8423
  br label %return, !dbg !8423

sw.bb100:                                         ; preds = %if.then7
  call void @klee_warning(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.21.128, i64 0, i64 0)), !dbg !8424
  %call101 = call i32* @__errno_location() #23, !dbg !8426
  store i32 22, i32* %call101, align 4, !dbg !8427
  store i32 -1, i32* %retval, align 4, !dbg !8428
  br label %return, !dbg !8428

sw.default:                                       ; preds = %if.then7
  call void @klee_warning(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11.118, i64 0, i64 0)), !dbg !8429
  %call102 = call i32* @__errno_location() #23, !dbg !8430
  store i32 22, i32* %call102, align 4, !dbg !8431
  store i32 -1, i32* %retval, align 4, !dbg !8432
  br label %return, !dbg !8432

if.end103:                                        ; preds = %vaarg.end
  %fd104 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %10, i32 0, i32 0, !dbg !8433
  %72 = load i32, i32* %fd104, align 8, !dbg !8433
  %73 = load i64, i64* %request.addr, align 8, !dbg !8434
  %74 = load i8*, i8** %buf, align 8, !dbg !8435
  %call105 = call i64 (i64, ...) @syscall(i64 16, i32 %72, i64 %73, i8* %74) #7, !dbg !8436
  %conv106 = trunc i64 %call105 to i32, !dbg !8436
  store i32 %conv106, i32* %retval, align 4, !dbg !8437
  br label %return, !dbg !8437

return:                                           ; preds = %if.end103, %sw.default, %sw.bb100, %if.else98, %if.end97, %if.else80, %if.then78, %if.else72, %if.then71, %if.else65, %if.then64, %if.else58, %if.then57, %if.else53, %if.then52, %if.else, %if.then10, %if.then
  %75 = load i32, i32* %retval, align 4, !dbg !8438
  ret i32 %75, !dbg !8438
}

declare dso_local void @klee_warning_once(i8*) #4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @fcntl(i32 %fd, i32 %cmd, ...) #0 !dbg !8439 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %cmd.addr = alloca i32, align 4
  %f = alloca %struct.exe_file_t.18*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %arg = alloca i32, align 4
  %flags = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !8442, metadata !DIExpression()), !dbg !8443
  store i32 %cmd, i32* %cmd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cmd.addr, metadata !8444, metadata !DIExpression()), !dbg !8445
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !8446, metadata !DIExpression()), !dbg !8447
  %0 = load i32, i32* %fd.addr, align 4, !dbg !8448
  %call = call %struct.exe_file_t.18* @__get_file(i32 %0), !dbg !8449
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !8447
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !8450, metadata !DIExpression()), !dbg !8451
  call void @llvm.dbg.declare(metadata i32* %arg, metadata !8452, metadata !DIExpression()), !dbg !8453
  %1 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8454
  %tobool = icmp ne %struct.exe_file_t.18* %1, null, !dbg !8454
  br i1 %tobool, label %if.end, label %if.then, !dbg !8456

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !8457
  store i32 9, i32* %call1, align 4, !dbg !8459
  store i32 -1, i32* %retval, align 4, !dbg !8460
  br label %return, !dbg !8460

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %cmd.addr, align 4, !dbg !8461
  %cmp = icmp eq i32 %2, 1, !dbg !8463
  %3 = load i32, i32* %cmd.addr, align 4, !dbg !8464
  %cmp2 = icmp eq i32 %3, 3, !dbg !8465
  %or.cond = or i1 %cmp, %cmp2, !dbg !8466
  %4 = load i32, i32* %cmd.addr, align 4, !dbg !8467
  %cmp4 = icmp eq i32 %4, 9, !dbg !8468
  %or.cond1 = or i1 %or.cond, %cmp4, !dbg !8466
  %5 = load i32, i32* %cmd.addr, align 4, !dbg !8469
  %cmp6 = icmp eq i32 %5, 11, !dbg !8470
  %or.cond2 = or i1 %or.cond1, %cmp6, !dbg !8466
  %6 = load i32, i32* %cmd.addr, align 4, !dbg !8471
  %cmp8 = icmp eq i32 %6, 1025, !dbg !8472
  %or.cond3 = or i1 %or.cond2, %cmp8, !dbg !8466
  %7 = load i32, i32* %cmd.addr, align 4, !dbg !8473
  %cmp10 = icmp eq i32 %7, 1026, !dbg !8474
  %or.cond4 = or i1 %or.cond3, %cmp10, !dbg !8466
  br i1 %or.cond4, label %if.then11, label %if.else, !dbg !8466

if.then11:                                        ; preds = %if.end
  store i32 0, i32* %arg, align 4, !dbg !8475
  br label %if.end16, !dbg !8477

if.else:                                          ; preds = %if.end
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8478
  %arraydecay12 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8478
  call void @llvm.va_start(i8* %arraydecay12), !dbg !8478
  %arraydecay13 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8480
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay13, i32 0, i32 0, !dbg !8480
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !8480
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !8480
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !8480

vaarg.in_reg:                                     ; preds = %if.else
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay13, i32 0, i32 3, !dbg !8480
  %reg_save_area = load i8*, i8** %8, align 16, !dbg !8480
  %9 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !8480
  %10 = bitcast i8* %9 to i32*, !dbg !8480
  %11 = add i32 %gp_offset, 8, !dbg !8480
  store i32 %11, i32* %gp_offset_p, align 16, !dbg !8480
  br label %vaarg.end, !dbg !8480

vaarg.in_mem:                                     ; preds = %if.else
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay13, i32 0, i32 2, !dbg !8480
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !8480
  %12 = bitcast i8* %overflow_arg_area to i32*, !dbg !8480
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !8480
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !8480
  br label %vaarg.end, !dbg !8480

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i32* [ %10, %vaarg.in_reg ], [ %12, %vaarg.in_mem ], !dbg !8480
  %13 = load i32, i32* %vaarg.addr, align 4, !dbg !8480
  store i32 %13, i32* %arg, align 4, !dbg !8481
  %arraydecay14 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8482
  %arraydecay1415 = bitcast %struct.__va_list_tag* %arraydecay14 to i8*, !dbg !8482
  call void @llvm.va_end(i8* %arraydecay1415), !dbg !8482
  br label %if.end16

if.end16:                                         ; preds = %vaarg.end, %if.then11
  %14 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8483
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %14, i32 0, i32 3, !dbg !8485
  %15 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8485
  %tobool17 = icmp ne %struct.exe_disk_file_t.17* %15, null, !dbg !8483
  br i1 %tobool17, label %if.then18, label %if.end34, !dbg !8486

if.then18:                                        ; preds = %if.end16
  %16 = load i32, i32* %cmd.addr, align 4, !dbg !8487
  switch i32 %16, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb23
    i32 3, label %sw.bb32
  ], !dbg !8489

sw.bb:                                            ; preds = %if.then18
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !8490, metadata !DIExpression()), !dbg !8493
  store i32 0, i32* %flags, align 4, !dbg !8493
  %17 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8494
  %flags19 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %17, i32 0, i32 1, !dbg !8496
  %18 = load i32, i32* %flags19, align 4, !dbg !8496
  %and = and i32 %18, 2, !dbg !8497
  %tobool20 = icmp ne i32 %and, 0, !dbg !8497
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !8498

if.then21:                                        ; preds = %sw.bb
  %19 = load i32, i32* %flags, align 4, !dbg !8499
  %or = or i32 %19, 1, !dbg !8499
  store i32 %or, i32* %flags, align 4, !dbg !8499
  br label %if.end22, !dbg !8500

if.end22:                                         ; preds = %if.then21, %sw.bb
  %20 = load i32, i32* %flags, align 4, !dbg !8501
  store i32 %20, i32* %retval, align 4, !dbg !8502
  br label %return, !dbg !8502

sw.bb23:                                          ; preds = %if.then18
  %21 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8503
  %flags24 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %21, i32 0, i32 1, !dbg !8505
  %22 = load i32, i32* %flags24, align 4, !dbg !8506
  %and25 = and i32 %22, -3, !dbg !8506
  store i32 %and25, i32* %flags24, align 4, !dbg !8506
  %23 = load i32, i32* %arg, align 4, !dbg !8507
  %and26 = and i32 %23, 1, !dbg !8509
  %tobool27 = icmp ne i32 %and26, 0, !dbg !8509
  br i1 %tobool27, label %if.then28, label %if.end31, !dbg !8510

if.then28:                                        ; preds = %sw.bb23
  %24 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8511
  %flags29 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %24, i32 0, i32 1, !dbg !8512
  %25 = load i32, i32* %flags29, align 4, !dbg !8513
  %or30 = or i32 %25, 2, !dbg !8513
  store i32 %or30, i32* %flags29, align 4, !dbg !8513
  br label %if.end31, !dbg !8511

if.end31:                                         ; preds = %if.then28, %sw.bb23
  store i32 0, i32* %retval, align 4, !dbg !8514
  br label %return, !dbg !8514

sw.bb32:                                          ; preds = %if.then18
  store i32 0, i32* %retval, align 4, !dbg !8515
  br label %return, !dbg !8515

sw.default:                                       ; preds = %if.then18
  call void @klee_warning(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11.118, i64 0, i64 0)), !dbg !8517
  %call33 = call i32* @__errno_location() #23, !dbg !8518
  store i32 22, i32* %call33, align 4, !dbg !8519
  store i32 -1, i32* %retval, align 4, !dbg !8520
  br label %return, !dbg !8520

if.end34:                                         ; preds = %if.end16
  %26 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8521
  %fd35 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %26, i32 0, i32 0, !dbg !8522
  %27 = load i32, i32* %fd35, align 8, !dbg !8522
  %28 = load i32, i32* %cmd.addr, align 4, !dbg !8523
  %29 = load i32, i32* %arg, align 4, !dbg !8524
  %call36 = call i64 (i64, ...) @syscall(i64 72, i32 %27, i32 %28, i32 %29) #7, !dbg !8525
  %conv = trunc i64 %call36 to i32, !dbg !8525
  store i32 %conv, i32* %retval, align 4, !dbg !8526
  br label %return, !dbg !8526

return:                                           ; preds = %if.end34, %sw.default, %sw.bb32, %if.end31, %if.end22, %if.then
  %30 = load i32, i32* %retval, align 4, !dbg !8527
  ret i32 %30, !dbg !8527
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @__fd_statfs(i8* %path, %struct.statfs.12* %buf) #0 !dbg !8528 {
entry:
  %retval = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  %buf.addr = alloca %struct.statfs.12*, align 8
  %dfile = alloca %struct.exe_disk_file_t.17*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !8552, metadata !DIExpression()), !dbg !8553
  store %struct.statfs.12* %buf, %struct.statfs.12** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.statfs.12** %buf.addr, metadata !8554, metadata !DIExpression()), !dbg !8555
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %dfile, metadata !8556, metadata !DIExpression()), !dbg !8557
  %0 = load i8*, i8** %path.addr, align 8, !dbg !8558
  %call = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %0), !dbg !8559
  store %struct.exe_disk_file_t.17* %call, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8557
  %1 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8560
  %tobool = icmp ne %struct.exe_disk_file_t.17* %1, null, !dbg !8560
  br i1 %tobool, label %if.then, label %if.end, !dbg !8562

if.then:                                          ; preds = %entry
  call void @klee_warning(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9.109, i64 0, i64 0)), !dbg !8563
  %call1 = call i32* @__errno_location() #23, !dbg !8565
  store i32 2, i32* %call1, align 4, !dbg !8566
  store i32 -1, i32* %retval, align 4, !dbg !8567
  br label %return, !dbg !8567

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %path.addr, align 8, !dbg !8568
  %call2 = call i8* @__concretize_string(i8* %2), !dbg !8569
  %3 = load %struct.statfs.12*, %struct.statfs.12** %buf.addr, align 8, !dbg !8570
  %call3 = call i64 (i64, ...) @syscall(i64 137, i8* %call2, %struct.statfs.12* %3) #7, !dbg !8571
  %conv = trunc i64 %call3 to i32, !dbg !8571
  store i32 %conv, i32* %retval, align 4, !dbg !8572
  br label %return, !dbg !8572

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4, !dbg !8573
  ret i32 %4, !dbg !8573
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @fstatfs(i32 %fd, %struct.statfs.12* nonnull %buf) #0 !dbg !8574 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %buf.addr = alloca %struct.statfs.12*, align 8
  %f = alloca %struct.exe_file_t.18*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !8577, metadata !DIExpression()), !dbg !8578
  store %struct.statfs.12* %buf, %struct.statfs.12** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.statfs.12** %buf.addr, metadata !8579, metadata !DIExpression()), !dbg !8580
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !8581, metadata !DIExpression()), !dbg !8582
  %0 = load i32, i32* %fd.addr, align 4, !dbg !8583
  %call = call %struct.exe_file_t.18* @__get_file(i32 %0), !dbg !8584
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !8582
  %1 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8585
  %tobool = icmp ne %struct.exe_file_t.18* %1, null, !dbg !8585
  br i1 %tobool, label %if.end, label %if.then, !dbg !8587

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !8588
  store i32 9, i32* %call1, align 4, !dbg !8590
  store i32 -1, i32* %retval, align 4, !dbg !8591
  br label %return, !dbg !8591

if.end:                                           ; preds = %entry
  %2 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8592
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %2, i32 0, i32 3, !dbg !8594
  %3 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8594
  %tobool2 = icmp ne %struct.exe_disk_file_t.17* %3, null, !dbg !8592
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !8595

if.then3:                                         ; preds = %if.end
  call void @klee_warning(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.22.131, i64 0, i64 0)), !dbg !8596
  %call4 = call i32* @__errno_location() #23, !dbg !8598
  store i32 9, i32* %call4, align 4, !dbg !8599
  store i32 -1, i32* %retval, align 4, !dbg !8600
  br label %return, !dbg !8600

if.end5:                                          ; preds = %if.end
  %4 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8601
  %fd6 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %4, i32 0, i32 0, !dbg !8602
  %5 = load i32, i32* %fd6, align 8, !dbg !8602
  %6 = load %struct.statfs.12*, %struct.statfs.12** %buf.addr, align 8, !dbg !8603
  %call7 = call i64 (i64, ...) @syscall(i64 138, i32 %5, %struct.statfs.12* %6) #7, !dbg !8604
  %conv = trunc i64 %call7 to i32, !dbg !8604
  store i32 %conv, i32* %retval, align 4, !dbg !8605
  br label %return, !dbg !8605

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !8606
  ret i32 %7, !dbg !8606
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @fsync(i32 %fd) #0 !dbg !8607 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %f = alloca %struct.exe_file_t.18*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !8608, metadata !DIExpression()), !dbg !8609
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !8610, metadata !DIExpression()), !dbg !8611
  %0 = load i32, i32* %fd.addr, align 4, !dbg !8612
  %call = call %struct.exe_file_t.18* @__get_file(i32 %0), !dbg !8613
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !8611
  %1 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8614
  %tobool = icmp ne %struct.exe_file_t.18* %1, null, !dbg !8614
  br i1 %tobool, label %if.else, label %if.then, !dbg !8616

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !8617
  store i32 9, i32* %call1, align 4, !dbg !8619
  store i32 -1, i32* %retval, align 4, !dbg !8620
  br label %return, !dbg !8620

if.else:                                          ; preds = %entry
  %2 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8621
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %2, i32 0, i32 3, !dbg !8623
  %3 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8623
  %tobool2 = icmp ne %struct.exe_disk_file_t.17* %3, null, !dbg !8621
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !8624

if.then3:                                         ; preds = %if.else
  store i32 0, i32* %retval, align 4, !dbg !8625
  br label %return, !dbg !8625

if.end4:                                          ; preds = %if.else
  %4 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8627
  %fd5 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %4, i32 0, i32 0, !dbg !8628
  %5 = load i32, i32* %fd5, align 8, !dbg !8628
  %call6 = call i64 (i64, ...) @syscall(i64 74, i32 %5) #7, !dbg !8629
  %conv = trunc i64 %call6 to i32, !dbg !8629
  store i32 %conv, i32* %retval, align 4, !dbg !8630
  br label %return, !dbg !8630

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !8631
  ret i32 %6, !dbg !8631
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dup2(i32 %oldfd, i32 %newfd) #0 !dbg !8632 {
entry:
  %retval = alloca i32, align 4
  %oldfd.addr = alloca i32, align 4
  %newfd.addr = alloca i32, align 4
  %f = alloca %struct.exe_file_t.18*, align 8
  %f2 = alloca %struct.exe_file_t.18*, align 8
  store i32 %oldfd, i32* %oldfd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oldfd.addr, metadata !8635, metadata !DIExpression()), !dbg !8636
  store i32 %newfd, i32* %newfd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %newfd.addr, metadata !8637, metadata !DIExpression()), !dbg !8638
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !8639, metadata !DIExpression()), !dbg !8640
  %0 = load i32, i32* %oldfd.addr, align 4, !dbg !8641
  %call = call %struct.exe_file_t.18* @__get_file(i32 %0), !dbg !8642
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !8640
  %1 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8643
  %tobool = icmp ne %struct.exe_file_t.18* %1, null, !dbg !8643
  %2 = load i32, i32* %newfd.addr, align 4, !dbg !8645
  %cmp = icmp sge i32 %2, 0, !dbg !8646
  %or.cond = and i1 %tobool, %cmp, !dbg !8647
  %3 = load i32, i32* %newfd.addr, align 4, !dbg !8648
  %cmp1 = icmp slt i32 %3, 32, !dbg !8649
  %or.cond1 = and i1 %or.cond, %cmp1, !dbg !8647
  br i1 %or.cond1, label %if.else, label %if.then, !dbg !8647

if.then:                                          ; preds = %entry
  %call2 = call i32* @__errno_location() #23, !dbg !8650
  store i32 9, i32* %call2, align 4, !dbg !8652
  store i32 -1, i32* %retval, align 4, !dbg !8653
  br label %return, !dbg !8653

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f2, metadata !8654, metadata !DIExpression()), !dbg !8656
  %4 = load i32, i32* %newfd.addr, align 4, !dbg !8657
  %idxprom = sext i32 %4 to i64, !dbg !8658
  %arrayidx = getelementptr inbounds [32 x %struct.exe_file_t.18], [32 x %struct.exe_file_t.18]* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 0), i64 0, i64 %idxprom, !dbg !8658
  store %struct.exe_file_t.18* %arrayidx, %struct.exe_file_t.18** %f2, align 8, !dbg !8656
  %5 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f2, align 8, !dbg !8659
  %flags = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %5, i32 0, i32 1, !dbg !8661
  %6 = load i32, i32* %flags, align 4, !dbg !8661
  %and = and i32 %6, 1, !dbg !8662
  %tobool3 = icmp ne i32 %and, 0, !dbg !8662
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !8663

if.then4:                                         ; preds = %if.else
  %7 = load i32, i32* %newfd.addr, align 4, !dbg !8664
  %call5 = call i32 @close(i32 %7), !dbg !8665
  br label %if.end, !dbg !8665

if.end:                                           ; preds = %if.then4, %if.else
  %8 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f2, align 8, !dbg !8666
  %9 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8667
  %10 = bitcast %struct.exe_file_t.18* %8 to i8*, !dbg !8668
  %11 = bitcast %struct.exe_file_t.18* %9 to i8*, !dbg !8668
  %12 = call i8* @memcpy(i8* %10, i8* %11, i64 24), !dbg !8668
  %13 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f2, align 8, !dbg !8669
  %flags6 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %13, i32 0, i32 1, !dbg !8670
  %14 = load i32, i32* %flags6, align 4, !dbg !8671
  %and7 = and i32 %14, -3, !dbg !8671
  store i32 %and7, i32* %flags6, align 4, !dbg !8671
  %15 = load i32, i32* %newfd.addr, align 4, !dbg !8672
  store i32 %15, i32* %retval, align 4, !dbg !8673
  br label %return, !dbg !8673

return:                                           ; preds = %if.end, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !8674
  ret i32 %16, !dbg !8674
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dup(i32 %oldfd) #0 !dbg !8675 {
entry:
  %retval = alloca i32, align 4
  %oldfd.addr = alloca i32, align 4
  %f = alloca %struct.exe_file_t.18*, align 8
  %fd = alloca i32, align 4
  store i32 %oldfd, i32* %oldfd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oldfd.addr, metadata !8676, metadata !DIExpression()), !dbg !8677
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !8678, metadata !DIExpression()), !dbg !8679
  %0 = load i32, i32* %oldfd.addr, align 4, !dbg !8680
  %call = call %struct.exe_file_t.18* @__get_file(i32 %0), !dbg !8681
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !8679
  %1 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8682
  %tobool = icmp ne %struct.exe_file_t.18* %1, null, !dbg !8682
  br i1 %tobool, label %if.else, label %if.then, !dbg !8684

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #23, !dbg !8685
  store i32 9, i32* %call1, align 4, !dbg !8687
  store i32 -1, i32* %retval, align 4, !dbg !8688
  br label %return, !dbg !8688

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !8689, metadata !DIExpression()), !dbg !8691
  store i32 0, i32* %fd, align 4, !dbg !8692
  br label %for.cond, !dbg !8694

for.cond:                                         ; preds = %for.inc, %if.else
  %2 = load i32, i32* %fd, align 4, !dbg !8695
  %cmp = icmp slt i32 %2, 32, !dbg !8697
  br i1 %cmp, label %for.body, label %for.end, !dbg !8698

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %fd, align 4, !dbg !8699
  %idxprom = sext i32 %3 to i64, !dbg !8701
  %arrayidx = getelementptr inbounds [32 x %struct.exe_file_t.18], [32 x %struct.exe_file_t.18]* getelementptr inbounds (%struct.exe_sym_env_t.20, %struct.exe_sym_env_t.20* bitcast ({ <{ %struct.exe_file_t.18, %struct.exe_file_t.18, %struct.exe_file_t.18, [29 x %struct.exe_file_t.18] }>, i32, i32, i32, [4 x i8] }* @__exe_env to %struct.exe_sym_env_t.20*), i32 0, i32 0), i64 0, i64 %idxprom, !dbg !8701
  %flags = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %arrayidx, i32 0, i32 1, !dbg !8702
  %4 = load i32, i32* %flags, align 4, !dbg !8702
  %and = and i32 %4, 1, !dbg !8703
  %tobool2 = icmp ne i32 %and, 0, !dbg !8703
  br i1 %tobool2, label %for.inc, label %for.end, !dbg !8704

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %fd, align 4, !dbg !8705
  %inc = add nsw i32 %5, 1, !dbg !8705
  store i32 %inc, i32* %fd, align 4, !dbg !8705
  br label %for.cond, !dbg !8706, !llvm.loop !8707

for.end:                                          ; preds = %for.body, %for.cond
  %6 = load i32, i32* %fd, align 4, !dbg !8709
  %cmp4 = icmp eq i32 %6, 32, !dbg !8711
  br i1 %cmp4, label %if.then5, label %if.else7, !dbg !8712

if.then5:                                         ; preds = %for.end
  %call6 = call i32* @__errno_location() #23, !dbg !8713
  store i32 24, i32* %call6, align 4, !dbg !8715
  store i32 -1, i32* %retval, align 4, !dbg !8716
  br label %return, !dbg !8716

if.else7:                                         ; preds = %for.end
  %7 = load i32, i32* %oldfd.addr, align 4, !dbg !8717
  %8 = load i32, i32* %fd, align 4, !dbg !8719
  %call8 = call i32 @dup2(i32 %7, i32 %8) #7, !dbg !8720
  store i32 %call8, i32* %retval, align 4, !dbg !8721
  br label %return, !dbg !8721

return:                                           ; preds = %if.else7, %if.then5, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8722
  ret i32 %9, !dbg !8722
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rmdir(i8* nonnull %pathname) #0 !dbg !8723 {
entry:
  %retval = alloca i32, align 4
  %pathname.addr = alloca i8*, align 8
  %dfile = alloca %struct.exe_disk_file_t.17*, align 8
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !8724, metadata !DIExpression()), !dbg !8725
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %dfile, metadata !8726, metadata !DIExpression()), !dbg !8727
  %0 = load i8*, i8** %pathname.addr, align 8, !dbg !8728
  %call = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %0), !dbg !8729
  store %struct.exe_disk_file_t.17* %call, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8727
  %1 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8730
  %tobool = icmp ne %struct.exe_disk_file_t.17* %1, null, !dbg !8730
  br i1 %tobool, label %if.then, label %if.end, !dbg !8732

if.then:                                          ; preds = %entry
  %2 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8733
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %2, i32 0, i32 2, !dbg !8733
  %3 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !8733
  %st_mode = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %3, i32 0, i32 3, !dbg !8733
  %4 = load i32, i32* %st_mode, align 8, !dbg !8733
  %and = and i32 %4, 61440, !dbg !8733
  %cmp = icmp eq i32 %and, 16384, !dbg !8733
  br i1 %cmp, label %if.then1, label %if.else, !dbg !8736

if.then1:                                         ; preds = %if.then
  %5 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8737
  %stat2 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %5, i32 0, i32 2, !dbg !8739
  %6 = load %struct.stat64.16*, %struct.stat64.16** %stat2, align 8, !dbg !8739
  %st_ino = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %6, i32 0, i32 1, !dbg !8740
  store i64 0, i64* %st_ino, align 8, !dbg !8741
  store i32 0, i32* %retval, align 4, !dbg !8742
  br label %return, !dbg !8742

if.else:                                          ; preds = %if.then
  %call3 = call i32* @__errno_location() #23, !dbg !8743
  store i32 20, i32* %call3, align 4, !dbg !8745
  store i32 -1, i32* %retval, align 4, !dbg !8746
  br label %return, !dbg !8746

if.end:                                           ; preds = %entry
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.23.132, i64 0, i64 0)), !dbg !8747
  %call4 = call i32* @__errno_location() #23, !dbg !8748
  store i32 1, i32* %call4, align 4, !dbg !8749
  store i32 -1, i32* %retval, align 4, !dbg !8750
  br label %return, !dbg !8750

return:                                           ; preds = %if.end, %if.else, %if.then1
  %7 = load i32, i32* %retval, align 4, !dbg !8751
  ret i32 %7, !dbg !8751
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @unlink(i8* nonnull %pathname) #0 !dbg !8752 {
entry:
  %retval = alloca i32, align 4
  %pathname.addr = alloca i8*, align 8
  %dfile = alloca %struct.exe_disk_file_t.17*, align 8
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !8753, metadata !DIExpression()), !dbg !8754
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %dfile, metadata !8755, metadata !DIExpression()), !dbg !8756
  %0 = load i8*, i8** %pathname.addr, align 8, !dbg !8757
  %call = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %0), !dbg !8758
  store %struct.exe_disk_file_t.17* %call, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8756
  %1 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8759
  %tobool = icmp ne %struct.exe_disk_file_t.17* %1, null, !dbg !8759
  br i1 %tobool, label %if.then, label %if.end, !dbg !8761

if.then:                                          ; preds = %entry
  %2 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8762
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %2, i32 0, i32 2, !dbg !8762
  %3 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !8762
  %st_mode = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %3, i32 0, i32 3, !dbg !8762
  %4 = load i32, i32* %st_mode, align 8, !dbg !8762
  %and = and i32 %4, 61440, !dbg !8762
  %cmp = icmp eq i32 %and, 32768, !dbg !8762
  %5 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8765
  %stat2 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %5, i32 0, i32 2, !dbg !8765
  %6 = load %struct.stat64.16*, %struct.stat64.16** %stat2, align 8, !dbg !8765
  br i1 %cmp, label %if.then1, label %if.else, !dbg !8766

if.then1:                                         ; preds = %if.then
  %st_ino = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %6, i32 0, i32 1, !dbg !8767
  store i64 0, i64* %st_ino, align 8, !dbg !8769
  store i32 0, i32* %retval, align 4, !dbg !8770
  br label %return, !dbg !8770

if.else:                                          ; preds = %if.then
  %st_mode4 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %6, i32 0, i32 3, !dbg !8771
  %7 = load i32, i32* %st_mode4, align 8, !dbg !8771
  %and5 = and i32 %7, 61440, !dbg !8771
  %cmp6 = icmp eq i32 %and5, 16384, !dbg !8771
  %call8 = call i32* @__errno_location() #23, !dbg !8773
  br i1 %cmp6, label %if.then7, label %if.else9, !dbg !8774

if.then7:                                         ; preds = %if.else
  store i32 21, i32* %call8, align 4, !dbg !8775
  store i32 -1, i32* %retval, align 4, !dbg !8777
  br label %return, !dbg !8777

if.else9:                                         ; preds = %if.else
  store i32 1, i32* %call8, align 4, !dbg !8778
  store i32 -1, i32* %retval, align 4, !dbg !8780
  br label %return, !dbg !8780

if.end:                                           ; preds = %entry
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.23.132, i64 0, i64 0)), !dbg !8781
  %call11 = call i32* @__errno_location() #23, !dbg !8782
  store i32 1, i32* %call11, align 4, !dbg !8783
  store i32 -1, i32* %retval, align 4, !dbg !8784
  br label %return, !dbg !8784

return:                                           ; preds = %if.end, %if.else9, %if.then7, %if.then1
  %8 = load i32, i32* %retval, align 4, !dbg !8785
  ret i32 %8, !dbg !8785
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @unlinkat(i32 %dirfd, i8* nonnull %pathname, i32 %flags) #0 !dbg !8786 {
entry:
  %retval = alloca i32, align 4
  %dirfd.addr = alloca i32, align 4
  %pathname.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %dfile = alloca %struct.exe_disk_file_t.17*, align 8
  store i32 %dirfd, i32* %dirfd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dirfd.addr, metadata !8789, metadata !DIExpression()), !dbg !8790
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !8791, metadata !DIExpression()), !dbg !8792
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8793, metadata !DIExpression()), !dbg !8794
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %dfile, metadata !8795, metadata !DIExpression()), !dbg !8796
  %0 = load i8*, i8** %pathname.addr, align 8, !dbg !8797
  %call = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %0), !dbg !8798
  store %struct.exe_disk_file_t.17* %call, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8796
  %1 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8799
  %tobool = icmp ne %struct.exe_disk_file_t.17* %1, null, !dbg !8799
  br i1 %tobool, label %if.then, label %if.end, !dbg !8801

if.then:                                          ; preds = %entry
  %2 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8802
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %2, i32 0, i32 2, !dbg !8802
  %3 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !8802
  %st_mode = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %3, i32 0, i32 3, !dbg !8802
  %4 = load i32, i32* %st_mode, align 8, !dbg !8802
  %and = and i32 %4, 61440, !dbg !8802
  %cmp = icmp eq i32 %and, 32768, !dbg !8802
  %5 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8805
  %stat2 = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %5, i32 0, i32 2, !dbg !8805
  %6 = load %struct.stat64.16*, %struct.stat64.16** %stat2, align 8, !dbg !8805
  br i1 %cmp, label %if.then1, label %if.else, !dbg !8806

if.then1:                                         ; preds = %if.then
  %st_ino = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %6, i32 0, i32 1, !dbg !8807
  store i64 0, i64* %st_ino, align 8, !dbg !8809
  store i32 0, i32* %retval, align 4, !dbg !8810
  br label %return, !dbg !8810

if.else:                                          ; preds = %if.then
  %st_mode4 = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %6, i32 0, i32 3, !dbg !8811
  %7 = load i32, i32* %st_mode4, align 8, !dbg !8811
  %and5 = and i32 %7, 61440, !dbg !8811
  %cmp6 = icmp eq i32 %and5, 16384, !dbg !8811
  %call8 = call i32* @__errno_location() #23, !dbg !8813
  br i1 %cmp6, label %if.then7, label %if.else9, !dbg !8814

if.then7:                                         ; preds = %if.else
  store i32 21, i32* %call8, align 4, !dbg !8815
  store i32 -1, i32* %retval, align 4, !dbg !8817
  br label %return, !dbg !8817

if.else9:                                         ; preds = %if.else
  store i32 1, i32* %call8, align 4, !dbg !8818
  store i32 -1, i32* %retval, align 4, !dbg !8820
  br label %return, !dbg !8820

if.end:                                           ; preds = %entry
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.23.132, i64 0, i64 0)), !dbg !8821
  %call11 = call i32* @__errno_location() #23, !dbg !8822
  store i32 1, i32* %call11, align 4, !dbg !8823
  store i32 -1, i32* %retval, align 4, !dbg !8824
  br label %return, !dbg !8824

return:                                           ; preds = %if.end, %if.else9, %if.then7, %if.then1
  %8 = load i32, i32* %retval, align 4, !dbg !8825
  ret i32 %8, !dbg !8825
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @readlink(i8* nonnull %path, i8* nonnull %buf, i64 %bufsize) #0 !dbg !8826 {
entry:
  %retval = alloca i64, align 8
  %path.addr = alloca i8*, align 8
  %buf.addr = alloca i8*, align 8
  %bufsize.addr = alloca i64, align 8
  %dfile = alloca %struct.exe_disk_file_t.17*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !8829, metadata !DIExpression()), !dbg !8830
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !8831, metadata !DIExpression()), !dbg !8832
  store i64 %bufsize, i64* %bufsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bufsize.addr, metadata !8833, metadata !DIExpression()), !dbg !8834
  call void @llvm.dbg.declare(metadata %struct.exe_disk_file_t.17** %dfile, metadata !8835, metadata !DIExpression()), !dbg !8836
  %0 = load i8*, i8** %path.addr, align 8, !dbg !8837
  %call = call %struct.exe_disk_file_t.17* @__get_sym_file(i8* %0), !dbg !8838
  store %struct.exe_disk_file_t.17* %call, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8836
  %1 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8839
  %tobool = icmp ne %struct.exe_disk_file_t.17* %1, null, !dbg !8839
  br i1 %tobool, label %if.then, label %if.end20, !dbg !8841

if.then:                                          ; preds = %entry
  %2 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8842
  %stat = getelementptr inbounds %struct.exe_disk_file_t.17, %struct.exe_disk_file_t.17* %2, i32 0, i32 2, !dbg !8842
  %3 = load %struct.stat64.16*, %struct.stat64.16** %stat, align 8, !dbg !8842
  %st_mode = getelementptr inbounds %struct.stat64.16, %struct.stat64.16* %3, i32 0, i32 3, !dbg !8842
  %4 = load i32, i32* %st_mode, align 8, !dbg !8842
  %and = and i32 %4, 61440, !dbg !8842
  %cmp = icmp eq i32 %and, 40960, !dbg !8842
  br i1 %cmp, label %if.then1, label %if.else, !dbg !8845

if.then1:                                         ; preds = %if.then
  %5 = load i8*, i8** %path.addr, align 8, !dbg !8846
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0, !dbg !8846
  %6 = load i8, i8* %arrayidx, align 1, !dbg !8846
  %7 = load i8*, i8** %buf.addr, align 8, !dbg !8848
  %arrayidx2 = getelementptr inbounds i8, i8* %7, i64 0, !dbg !8848
  store i8 %6, i8* %arrayidx2, align 1, !dbg !8849
  %8 = load i64, i64* %bufsize.addr, align 8, !dbg !8850
  %cmp3 = icmp ugt i64 %8, 1, !dbg !8852
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !8853

if.then4:                                         ; preds = %if.then1
  %9 = load i8*, i8** %buf.addr, align 8, !dbg !8854
  %arrayidx5 = getelementptr inbounds i8, i8* %9, i64 1, !dbg !8854
  store i8 46, i8* %arrayidx5, align 1, !dbg !8855
  br label %if.end, !dbg !8854

if.end:                                           ; preds = %if.then4, %if.then1
  %10 = load i64, i64* %bufsize.addr, align 8, !dbg !8856
  %cmp6 = icmp ugt i64 %10, 2, !dbg !8858
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !8859

if.then7:                                         ; preds = %if.end
  %11 = load i8*, i8** %buf.addr, align 8, !dbg !8860
  %arrayidx8 = getelementptr inbounds i8, i8* %11, i64 2, !dbg !8860
  store i8 108, i8* %arrayidx8, align 1, !dbg !8861
  br label %if.end9, !dbg !8860

if.end9:                                          ; preds = %if.then7, %if.end
  %12 = load i64, i64* %bufsize.addr, align 8, !dbg !8862
  %cmp10 = icmp ugt i64 %12, 3, !dbg !8864
  br i1 %cmp10, label %if.then11, label %if.end13, !dbg !8865

if.then11:                                        ; preds = %if.end9
  %13 = load i8*, i8** %buf.addr, align 8, !dbg !8866
  %arrayidx12 = getelementptr inbounds i8, i8* %13, i64 3, !dbg !8866
  store i8 110, i8* %arrayidx12, align 1, !dbg !8867
  br label %if.end13, !dbg !8866

if.end13:                                         ; preds = %if.then11, %if.end9
  %14 = load i64, i64* %bufsize.addr, align 8, !dbg !8868
  %cmp14 = icmp ugt i64 %14, 4, !dbg !8870
  br i1 %cmp14, label %if.then15, label %if.end17, !dbg !8871

if.then15:                                        ; preds = %if.end13
  %15 = load i8*, i8** %buf.addr, align 8, !dbg !8872
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i64 4, !dbg !8872
  store i8 107, i8* %arrayidx16, align 1, !dbg !8873
  br label %if.end17, !dbg !8872

if.end17:                                         ; preds = %if.then15, %if.end13
  %16 = load i64, i64* %bufsize.addr, align 8, !dbg !8874
  %cmp18 = icmp ugt i64 %16, 5, !dbg !8875
  %17 = load i64, i64* %bufsize.addr, align 8, !dbg !8876
  %cond = select i1 %cmp18, i64 5, i64 %17, !dbg !8876
  store i64 %cond, i64* %retval, align 8, !dbg !8877
  br label %return, !dbg !8877

if.else:                                          ; preds = %if.then
  %call19 = call i32* @__errno_location() #23, !dbg !8878
  store i32 22, i32* %call19, align 4, !dbg !8880
  store i64 -1, i64* %retval, align 8, !dbg !8881
  br label %return, !dbg !8881

if.end20:                                         ; preds = %entry
  %18 = load i8*, i8** %path.addr, align 8, !dbg !8882
  %19 = load i8*, i8** %buf.addr, align 8, !dbg !8883
  %20 = load i64, i64* %bufsize.addr, align 8, !dbg !8884
  %call21 = call i64 (i64, ...) @syscall(i64 89, i8* %18, i8* %19, i64 %20) #7, !dbg !8885
  store i64 %call21, i64* %retval, align 8, !dbg !8886
  br label %return, !dbg !8886

return:                                           ; preds = %if.end20, %if.else, %if.end17
  %21 = load i64, i64* %retval, align 8, !dbg !8887
  ret i64 %21, !dbg !8887
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @select(i32 %nfds, %struct.cgc_fd_set* %read, %struct.cgc_fd_set* %write, %struct.cgc_fd_set* %except, %struct.timespec.15* %timeout) #0 !dbg !8888 {
entry:
  %retval = alloca i32, align 4
  %nfds.addr = alloca i32, align 4
  %read.addr = alloca %struct.cgc_fd_set*, align 8
  %write.addr = alloca %struct.cgc_fd_set*, align 8
  %except.addr = alloca %struct.cgc_fd_set*, align 8
  %timeout.addr = alloca %struct.timespec.15*, align 8
  %in_read = alloca %struct.cgc_fd_set, align 8
  %in_write = alloca %struct.cgc_fd_set, align 8
  %in_except = alloca %struct.cgc_fd_set, align 8
  %os_read = alloca %struct.cgc_fd_set, align 8
  %os_write = alloca %struct.cgc_fd_set, align 8
  %os_except = alloca %struct.cgc_fd_set, align 8
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %os_nfds = alloca i32, align 4
  %f = alloca %struct.exe_file_t.18*, align 8
  %tv = alloca %struct.timespec.15, align 8
  %r = alloca i32, align 4
  %f182 = alloca %struct.exe_file_t.18*, align 8
  store i32 %nfds, i32* %nfds.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nfds.addr, metadata !8902, metadata !DIExpression()), !dbg !8903
  store %struct.cgc_fd_set* %read, %struct.cgc_fd_set** %read.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgc_fd_set** %read.addr, metadata !8904, metadata !DIExpression()), !dbg !8905
  store %struct.cgc_fd_set* %write, %struct.cgc_fd_set** %write.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgc_fd_set** %write.addr, metadata !8906, metadata !DIExpression()), !dbg !8907
  store %struct.cgc_fd_set* %except, %struct.cgc_fd_set** %except.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgc_fd_set** %except.addr, metadata !8908, metadata !DIExpression()), !dbg !8909
  store %struct.timespec.15* %timeout, %struct.timespec.15** %timeout.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec.15** %timeout.addr, metadata !8910, metadata !DIExpression()), !dbg !8911
  call void @llvm.dbg.declare(metadata %struct.cgc_fd_set* %in_read, metadata !8912, metadata !DIExpression()), !dbg !8913
  call void @llvm.dbg.declare(metadata %struct.cgc_fd_set* %in_write, metadata !8914, metadata !DIExpression()), !dbg !8915
  call void @llvm.dbg.declare(metadata %struct.cgc_fd_set* %in_except, metadata !8916, metadata !DIExpression()), !dbg !8917
  call void @llvm.dbg.declare(metadata %struct.cgc_fd_set* %os_read, metadata !8918, metadata !DIExpression()), !dbg !8919
  call void @llvm.dbg.declare(metadata %struct.cgc_fd_set* %os_write, metadata !8920, metadata !DIExpression()), !dbg !8921
  call void @llvm.dbg.declare(metadata %struct.cgc_fd_set* %os_except, metadata !8922, metadata !DIExpression()), !dbg !8923
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8924, metadata !DIExpression()), !dbg !8925
  call void @llvm.dbg.declare(metadata i32* %count, metadata !8926, metadata !DIExpression()), !dbg !8927
  store i32 0, i32* %count, align 4, !dbg !8927
  call void @llvm.dbg.declare(metadata i32* %os_nfds, metadata !8928, metadata !DIExpression()), !dbg !8929
  store i32 0, i32* %os_nfds, align 4, !dbg !8929
  %0 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %read.addr, align 8, !dbg !8930
  %tobool = icmp ne %struct.cgc_fd_set* %0, null, !dbg !8930
  br i1 %tobool, label %if.then, label %if.else, !dbg !8932

if.then:                                          ; preds = %entry
  %1 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %read.addr, align 8, !dbg !8933
  %2 = bitcast %struct.cgc_fd_set* %in_read to i8*, !dbg !8935
  %3 = bitcast %struct.cgc_fd_set* %1 to i8*, !dbg !8935
  %4 = call i8* @memcpy(i8* %2, i8* %3, i64 128), !dbg !8935
  %5 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %read.addr, align 8, !dbg !8936
  %6 = bitcast %struct.cgc_fd_set* %5 to i8*, !dbg !8936
  %7 = call i8* @memset(i8* %6, i32 0, i64 128), !dbg !8936
  br label %if.end, !dbg !8937

if.else:                                          ; preds = %entry
  %8 = bitcast %struct.cgc_fd_set* %in_read to i8*, !dbg !8938
  %9 = call i8* @memset(i8* %8, i32 0, i64 128), !dbg !8938
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %write.addr, align 8, !dbg !8940
  %tobool1 = icmp ne %struct.cgc_fd_set* %10, null, !dbg !8940
  br i1 %tobool1, label %if.then2, label %if.else3, !dbg !8942

if.then2:                                         ; preds = %if.end
  %11 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %write.addr, align 8, !dbg !8943
  %12 = bitcast %struct.cgc_fd_set* %in_write to i8*, !dbg !8945
  %13 = bitcast %struct.cgc_fd_set* %11 to i8*, !dbg !8945
  %14 = call i8* @memcpy(i8* %12, i8* %13, i64 128), !dbg !8945
  %15 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %write.addr, align 8, !dbg !8946
  %16 = bitcast %struct.cgc_fd_set* %15 to i8*, !dbg !8946
  %17 = call i8* @memset(i8* %16, i32 0, i64 128), !dbg !8946
  br label %if.end4, !dbg !8947

if.else3:                                         ; preds = %if.end
  %18 = bitcast %struct.cgc_fd_set* %in_write to i8*, !dbg !8948
  %19 = call i8* @memset(i8* %18, i32 0, i64 128), !dbg !8948
  br label %if.end4

if.end4:                                          ; preds = %if.else3, %if.then2
  %20 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %except.addr, align 8, !dbg !8950
  %tobool5 = icmp ne %struct.cgc_fd_set* %20, null, !dbg !8950
  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !8952

if.then6:                                         ; preds = %if.end4
  %21 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %except.addr, align 8, !dbg !8953
  %22 = bitcast %struct.cgc_fd_set* %in_except to i8*, !dbg !8955
  %23 = bitcast %struct.cgc_fd_set* %21 to i8*, !dbg !8955
  %24 = call i8* @memcpy(i8* %22, i8* %23, i64 128), !dbg !8955
  %25 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %except.addr, align 8, !dbg !8956
  %26 = bitcast %struct.cgc_fd_set* %25 to i8*, !dbg !8956
  %27 = call i8* @memset(i8* %26, i32 0, i64 128), !dbg !8956
  br label %if.end8, !dbg !8957

if.else7:                                         ; preds = %if.end4
  %28 = bitcast %struct.cgc_fd_set* %in_except to i8*, !dbg !8958
  %29 = call i8* @memset(i8* %28, i32 0, i64 128), !dbg !8958
  br label %if.end8

if.end8:                                          ; preds = %if.else7, %if.then6
  %30 = bitcast %struct.cgc_fd_set* %os_read to i8*, !dbg !8960
  %31 = call i8* @memset(i8* %30, i32 0, i64 128), !dbg !8960
  %32 = bitcast %struct.cgc_fd_set* %os_write to i8*, !dbg !8961
  %33 = call i8* @memset(i8* %32, i32 0, i64 128), !dbg !8961
  %34 = bitcast %struct.cgc_fd_set* %os_except to i8*, !dbg !8962
  %35 = call i8* @memset(i8* %34, i32 0, i64 128), !dbg !8962
  store i32 0, i32* %i, align 4, !dbg !8963
  br label %for.cond, !dbg !8965

for.cond:                                         ; preds = %for.inc, %if.end8
  %36 = load i32, i32* %i, align 4, !dbg !8966
  %37 = load i32, i32* %nfds.addr, align 4, !dbg !8968
  %cmp = icmp slt i32 %36, %37, !dbg !8969
  br i1 %cmp, label %for.body, label %for.end, !dbg !8970

for.body:                                         ; preds = %for.cond
  %fds_bits = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %in_read, i32 0, i32 0, !dbg !8971
  %38 = load i32, i32* %i, align 4, !dbg !8971
  %div = sdiv i32 %38, 64, !dbg !8971
  %idxprom = sext i32 %div to i64, !dbg !8971
  %arrayidx = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits, i64 0, i64 %idxprom, !dbg !8971
  %39 = load i64, i64* %arrayidx, align 8, !dbg !8971
  %40 = load i32, i32* %i, align 4, !dbg !8971
  %rem = srem i32 %40, 64, !dbg !8971
  %int_cast_to_i64 = zext i32 %rem to i64, !dbg !8971
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i64), !dbg !8971
  %shl = shl i32 1, %rem, !dbg !8971, !klee.check.shift !2755
  %conv = sext i32 %shl to i64, !dbg !8971
  %and = and i64 %39, %conv, !dbg !8971
  %tobool9 = icmp ne i64 %and, 0, !dbg !8971
  br i1 %tobool9, label %if.then29, label %lor.lhs.false, !dbg !8974

lor.lhs.false:                                    ; preds = %for.body
  %fds_bits10 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %in_write, i32 0, i32 0, !dbg !8975
  %41 = load i32, i32* %i, align 4, !dbg !8975
  %div11 = sdiv i32 %41, 64, !dbg !8975
  %idxprom12 = sext i32 %div11 to i64, !dbg !8975
  %arrayidx13 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits10, i64 0, i64 %idxprom12, !dbg !8975
  %42 = load i64, i64* %arrayidx13, align 8, !dbg !8975
  %43 = load i32, i32* %i, align 4, !dbg !8975
  %rem14 = srem i32 %43, 64, !dbg !8975
  %int_cast_to_i641 = zext i32 %rem14 to i64, !dbg !8975
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i641), !dbg !8975
  %shl15 = shl i32 1, %rem14, !dbg !8975, !klee.check.shift !2755
  %conv16 = sext i32 %shl15 to i64, !dbg !8975
  %and17 = and i64 %42, %conv16, !dbg !8975
  %tobool18 = icmp ne i64 %and17, 0, !dbg !8975
  br i1 %tobool18, label %if.then29, label %lor.lhs.false19, !dbg !8976

lor.lhs.false19:                                  ; preds = %lor.lhs.false
  %fds_bits20 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %in_except, i32 0, i32 0, !dbg !8977
  %44 = load i32, i32* %i, align 4, !dbg !8977
  %div21 = sdiv i32 %44, 64, !dbg !8977
  %idxprom22 = sext i32 %div21 to i64, !dbg !8977
  %arrayidx23 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits20, i64 0, i64 %idxprom22, !dbg !8977
  %45 = load i64, i64* %arrayidx23, align 8, !dbg !8977
  %46 = load i32, i32* %i, align 4, !dbg !8977
  %rem24 = srem i32 %46, 64, !dbg !8977
  %int_cast_to_i642 = zext i32 %rem24 to i64, !dbg !8977
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i642), !dbg !8977
  %shl25 = shl i32 1, %rem24, !dbg !8977, !klee.check.shift !2755
  %conv26 = sext i32 %shl25 to i64, !dbg !8977
  %and27 = and i64 %45, %conv26, !dbg !8977
  %tobool28 = icmp ne i64 %and27, 0, !dbg !8977
  br i1 %tobool28, label %if.then29, label %for.inc, !dbg !8978

if.then29:                                        ; preds = %lor.lhs.false19, %lor.lhs.false, %for.body
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f, metadata !8979, metadata !DIExpression()), !dbg !8981
  %47 = load i32, i32* %i, align 4, !dbg !8982
  %call = call %struct.exe_file_t.18* @__get_file(i32 %47), !dbg !8983
  store %struct.exe_file_t.18* %call, %struct.exe_file_t.18** %f, align 8, !dbg !8981
  %48 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8984
  %tobool30 = icmp ne %struct.exe_file_t.18* %48, null, !dbg !8984
  br i1 %tobool30, label %if.else33, label %if.then31, !dbg !8986

if.then31:                                        ; preds = %if.then29
  %call32 = call i32* @__errno_location() #23, !dbg !8987
  store i32 9, i32* %call32, align 4, !dbg !8989
  store i32 -1, i32* %retval, align 4, !dbg !8990
  br label %return, !dbg !8990

if.else33:                                        ; preds = %if.then29
  %49 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !8991
  %dfile = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %49, i32 0, i32 3, !dbg !8993
  %50 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile, align 8, !dbg !8993
  %tobool34 = icmp ne %struct.exe_disk_file_t.17* %50, null, !dbg !8991
  %fds_bits36 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %in_read, i32 0, i32 0, !dbg !8994
  %51 = load i32, i32* %i, align 4, !dbg !8994
  %div37 = sdiv i32 %51, 64, !dbg !8994
  %idxprom38 = sext i32 %div37 to i64, !dbg !8994
  %arrayidx39 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits36, i64 0, i64 %idxprom38, !dbg !8994
  %52 = load i64, i64* %arrayidx39, align 8, !dbg !8994
  %53 = load i32, i32* %i, align 4, !dbg !8994
  %rem40 = srem i32 %53, 64, !dbg !8994
  %int_cast_to_i643 = zext i32 %rem40 to i64, !dbg !8994
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i643), !dbg !8994
  %shl41 = shl i32 1, %rem40, !dbg !8994
  %conv42 = sext i32 %shl41 to i64, !dbg !8994
  %and43 = and i64 %52, %conv42, !dbg !8994
  %tobool44 = icmp ne i64 %and43, 0, !dbg !8994
  br i1 %tobool34, label %if.then35, label %if.else92, !dbg !8995

if.then35:                                        ; preds = %if.else33
  br i1 %tobool44, label %if.then45, label %if.end53, !dbg !8996

if.then45:                                        ; preds = %if.then35
  %54 = load i32, i32* %i, align 4, !dbg !8998
  %rem46 = srem i32 %54, 64, !dbg !8998
  %int_cast_to_i644 = zext i32 %rem46 to i64, !dbg !8998
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i644), !dbg !8998
  %shl47 = shl i32 1, %rem46, !dbg !8998, !klee.check.shift !2755
  %conv48 = sext i32 %shl47 to i64, !dbg !8998
  %55 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %read.addr, align 8, !dbg !8998
  %fds_bits49 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %55, i32 0, i32 0, !dbg !8998
  %56 = load i32, i32* %i, align 4, !dbg !8998
  %div50 = sdiv i32 %56, 64, !dbg !8998
  %idxprom51 = sext i32 %div50 to i64, !dbg !8998
  %arrayidx52 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits49, i64 0, i64 %idxprom51, !dbg !8998
  %57 = load i64, i64* %arrayidx52, align 8, !dbg !8998
  %or = or i64 %57, %conv48, !dbg !8998
  store i64 %or, i64* %arrayidx52, align 8, !dbg !8998
  br label %if.end53, !dbg !8998

if.end53:                                         ; preds = %if.then45, %if.then35
  %fds_bits54 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %in_write, i32 0, i32 0, !dbg !9000
  %58 = load i32, i32* %i, align 4, !dbg !9000
  %div55 = sdiv i32 %58, 64, !dbg !9000
  %idxprom56 = sext i32 %div55 to i64, !dbg !9000
  %arrayidx57 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits54, i64 0, i64 %idxprom56, !dbg !9000
  %59 = load i64, i64* %arrayidx57, align 8, !dbg !9000
  %60 = load i32, i32* %i, align 4, !dbg !9000
  %rem58 = srem i32 %60, 64, !dbg !9000
  %int_cast_to_i645 = zext i32 %rem58 to i64, !dbg !9000
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i645), !dbg !9000
  %shl59 = shl i32 1, %rem58, !dbg !9000, !klee.check.shift !2755
  %conv60 = sext i32 %shl59 to i64, !dbg !9000
  %and61 = and i64 %59, %conv60, !dbg !9000
  %tobool62 = icmp ne i64 %and61, 0, !dbg !9000
  br i1 %tobool62, label %if.then63, label %if.end72, !dbg !9002

if.then63:                                        ; preds = %if.end53
  %61 = load i32, i32* %i, align 4, !dbg !9003
  %rem64 = srem i32 %61, 64, !dbg !9003
  %int_cast_to_i646 = zext i32 %rem64 to i64, !dbg !9003
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i646), !dbg !9003
  %shl65 = shl i32 1, %rem64, !dbg !9003, !klee.check.shift !2755
  %conv66 = sext i32 %shl65 to i64, !dbg !9003
  %62 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %write.addr, align 8, !dbg !9003
  %fds_bits67 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %62, i32 0, i32 0, !dbg !9003
  %63 = load i32, i32* %i, align 4, !dbg !9003
  %div68 = sdiv i32 %63, 64, !dbg !9003
  %idxprom69 = sext i32 %div68 to i64, !dbg !9003
  %arrayidx70 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits67, i64 0, i64 %idxprom69, !dbg !9003
  %64 = load i64, i64* %arrayidx70, align 8, !dbg !9003
  %or71 = or i64 %64, %conv66, !dbg !9003
  store i64 %or71, i64* %arrayidx70, align 8, !dbg !9003
  br label %if.end72, !dbg !9003

if.end72:                                         ; preds = %if.then63, %if.end53
  %fds_bits73 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %in_except, i32 0, i32 0, !dbg !9004
  %65 = load i32, i32* %i, align 4, !dbg !9004
  %div74 = sdiv i32 %65, 64, !dbg !9004
  %idxprom75 = sext i32 %div74 to i64, !dbg !9004
  %arrayidx76 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits73, i64 0, i64 %idxprom75, !dbg !9004
  %66 = load i64, i64* %arrayidx76, align 8, !dbg !9004
  %67 = load i32, i32* %i, align 4, !dbg !9004
  %rem77 = srem i32 %67, 64, !dbg !9004
  %int_cast_to_i647 = zext i32 %rem77 to i64, !dbg !9004
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i647), !dbg !9004
  %shl78 = shl i32 1, %rem77, !dbg !9004, !klee.check.shift !2755
  %conv79 = sext i32 %shl78 to i64, !dbg !9004
  %and80 = and i64 %66, %conv79, !dbg !9004
  %tobool81 = icmp ne i64 %and80, 0, !dbg !9004
  br i1 %tobool81, label %if.then82, label %if.end91, !dbg !9006

if.then82:                                        ; preds = %if.end72
  %68 = load i32, i32* %i, align 4, !dbg !9007
  %rem83 = srem i32 %68, 64, !dbg !9007
  %int_cast_to_i648 = zext i32 %rem83 to i64, !dbg !9007
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i648), !dbg !9007
  %shl84 = shl i32 1, %rem83, !dbg !9007, !klee.check.shift !2755
  %conv85 = sext i32 %shl84 to i64, !dbg !9007
  %69 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %except.addr, align 8, !dbg !9007
  %fds_bits86 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %69, i32 0, i32 0, !dbg !9007
  %70 = load i32, i32* %i, align 4, !dbg !9007
  %div87 = sdiv i32 %70, 64, !dbg !9007
  %idxprom88 = sext i32 %div87 to i64, !dbg !9007
  %arrayidx89 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits86, i64 0, i64 %idxprom88, !dbg !9007
  %71 = load i64, i64* %arrayidx89, align 8, !dbg !9007
  %or90 = or i64 %71, %conv85, !dbg !9007
  store i64 %or90, i64* %arrayidx89, align 8, !dbg !9007
  br label %if.end91, !dbg !9007

if.end91:                                         ; preds = %if.then82, %if.end72
  %72 = load i32, i32* %count, align 4, !dbg !9008
  %inc = add nsw i32 %72, 1, !dbg !9008
  store i32 %inc, i32* %count, align 4, !dbg !9008
  br label %for.inc, !dbg !9009

if.else92:                                        ; preds = %if.else33
  br i1 %tobool44, label %if.then102, label %if.end112, !dbg !9010

if.then102:                                       ; preds = %if.else92
  %73 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !9012
  %fd = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %73, i32 0, i32 0, !dbg !9012
  %74 = load i32, i32* %fd, align 8, !dbg !9012
  %rem103 = srem i32 %74, 64, !dbg !9012
  %int_cast_to_i6410 = zext i32 %rem103 to i64, !dbg !9012
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i6410), !dbg !9012
  %shl104 = shl i32 1, %rem103, !dbg !9012, !klee.check.shift !2755
  %conv105 = sext i32 %shl104 to i64, !dbg !9012
  %fds_bits106 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %os_read, i32 0, i32 0, !dbg !9012
  %75 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !9012
  %fd107 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %75, i32 0, i32 0, !dbg !9012
  %76 = load i32, i32* %fd107, align 8, !dbg !9012
  %div108 = sdiv i32 %76, 64, !dbg !9012
  %idxprom109 = sext i32 %div108 to i64, !dbg !9012
  %arrayidx110 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits106, i64 0, i64 %idxprom109, !dbg !9012
  %77 = load i64, i64* %arrayidx110, align 8, !dbg !9012
  %or111 = or i64 %77, %conv105, !dbg !9012
  store i64 %or111, i64* %arrayidx110, align 8, !dbg !9012
  br label %if.end112, !dbg !9012

if.end112:                                        ; preds = %if.then102, %if.else92
  %fds_bits113 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %in_write, i32 0, i32 0, !dbg !9014
  %78 = load i32, i32* %i, align 4, !dbg !9014
  %div114 = sdiv i32 %78, 64, !dbg !9014
  %idxprom115 = sext i32 %div114 to i64, !dbg !9014
  %arrayidx116 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits113, i64 0, i64 %idxprom115, !dbg !9014
  %79 = load i64, i64* %arrayidx116, align 8, !dbg !9014
  %80 = load i32, i32* %i, align 4, !dbg !9014
  %rem117 = srem i32 %80, 64, !dbg !9014
  %int_cast_to_i6411 = zext i32 %rem117 to i64, !dbg !9014
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i6411), !dbg !9014
  %shl118 = shl i32 1, %rem117, !dbg !9014, !klee.check.shift !2755
  %conv119 = sext i32 %shl118 to i64, !dbg !9014
  %and120 = and i64 %79, %conv119, !dbg !9014
  %tobool121 = icmp ne i64 %and120, 0, !dbg !9014
  br i1 %tobool121, label %if.then122, label %if.end133, !dbg !9016

if.then122:                                       ; preds = %if.end112
  %81 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !9017
  %fd123 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %81, i32 0, i32 0, !dbg !9017
  %82 = load i32, i32* %fd123, align 8, !dbg !9017
  %rem124 = srem i32 %82, 64, !dbg !9017
  %int_cast_to_i6412 = zext i32 %rem124 to i64, !dbg !9017
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i6412), !dbg !9017
  %shl125 = shl i32 1, %rem124, !dbg !9017, !klee.check.shift !2755
  %conv126 = sext i32 %shl125 to i64, !dbg !9017
  %fds_bits127 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %os_write, i32 0, i32 0, !dbg !9017
  %83 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !9017
  %fd128 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %83, i32 0, i32 0, !dbg !9017
  %84 = load i32, i32* %fd128, align 8, !dbg !9017
  %div129 = sdiv i32 %84, 64, !dbg !9017
  %idxprom130 = sext i32 %div129 to i64, !dbg !9017
  %arrayidx131 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits127, i64 0, i64 %idxprom130, !dbg !9017
  %85 = load i64, i64* %arrayidx131, align 8, !dbg !9017
  %or132 = or i64 %85, %conv126, !dbg !9017
  store i64 %or132, i64* %arrayidx131, align 8, !dbg !9017
  br label %if.end133, !dbg !9017

if.end133:                                        ; preds = %if.then122, %if.end112
  %fds_bits134 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %in_except, i32 0, i32 0, !dbg !9018
  %86 = load i32, i32* %i, align 4, !dbg !9018
  %div135 = sdiv i32 %86, 64, !dbg !9018
  %idxprom136 = sext i32 %div135 to i64, !dbg !9018
  %arrayidx137 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits134, i64 0, i64 %idxprom136, !dbg !9018
  %87 = load i64, i64* %arrayidx137, align 8, !dbg !9018
  %88 = load i32, i32* %i, align 4, !dbg !9018
  %rem138 = srem i32 %88, 64, !dbg !9018
  %int_cast_to_i6413 = zext i32 %rem138 to i64, !dbg !9018
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i6413), !dbg !9018
  %shl139 = shl i32 1, %rem138, !dbg !9018, !klee.check.shift !2755
  %conv140 = sext i32 %shl139 to i64, !dbg !9018
  %and141 = and i64 %87, %conv140, !dbg !9018
  %tobool142 = icmp ne i64 %and141, 0, !dbg !9018
  br i1 %tobool142, label %if.then143, label %if.end154, !dbg !9020

if.then143:                                       ; preds = %if.end133
  %89 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !9021
  %fd144 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %89, i32 0, i32 0, !dbg !9021
  %90 = load i32, i32* %fd144, align 8, !dbg !9021
  %rem145 = srem i32 %90, 64, !dbg !9021
  %int_cast_to_i6414 = zext i32 %rem145 to i64, !dbg !9021
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i6414), !dbg !9021
  %shl146 = shl i32 1, %rem145, !dbg !9021, !klee.check.shift !2755
  %conv147 = sext i32 %shl146 to i64, !dbg !9021
  %fds_bits148 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %os_except, i32 0, i32 0, !dbg !9021
  %91 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !9021
  %fd149 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %91, i32 0, i32 0, !dbg !9021
  %92 = load i32, i32* %fd149, align 8, !dbg !9021
  %div150 = sdiv i32 %92, 64, !dbg !9021
  %idxprom151 = sext i32 %div150 to i64, !dbg !9021
  %arrayidx152 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits148, i64 0, i64 %idxprom151, !dbg !9021
  %93 = load i64, i64* %arrayidx152, align 8, !dbg !9021
  %or153 = or i64 %93, %conv147, !dbg !9021
  store i64 %or153, i64* %arrayidx152, align 8, !dbg !9021
  br label %if.end154, !dbg !9021

if.end154:                                        ; preds = %if.then143, %if.end133
  %94 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !9022
  %fd155 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %94, i32 0, i32 0, !dbg !9024
  %95 = load i32, i32* %fd155, align 8, !dbg !9024
  %96 = load i32, i32* %os_nfds, align 4, !dbg !9025
  %cmp156 = icmp sge i32 %95, %96, !dbg !9026
  br i1 %cmp156, label %if.then158, label %for.inc, !dbg !9027

if.then158:                                       ; preds = %if.end154
  %97 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f, align 8, !dbg !9028
  %fd159 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %97, i32 0, i32 0, !dbg !9029
  %98 = load i32, i32* %fd159, align 8, !dbg !9029
  %add = add nsw i32 %98, 1, !dbg !9030
  store i32 %add, i32* %os_nfds, align 4, !dbg !9031
  br label %for.inc, !dbg !9032

for.inc:                                          ; preds = %lor.lhs.false19, %if.end91, %if.then158, %if.end154
  %99 = load i32, i32* %i, align 4, !dbg !9033
  %inc164 = add nsw i32 %99, 1, !dbg !9033
  store i32 %inc164, i32* %i, align 4, !dbg !9033
  br label %for.cond, !dbg !9034, !llvm.loop !9035

for.end:                                          ; preds = %for.cond
  %100 = load i32, i32* %os_nfds, align 4, !dbg !9037
  %cmp165 = icmp sgt i32 %100, 0, !dbg !9039
  br i1 %cmp165, label %if.then167, label %if.end262, !dbg !9040

if.then167:                                       ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.timespec.15* %tv, metadata !9041, metadata !DIExpression()), !dbg !9043
  %101 = bitcast %struct.timespec.15* %tv to i8*, !dbg !9043
  %102 = call i8* @memset(i8* %101, i32 0, i64 16), !dbg !9043
  call void @llvm.dbg.declare(metadata i32* %r, metadata !9044, metadata !DIExpression()), !dbg !9045
  %103 = load i32, i32* %os_nfds, align 4, !dbg !9046
  %call168 = call i64 (i64, ...) @syscall(i64 23, i32 %103, %struct.cgc_fd_set* %os_read, %struct.cgc_fd_set* %os_write, %struct.cgc_fd_set* %os_except, %struct.timespec.15* %tv) #7, !dbg !9047
  %conv169 = trunc i64 %call168 to i32, !dbg !9047
  store i32 %conv169, i32* %r, align 4, !dbg !9045
  %104 = load i32, i32* %r, align 4, !dbg !9048
  %cmp170 = icmp eq i32 %104, -1, !dbg !9050
  br i1 %cmp170, label %if.then172, label %if.else176, !dbg !9051

if.then172:                                       ; preds = %if.then167
  %105 = load i32, i32* %count, align 4, !dbg !9052
  %tobool173 = icmp ne i32 %105, 0, !dbg !9052
  br i1 %tobool173, label %if.end262, label %if.then174, !dbg !9055

if.then174:                                       ; preds = %if.then172
  store i32 -1, i32* %retval, align 4, !dbg !9056
  br label %return, !dbg !9056

if.else176:                                       ; preds = %if.then167
  %106 = load i32, i32* %r, align 4, !dbg !9057
  %107 = load i32, i32* %count, align 4, !dbg !9059
  %add177 = add nsw i32 %107, %106, !dbg !9059
  store i32 %add177, i32* %count, align 4, !dbg !9059
  store i32 0, i32* %i, align 4, !dbg !9060
  br label %for.cond178, !dbg !9062

for.cond178:                                      ; preds = %for.inc258, %if.else176
  %108 = load i32, i32* %i, align 4, !dbg !9063
  %109 = load i32, i32* %nfds.addr, align 4, !dbg !9065
  %cmp179 = icmp slt i32 %108, %109, !dbg !9066
  br i1 %cmp179, label %for.body181, label %if.end262, !dbg !9067

for.body181:                                      ; preds = %for.cond178
  call void @llvm.dbg.declare(metadata %struct.exe_file_t.18** %f182, metadata !9068, metadata !DIExpression()), !dbg !9070
  %110 = load i32, i32* %i, align 4, !dbg !9071
  %call183 = call %struct.exe_file_t.18* @__get_file(i32 %110), !dbg !9072
  store %struct.exe_file_t.18* %call183, %struct.exe_file_t.18** %f182, align 8, !dbg !9070
  %111 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f182, align 8, !dbg !9073
  %tobool184 = icmp ne %struct.exe_file_t.18* %111, null, !dbg !9073
  br i1 %tobool184, label %land.lhs.true, label %for.inc258, !dbg !9075

land.lhs.true:                                    ; preds = %for.body181
  %112 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f182, align 8, !dbg !9076
  %dfile185 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %112, i32 0, i32 3, !dbg !9077
  %113 = load %struct.exe_disk_file_t.17*, %struct.exe_disk_file_t.17** %dfile185, align 8, !dbg !9077
  %tobool186 = icmp ne %struct.exe_disk_file_t.17* %113, null, !dbg !9076
  br i1 %tobool186, label %for.inc258, label %if.then187, !dbg !9078

if.then187:                                       ; preds = %land.lhs.true
  %114 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %read.addr, align 8, !dbg !9079
  %tobool188 = icmp ne %struct.cgc_fd_set* %114, null, !dbg !9079
  br i1 %tobool188, label %land.lhs.true189, label %if.end210, !dbg !9082

land.lhs.true189:                                 ; preds = %if.then187
  %fds_bits190 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %os_read, i32 0, i32 0, !dbg !9083
  %115 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f182, align 8, !dbg !9083
  %fd191 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %115, i32 0, i32 0, !dbg !9083
  %116 = load i32, i32* %fd191, align 8, !dbg !9083
  %div192 = sdiv i32 %116, 64, !dbg !9083
  %idxprom193 = sext i32 %div192 to i64, !dbg !9083
  %arrayidx194 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits190, i64 0, i64 %idxprom193, !dbg !9083
  %117 = load i64, i64* %arrayidx194, align 8, !dbg !9083
  %118 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f182, align 8, !dbg !9083
  %fd195 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %118, i32 0, i32 0, !dbg !9083
  %119 = load i32, i32* %fd195, align 8, !dbg !9083
  %rem196 = srem i32 %119, 64, !dbg !9083
  %int_cast_to_i6415 = zext i32 %rem196 to i64, !dbg !9083
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i6415), !dbg !9083
  %shl197 = shl i32 1, %rem196, !dbg !9083, !klee.check.shift !2755
  %conv198 = sext i32 %shl197 to i64, !dbg !9083
  %and199 = and i64 %117, %conv198, !dbg !9083
  %tobool200 = icmp ne i64 %and199, 0, !dbg !9083
  br i1 %tobool200, label %if.then201, label %if.end210, !dbg !9084

if.then201:                                       ; preds = %land.lhs.true189
  %120 = load i32, i32* %i, align 4, !dbg !9085
  %rem202 = srem i32 %120, 64, !dbg !9085
  %int_cast_to_i6416 = zext i32 %rem202 to i64, !dbg !9085
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i6416), !dbg !9085
  %shl203 = shl i32 1, %rem202, !dbg !9085, !klee.check.shift !2755
  %conv204 = sext i32 %shl203 to i64, !dbg !9085
  %121 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %read.addr, align 8, !dbg !9085
  %fds_bits205 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %121, i32 0, i32 0, !dbg !9085
  %122 = load i32, i32* %i, align 4, !dbg !9085
  %div206 = sdiv i32 %122, 64, !dbg !9085
  %idxprom207 = sext i32 %div206 to i64, !dbg !9085
  %arrayidx208 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits205, i64 0, i64 %idxprom207, !dbg !9085
  %123 = load i64, i64* %arrayidx208, align 8, !dbg !9085
  %or209 = or i64 %123, %conv204, !dbg !9085
  store i64 %or209, i64* %arrayidx208, align 8, !dbg !9085
  br label %if.end210, !dbg !9085

if.end210:                                        ; preds = %if.then201, %land.lhs.true189, %if.then187
  %124 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %write.addr, align 8, !dbg !9086
  %tobool211 = icmp ne %struct.cgc_fd_set* %124, null, !dbg !9086
  br i1 %tobool211, label %land.lhs.true212, label %if.end233, !dbg !9088

land.lhs.true212:                                 ; preds = %if.end210
  %fds_bits213 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %os_write, i32 0, i32 0, !dbg !9089
  %125 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f182, align 8, !dbg !9089
  %fd214 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %125, i32 0, i32 0, !dbg !9089
  %126 = load i32, i32* %fd214, align 8, !dbg !9089
  %div215 = sdiv i32 %126, 64, !dbg !9089
  %idxprom216 = sext i32 %div215 to i64, !dbg !9089
  %arrayidx217 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits213, i64 0, i64 %idxprom216, !dbg !9089
  %127 = load i64, i64* %arrayidx217, align 8, !dbg !9089
  %128 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f182, align 8, !dbg !9089
  %fd218 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %128, i32 0, i32 0, !dbg !9089
  %129 = load i32, i32* %fd218, align 8, !dbg !9089
  %rem219 = srem i32 %129, 64, !dbg !9089
  %int_cast_to_i6417 = zext i32 %rem219 to i64, !dbg !9089
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i6417), !dbg !9089
  %shl220 = shl i32 1, %rem219, !dbg !9089, !klee.check.shift !2755
  %conv221 = sext i32 %shl220 to i64, !dbg !9089
  %and222 = and i64 %127, %conv221, !dbg !9089
  %tobool223 = icmp ne i64 %and222, 0, !dbg !9089
  br i1 %tobool223, label %if.then224, label %if.end233, !dbg !9090

if.then224:                                       ; preds = %land.lhs.true212
  %130 = load i32, i32* %i, align 4, !dbg !9091
  %rem225 = srem i32 %130, 64, !dbg !9091
  %int_cast_to_i6418 = zext i32 %rem225 to i64, !dbg !9091
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i6418), !dbg !9091
  %shl226 = shl i32 1, %rem225, !dbg !9091, !klee.check.shift !2755
  %conv227 = sext i32 %shl226 to i64, !dbg !9091
  %131 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %write.addr, align 8, !dbg !9091
  %fds_bits228 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %131, i32 0, i32 0, !dbg !9091
  %132 = load i32, i32* %i, align 4, !dbg !9091
  %div229 = sdiv i32 %132, 64, !dbg !9091
  %idxprom230 = sext i32 %div229 to i64, !dbg !9091
  %arrayidx231 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits228, i64 0, i64 %idxprom230, !dbg !9091
  %133 = load i64, i64* %arrayidx231, align 8, !dbg !9091
  %or232 = or i64 %133, %conv227, !dbg !9091
  store i64 %or232, i64* %arrayidx231, align 8, !dbg !9091
  br label %if.end233, !dbg !9091

if.end233:                                        ; preds = %if.then224, %land.lhs.true212, %if.end210
  %134 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %except.addr, align 8, !dbg !9092
  %tobool234 = icmp ne %struct.cgc_fd_set* %134, null, !dbg !9092
  br i1 %tobool234, label %land.lhs.true235, label %for.inc258, !dbg !9094

land.lhs.true235:                                 ; preds = %if.end233
  %fds_bits236 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %os_except, i32 0, i32 0, !dbg !9095
  %135 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f182, align 8, !dbg !9095
  %fd237 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %135, i32 0, i32 0, !dbg !9095
  %136 = load i32, i32* %fd237, align 8, !dbg !9095
  %div238 = sdiv i32 %136, 64, !dbg !9095
  %idxprom239 = sext i32 %div238 to i64, !dbg !9095
  %arrayidx240 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits236, i64 0, i64 %idxprom239, !dbg !9095
  %137 = load i64, i64* %arrayidx240, align 8, !dbg !9095
  %138 = load %struct.exe_file_t.18*, %struct.exe_file_t.18** %f182, align 8, !dbg !9095
  %fd241 = getelementptr inbounds %struct.exe_file_t.18, %struct.exe_file_t.18* %138, i32 0, i32 0, !dbg !9095
  %139 = load i32, i32* %fd241, align 8, !dbg !9095
  %rem242 = srem i32 %139, 64, !dbg !9095
  %int_cast_to_i6419 = zext i32 %rem242 to i64, !dbg !9095
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i6419), !dbg !9095
  %shl243 = shl i32 1, %rem242, !dbg !9095, !klee.check.shift !2755
  %conv244 = sext i32 %shl243 to i64, !dbg !9095
  %and245 = and i64 %137, %conv244, !dbg !9095
  %tobool246 = icmp ne i64 %and245, 0, !dbg !9095
  br i1 %tobool246, label %if.then247, label %for.inc258, !dbg !9096

if.then247:                                       ; preds = %land.lhs.true235
  %140 = load i32, i32* %i, align 4, !dbg !9097
  %rem248 = srem i32 %140, 64, !dbg !9097
  %int_cast_to_i6420 = zext i32 %rem248 to i64, !dbg !9097
  call void @klee_overshift_check(i64 32, i64 %int_cast_to_i6420), !dbg !9097
  %shl249 = shl i32 1, %rem248, !dbg !9097, !klee.check.shift !2755
  %conv250 = sext i32 %shl249 to i64, !dbg !9097
  %141 = load %struct.cgc_fd_set*, %struct.cgc_fd_set** %except.addr, align 8, !dbg !9097
  %fds_bits251 = getelementptr inbounds %struct.cgc_fd_set, %struct.cgc_fd_set* %141, i32 0, i32 0, !dbg !9097
  %142 = load i32, i32* %i, align 4, !dbg !9097
  %div252 = sdiv i32 %142, 64, !dbg !9097
  %idxprom253 = sext i32 %div252 to i64, !dbg !9097
  %arrayidx254 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits251, i64 0, i64 %idxprom253, !dbg !9097
  %143 = load i64, i64* %arrayidx254, align 8, !dbg !9097
  %or255 = or i64 %143, %conv250, !dbg !9097
  store i64 %or255, i64* %arrayidx254, align 8, !dbg !9097
  br label %for.inc258, !dbg !9097

for.inc258:                                       ; preds = %for.body181, %land.lhs.true, %if.then247, %land.lhs.true235, %if.end233
  %144 = load i32, i32* %i, align 4, !dbg !9098
  %inc259 = add nsw i32 %144, 1, !dbg !9098
  store i32 %inc259, i32* %i, align 4, !dbg !9098
  br label %for.cond178, !dbg !9099, !llvm.loop !9100

if.end262:                                        ; preds = %if.then172, %for.cond178, %for.end
  %145 = load i32, i32* %count, align 4, !dbg !9102
  store i32 %145, i32* %retval, align 4, !dbg !9103
  br label %return, !dbg !9103

return:                                           ; preds = %if.end262, %if.then174, %if.then31
  %146 = load i32, i32* %retval, align 4, !dbg !9104
  ret i32 %146, !dbg !9104
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @getcwd(i8* %buf, i64 %size) #0 !dbg !287 {
entry:
  %retval = alloca i8*, align 8
  %buf.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %r = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !9105, metadata !DIExpression()), !dbg !9106
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !9107, metadata !DIExpression()), !dbg !9108
  call void @llvm.dbg.declare(metadata i32* %r, metadata !9109, metadata !DIExpression()), !dbg !9110
  %0 = load i32, i32* @getcwd.n_calls, align 4, !dbg !9111
  %inc = add nsw i32 %0, 1, !dbg !9111
  store i32 %inc, i32* @getcwd.n_calls, align 4, !dbg !9111
  %1 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !9112
  %tobool = icmp ne i32 %1, 0, !dbg !9114
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !9115

land.lhs.true:                                    ; preds = %entry
  %2 = load i32*, i32** getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 10), align 8, !dbg !9116
  %3 = load i32, i32* %2, align 4, !dbg !9117
  %4 = load i32, i32* @getcwd.n_calls, align 4, !dbg !9118
  %cmp = icmp eq i32 %3, %4, !dbg !9119
  br i1 %cmp, label %if.then, label %if.end, !dbg !9120

if.then:                                          ; preds = %land.lhs.true
  %5 = load i32, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !9121
  %dec = add i32 %5, -1, !dbg !9121
  store i32 %dec, i32* getelementptr inbounds (%struct.exe_file_system_t.19, %struct.exe_file_system_t.19* @__exe_fs, i32 0, i32 5), align 8, !dbg !9121
  %call = call i32* @__errno_location() #23, !dbg !9123
  store i32 34, i32* %call, align 4, !dbg !9124
  store i8* null, i8** %retval, align 8, !dbg !9125
  br label %return, !dbg !9125

if.end:                                           ; preds = %land.lhs.true, %entry
  %6 = load i8*, i8** %buf.addr, align 8, !dbg !9126
  %tobool1 = icmp ne i8* %6, null, !dbg !9126
  br i1 %tobool1, label %if.end7, label %if.then2, !dbg !9128

if.then2:                                         ; preds = %if.end
  %7 = load i64, i64* %size.addr, align 8, !dbg !9129
  %tobool3 = icmp ne i64 %7, 0, !dbg !9129
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !9132

if.then4:                                         ; preds = %if.then2
  store i64 1024, i64* %size.addr, align 8, !dbg !9133
  br label %if.end5, !dbg !9134

if.end5:                                          ; preds = %if.then4, %if.then2
  %8 = load i64, i64* %size.addr, align 8, !dbg !9135
  %call6 = call noalias i8* @malloc(i64 %8) #7, !dbg !9136
  store i8* %call6, i8** %buf.addr, align 8, !dbg !9137
  br label %if.end7, !dbg !9138

if.end7:                                          ; preds = %if.end5, %if.end
  %9 = load i8*, i8** %buf.addr, align 8, !dbg !9139
  %call8 = call i8* @__concretize_ptr(i8* %9), !dbg !9140
  store i8* %call8, i8** %buf.addr, align 8, !dbg !9141
  %10 = load i64, i64* %size.addr, align 8, !dbg !9142
  %call9 = call i64 @__concretize_size(i64 %10), !dbg !9143
  store i64 %call9, i64* %size.addr, align 8, !dbg !9144
  %11 = load i8*, i8** %buf.addr, align 8, !dbg !9145
  %12 = load i64, i64* %size.addr, align 8, !dbg !9146
  call void @klee_check_memory_access(i8* %11, i64 %12), !dbg !9147
  %13 = load i8*, i8** %buf.addr, align 8, !dbg !9148
  %14 = load i64, i64* %size.addr, align 8, !dbg !9149
  %call10 = call i64 (i64, ...) @syscall(i64 79, i8* %13, i64 %14) #7, !dbg !9150
  %conv = trunc i64 %call10 to i32, !dbg !9150
  store i32 %conv, i32* %r, align 4, !dbg !9151
  %15 = load i32, i32* %r, align 4, !dbg !9152
  %cmp11 = icmp eq i32 %15, -1, !dbg !9154
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !9155

if.then13:                                        ; preds = %if.end7
  store i8* null, i8** %retval, align 8, !dbg !9156
  br label %return, !dbg !9156

if.end14:                                         ; preds = %if.end7
  %16 = load i8*, i8** %buf.addr, align 8, !dbg !9157
  store i8* %16, i8** %retval, align 8, !dbg !9158
  br label %return, !dbg !9158

return:                                           ; preds = %if.end14, %if.then13, %if.then
  %17 = load i8*, i8** %retval, align 8, !dbg !9159
  ret i8* %17, !dbg !9159
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @chroot(i8* nonnull %path) #0 !dbg !9160 {
entry:
  %retval = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !9161, metadata !DIExpression()), !dbg !9162
  %0 = load i8*, i8** %path.addr, align 8, !dbg !9163
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0, !dbg !9163
  %1 = load i8, i8* %arrayidx, align 1, !dbg !9163
  %conv = sext i8 %1 to i32, !dbg !9163
  %cmp = icmp eq i32 %conv, 0, !dbg !9165
  br i1 %cmp, label %if.then, label %if.end, !dbg !9166

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #23, !dbg !9167
  store i32 2, i32* %call, align 4, !dbg !9169
  store i32 -1, i32* %retval, align 4, !dbg !9170
  br label %return, !dbg !9170

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %path.addr, align 8, !dbg !9171
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i64 0, !dbg !9171
  %3 = load i8, i8* %arrayidx2, align 1, !dbg !9171
  %conv3 = sext i8 %3 to i32, !dbg !9171
  %cmp4 = icmp eq i32 %conv3, 47, !dbg !9173
  br i1 %cmp4, label %land.lhs.true, label %if.end11, !dbg !9174

land.lhs.true:                                    ; preds = %if.end
  %4 = load i8*, i8** %path.addr, align 8, !dbg !9175
  %arrayidx6 = getelementptr inbounds i8, i8* %4, i64 1, !dbg !9175
  %5 = load i8, i8* %arrayidx6, align 1, !dbg !9175
  %conv7 = sext i8 %5 to i32, !dbg !9175
  %cmp8 = icmp eq i32 %conv7, 0, !dbg !9176
  br i1 %cmp8, label %if.then10, label %if.end11, !dbg !9177

if.then10:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !9178
  br label %return, !dbg !9178

if.end11:                                         ; preds = %land.lhs.true, %if.end
  call void @klee_warning(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.24.135, i64 0, i64 0)), !dbg !9180
  %call12 = call i32* @__errno_location() #23, !dbg !9181
  store i32 2, i32* %call12, align 4, !dbg !9182
  store i32 -1, i32* %retval, align 4, !dbg !9183
  br label %return, !dbg !9183

return:                                           ; preds = %if.end11, %if.then10, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !9184
  ret i32 %6, !dbg !9184
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @__syscall_rt_sigaction(i32 %signum, %struct.sigaction* %act, %struct.sigaction* %oldact, i64 %_something) #0 !dbg !9185 {
entry:
  %signum.addr = alloca i32, align 4
  %act.addr = alloca %struct.sigaction*, align 8
  %oldact.addr = alloca %struct.sigaction*, align 8
  %_something.addr = alloca i64, align 8
  store i32 %signum, i32* %signum.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %signum.addr, metadata !9292, metadata !DIExpression()), !dbg !9293
  store %struct.sigaction* %act, %struct.sigaction** %act.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sigaction** %act.addr, metadata !9294, metadata !DIExpression()), !dbg !9295
  store %struct.sigaction* %oldact, %struct.sigaction** %oldact.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sigaction** %oldact.addr, metadata !9296, metadata !DIExpression()), !dbg !9297
  store i64 %_something, i64* %_something.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %_something.addr, metadata !9298, metadata !DIExpression()), !dbg !9299
  call void @klee_warning_once(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.136, i64 0, i64 0)), !dbg !9300
  ret i32 0, !dbg !9301
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @sigaction(i32 %signum, %struct.sigaction* %act, %struct.sigaction* %oldact) #0 !dbg !9302 {
entry:
  %signum.addr = alloca i32, align 4
  %act.addr = alloca %struct.sigaction*, align 8
  %oldact.addr = alloca %struct.sigaction*, align 8
  store i32 %signum, i32* %signum.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %signum.addr, metadata !9305, metadata !DIExpression()), !dbg !9306
  store %struct.sigaction* %act, %struct.sigaction** %act.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sigaction** %act.addr, metadata !9307, metadata !DIExpression()), !dbg !9308
  store %struct.sigaction* %oldact, %struct.sigaction** %oldact.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sigaction** %oldact.addr, metadata !9309, metadata !DIExpression()), !dbg !9310
  call void @klee_warning_once(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.136, i64 0, i64 0)), !dbg !9311
  ret i32 0, !dbg !9312
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @sigprocmask(i32 %how, %struct.cgc_fd_set* %set, %struct.cgc_fd_set* %oldset) #0 !dbg !9313 {
entry:
  %how.addr = alloca i32, align 4
  %set.addr = alloca %struct.cgc_fd_set*, align 8
  %oldset.addr = alloca %struct.cgc_fd_set*, align 8
  store i32 %how, i32* %how.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %how.addr, metadata !9321, metadata !DIExpression()), !dbg !9322
  store %struct.cgc_fd_set* %set, %struct.cgc_fd_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgc_fd_set** %set.addr, metadata !9323, metadata !DIExpression()), !dbg !9324
  store %struct.cgc_fd_set* %oldset, %struct.cgc_fd_set** %oldset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgc_fd_set** %oldset.addr, metadata !9325, metadata !DIExpression()), !dbg !9326
  call void @klee_warning_once(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.136, i64 0, i64 0)), !dbg !9327
  ret i32 0, !dbg !9328
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @fdatasync(i32 %fd) #0 !dbg !9329 {
entry:
  %fd.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !9330, metadata !DIExpression()), !dbg !9331
  ret i32 0, !dbg !9332
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local void @sync() #0 !dbg !9333 {
entry:
  ret void, !dbg !9334
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @__socketcall(i32 %type, i32* %args) #0 !dbg !9335 {
entry:
  %type.addr = alloca i32, align 4
  %args.addr = alloca i32*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !9338, metadata !DIExpression()), !dbg !9339
  store i32* %args, i32** %args.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %args.addr, metadata !9340, metadata !DIExpression()), !dbg !9341
  call void @klee_warning(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1.137, i64 0, i64 0)), !dbg !9342
  %call = call i32* @__errno_location() #23, !dbg !9343
  store i32 97, i32* %call, align 4, !dbg !9344
  ret i32 -1, !dbg !9345
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @_IO_getc(%struct._IO_FILE* %f) #0 !dbg !9346 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !9397, metadata !DIExpression()), !dbg !9398
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !9399
  %call = call i32 @__fgetc_unlocked(%struct._IO_FILE* %0), !dbg !9400
  ret i32 %call, !dbg !9401
}

declare dso_local i32 @__fgetc_unlocked(%struct._IO_FILE*) #4

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @_IO_putc(i32 %c, %struct._IO_FILE* %f) #0 !dbg !9402 {
entry:
  %c.addr = alloca i32, align 4
  %f.addr = alloca %struct._IO_FILE*, align 8
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9405, metadata !DIExpression()), !dbg !9406
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !9407, metadata !DIExpression()), !dbg !9408
  %0 = load i32, i32* %c.addr, align 4, !dbg !9409
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !9410
  %call = call i32 @__fputc_unlocked(i32 %0, %struct._IO_FILE* %1), !dbg !9411
  ret i32 %call, !dbg !9412
}

declare dso_local i32 @__fputc_unlocked(i32, %struct._IO_FILE*) #4

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @mkdir(i8* nonnull %pathname, i32 %mode) #0 !dbg !9413 {
entry:
  %pathname.addr = alloca i8*, align 8
  %mode.addr = alloca i32, align 4
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !9414, metadata !DIExpression()), !dbg !9415
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9416, metadata !DIExpression()), !dbg !9417
  call void @klee_warning(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2.138, i64 0, i64 0)), !dbg !9418
  %call = call i32* @__errno_location() #23, !dbg !9419
  store i32 5, i32* %call, align 4, !dbg !9420
  ret i32 -1, !dbg !9421
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @mkfifo(i8* nonnull %pathname, i32 %mode) #0 !dbg !9422 {
entry:
  %pathname.addr = alloca i8*, align 8
  %mode.addr = alloca i32, align 4
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !9423, metadata !DIExpression()), !dbg !9424
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9425, metadata !DIExpression()), !dbg !9426
  call void @klee_warning(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2.138, i64 0, i64 0)), !dbg !9427
  %call = call i32* @__errno_location() #23, !dbg !9428
  store i32 5, i32* %call, align 4, !dbg !9429
  ret i32 -1, !dbg !9430
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @mknod(i8* nonnull %pathname, i32 %mode, i64 %dev) #0 !dbg !9431 {
entry:
  %pathname.addr = alloca i8*, align 8
  %mode.addr = alloca i32, align 4
  %dev.addr = alloca i64, align 8
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !9434, metadata !DIExpression()), !dbg !9435
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9436, metadata !DIExpression()), !dbg !9437
  store i64 %dev, i64* %dev.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %dev.addr, metadata !9438, metadata !DIExpression()), !dbg !9439
  call void @klee_warning(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2.138, i64 0, i64 0)), !dbg !9440
  %call = call i32* @__errno_location() #23, !dbg !9441
  store i32 5, i32* %call, align 4, !dbg !9442
  ret i32 -1, !dbg !9443
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @pipe(i32* %filedes) #0 !dbg !9444 {
entry:
  %filedes.addr = alloca i32*, align 8
  store i32* %filedes, i32** %filedes.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %filedes.addr, metadata !9447, metadata !DIExpression()), !dbg !9448
  call void @klee_warning(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.139, i64 0, i64 0)), !dbg !9449
  %call = call i32* @__errno_location() #23, !dbg !9450
  store i32 23, i32* %call, align 4, !dbg !9451
  ret i32 -1, !dbg !9452
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @link(i8* nonnull %oldpath, i8* nonnull %newpath) #0 !dbg !9453 {
entry:
  %oldpath.addr = alloca i8*, align 8
  %newpath.addr = alloca i8*, align 8
  store i8* %oldpath, i8** %oldpath.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %oldpath.addr, metadata !9454, metadata !DIExpression()), !dbg !9455
  store i8* %newpath, i8** %newpath.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %newpath.addr, metadata !9456, metadata !DIExpression()), !dbg !9457
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9458
  %call = call i32* @__errno_location() #23, !dbg !9459
  store i32 1, i32* %call, align 4, !dbg !9460
  ret i32 -1, !dbg !9461
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @symlink(i8* nonnull %oldpath, i8* nonnull %newpath) #0 !dbg !9462 {
entry:
  %oldpath.addr = alloca i8*, align 8
  %newpath.addr = alloca i8*, align 8
  store i8* %oldpath, i8** %oldpath.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %oldpath.addr, metadata !9463, metadata !DIExpression()), !dbg !9464
  store i8* %newpath, i8** %newpath.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %newpath.addr, metadata !9465, metadata !DIExpression()), !dbg !9466
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9467
  %call = call i32* @__errno_location() #23, !dbg !9468
  store i32 1, i32* %call, align 4, !dbg !9469
  ret i32 -1, !dbg !9470
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @rename(i8* %oldpath, i8* %newpath) #0 !dbg !9471 {
entry:
  %oldpath.addr = alloca i8*, align 8
  %newpath.addr = alloca i8*, align 8
  store i8* %oldpath, i8** %oldpath.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %oldpath.addr, metadata !9472, metadata !DIExpression()), !dbg !9473
  store i8* %newpath, i8** %newpath.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %newpath.addr, metadata !9474, metadata !DIExpression()), !dbg !9475
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9476
  %call = call i32* @__errno_location() #23, !dbg !9477
  store i32 1, i32* %call, align 4, !dbg !9478
  ret i32 -1, !dbg !9479
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @nanosleep(%struct.timespec.15* %req, %struct.timespec.15* %rem) #0 !dbg !9480 {
entry:
  %req.addr = alloca %struct.timespec.15*, align 8
  %rem.addr = alloca %struct.timespec.15*, align 8
  store %struct.timespec.15* %req, %struct.timespec.15** %req.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec.15** %req.addr, metadata !9490, metadata !DIExpression()), !dbg !9491
  store %struct.timespec.15* %rem, %struct.timespec.15** %rem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec.15** %rem.addr, metadata !9492, metadata !DIExpression()), !dbg !9493
  ret i32 0, !dbg !9494
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @clock_gettime(i32 %clk_id, %struct.timespec.15* %res) #0 !dbg !9495 {
entry:
  %clk_id.addr = alloca i32, align 4
  %res.addr = alloca %struct.timespec.15*, align 8
  %tv = alloca %struct.timespec.15, align 8
  store i32 %clk_id, i32* %clk_id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %clk_id.addr, metadata !9501, metadata !DIExpression()), !dbg !9502
  store %struct.timespec.15* %res, %struct.timespec.15** %res.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec.15** %res.addr, metadata !9503, metadata !DIExpression()), !dbg !9504
  call void @llvm.dbg.declare(metadata %struct.timespec.15* %tv, metadata !9505, metadata !DIExpression()), !dbg !9510
  %call = call i32 @gettimeofday(%struct.timespec.15* %tv, %struct.cgc_timeval* null) #7, !dbg !9511
  %tv_sec = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %tv, i32 0, i32 0, !dbg !9512
  %0 = load i64, i64* %tv_sec, align 8, !dbg !9512
  %1 = load %struct.timespec.15*, %struct.timespec.15** %res.addr, align 8, !dbg !9513
  %tv_sec1 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %1, i32 0, i32 0, !dbg !9514
  store i64 %0, i64* %tv_sec1, align 8, !dbg !9515
  %tv_usec = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %tv, i32 0, i32 1, !dbg !9516
  %2 = load i64, i64* %tv_usec, align 8, !dbg !9516
  %mul = mul nsw i64 %2, 1000, !dbg !9517
  %3 = load %struct.timespec.15*, %struct.timespec.15** %res.addr, align 8, !dbg !9518
  %tv_nsec = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %3, i32 0, i32 1, !dbg !9519
  store i64 %mul, i64* %tv_nsec, align 8, !dbg !9520
  ret i32 0, !dbg !9521
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @clock_settime(i32 %clk_id, %struct.timespec.15* %res) #0 !dbg !9522 {
entry:
  %clk_id.addr = alloca i32, align 4
  %res.addr = alloca %struct.timespec.15*, align 8
  store i32 %clk_id, i32* %clk_id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %clk_id.addr, metadata !9525, metadata !DIExpression()), !dbg !9526
  store %struct.timespec.15* %res, %struct.timespec.15** %res.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec.15** %res.addr, metadata !9527, metadata !DIExpression()), !dbg !9528
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9529
  %call = call i32* @__errno_location() #23, !dbg !9530
  store i32 1, i32* %call, align 4, !dbg !9531
  ret i32 -1, !dbg !9532
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @time(i64* %t) #0 !dbg !9533 {
entry:
  %t.addr = alloca i64*, align 8
  %tv = alloca %struct.timespec.15, align 8
  store i64* %t, i64** %t.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %t.addr, metadata !9539, metadata !DIExpression()), !dbg !9540
  call void @llvm.dbg.declare(metadata %struct.timespec.15* %tv, metadata !9541, metadata !DIExpression()), !dbg !9542
  %call = call i32 @gettimeofday(%struct.timespec.15* %tv, %struct.cgc_timeval* null) #7, !dbg !9543
  %0 = load i64*, i64** %t.addr, align 8, !dbg !9544
  %tobool = icmp ne i64* %0, null, !dbg !9544
  br i1 %tobool, label %if.then, label %if.end, !dbg !9546

if.then:                                          ; preds = %entry
  %tv_sec = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %tv, i32 0, i32 0, !dbg !9547
  %1 = load i64, i64* %tv_sec, align 8, !dbg !9547
  %2 = load i64*, i64** %t.addr, align 8, !dbg !9548
  store i64 %1, i64* %2, align 8, !dbg !9549
  br label %if.end, !dbg !9550

if.end:                                           ; preds = %if.then, %entry
  %tv_sec1 = getelementptr inbounds %struct.timespec.15, %struct.timespec.15* %tv, i32 0, i32 0, !dbg !9551
  %3 = load i64, i64* %tv_sec1, align 8, !dbg !9551
  ret i64 %3, !dbg !9552
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @times(%struct.tms* %buf) #0 !dbg !9553 {
entry:
  %buf.addr = alloca %struct.tms*, align 8
  store %struct.tms* %buf, %struct.tms** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tms** %buf.addr, metadata !9566, metadata !DIExpression()), !dbg !9567
  %0 = load %struct.tms*, %struct.tms** %buf.addr, align 8, !dbg !9568
  %tobool = icmp ne %struct.tms* %0, null, !dbg !9568
  br i1 %tobool, label %if.else, label %if.then, !dbg !9570

if.then:                                          ; preds = %entry
  call void @klee_warning(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.141, i64 0, i64 0)), !dbg !9571
  br label %if.end, !dbg !9571

if.else:                                          ; preds = %entry
  call void @klee_warning(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6.142, i64 0, i64 0)), !dbg !9572
  %1 = load %struct.tms*, %struct.tms** %buf.addr, align 8, !dbg !9574
  %tms_utime = getelementptr inbounds %struct.tms, %struct.tms* %1, i32 0, i32 0, !dbg !9575
  store i64 0, i64* %tms_utime, align 8, !dbg !9576
  %2 = load %struct.tms*, %struct.tms** %buf.addr, align 8, !dbg !9577
  %tms_stime = getelementptr inbounds %struct.tms, %struct.tms* %2, i32 0, i32 1, !dbg !9578
  store i64 0, i64* %tms_stime, align 8, !dbg !9579
  %3 = load %struct.tms*, %struct.tms** %buf.addr, align 8, !dbg !9580
  %tms_cutime = getelementptr inbounds %struct.tms, %struct.tms* %3, i32 0, i32 2, !dbg !9581
  store i64 0, i64* %tms_cutime, align 8, !dbg !9582
  %4 = load %struct.tms*, %struct.tms** %buf.addr, align 8, !dbg !9583
  %tms_cstime = getelementptr inbounds %struct.tms, %struct.tms* %4, i32 0, i32 3, !dbg !9584
  store i64 0, i64* %tms_cstime, align 8, !dbg !9585
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i64 0, !dbg !9586
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local %struct.utmpx* @getutxent() #0 !dbg !9587 {
entry:
  %call = call %struct.utmp* @getutent() #7, !dbg !9590
  %0 = bitcast %struct.utmp* %call to %struct.utmpx*, !dbg !9591
  ret %struct.utmpx* %0, !dbg !9592
}

; Function Attrs: nounwind
declare dso_local %struct.utmp* @getutent() #3

; Function Attrs: noinline nounwind uwtable
define weak dso_local void @setutxent() #0 !dbg !9593 {
entry:
  call void @setutent() #7, !dbg !9594
  ret void, !dbg !9595
}

; Function Attrs: nounwind
declare dso_local void @setutent() #3

; Function Attrs: noinline nounwind uwtable
define weak dso_local void @endutxent() #0 !dbg !9596 {
entry:
  call void @endutent() #7, !dbg !9597
  ret void, !dbg !9598
}

; Function Attrs: nounwind
declare dso_local void @endutent() #3

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @utmpxname(i8* %file) #0 !dbg !9599 {
entry:
  %file.addr = alloca i8*, align 8
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !9600, metadata !DIExpression()), !dbg !9601
  %0 = load i8*, i8** %file.addr, align 8, !dbg !9602
  %call = call i32 @utmpname(i8* %0) #7, !dbg !9603
  ret i32 0, !dbg !9604
}

; Function Attrs: nounwind
declare dso_local i32 @utmpname(i8*) #3

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @euidaccess(i8* nonnull %pathname, i32 %mode) #0 !dbg !9605 {
entry:
  %pathname.addr = alloca i8*, align 8
  %mode.addr = alloca i32, align 4
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !9606, metadata !DIExpression()), !dbg !9607
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9608, metadata !DIExpression()), !dbg !9609
  %0 = load i8*, i8** %pathname.addr, align 8, !dbg !9610
  %1 = load i32, i32* %mode.addr, align 4, !dbg !9611
  %call = call i32 @access(i8* %0, i32 %1) #7, !dbg !9612
  ret i32 %call, !dbg !9613
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @eaccess(i8* nonnull %pathname, i32 %mode) #0 !dbg !9614 {
entry:
  %pathname.addr = alloca i8*, align 8
  %mode.addr = alloca i32, align 4
  store i8* %pathname, i8** %pathname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pathname.addr, metadata !9615, metadata !DIExpression()), !dbg !9616
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9617, metadata !DIExpression()), !dbg !9618
  %0 = load i8*, i8** %pathname.addr, align 8, !dbg !9619
  %1 = load i32, i32* %mode.addr, align 4, !dbg !9620
  %call = call i32 @euidaccess(i8* %0, i32 %1) #7, !dbg !9621
  ret i32 %call, !dbg !9622
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @group_member(i32 %__gid) #0 !dbg !9623 {
entry:
  %__gid.addr = alloca i32, align 4
  store i32 %__gid, i32* %__gid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %__gid.addr, metadata !9626, metadata !DIExpression()), !dbg !9627
  %0 = load i32, i32* %__gid.addr, align 4, !dbg !9628
  %call = call i32 @getgid() #7, !dbg !9629
  %cmp = icmp eq i32 %0, %call, !dbg !9630
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !9631

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %__gid.addr, align 4, !dbg !9632
  %call1 = call i32 @getegid() #7, !dbg !9633
  %cmp2 = icmp eq i32 %1, %call1, !dbg !9634
  br label %lor.end, !dbg !9631

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32, !dbg !9631
  ret i32 %lor.ext, !dbg !9635
}

; Function Attrs: nounwind
declare dso_local i32 @getegid() #3

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @utime(i8* nonnull %filename, %struct.timespec.15* %buf) #0 !dbg !9636 {
entry:
  %filename.addr = alloca i8*, align 8
  %buf.addr = alloca %struct.timespec.15*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !9646, metadata !DIExpression()), !dbg !9647
  store %struct.timespec.15* %buf, %struct.timespec.15** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec.15** %buf.addr, metadata !9648, metadata !DIExpression()), !dbg !9649
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9650
  %call = call i32* @__errno_location() #23, !dbg !9651
  store i32 1, i32* %call, align 4, !dbg !9652
  ret i32 -1, !dbg !9653
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @futimes(i32 %fd, %struct.timespec.15* %times) #0 !dbg !9654 {
entry:
  %fd.addr = alloca i32, align 4
  %times.addr = alloca %struct.timespec.15*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !9659, metadata !DIExpression()), !dbg !9660
  store %struct.timespec.15* %times, %struct.timespec.15** %times.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec.15** %times.addr, metadata !9661, metadata !DIExpression()), !dbg !9662
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7.143, i64 0, i64 0)), !dbg !9663
  %call = call i32* @__errno_location() #23, !dbg !9664
  store i32 9, i32* %call, align 4, !dbg !9665
  ret i32 -1, !dbg !9666
}

; Function Attrs: noinline nounwind readonly uwtable
define dso_local i32 @strverscmp(i8* nonnull %__s1, i8* nonnull %__s2) #12 !dbg !9667 {
entry:
  %__s1.addr = alloca i8*, align 8
  %__s2.addr = alloca i8*, align 8
  store i8* %__s1, i8** %__s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %__s1.addr, metadata !9668, metadata !DIExpression()), !dbg !9669
  store i8* %__s2, i8** %__s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %__s2.addr, metadata !9670, metadata !DIExpression()), !dbg !9671
  %0 = load i8*, i8** %__s1.addr, align 8, !dbg !9672
  %1 = load i8*, i8** %__s2.addr, align 8, !dbg !9673
  %call = call i32 @strcmp(i8* %0, i8* %1) #24, !dbg !9674
  ret i32 %call, !dbg !9675
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #9

; Function Attrs: noinline nounwind readnone uwtable
define weak dso_local i32 @gnu_dev_major(i64 %__dev) #13 !dbg !9676 {
entry:
  %__dev.addr = alloca i64, align 8
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %__dev.addr, metadata !9679, metadata !DIExpression()), !dbg !9680
  %0 = load i64, i64* %__dev.addr, align 8, !dbg !9681
  %shr = lshr i64 %0, 8, !dbg !9682
  %and = and i64 %shr, 4095, !dbg !9683
  %1 = load i64, i64* %__dev.addr, align 8, !dbg !9684
  %shr1 = lshr i64 %1, 32, !dbg !9685
  %conv = trunc i64 %shr1 to i32, !dbg !9686
  %and2 = and i32 %conv, -4096, !dbg !9687
  %conv3 = zext i32 %and2 to i64, !dbg !9688
  %or = or i64 %and, %conv3, !dbg !9689
  %conv4 = trunc i64 %or to i32, !dbg !9690
  ret i32 %conv4, !dbg !9691
}

; Function Attrs: noinline nounwind readnone uwtable
define weak dso_local i32 @gnu_dev_minor(i64 %__dev) #13 !dbg !9692 {
entry:
  %__dev.addr = alloca i64, align 8
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %__dev.addr, metadata !9693, metadata !DIExpression()), !dbg !9694
  %0 = load i64, i64* %__dev.addr, align 8, !dbg !9695
  %and = and i64 %0, 255, !dbg !9696
  %1 = load i64, i64* %__dev.addr, align 8, !dbg !9697
  %shr = lshr i64 %1, 12, !dbg !9698
  %conv = trunc i64 %shr to i32, !dbg !9699
  %and1 = and i32 %conv, -256, !dbg !9700
  %conv2 = zext i32 %and1 to i64, !dbg !9701
  %or = or i64 %and, %conv2, !dbg !9702
  %conv3 = trunc i64 %or to i32, !dbg !9703
  ret i32 %conv3, !dbg !9704
}

; Function Attrs: noinline nounwind readnone uwtable
define weak dso_local i64 @gnu_dev_makedev(i32 %__major, i32 %__minor) #13 !dbg !9705 {
entry:
  %__major.addr = alloca i32, align 4
  %__minor.addr = alloca i32, align 4
  store i32 %__major, i32* %__major.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %__major.addr, metadata !9708, metadata !DIExpression()), !dbg !9709
  store i32 %__minor, i32* %__minor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %__minor.addr, metadata !9710, metadata !DIExpression()), !dbg !9711
  %0 = load i32, i32* %__minor.addr, align 4, !dbg !9712
  %and = and i32 %0, 255, !dbg !9713
  %1 = load i32, i32* %__major.addr, align 4, !dbg !9714
  %and1 = and i32 %1, 4095, !dbg !9715
  %shl = shl i32 %and1, 8, !dbg !9716
  %or = or i32 %and, %shl, !dbg !9717
  %conv = zext i32 %or to i64, !dbg !9718
  %2 = load i32, i32* %__minor.addr, align 4, !dbg !9719
  %and2 = and i32 %2, -256, !dbg !9720
  %conv3 = zext i32 %and2 to i64, !dbg !9721
  %shl4 = shl i64 %conv3, 12, !dbg !9722
  %or5 = or i64 %conv, %shl4, !dbg !9723
  %3 = load i32, i32* %__major.addr, align 4, !dbg !9724
  %and6 = and i32 %3, -4096, !dbg !9725
  %conv7 = zext i32 %and6 to i64, !dbg !9726
  %shl8 = shl i64 %conv7, 32, !dbg !9727
  %or9 = or i64 %or5, %shl8, !dbg !9728
  ret i64 %or9, !dbg !9729
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i8* @canonicalize_file_name(i8* nonnull %name) #0 !dbg !9730 {
entry:
  %retval = alloca i8*, align 8
  %name.addr = alloca i8*, align 8
  %resolved_name = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !9733, metadata !DIExpression()), !dbg !9734
  call void @llvm.dbg.declare(metadata i8** %resolved_name, metadata !9735, metadata !DIExpression()), !dbg !9736
  %call = call noalias i8* @malloc(i64 4096) #7, !dbg !9737
  store i8* %call, i8** %resolved_name, align 8, !dbg !9736
  %0 = load i8*, i8** %resolved_name, align 8, !dbg !9738
  %tobool = icmp ne i8* %0, null, !dbg !9738
  br i1 %tobool, label %if.end, label %if.then, !dbg !9740

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !9741
  br label %return, !dbg !9741

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %name.addr, align 8, !dbg !9742
  %2 = load i8*, i8** %resolved_name, align 8, !dbg !9744
  %call1 = call i8* @realpath(i8* %1, i8* %2) #7, !dbg !9745
  %tobool2 = icmp ne i8* %call1, null, !dbg !9745
  %3 = load i8*, i8** %resolved_name, align 8, !dbg !9746
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !9747

if.then3:                                         ; preds = %if.end
  call void @free(i8* %3) #7, !dbg !9748
  store i8* null, i8** %retval, align 8, !dbg !9750
  br label %return, !dbg !9750

if.end4:                                          ; preds = %if.end
  store i8* %3, i8** %retval, align 8, !dbg !9751
  br label %return, !dbg !9751

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %4 = load i8*, i8** %retval, align 8, !dbg !9752
  ret i8* %4, !dbg !9752
}

; Function Attrs: nounwind
declare dso_local i8* @realpath(i8*, i8*) #3

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @getloadavg(double* nonnull %loadavg, i32 %nelem) #0 !dbg !9753 {
entry:
  %loadavg.addr = alloca double*, align 8
  %nelem.addr = alloca i32, align 4
  store double* %loadavg, double** %loadavg.addr, align 8
  call void @llvm.dbg.declare(metadata double** %loadavg.addr, metadata !9757, metadata !DIExpression()), !dbg !9758
  store i32 %nelem, i32* %nelem.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nelem.addr, metadata !9759, metadata !DIExpression()), !dbg !9760
  call void @klee_warning(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8.144, i64 0, i64 0)), !dbg !9761
  ret i32 -1, !dbg !9762
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @wait(i32* %status) #0 !dbg !9763 {
entry:
  %status.addr = alloca i32*, align 8
  store i32* %status, i32** %status.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %status.addr, metadata !9766, metadata !DIExpression()), !dbg !9767
  call void @klee_warning(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9.145, i64 0, i64 0)), !dbg !9768
  %call = call i32* @__errno_location() #23, !dbg !9769
  store i32 10, i32* %call, align 4, !dbg !9770
  ret i32 -1, !dbg !9771
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @wait3(i32* %status, i32 %options, %struct.rusage* %rusage) #0 !dbg !9772 {
entry:
  %status.addr = alloca i32*, align 8
  %options.addr = alloca i32, align 4
  %rusage.addr = alloca %struct.rusage*, align 8
  store i32* %status, i32** %status.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %status.addr, metadata !9851, metadata !DIExpression()), !dbg !9852
  store i32 %options, i32* %options.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %options.addr, metadata !9853, metadata !DIExpression()), !dbg !9854
  store %struct.rusage* %rusage, %struct.rusage** %rusage.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rusage** %rusage.addr, metadata !9855, metadata !DIExpression()), !dbg !9856
  call void @klee_warning(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9.145, i64 0, i64 0)), !dbg !9857
  %call = call i32* @__errno_location() #23, !dbg !9858
  store i32 10, i32* %call, align 4, !dbg !9859
  ret i32 -1, !dbg !9860
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @wait4(i32 %pid, i32* %status, i32 %options, %struct.rusage* %rusage) #0 !dbg !9861 {
entry:
  %pid.addr = alloca i32, align 4
  %status.addr = alloca i32*, align 8
  %options.addr = alloca i32, align 4
  %rusage.addr = alloca %struct.rusage*, align 8
  store i32 %pid, i32* %pid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pid.addr, metadata !9865, metadata !DIExpression()), !dbg !9866
  store i32* %status, i32** %status.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %status.addr, metadata !9867, metadata !DIExpression()), !dbg !9868
  store i32 %options, i32* %options.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %options.addr, metadata !9869, metadata !DIExpression()), !dbg !9870
  store %struct.rusage* %rusage, %struct.rusage** %rusage.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rusage** %rusage.addr, metadata !9871, metadata !DIExpression()), !dbg !9872
  call void @klee_warning(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9.145, i64 0, i64 0)), !dbg !9873
  %call = call i32* @__errno_location() #23, !dbg !9874
  store i32 10, i32* %call, align 4, !dbg !9875
  ret i32 -1, !dbg !9876
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @waitpid(i32 %pid, i32* %status, i32 %options) #0 !dbg !9877 {
entry:
  %pid.addr = alloca i32, align 4
  %status.addr = alloca i32*, align 8
  %options.addr = alloca i32, align 4
  store i32 %pid, i32* %pid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pid.addr, metadata !9880, metadata !DIExpression()), !dbg !9881
  store i32* %status, i32** %status.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %status.addr, metadata !9882, metadata !DIExpression()), !dbg !9883
  store i32 %options, i32* %options.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %options.addr, metadata !9884, metadata !DIExpression()), !dbg !9885
  call void @klee_warning(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9.145, i64 0, i64 0)), !dbg !9886
  %call = call i32* @__errno_location() #23, !dbg !9887
  store i32 10, i32* %call, align 4, !dbg !9888
  ret i32 -1, !dbg !9889
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @waitid(i32 %idtype, i32 %id, %struct.siginfo_t* %infop, i32 %options) #0 !dbg !9890 {
entry:
  %idtype.addr = alloca i32, align 4
  %id.addr = alloca i32, align 4
  %infop.addr = alloca %struct.siginfo_t*, align 8
  %options.addr = alloca i32, align 4
  store i32 %idtype, i32* %idtype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idtype.addr, metadata !9896, metadata !DIExpression()), !dbg !9897
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !9898, metadata !DIExpression()), !dbg !9899
  store %struct.siginfo_t* %infop, %struct.siginfo_t** %infop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.siginfo_t** %infop.addr, metadata !9900, metadata !DIExpression()), !dbg !9901
  store i32 %options, i32* %options.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %options.addr, metadata !9902, metadata !DIExpression()), !dbg !9903
  call void @klee_warning(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9.145, i64 0, i64 0)), !dbg !9904
  %call = call i32* @__errno_location() #23, !dbg !9905
  store i32 10, i32* %call, align 4, !dbg !9906
  ret i32 -1, !dbg !9907
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @mount(i8* %source, i8* %target, i8* %filesystemtype, i64 %mountflags, i8* %data) #0 !dbg !9908 {
entry:
  %source.addr = alloca i8*, align 8
  %target.addr = alloca i8*, align 8
  %filesystemtype.addr = alloca i8*, align 8
  %mountflags.addr = alloca i64, align 8
  %data.addr = alloca i8*, align 8
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !9911, metadata !DIExpression()), !dbg !9912
  store i8* %target, i8** %target.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %target.addr, metadata !9913, metadata !DIExpression()), !dbg !9914
  store i8* %filesystemtype, i8** %filesystemtype.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filesystemtype.addr, metadata !9915, metadata !DIExpression()), !dbg !9916
  store i64 %mountflags, i64* %mountflags.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %mountflags.addr, metadata !9917, metadata !DIExpression()), !dbg !9918
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9919, metadata !DIExpression()), !dbg !9920
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9921
  %call = call i32* @__errno_location() #23, !dbg !9922
  store i32 1, i32* %call, align 4, !dbg !9923
  ret i32 -1, !dbg !9924
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @umount(i8* %target) #0 !dbg !9925 {
entry:
  %target.addr = alloca i8*, align 8
  store i8* %target, i8** %target.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %target.addr, metadata !9926, metadata !DIExpression()), !dbg !9927
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9928
  %call = call i32* @__errno_location() #23, !dbg !9929
  store i32 1, i32* %call, align 4, !dbg !9930
  ret i32 -1, !dbg !9931
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @umount2(i8* %target, i32 %flags) #0 !dbg !9932 {
entry:
  %target.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store i8* %target, i8** %target.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %target.addr, metadata !9933, metadata !DIExpression()), !dbg !9934
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !9935, metadata !DIExpression()), !dbg !9936
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9937
  %call = call i32* @__errno_location() #23, !dbg !9938
  store i32 1, i32* %call, align 4, !dbg !9939
  ret i32 -1, !dbg !9940
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @swapon(i8* %path, i32 %swapflags) #0 !dbg !9941 {
entry:
  %path.addr = alloca i8*, align 8
  %swapflags.addr = alloca i32, align 4
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !9942, metadata !DIExpression()), !dbg !9943
  store i32 %swapflags, i32* %swapflags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %swapflags.addr, metadata !9944, metadata !DIExpression()), !dbg !9945
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9946
  %call = call i32* @__errno_location() #23, !dbg !9947
  store i32 1, i32* %call, align 4, !dbg !9948
  ret i32 -1, !dbg !9949
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @swapoff(i8* %path) #0 !dbg !9950 {
entry:
  %path.addr = alloca i8*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !9951, metadata !DIExpression()), !dbg !9952
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9953
  %call = call i32* @__errno_location() #23, !dbg !9954
  store i32 1, i32* %call, align 4, !dbg !9955
  ret i32 -1, !dbg !9956
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @setgid(i32 %gid) #0 !dbg !9957 {
entry:
  %gid.addr = alloca i32, align 4
  store i32 %gid, i32* %gid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %gid.addr, metadata !9958, metadata !DIExpression()), !dbg !9959
  call void @klee_warning(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10.146, i64 0, i64 0)), !dbg !9960
  ret i32 0, !dbg !9961
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @setgroups(i64 %size, i32* %list) #0 !dbg !9962 {
entry:
  %size.addr = alloca i64, align 8
  %list.addr = alloca i32*, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !9967, metadata !DIExpression()), !dbg !9968
  store i32* %list, i32** %list.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %list.addr, metadata !9969, metadata !DIExpression()), !dbg !9970
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9971
  %call = call i32* @__errno_location() #23, !dbg !9972
  store i32 1, i32* %call, align 4, !dbg !9973
  ret i32 -1, !dbg !9974
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @sethostname(i8* nonnull %name, i64 %len) #0 !dbg !9975 {
entry:
  %name.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !9978, metadata !DIExpression()), !dbg !9979
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !9980, metadata !DIExpression()), !dbg !9981
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9982
  %call = call i32* @__errno_location() #23, !dbg !9983
  store i32 1, i32* %call, align 4, !dbg !9984
  ret i32 -1, !dbg !9985
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @setpgid(i32 %pid, i32 %pgid) #0 !dbg !9986 {
entry:
  %pid.addr = alloca i32, align 4
  %pgid.addr = alloca i32, align 4
  store i32 %pid, i32* %pid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pid.addr, metadata !9989, metadata !DIExpression()), !dbg !9990
  store i32 %pgid, i32* %pgid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pgid.addr, metadata !9991, metadata !DIExpression()), !dbg !9992
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9993
  %call = call i32* @__errno_location() #23, !dbg !9994
  store i32 1, i32* %call, align 4, !dbg !9995
  ret i32 -1, !dbg !9996
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @setpgrp() #0 !dbg !9997 {
entry:
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !9998
  %call = call i32* @__errno_location() #23, !dbg !9999
  store i32 1, i32* %call, align 4, !dbg !10000
  ret i32 -1, !dbg !10001
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @setpriority(i32 %which, i32 %who, i32 %prio) #0 !dbg !10002 {
entry:
  %which.addr = alloca i32, align 4
  %who.addr = alloca i32, align 4
  %prio.addr = alloca i32, align 4
  store i32 %which, i32* %which.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %which.addr, metadata !10007, metadata !DIExpression()), !dbg !10008
  store i32 %who, i32* %who.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %who.addr, metadata !10009, metadata !DIExpression()), !dbg !10010
  store i32 %prio, i32* %prio.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prio.addr, metadata !10011, metadata !DIExpression()), !dbg !10012
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10013
  %call = call i32* @__errno_location() #23, !dbg !10014
  store i32 1, i32* %call, align 4, !dbg !10015
  ret i32 -1, !dbg !10016
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @setresgid(i32 %rgid, i32 %egid, i32 %sgid) #0 !dbg !10017 {
entry:
  %rgid.addr = alloca i32, align 4
  %egid.addr = alloca i32, align 4
  %sgid.addr = alloca i32, align 4
  store i32 %rgid, i32* %rgid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rgid.addr, metadata !10020, metadata !DIExpression()), !dbg !10021
  store i32 %egid, i32* %egid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %egid.addr, metadata !10022, metadata !DIExpression()), !dbg !10023
  store i32 %sgid, i32* %sgid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sgid.addr, metadata !10024, metadata !DIExpression()), !dbg !10025
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10026
  %call = call i32* @__errno_location() #23, !dbg !10027
  store i32 1, i32* %call, align 4, !dbg !10028
  ret i32 -1, !dbg !10029
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @setresuid(i32 %ruid, i32 %euid, i32 %suid) #0 !dbg !10030 {
entry:
  %ruid.addr = alloca i32, align 4
  %euid.addr = alloca i32, align 4
  %suid.addr = alloca i32, align 4
  store i32 %ruid, i32* %ruid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ruid.addr, metadata !10034, metadata !DIExpression()), !dbg !10035
  store i32 %euid, i32* %euid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %euid.addr, metadata !10036, metadata !DIExpression()), !dbg !10037
  store i32 %suid, i32* %suid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %suid.addr, metadata !10038, metadata !DIExpression()), !dbg !10039
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10040
  %call = call i32* @__errno_location() #23, !dbg !10041
  store i32 1, i32* %call, align 4, !dbg !10042
  ret i32 -1, !dbg !10043
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @setrlimit(i32 %resource, %struct.timespec.15* %rlim) #0 !dbg !10044 {
entry:
  %resource.addr = alloca i32, align 4
  %rlim.addr = alloca %struct.timespec.15*, align 8
  store i32 %resource, i32* %resource.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %resource.addr, metadata !10056, metadata !DIExpression()), !dbg !10057
  store %struct.timespec.15* %rlim, %struct.timespec.15** %rlim.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec.15** %rlim.addr, metadata !10058, metadata !DIExpression()), !dbg !10059
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10060
  %call = call i32* @__errno_location() #23, !dbg !10061
  store i32 1, i32* %call, align 4, !dbg !10062
  ret i32 -1, !dbg !10063
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @setrlimit64(i32 %resource, %struct.timespec.15* %rlim) #0 !dbg !10064 {
entry:
  %resource.addr = alloca i32, align 4
  %rlim.addr = alloca %struct.timespec.15*, align 8
  store i32 %resource, i32* %resource.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %resource.addr, metadata !10075, metadata !DIExpression()), !dbg !10076
  store %struct.timespec.15* %rlim, %struct.timespec.15** %rlim.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec.15** %rlim.addr, metadata !10077, metadata !DIExpression()), !dbg !10078
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10079
  %call = call i32* @__errno_location() #23, !dbg !10080
  store i32 1, i32* %call, align 4, !dbg !10081
  ret i32 -1, !dbg !10082
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @setsid() #0 !dbg !10083 {
entry:
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10086
  %call = call i32* @__errno_location() #23, !dbg !10087
  store i32 1, i32* %call, align 4, !dbg !10088
  ret i32 -1, !dbg !10089
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @settimeofday(%struct.timespec.15* %tv, %struct.cgc_timeval* %tz) #0 !dbg !10090 {
entry:
  %tv.addr = alloca %struct.timespec.15*, align 8
  %tz.addr = alloca %struct.cgc_timeval*, align 8
  store %struct.timespec.15* %tv, %struct.timespec.15** %tv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec.15** %tv.addr, metadata !10100, metadata !DIExpression()), !dbg !10101
  store %struct.cgc_timeval* %tz, %struct.cgc_timeval** %tz.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgc_timeval** %tz.addr, metadata !10102, metadata !DIExpression()), !dbg !10103
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10104
  %call = call i32* @__errno_location() #23, !dbg !10105
  store i32 1, i32* %call, align 4, !dbg !10106
  ret i32 -1, !dbg !10107
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @setuid(i32 %uid) #0 !dbg !10108 {
entry:
  %uid.addr = alloca i32, align 4
  store i32 %uid, i32* %uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %uid.addr, metadata !10111, metadata !DIExpression()), !dbg !10112
  call void @klee_warning(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10.146, i64 0, i64 0)), !dbg !10113
  ret i32 0, !dbg !10114
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @reboot(i32 %flag) #0 !dbg !10115 {
entry:
  %flag.addr = alloca i32, align 4
  store i32 %flag, i32* %flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flag.addr, metadata !10116, metadata !DIExpression()), !dbg !10117
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10118
  %call = call i32* @__errno_location() #23, !dbg !10119
  store i32 1, i32* %call, align 4, !dbg !10120
  ret i32 -1, !dbg !10121
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @mlock(i8* %addr, i64 %len) #0 !dbg !10122 {
entry:
  %addr.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store i8* %addr, i8** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %addr.addr, metadata !10125, metadata !DIExpression()), !dbg !10126
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !10127, metadata !DIExpression()), !dbg !10128
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10129
  %call = call i32* @__errno_location() #23, !dbg !10130
  store i32 1, i32* %call, align 4, !dbg !10131
  ret i32 -1, !dbg !10132
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @munlock(i8* %addr, i64 %len) #0 !dbg !10133 {
entry:
  %addr.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store i8* %addr, i8** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %addr.addr, metadata !10134, metadata !DIExpression()), !dbg !10135
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !10136, metadata !DIExpression()), !dbg !10137
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10138
  %call = call i32* @__errno_location() #23, !dbg !10139
  store i32 1, i32* %call, align 4, !dbg !10140
  ret i32 -1, !dbg !10141
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @pause() #0 !dbg !10142 {
entry:
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10143
  %call = call i32* @__errno_location() #23, !dbg !10144
  store i32 1, i32* %call, align 4, !dbg !10145
  ret i32 -1, !dbg !10146
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i64 @readahead(i32 %fd, i64* %offset, i64 %count) #0 !dbg !10147 {
entry:
  %fd.addr = alloca i32, align 4
  %offset.addr = alloca i64*, align 8
  %count.addr = alloca i64, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !10153, metadata !DIExpression()), !dbg !10154
  store i64* %offset, i64** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %offset.addr, metadata !10155, metadata !DIExpression()), !dbg !10156
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !10157, metadata !DIExpression()), !dbg !10158
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10159
  %call = call i32* @__errno_location() #23, !dbg !10160
  store i32 1, i32* %call, align 4, !dbg !10161
  ret i64 -1, !dbg !10162
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i8* @mmap(i8* %start, i64 %length, i32 %prot, i32 %flags, i32 %fd, i64 %offset) #0 !dbg !10163 {
entry:
  %start.addr = alloca i8*, align 8
  %length.addr = alloca i64, align 8
  %prot.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  store i8* %start, i8** %start.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %start.addr, metadata !10167, metadata !DIExpression()), !dbg !10168
  store i64 %length, i64* %length.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %length.addr, metadata !10169, metadata !DIExpression()), !dbg !10170
  store i32 %prot, i32* %prot.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prot.addr, metadata !10171, metadata !DIExpression()), !dbg !10172
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10173, metadata !DIExpression()), !dbg !10174
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !10175, metadata !DIExpression()), !dbg !10176
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !10177, metadata !DIExpression()), !dbg !10178
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10179
  %call = call i32* @__errno_location() #23, !dbg !10180
  store i32 1, i32* %call, align 4, !dbg !10181
  ret i8* inttoptr (i64 -1 to i8*), !dbg !10182
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i8* @mmap64(i8* %start, i64 %length, i32 %prot, i32 %flags, i32 %fd, i64 %offset) #0 !dbg !10183 {
entry:
  %start.addr = alloca i8*, align 8
  %length.addr = alloca i64, align 8
  %prot.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  store i8* %start, i8** %start.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %start.addr, metadata !10186, metadata !DIExpression()), !dbg !10187
  store i64 %length, i64* %length.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %length.addr, metadata !10188, metadata !DIExpression()), !dbg !10189
  store i32 %prot, i32* %prot.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prot.addr, metadata !10190, metadata !DIExpression()), !dbg !10191
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10192, metadata !DIExpression()), !dbg !10193
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !10194, metadata !DIExpression()), !dbg !10195
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !10196, metadata !DIExpression()), !dbg !10197
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10198
  %call = call i32* @__errno_location() #23, !dbg !10199
  store i32 1, i32* %call, align 4, !dbg !10200
  ret i8* inttoptr (i64 -1 to i8*), !dbg !10201
}

; Function Attrs: noinline nounwind uwtable
define weak dso_local i32 @munmap(i8* %start, i64 %length) #0 !dbg !10202 {
entry:
  %start.addr = alloca i8*, align 8
  %length.addr = alloca i64, align 8
  store i8* %start, i8** %start.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %start.addr, metadata !10205, metadata !DIExpression()), !dbg !10206
  store i64 %length, i64* %length.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %length.addr, metadata !10207, metadata !DIExpression()), !dbg !10208
  call void @klee_warning(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.140, i64 0, i64 0)), !dbg !10209
  %call = call i32* @__errno_location() #23, !dbg !10210
  store i32 1, i32* %call, align 4, !dbg !10211
  ret i32 -1, !dbg !10212
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @memcpy(i8* %destaddr, i8* %srcaddr, i64 %len) #0 !dbg !10213 {
entry:
  %destaddr.addr = alloca i8*, align 8
  %srcaddr.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %dest = alloca i8*, align 8
  %src = alloca i8*, align 8
  store i8* %destaddr, i8** %destaddr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %destaddr.addr, metadata !10217, metadata !DIExpression()), !dbg !10218
  store i8* %srcaddr, i8** %srcaddr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %srcaddr.addr, metadata !10219, metadata !DIExpression()), !dbg !10220
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !10221, metadata !DIExpression()), !dbg !10222
  call void @llvm.dbg.declare(metadata i8** %dest, metadata !10223, metadata !DIExpression()), !dbg !10224
  %0 = load i8*, i8** %destaddr.addr, align 8, !dbg !10225
  store i8* %0, i8** %dest, align 8, !dbg !10224
  call void @llvm.dbg.declare(metadata i8** %src, metadata !10226, metadata !DIExpression()), !dbg !10227
  %1 = load i8*, i8** %srcaddr.addr, align 8, !dbg !10228
  store i8* %1, i8** %src, align 8, !dbg !10227
  br label %while.cond, !dbg !10229

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i64, i64* %len.addr, align 8, !dbg !10230
  %dec = add i64 %2, -1, !dbg !10230
  store i64 %dec, i64* %len.addr, align 8, !dbg !10230
  %cmp = icmp ugt i64 %2, 0, !dbg !10231
  br i1 %cmp, label %while.body, label %while.end, !dbg !10229

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %src, align 8, !dbg !10232
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !10232
  store i8* %incdec.ptr, i8** %src, align 8, !dbg !10232
  %4 = load i8, i8* %3, align 1, !dbg !10233
  %5 = load i8*, i8** %dest, align 8, !dbg !10234
  %incdec.ptr1 = getelementptr inbounds i8, i8* %5, i32 1, !dbg !10234
  store i8* %incdec.ptr1, i8** %dest, align 8, !dbg !10234
  store i8 %4, i8* %5, align 1, !dbg !10235
  br label %while.cond, !dbg !10229, !llvm.loop !10236

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %destaddr.addr, align 8, !dbg !10237
  ret i8* %6, !dbg !10238
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @memset(i8* %dst, i32 %s, i64 %count) #0 !dbg !10239 {
entry:
  %dst.addr = alloca i8*, align 8
  %s.addr = alloca i32, align 4
  %count.addr = alloca i64, align 8
  %a = alloca i8*, align 8
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !10243, metadata !DIExpression()), !dbg !10244
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !10245, metadata !DIExpression()), !dbg !10246
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !10247, metadata !DIExpression()), !dbg !10248
  call void @llvm.dbg.declare(metadata i8** %a, metadata !10249, metadata !DIExpression()), !dbg !10250
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !10251
  store i8* %0, i8** %a, align 8, !dbg !10250
  br label %while.cond, !dbg !10252

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i64, i64* %count.addr, align 8, !dbg !10253
  %dec = add i64 %1, -1, !dbg !10253
  store i64 %dec, i64* %count.addr, align 8, !dbg !10253
  %cmp = icmp ugt i64 %1, 0, !dbg !10254
  br i1 %cmp, label %while.body, label %while.end, !dbg !10252

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %s.addr, align 4, !dbg !10255
  %conv = trunc i32 %2 to i8, !dbg !10255
  %3 = load i8*, i8** %a, align 8, !dbg !10256
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !10256
  store i8* %incdec.ptr, i8** %a, align 8, !dbg !10256
  store i8 %conv, i8* %3, align 1, !dbg !10257
  br label %while.cond, !dbg !10252, !llvm.loop !10258

while.end:                                        ; preds = %while.cond
  %4 = load i8*, i8** %dst.addr, align 8, !dbg !10259
  ret i8* %4, !dbg !10260
}

; Function Attrs: noinline nounwind optnone uwtable
define void @AES128_ECB_encrypt(i8* %input, i8* %key, i8* %output) #6 {
entry:
  %input.addr = alloca i8*, align 8
  %key.addr = alloca i8*, align 8
  %output.addr = alloca i8*, align 8
  store i8* %input, i8** %input.addr, align 8
  store i8* %key, i8** %key.addr, align 8
  store i8* %output, i8** %output.addr, align 8
  %0 = load i8*, i8** %output.addr, align 8
  %1 = load i8*, i8** %input.addr, align 8
  call void @BlockCopy(i8* %0, i8* %1) #15
  %2 = load i8*, i8** %output.addr, align 8
  %3 = bitcast i8* %2 to [4 x [4 x i8]]*
  store [4 x [4 x i8]]* %3, [4 x [4 x i8]]** @state.155, align 8
  %4 = load i8*, i8** %key.addr, align 8
  store i8* %4, i8** @Key, align 8
  call void @KeyExpansion() #15
  call void @Cipher() #15
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @BlockCopy(i8* %output, i8* %input) #6 {
entry:
  %output.addr = alloca i8*, align 8
  %input.addr = alloca i8*, align 8
  %i = alloca i8, align 1
  store i8* %output, i8** %output.addr, align 8
  store i8* %input, i8** %input.addr, align 8
  store i8 0, i8* %i, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8, i8* %i, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp slt i32 %conv, 16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** %input.addr, align 8
  %2 = load i8, i8* %i, align 1
  %idxprom = zext i8 %2 to i64
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %4 = load i8*, i8** %output.addr, align 8
  %5 = load i8, i8* %i, align 1
  %idxprom2 = zext i8 %5 to i64
  %arrayidx3 = getelementptr inbounds i8, i8* %4, i64 %idxprom2
  store i8 %3, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i8, i8* %i, align 1
  %inc = add i8 %6, 1
  store i8 %inc, i8* %i, align 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @KeyExpansion() #6 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tempa = alloca [4 x i8], align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** @Key, align 8
  %2 = load i32, i32* %i, align 4
  %mul = mul i32 %2, 4
  %add = add i32 %mul, 0
  %idxprom = zext i32 %add to i64
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %4 = load i32, i32* %i, align 4
  %mul1 = mul i32 %4, 4
  %add2 = add i32 %mul1, 0
  %idxprom3 = zext i32 %add2 to i64
  %arrayidx4 = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom3
  store i8 %3, i8* %arrayidx4, align 1
  %5 = load i8*, i8** @Key, align 8
  %6 = load i32, i32* %i, align 4
  %mul5 = mul i32 %6, 4
  %add6 = add i32 %mul5, 1
  %idxprom7 = zext i32 %add6 to i64
  %arrayidx8 = getelementptr inbounds i8, i8* %5, i64 %idxprom7
  %7 = load i8, i8* %arrayidx8, align 1
  %8 = load i32, i32* %i, align 4
  %mul9 = mul i32 %8, 4
  %add10 = add i32 %mul9, 1
  %idxprom11 = zext i32 %add10 to i64
  %arrayidx12 = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom11
  store i8 %7, i8* %arrayidx12, align 1
  %9 = load i8*, i8** @Key, align 8
  %10 = load i32, i32* %i, align 4
  %mul13 = mul i32 %10, 4
  %add14 = add i32 %mul13, 2
  %idxprom15 = zext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds i8, i8* %9, i64 %idxprom15
  %11 = load i8, i8* %arrayidx16, align 1
  %12 = load i32, i32* %i, align 4
  %mul17 = mul i32 %12, 4
  %add18 = add i32 %mul17, 2
  %idxprom19 = zext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom19
  store i8 %11, i8* %arrayidx20, align 1
  %13 = load i8*, i8** @Key, align 8
  %14 = load i32, i32* %i, align 4
  %mul21 = mul i32 %14, 4
  %add22 = add i32 %mul21, 3
  %idxprom23 = zext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds i8, i8* %13, i64 %idxprom23
  %15 = load i8, i8* %arrayidx24, align 1
  %16 = load i32, i32* %i, align 4
  %mul25 = mul i32 %16, 4
  %add26 = add i32 %mul25, 3
  %idxprom27 = zext i32 %add26 to i64
  %arrayidx28 = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom27
  store i8 %15, i8* %arrayidx28, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc128, %for.end
  %18 = load i32, i32* %i, align 4
  %cmp30 = icmp ult i32 %18, 44
  br i1 %cmp30, label %for.body31, label %for.end130

for.body31:                                       ; preds = %for.cond29
  store i32 0, i32* %j, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc41, %for.body31
  %19 = load i32, i32* %j, align 4
  %cmp33 = icmp ult i32 %19, 4
  br i1 %cmp33, label %for.body34, label %for.end43

for.body34:                                       ; preds = %for.cond32
  %20 = load i32, i32* %i, align 4
  %sub = sub i32 %20, 1
  %mul35 = mul i32 %sub, 4
  %21 = load i32, i32* %j, align 4
  %add36 = add i32 %mul35, %21
  %idxprom37 = zext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom37
  %22 = load i8, i8* %arrayidx38, align 1
  %23 = load i32, i32* %j, align 4
  %idxprom39 = zext i32 %23 to i64
  %arrayidx40 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 %idxprom39
  store i8 %22, i8* %arrayidx40, align 1
  br label %for.inc41

for.inc41:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc42 = add i32 %24, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond32

for.end43:                                        ; preds = %for.cond32
  %25 = load i32, i32* %i, align 4
  %rem = urem i32 %25, 4
  %cmp44 = icmp eq i32 %rem, 0
  br i1 %cmp44, label %if.then, label %if.else

if.then:                                          ; preds = %for.end43
  %arrayidx45 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 0
  %26 = load i8, i8* %arrayidx45, align 1
  %conv = zext i8 %26 to i32
  store i32 %conv, i32* %k, align 4
  %arrayidx46 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 1
  %27 = load i8, i8* %arrayidx46, align 1
  %arrayidx47 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 0
  store i8 %27, i8* %arrayidx47, align 1
  %arrayidx48 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 2
  %28 = load i8, i8* %arrayidx48, align 1
  %arrayidx49 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 1
  store i8 %28, i8* %arrayidx49, align 1
  %arrayidx50 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 3
  %29 = load i8, i8* %arrayidx50, align 1
  %arrayidx51 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 2
  store i8 %29, i8* %arrayidx51, align 1
  %30 = load i32, i32* %k, align 4
  %conv52 = trunc i32 %30 to i8
  %arrayidx53 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 3
  store i8 %conv52, i8* %arrayidx53, align 1
  %arrayidx54 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 0
  %31 = load i8, i8* %arrayidx54, align 1
  %call = call zeroext i8 @getSBoxValue(i8 zeroext %31) #15
  %arrayidx55 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 0
  store i8 %call, i8* %arrayidx55, align 1
  %arrayidx56 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 1
  %32 = load i8, i8* %arrayidx56, align 1
  %call57 = call zeroext i8 @getSBoxValue(i8 zeroext %32) #15
  %arrayidx58 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 1
  store i8 %call57, i8* %arrayidx58, align 1
  %arrayidx59 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 2
  %33 = load i8, i8* %arrayidx59, align 1
  %call60 = call zeroext i8 @getSBoxValue(i8 zeroext %33) #15
  %arrayidx61 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 2
  store i8 %call60, i8* %arrayidx61, align 1
  %arrayidx62 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 3
  %34 = load i8, i8* %arrayidx62, align 1
  %call63 = call zeroext i8 @getSBoxValue(i8 zeroext %34) #15
  %arrayidx64 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 3
  store i8 %call63, i8* %arrayidx64, align 1
  %arrayidx65 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 0
  %35 = load i8, i8* %arrayidx65, align 1
  %conv66 = zext i8 %35 to i32
  %36 = load i32, i32* %i, align 4
  %div = udiv i32 %36, 4
  %idxprom67 = zext i32 %div to i64
  %arrayidx68 = getelementptr inbounds [255 x i8], [255 x i8]* @Rcon, i64 0, i64 %idxprom67
  %37 = load i8, i8* %arrayidx68, align 1
  %conv69 = zext i8 %37 to i32
  %xor = xor i32 %conv66, %conv69
  %conv70 = trunc i32 %xor to i8
  %arrayidx71 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 0
  store i8 %conv70, i8* %arrayidx71, align 1
  br label %if.end

if.else:                                          ; preds = %for.end43
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %38 = load i32, i32* %i, align 4
  %sub72 = sub i32 %38, 4
  %mul73 = mul i32 %sub72, 4
  %add74 = add i32 %mul73, 0
  %idxprom75 = zext i32 %add74 to i64
  %arrayidx76 = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom75
  %39 = load i8, i8* %arrayidx76, align 1
  %conv77 = zext i8 %39 to i32
  %arrayidx78 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 0
  %40 = load i8, i8* %arrayidx78, align 1
  %conv79 = zext i8 %40 to i32
  %xor80 = xor i32 %conv77, %conv79
  %conv81 = trunc i32 %xor80 to i8
  %41 = load i32, i32* %i, align 4
  %mul82 = mul i32 %41, 4
  %add83 = add i32 %mul82, 0
  %idxprom84 = zext i32 %add83 to i64
  %arrayidx85 = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom84
  store i8 %conv81, i8* %arrayidx85, align 1
  %42 = load i32, i32* %i, align 4
  %sub86 = sub i32 %42, 4
  %mul87 = mul i32 %sub86, 4
  %add88 = add i32 %mul87, 1
  %idxprom89 = zext i32 %add88 to i64
  %arrayidx90 = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom89
  %43 = load i8, i8* %arrayidx90, align 1
  %conv91 = zext i8 %43 to i32
  %arrayidx92 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 1
  %44 = load i8, i8* %arrayidx92, align 1
  %conv93 = zext i8 %44 to i32
  %xor94 = xor i32 %conv91, %conv93
  %conv95 = trunc i32 %xor94 to i8
  %45 = load i32, i32* %i, align 4
  %mul96 = mul i32 %45, 4
  %add97 = add i32 %mul96, 1
  %idxprom98 = zext i32 %add97 to i64
  %arrayidx99 = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom98
  store i8 %conv95, i8* %arrayidx99, align 1
  %46 = load i32, i32* %i, align 4
  %sub100 = sub i32 %46, 4
  %mul101 = mul i32 %sub100, 4
  %add102 = add i32 %mul101, 2
  %idxprom103 = zext i32 %add102 to i64
  %arrayidx104 = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom103
  %47 = load i8, i8* %arrayidx104, align 1
  %conv105 = zext i8 %47 to i32
  %arrayidx106 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 2
  %48 = load i8, i8* %arrayidx106, align 1
  %conv107 = zext i8 %48 to i32
  %xor108 = xor i32 %conv105, %conv107
  %conv109 = trunc i32 %xor108 to i8
  %49 = load i32, i32* %i, align 4
  %mul110 = mul i32 %49, 4
  %add111 = add i32 %mul110, 2
  %idxprom112 = zext i32 %add111 to i64
  %arrayidx113 = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom112
  store i8 %conv109, i8* %arrayidx113, align 1
  %50 = load i32, i32* %i, align 4
  %sub114 = sub i32 %50, 4
  %mul115 = mul i32 %sub114, 4
  %add116 = add i32 %mul115, 3
  %idxprom117 = zext i32 %add116 to i64
  %arrayidx118 = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom117
  %51 = load i8, i8* %arrayidx118, align 1
  %conv119 = zext i8 %51 to i32
  %arrayidx120 = getelementptr inbounds [4 x i8], [4 x i8]* %tempa, i64 0, i64 3
  %52 = load i8, i8* %arrayidx120, align 1
  %conv121 = zext i8 %52 to i32
  %xor122 = xor i32 %conv119, %conv121
  %conv123 = trunc i32 %xor122 to i8
  %53 = load i32, i32* %i, align 4
  %mul124 = mul i32 %53, 4
  %add125 = add i32 %mul124, 3
  %idxprom126 = zext i32 %add125 to i64
  %arrayidx127 = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom126
  store i8 %conv123, i8* %arrayidx127, align 1
  br label %for.inc128

for.inc128:                                       ; preds = %if.end
  %54 = load i32, i32* %i, align 4
  %inc129 = add i32 %54, 1
  store i32 %inc129, i32* %i, align 4
  br label %for.cond29

for.end130:                                       ; preds = %for.cond29
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @Cipher() #6 {
entry:
  %round = alloca i8, align 1
  store i8 0, i8* %round, align 1
  call void @AddRoundKey(i8 zeroext 0) #15
  store i8 1, i8* %round, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8, i8* %round, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp slt i32 %conv, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  call void @SubBytes() #15
  call void @ShiftRows() #15
  call void @MixColumns() #15
  %1 = load i8, i8* %round, align 1
  call void @AddRoundKey(i8 zeroext %1) #15
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i8, i8* %round, align 1
  %inc = add i8 %2, 1
  store i8 %inc, i8* %round, align 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @SubBytes() #15
  call void @ShiftRows() #15
  call void @AddRoundKey(i8 zeroext 10) #15
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @AddRoundKey(i8 zeroext %round) #6 {
entry:
  %round.addr = alloca i8, align 1
  %i = alloca i8, align 1
  %j = alloca i8, align 1
  store i8 %round, i8* %round.addr, align 1
  store i8 0, i8* %i, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc20, %entry
  %0 = load i8, i8* %i, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp slt i32 %conv, 4
  br i1 %cmp, label %for.body, label %for.end22

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %j, align 1
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %1 = load i8, i8* %j, align 1
  %conv3 = zext i8 %1 to i32
  %cmp4 = icmp slt i32 %conv3, 4
  br i1 %cmp4, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond2
  %2 = load i8, i8* %round.addr, align 1
  %conv7 = zext i8 %2 to i32
  %mul = mul nsw i32 %conv7, 4
  %mul8 = mul nsw i32 %mul, 4
  %3 = load i8, i8* %i, align 1
  %conv9 = zext i8 %3 to i32
  %mul10 = mul nsw i32 %conv9, 4
  %add = add nsw i32 %mul8, %mul10
  %4 = load i8, i8* %j, align 1
  %conv11 = zext i8 %4 to i32
  %add12 = add nsw i32 %add, %conv11
  %idxprom = sext i32 %add12 to i64
  %arrayidx = getelementptr inbounds [176 x i8], [176 x i8]* @RoundKey, i64 0, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv13 = zext i8 %5 to i32
  %6 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %7 = load i8, i8* %i, align 1
  %idxprom14 = zext i8 %7 to i64
  %arrayidx15 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %6, i64 0, i64 %idxprom14
  %8 = load i8, i8* %j, align 1
  %idxprom16 = zext i8 %8 to i64
  %arrayidx17 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx15, i64 0, i64 %idxprom16
  %9 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %9 to i32
  %xor = xor i32 %conv18, %conv13
  %conv19 = trunc i32 %xor to i8
  store i8 %conv19, i8* %arrayidx17, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %10 = load i8, i8* %j, align 1
  %inc = add i8 %10, 1
  store i8 %inc, i8* %j, align 1
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %11 = load i8, i8* %i, align 1
  %inc21 = add i8 %11, 1
  store i8 %inc21, i8* %i, align 1
  br label %for.cond

for.end22:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @SubBytes() #6 {
entry:
  %i = alloca i8, align 1
  %j = alloca i8, align 1
  store i8 0, i8* %i, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %0 = load i8, i8* %i, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp slt i32 %conv, 4
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %j, align 1
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %1 = load i8, i8* %j, align 1
  %conv3 = zext i8 %1 to i32
  %cmp4 = icmp slt i32 %conv3, 4
  br i1 %cmp4, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond2
  %2 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %3 = load i8, i8* %j, align 1
  %idxprom = zext i8 %3 to i64
  %arrayidx = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %2, i64 0, i64 %idxprom
  %4 = load i8, i8* %i, align 1
  %idxprom7 = zext i8 %4 to i64
  %arrayidx8 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i64 0, i64 %idxprom7
  %5 = load i8, i8* %arrayidx8, align 1
  %call = call zeroext i8 @getSBoxValue(i8 zeroext %5) #15
  %6 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %7 = load i8, i8* %j, align 1
  %idxprom9 = zext i8 %7 to i64
  %arrayidx10 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %6, i64 0, i64 %idxprom9
  %8 = load i8, i8* %i, align 1
  %idxprom11 = zext i8 %8 to i64
  %arrayidx12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx10, i64 0, i64 %idxprom11
  store i8 %call, i8* %arrayidx12, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %9 = load i8, i8* %j, align 1
  %inc = add i8 %9, 1
  store i8 %inc, i8* %j, align 1
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %10 = load i8, i8* %i, align 1
  %inc14 = add i8 %10, 1
  store i8 %inc14, i8* %i, align 1
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @ShiftRows() #6 {
entry:
  %temp = alloca i8, align 1
  %0 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %0, i64 0, i64 0
  %arrayidx1 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i64 0, i64 1
  %1 = load i8, i8* %arrayidx1, align 1
  store i8 %1, i8* %temp, align 1
  %2 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx2 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %2, i64 0, i64 1
  %arrayidx3 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx2, i64 0, i64 1
  %3 = load i8, i8* %arrayidx3, align 1
  %4 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx4 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %4, i64 0, i64 0
  %arrayidx5 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx4, i64 0, i64 1
  store i8 %3, i8* %arrayidx5, align 1
  %5 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx6 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %5, i64 0, i64 2
  %arrayidx7 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx6, i64 0, i64 1
  %6 = load i8, i8* %arrayidx7, align 1
  %7 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx8 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %7, i64 0, i64 1
  %arrayidx9 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx8, i64 0, i64 1
  store i8 %6, i8* %arrayidx9, align 1
  %8 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx10 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %8, i64 0, i64 3
  %arrayidx11 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx10, i64 0, i64 1
  %9 = load i8, i8* %arrayidx11, align 1
  %10 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx12 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %10, i64 0, i64 2
  %arrayidx13 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx12, i64 0, i64 1
  store i8 %9, i8* %arrayidx13, align 1
  %11 = load i8, i8* %temp, align 1
  %12 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx14 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %12, i64 0, i64 3
  %arrayidx15 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx14, i64 0, i64 1
  store i8 %11, i8* %arrayidx15, align 1
  %13 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx16 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %13, i64 0, i64 0
  %arrayidx17 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx16, i64 0, i64 2
  %14 = load i8, i8* %arrayidx17, align 1
  store i8 %14, i8* %temp, align 1
  %15 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx18 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %15, i64 0, i64 2
  %arrayidx19 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx18, i64 0, i64 2
  %16 = load i8, i8* %arrayidx19, align 1
  %17 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx20 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %17, i64 0, i64 0
  %arrayidx21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i64 0, i64 2
  store i8 %16, i8* %arrayidx21, align 1
  %18 = load i8, i8* %temp, align 1
  %19 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx22 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %19, i64 0, i64 2
  %arrayidx23 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx22, i64 0, i64 2
  store i8 %18, i8* %arrayidx23, align 1
  %20 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx24 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %20, i64 0, i64 1
  %arrayidx25 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx24, i64 0, i64 2
  %21 = load i8, i8* %arrayidx25, align 1
  store i8 %21, i8* %temp, align 1
  %22 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx26 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %22, i64 0, i64 3
  %arrayidx27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i64 0, i64 2
  %23 = load i8, i8* %arrayidx27, align 1
  %24 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx28 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %24, i64 0, i64 1
  %arrayidx29 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx28, i64 0, i64 2
  store i8 %23, i8* %arrayidx29, align 1
  %25 = load i8, i8* %temp, align 1
  %26 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx30 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %26, i64 0, i64 3
  %arrayidx31 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx30, i64 0, i64 2
  store i8 %25, i8* %arrayidx31, align 1
  %27 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx32 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %27, i64 0, i64 0
  %arrayidx33 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx32, i64 0, i64 3
  %28 = load i8, i8* %arrayidx33, align 1
  store i8 %28, i8* %temp, align 1
  %29 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx34 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %29, i64 0, i64 3
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx34, i64 0, i64 3
  %30 = load i8, i8* %arrayidx35, align 1
  %31 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx36 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %31, i64 0, i64 0
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i64 0, i64 3
  store i8 %30, i8* %arrayidx37, align 1
  %32 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx38 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %32, i64 0, i64 2
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i64 0, i64 3
  %33 = load i8, i8* %arrayidx39, align 1
  %34 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx40 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %34, i64 0, i64 3
  %arrayidx41 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx40, i64 0, i64 3
  store i8 %33, i8* %arrayidx41, align 1
  %35 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx42 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %35, i64 0, i64 1
  %arrayidx43 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx42, i64 0, i64 3
  %36 = load i8, i8* %arrayidx43, align 1
  %37 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx44 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %37, i64 0, i64 2
  %arrayidx45 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx44, i64 0, i64 3
  store i8 %36, i8* %arrayidx45, align 1
  %38 = load i8, i8* %temp, align 1
  %39 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx46 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %39, i64 0, i64 1
  %arrayidx47 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx46, i64 0, i64 3
  store i8 %38, i8* %arrayidx47, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @MixColumns() #6 {
entry:
  %i = alloca i8, align 1
  %Tmp = alloca i8, align 1
  %Tm = alloca i8, align 1
  %t = alloca i8, align 1
  store i8 0, i8* %i, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8, i8* %i, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp slt i32 %conv, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %2 = load i8, i8* %i, align 1
  %idxprom = zext i8 %2 to i64
  %arrayidx = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %1, i64 0, i64 %idxprom
  %arrayidx2 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i64 0, i64 0
  %3 = load i8, i8* %arrayidx2, align 1
  store i8 %3, i8* %t, align 1
  %4 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %5 = load i8, i8* %i, align 1
  %idxprom3 = zext i8 %5 to i64
  %arrayidx4 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %4, i64 0, i64 %idxprom3
  %arrayidx5 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx4, i64 0, i64 0
  %6 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %6 to i32
  %7 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %8 = load i8, i8* %i, align 1
  %idxprom7 = zext i8 %8 to i64
  %arrayidx8 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %7, i64 0, i64 %idxprom7
  %arrayidx9 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx8, i64 0, i64 1
  %9 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %9 to i32
  %xor = xor i32 %conv6, %conv10
  %10 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %11 = load i8, i8* %i, align 1
  %idxprom11 = zext i8 %11 to i64
  %arrayidx12 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %10, i64 0, i64 %idxprom11
  %arrayidx13 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx12, i64 0, i64 2
  %12 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %12 to i32
  %xor15 = xor i32 %xor, %conv14
  %13 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %14 = load i8, i8* %i, align 1
  %idxprom16 = zext i8 %14 to i64
  %arrayidx17 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %13, i64 0, i64 %idxprom16
  %arrayidx18 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx17, i64 0, i64 3
  %15 = load i8, i8* %arrayidx18, align 1
  %conv19 = zext i8 %15 to i32
  %xor20 = xor i32 %xor15, %conv19
  %conv21 = trunc i32 %xor20 to i8
  store i8 %conv21, i8* %Tmp, align 1
  %16 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %17 = load i8, i8* %i, align 1
  %idxprom22 = zext i8 %17 to i64
  %arrayidx23 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %16, i64 0, i64 %idxprom22
  %arrayidx24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i64 0, i64 0
  %18 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %18 to i32
  %19 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %20 = load i8, i8* %i, align 1
  %idxprom26 = zext i8 %20 to i64
  %arrayidx27 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %19, i64 0, i64 %idxprom26
  %arrayidx28 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx27, i64 0, i64 1
  %21 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %21 to i32
  %xor30 = xor i32 %conv25, %conv29
  %conv31 = trunc i32 %xor30 to i8
  store i8 %conv31, i8* %Tm, align 1
  %22 = load i8, i8* %Tm, align 1
  %call = call zeroext i8 @xtime(i8 zeroext %22) #15
  store i8 %call, i8* %Tm, align 1
  %23 = load i8, i8* %Tm, align 1
  %conv32 = zext i8 %23 to i32
  %24 = load i8, i8* %Tmp, align 1
  %conv33 = zext i8 %24 to i32
  %xor34 = xor i32 %conv32, %conv33
  %25 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %26 = load i8, i8* %i, align 1
  %idxprom35 = zext i8 %26 to i64
  %arrayidx36 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %25, i64 0, i64 %idxprom35
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i64 0, i64 0
  %27 = load i8, i8* %arrayidx37, align 1
  %conv38 = zext i8 %27 to i32
  %xor39 = xor i32 %conv38, %xor34
  %conv40 = trunc i32 %xor39 to i8
  store i8 %conv40, i8* %arrayidx37, align 1
  %28 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %29 = load i8, i8* %i, align 1
  %idxprom41 = zext i8 %29 to i64
  %arrayidx42 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %28, i64 0, i64 %idxprom41
  %arrayidx43 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx42, i64 0, i64 1
  %30 = load i8, i8* %arrayidx43, align 1
  %conv44 = zext i8 %30 to i32
  %31 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %32 = load i8, i8* %i, align 1
  %idxprom45 = zext i8 %32 to i64
  %arrayidx46 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %31, i64 0, i64 %idxprom45
  %arrayidx47 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx46, i64 0, i64 2
  %33 = load i8, i8* %arrayidx47, align 1
  %conv48 = zext i8 %33 to i32
  %xor49 = xor i32 %conv44, %conv48
  %conv50 = trunc i32 %xor49 to i8
  store i8 %conv50, i8* %Tm, align 1
  %34 = load i8, i8* %Tm, align 1
  %call51 = call zeroext i8 @xtime(i8 zeroext %34) #15
  store i8 %call51, i8* %Tm, align 1
  %35 = load i8, i8* %Tm, align 1
  %conv52 = zext i8 %35 to i32
  %36 = load i8, i8* %Tmp, align 1
  %conv53 = zext i8 %36 to i32
  %xor54 = xor i32 %conv52, %conv53
  %37 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %38 = load i8, i8* %i, align 1
  %idxprom55 = zext i8 %38 to i64
  %arrayidx56 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %37, i64 0, i64 %idxprom55
  %arrayidx57 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx56, i64 0, i64 1
  %39 = load i8, i8* %arrayidx57, align 1
  %conv58 = zext i8 %39 to i32
  %xor59 = xor i32 %conv58, %xor54
  %conv60 = trunc i32 %xor59 to i8
  store i8 %conv60, i8* %arrayidx57, align 1
  %40 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %41 = load i8, i8* %i, align 1
  %idxprom61 = zext i8 %41 to i64
  %arrayidx62 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %40, i64 0, i64 %idxprom61
  %arrayidx63 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx62, i64 0, i64 2
  %42 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %42 to i32
  %43 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %44 = load i8, i8* %i, align 1
  %idxprom65 = zext i8 %44 to i64
  %arrayidx66 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %43, i64 0, i64 %idxprom65
  %arrayidx67 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx66, i64 0, i64 3
  %45 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %45 to i32
  %xor69 = xor i32 %conv64, %conv68
  %conv70 = trunc i32 %xor69 to i8
  store i8 %conv70, i8* %Tm, align 1
  %46 = load i8, i8* %Tm, align 1
  %call71 = call zeroext i8 @xtime(i8 zeroext %46) #15
  store i8 %call71, i8* %Tm, align 1
  %47 = load i8, i8* %Tm, align 1
  %conv72 = zext i8 %47 to i32
  %48 = load i8, i8* %Tmp, align 1
  %conv73 = zext i8 %48 to i32
  %xor74 = xor i32 %conv72, %conv73
  %49 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %50 = load i8, i8* %i, align 1
  %idxprom75 = zext i8 %50 to i64
  %arrayidx76 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %49, i64 0, i64 %idxprom75
  %arrayidx77 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx76, i64 0, i64 2
  %51 = load i8, i8* %arrayidx77, align 1
  %conv78 = zext i8 %51 to i32
  %xor79 = xor i32 %conv78, %xor74
  %conv80 = trunc i32 %xor79 to i8
  store i8 %conv80, i8* %arrayidx77, align 1
  %52 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %53 = load i8, i8* %i, align 1
  %idxprom81 = zext i8 %53 to i64
  %arrayidx82 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %52, i64 0, i64 %idxprom81
  %arrayidx83 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx82, i64 0, i64 3
  %54 = load i8, i8* %arrayidx83, align 1
  %conv84 = zext i8 %54 to i32
  %55 = load i8, i8* %t, align 1
  %conv85 = zext i8 %55 to i32
  %xor86 = xor i32 %conv84, %conv85
  %conv87 = trunc i32 %xor86 to i8
  store i8 %conv87, i8* %Tm, align 1
  %56 = load i8, i8* %Tm, align 1
  %call88 = call zeroext i8 @xtime(i8 zeroext %56) #15
  store i8 %call88, i8* %Tm, align 1
  %57 = load i8, i8* %Tm, align 1
  %conv89 = zext i8 %57 to i32
  %58 = load i8, i8* %Tmp, align 1
  %conv90 = zext i8 %58 to i32
  %xor91 = xor i32 %conv89, %conv90
  %59 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %60 = load i8, i8* %i, align 1
  %idxprom92 = zext i8 %60 to i64
  %arrayidx93 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %59, i64 0, i64 %idxprom92
  %arrayidx94 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx93, i64 0, i64 3
  %61 = load i8, i8* %arrayidx94, align 1
  %conv95 = zext i8 %61 to i32
  %xor96 = xor i32 %conv95, %xor91
  %conv97 = trunc i32 %xor96 to i8
  store i8 %conv97, i8* %arrayidx94, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %62 = load i8, i8* %i, align 1
  %inc = add i8 %62, 1
  store i8 %inc, i8* %i, align 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @xtime(i8 zeroext %x) #6 {
entry:
  %x.addr = alloca i8, align 1
  store i8 %x, i8* %x.addr, align 1
  %0 = load i8, i8* %x.addr, align 1
  %conv = zext i8 %0 to i32
  %shl = shl i32 %conv, 1
  %1 = load i8, i8* %x.addr, align 1
  %conv1 = zext i8 %1 to i32
  %shr = ashr i32 %conv1, 7
  %and = and i32 %shr, 1
  %mul = mul nsw i32 %and, 27
  %xor = xor i32 %shl, %mul
  %conv2 = trunc i32 %xor to i8
  ret i8 %conv2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @getSBoxValue(i8 zeroext %num) #6 {
entry:
  %num.addr = alloca i8, align 1
  store i8 %num, i8* %num.addr, align 1
  %0 = load i8, i8* %num.addr, align 1
  %idxprom = zext i8 %0 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @sbox, i64 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1
  ret i8 %1
}

; Function Attrs: noinline nounwind optnone uwtable
define void @AES128_ECB_decrypt(i8* %input, i8* %key, i8* %output) #6 {
entry:
  %input.addr = alloca i8*, align 8
  %key.addr = alloca i8*, align 8
  %output.addr = alloca i8*, align 8
  store i8* %input, i8** %input.addr, align 8
  store i8* %key, i8** %key.addr, align 8
  store i8* %output, i8** %output.addr, align 8
  %0 = load i8*, i8** %output.addr, align 8
  %1 = load i8*, i8** %input.addr, align 8
  call void @BlockCopy(i8* %0, i8* %1) #15
  %2 = load i8*, i8** %output.addr, align 8
  %3 = bitcast i8* %2 to [4 x [4 x i8]]*
  store [4 x [4 x i8]]* %3, [4 x [4 x i8]]** @state.155, align 8
  %4 = load i8*, i8** %key.addr, align 8
  store i8* %4, i8** @Key, align 8
  call void @KeyExpansion() #15
  call void @InvCipher() #15
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @InvCipher() #6 {
entry:
  %round = alloca i8, align 1
  store i8 0, i8* %round, align 1
  call void @AddRoundKey(i8 zeroext 10) #15
  store i8 9, i8* %round, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8, i8* %round, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sgt i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  call void @InvShiftRows() #15
  call void @InvSubBytes() #15
  %1 = load i8, i8* %round, align 1
  call void @AddRoundKey(i8 zeroext %1) #15
  call void @InvMixColumns() #15
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i8, i8* %round, align 1
  %dec = add i8 %2, -1
  store i8 %dec, i8* %round, align 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @InvShiftRows() #15
  call void @InvSubBytes() #15
  call void @AddRoundKey(i8 zeroext 0) #15
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @InvShiftRows() #6 {
entry:
  %temp = alloca i8, align 1
  %0 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %0, i64 0, i64 3
  %arrayidx1 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i64 0, i64 1
  %1 = load i8, i8* %arrayidx1, align 1
  store i8 %1, i8* %temp, align 1
  %2 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx2 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %2, i64 0, i64 2
  %arrayidx3 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx2, i64 0, i64 1
  %3 = load i8, i8* %arrayidx3, align 1
  %4 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx4 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %4, i64 0, i64 3
  %arrayidx5 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx4, i64 0, i64 1
  store i8 %3, i8* %arrayidx5, align 1
  %5 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx6 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %5, i64 0, i64 1
  %arrayidx7 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx6, i64 0, i64 1
  %6 = load i8, i8* %arrayidx7, align 1
  %7 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx8 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %7, i64 0, i64 2
  %arrayidx9 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx8, i64 0, i64 1
  store i8 %6, i8* %arrayidx9, align 1
  %8 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx10 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %8, i64 0, i64 0
  %arrayidx11 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx10, i64 0, i64 1
  %9 = load i8, i8* %arrayidx11, align 1
  %10 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx12 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %10, i64 0, i64 1
  %arrayidx13 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx12, i64 0, i64 1
  store i8 %9, i8* %arrayidx13, align 1
  %11 = load i8, i8* %temp, align 1
  %12 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx14 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %12, i64 0, i64 0
  %arrayidx15 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx14, i64 0, i64 1
  store i8 %11, i8* %arrayidx15, align 1
  %13 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx16 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %13, i64 0, i64 0
  %arrayidx17 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx16, i64 0, i64 2
  %14 = load i8, i8* %arrayidx17, align 1
  store i8 %14, i8* %temp, align 1
  %15 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx18 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %15, i64 0, i64 2
  %arrayidx19 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx18, i64 0, i64 2
  %16 = load i8, i8* %arrayidx19, align 1
  %17 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx20 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %17, i64 0, i64 0
  %arrayidx21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i64 0, i64 2
  store i8 %16, i8* %arrayidx21, align 1
  %18 = load i8, i8* %temp, align 1
  %19 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx22 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %19, i64 0, i64 2
  %arrayidx23 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx22, i64 0, i64 2
  store i8 %18, i8* %arrayidx23, align 1
  %20 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx24 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %20, i64 0, i64 1
  %arrayidx25 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx24, i64 0, i64 2
  %21 = load i8, i8* %arrayidx25, align 1
  store i8 %21, i8* %temp, align 1
  %22 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx26 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %22, i64 0, i64 3
  %arrayidx27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i64 0, i64 2
  %23 = load i8, i8* %arrayidx27, align 1
  %24 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx28 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %24, i64 0, i64 1
  %arrayidx29 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx28, i64 0, i64 2
  store i8 %23, i8* %arrayidx29, align 1
  %25 = load i8, i8* %temp, align 1
  %26 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx30 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %26, i64 0, i64 3
  %arrayidx31 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx30, i64 0, i64 2
  store i8 %25, i8* %arrayidx31, align 1
  %27 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx32 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %27, i64 0, i64 0
  %arrayidx33 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx32, i64 0, i64 3
  %28 = load i8, i8* %arrayidx33, align 1
  store i8 %28, i8* %temp, align 1
  %29 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx34 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %29, i64 0, i64 1
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx34, i64 0, i64 3
  %30 = load i8, i8* %arrayidx35, align 1
  %31 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx36 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %31, i64 0, i64 0
  %arrayidx37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i64 0, i64 3
  store i8 %30, i8* %arrayidx37, align 1
  %32 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx38 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %32, i64 0, i64 2
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i64 0, i64 3
  %33 = load i8, i8* %arrayidx39, align 1
  %34 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx40 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %34, i64 0, i64 1
  %arrayidx41 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx40, i64 0, i64 3
  store i8 %33, i8* %arrayidx41, align 1
  %35 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx42 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %35, i64 0, i64 3
  %arrayidx43 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx42, i64 0, i64 3
  %36 = load i8, i8* %arrayidx43, align 1
  %37 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx44 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %37, i64 0, i64 2
  %arrayidx45 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx44, i64 0, i64 3
  store i8 %36, i8* %arrayidx45, align 1
  %38 = load i8, i8* %temp, align 1
  %39 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %arrayidx46 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %39, i64 0, i64 3
  %arrayidx47 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx46, i64 0, i64 3
  store i8 %38, i8* %arrayidx47, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @InvSubBytes() #6 {
entry:
  %i = alloca i8, align 1
  %j = alloca i8, align 1
  store i8 0, i8* %i, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %0 = load i8, i8* %i, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp slt i32 %conv, 4
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %j, align 1
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %1 = load i8, i8* %j, align 1
  %conv3 = zext i8 %1 to i32
  %cmp4 = icmp slt i32 %conv3, 4
  br i1 %cmp4, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond2
  %2 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %3 = load i8, i8* %j, align 1
  %idxprom = zext i8 %3 to i64
  %arrayidx = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %2, i64 0, i64 %idxprom
  %4 = load i8, i8* %i, align 1
  %idxprom7 = zext i8 %4 to i64
  %arrayidx8 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i64 0, i64 %idxprom7
  %5 = load i8, i8* %arrayidx8, align 1
  %call = call zeroext i8 @getSBoxInvert(i8 zeroext %5) #15
  %6 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %7 = load i8, i8* %j, align 1
  %idxprom9 = zext i8 %7 to i64
  %arrayidx10 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %6, i64 0, i64 %idxprom9
  %8 = load i8, i8* %i, align 1
  %idxprom11 = zext i8 %8 to i64
  %arrayidx12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx10, i64 0, i64 %idxprom11
  store i8 %call, i8* %arrayidx12, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %9 = load i8, i8* %j, align 1
  %inc = add i8 %9, 1
  store i8 %inc, i8* %j, align 1
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %10 = load i8, i8* %i, align 1
  %inc14 = add i8 %10, 1
  store i8 %inc14, i8* %i, align 1
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @InvMixColumns() #6 {
entry:
  %i = alloca i32, align 4
  %a = alloca i8, align 1
  %b = alloca i8, align 1
  %c = alloca i8, align 1
  %d = alloca i8, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %1, i64 0, i64 %idxprom
  %arrayidx1 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i64 0, i64 0
  %3 = load i8, i8* %arrayidx1, align 1
  store i8 %3, i8* %a, align 1
  %4 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %5 to i64
  %arrayidx3 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %4, i64 0, i64 %idxprom2
  %arrayidx4 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx3, i64 0, i64 1
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %b, align 1
  %7 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom5 = sext i32 %8 to i64
  %arrayidx6 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %7, i64 0, i64 %idxprom5
  %arrayidx7 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx6, i64 0, i64 2
  %9 = load i8, i8* %arrayidx7, align 1
  store i8 %9, i8* %c, align 1
  %10 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %11 to i64
  %arrayidx9 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %10, i64 0, i64 %idxprom8
  %arrayidx10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i64 0, i64 3
  %12 = load i8, i8* %arrayidx10, align 1
  store i8 %12, i8* %d, align 1
  %13 = load i8, i8* %a, align 1
  %conv = zext i8 %13 to i32
  %mul = mul nsw i32 0, %conv
  %14 = load i8, i8* %a, align 1
  %call = call zeroext i8 @xtime(i8 zeroext %14) #15
  %conv11 = zext i8 %call to i32
  %mul12 = mul nsw i32 1, %conv11
  %xor = xor i32 %mul, %mul12
  %15 = load i8, i8* %a, align 1
  %call13 = call zeroext i8 @xtime(i8 zeroext %15) #15
  %call14 = call zeroext i8 @xtime(i8 zeroext %call13) #15
  %conv15 = zext i8 %call14 to i32
  %mul16 = mul nsw i32 1, %conv15
  %xor17 = xor i32 %xor, %mul16
  %16 = load i8, i8* %a, align 1
  %call18 = call zeroext i8 @xtime(i8 zeroext %16) #15
  %call19 = call zeroext i8 @xtime(i8 zeroext %call18) #15
  %call20 = call zeroext i8 @xtime(i8 zeroext %call19) #15
  %conv21 = zext i8 %call20 to i32
  %mul22 = mul nsw i32 1, %conv21
  %xor23 = xor i32 %xor17, %mul22
  %17 = load i8, i8* %a, align 1
  %call24 = call zeroext i8 @xtime(i8 zeroext %17) #15
  %call25 = call zeroext i8 @xtime(i8 zeroext %call24) #15
  %call26 = call zeroext i8 @xtime(i8 zeroext %call25) #15
  %call27 = call zeroext i8 @xtime(i8 zeroext %call26) #15
  %conv28 = zext i8 %call27 to i32
  %mul29 = mul nsw i32 0, %conv28
  %xor30 = xor i32 %xor23, %mul29
  %18 = load i8, i8* %b, align 1
  %conv31 = zext i8 %18 to i32
  %mul32 = mul nsw i32 1, %conv31
  %19 = load i8, i8* %b, align 1
  %call33 = call zeroext i8 @xtime(i8 zeroext %19) #15
  %conv34 = zext i8 %call33 to i32
  %mul35 = mul nsw i32 1, %conv34
  %xor36 = xor i32 %mul32, %mul35
  %20 = load i8, i8* %b, align 1
  %call37 = call zeroext i8 @xtime(i8 zeroext %20) #15
  %call38 = call zeroext i8 @xtime(i8 zeroext %call37) #15
  %conv39 = zext i8 %call38 to i32
  %mul40 = mul nsw i32 0, %conv39
  %xor41 = xor i32 %xor36, %mul40
  %21 = load i8, i8* %b, align 1
  %call42 = call zeroext i8 @xtime(i8 zeroext %21) #15
  %call43 = call zeroext i8 @xtime(i8 zeroext %call42) #15
  %call44 = call zeroext i8 @xtime(i8 zeroext %call43) #15
  %conv45 = zext i8 %call44 to i32
  %mul46 = mul nsw i32 1, %conv45
  %xor47 = xor i32 %xor41, %mul46
  %22 = load i8, i8* %b, align 1
  %call48 = call zeroext i8 @xtime(i8 zeroext %22) #15
  %call49 = call zeroext i8 @xtime(i8 zeroext %call48) #15
  %call50 = call zeroext i8 @xtime(i8 zeroext %call49) #15
  %call51 = call zeroext i8 @xtime(i8 zeroext %call50) #15
  %conv52 = zext i8 %call51 to i32
  %mul53 = mul nsw i32 0, %conv52
  %xor54 = xor i32 %xor47, %mul53
  %xor55 = xor i32 %xor30, %xor54
  %23 = load i8, i8* %c, align 1
  %conv56 = zext i8 %23 to i32
  %mul57 = mul nsw i32 1, %conv56
  %24 = load i8, i8* %c, align 1
  %call58 = call zeroext i8 @xtime(i8 zeroext %24) #15
  %conv59 = zext i8 %call58 to i32
  %mul60 = mul nsw i32 0, %conv59
  %xor61 = xor i32 %mul57, %mul60
  %25 = load i8, i8* %c, align 1
  %call62 = call zeroext i8 @xtime(i8 zeroext %25) #15
  %call63 = call zeroext i8 @xtime(i8 zeroext %call62) #15
  %conv64 = zext i8 %call63 to i32
  %mul65 = mul nsw i32 1, %conv64
  %xor66 = xor i32 %xor61, %mul65
  %26 = load i8, i8* %c, align 1
  %call67 = call zeroext i8 @xtime(i8 zeroext %26) #15
  %call68 = call zeroext i8 @xtime(i8 zeroext %call67) #15
  %call69 = call zeroext i8 @xtime(i8 zeroext %call68) #15
  %conv70 = zext i8 %call69 to i32
  %mul71 = mul nsw i32 1, %conv70
  %xor72 = xor i32 %xor66, %mul71
  %27 = load i8, i8* %c, align 1
  %call73 = call zeroext i8 @xtime(i8 zeroext %27) #15
  %call74 = call zeroext i8 @xtime(i8 zeroext %call73) #15
  %call75 = call zeroext i8 @xtime(i8 zeroext %call74) #15
  %call76 = call zeroext i8 @xtime(i8 zeroext %call75) #15
  %conv77 = zext i8 %call76 to i32
  %mul78 = mul nsw i32 0, %conv77
  %xor79 = xor i32 %xor72, %mul78
  %xor80 = xor i32 %xor55, %xor79
  %28 = load i8, i8* %d, align 1
  %conv81 = zext i8 %28 to i32
  %mul82 = mul nsw i32 1, %conv81
  %29 = load i8, i8* %d, align 1
  %call83 = call zeroext i8 @xtime(i8 zeroext %29) #15
  %conv84 = zext i8 %call83 to i32
  %mul85 = mul nsw i32 0, %conv84
  %xor86 = xor i32 %mul82, %mul85
  %30 = load i8, i8* %d, align 1
  %call87 = call zeroext i8 @xtime(i8 zeroext %30) #15
  %call88 = call zeroext i8 @xtime(i8 zeroext %call87) #15
  %conv89 = zext i8 %call88 to i32
  %mul90 = mul nsw i32 0, %conv89
  %xor91 = xor i32 %xor86, %mul90
  %31 = load i8, i8* %d, align 1
  %call92 = call zeroext i8 @xtime(i8 zeroext %31) #15
  %call93 = call zeroext i8 @xtime(i8 zeroext %call92) #15
  %call94 = call zeroext i8 @xtime(i8 zeroext %call93) #15
  %conv95 = zext i8 %call94 to i32
  %mul96 = mul nsw i32 1, %conv95
  %xor97 = xor i32 %xor91, %mul96
  %32 = load i8, i8* %d, align 1
  %call98 = call zeroext i8 @xtime(i8 zeroext %32) #15
  %call99 = call zeroext i8 @xtime(i8 zeroext %call98) #15
  %call100 = call zeroext i8 @xtime(i8 zeroext %call99) #15
  %call101 = call zeroext i8 @xtime(i8 zeroext %call100) #15
  %conv102 = zext i8 %call101 to i32
  %mul103 = mul nsw i32 0, %conv102
  %xor104 = xor i32 %xor97, %mul103
  %xor105 = xor i32 %xor80, %xor104
  %conv106 = trunc i32 %xor105 to i8
  %33 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %34 = load i32, i32* %i, align 4
  %idxprom107 = sext i32 %34 to i64
  %arrayidx108 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %33, i64 0, i64 %idxprom107
  %arrayidx109 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx108, i64 0, i64 0
  store i8 %conv106, i8* %arrayidx109, align 1
  %35 = load i8, i8* %a, align 1
  %conv110 = zext i8 %35 to i32
  %mul111 = mul nsw i32 1, %conv110
  %36 = load i8, i8* %a, align 1
  %call112 = call zeroext i8 @xtime(i8 zeroext %36) #15
  %conv113 = zext i8 %call112 to i32
  %mul114 = mul nsw i32 0, %conv113
  %xor115 = xor i32 %mul111, %mul114
  %37 = load i8, i8* %a, align 1
  %call116 = call zeroext i8 @xtime(i8 zeroext %37) #15
  %call117 = call zeroext i8 @xtime(i8 zeroext %call116) #15
  %conv118 = zext i8 %call117 to i32
  %mul119 = mul nsw i32 0, %conv118
  %xor120 = xor i32 %xor115, %mul119
  %38 = load i8, i8* %a, align 1
  %call121 = call zeroext i8 @xtime(i8 zeroext %38) #15
  %call122 = call zeroext i8 @xtime(i8 zeroext %call121) #15
  %call123 = call zeroext i8 @xtime(i8 zeroext %call122) #15
  %conv124 = zext i8 %call123 to i32
  %mul125 = mul nsw i32 1, %conv124
  %xor126 = xor i32 %xor120, %mul125
  %39 = load i8, i8* %a, align 1
  %call127 = call zeroext i8 @xtime(i8 zeroext %39) #15
  %call128 = call zeroext i8 @xtime(i8 zeroext %call127) #15
  %call129 = call zeroext i8 @xtime(i8 zeroext %call128) #15
  %call130 = call zeroext i8 @xtime(i8 zeroext %call129) #15
  %conv131 = zext i8 %call130 to i32
  %mul132 = mul nsw i32 0, %conv131
  %xor133 = xor i32 %xor126, %mul132
  %40 = load i8, i8* %b, align 1
  %conv134 = zext i8 %40 to i32
  %mul135 = mul nsw i32 0, %conv134
  %41 = load i8, i8* %b, align 1
  %call136 = call zeroext i8 @xtime(i8 zeroext %41) #15
  %conv137 = zext i8 %call136 to i32
  %mul138 = mul nsw i32 1, %conv137
  %xor139 = xor i32 %mul135, %mul138
  %42 = load i8, i8* %b, align 1
  %call140 = call zeroext i8 @xtime(i8 zeroext %42) #15
  %call141 = call zeroext i8 @xtime(i8 zeroext %call140) #15
  %conv142 = zext i8 %call141 to i32
  %mul143 = mul nsw i32 1, %conv142
  %xor144 = xor i32 %xor139, %mul143
  %43 = load i8, i8* %b, align 1
  %call145 = call zeroext i8 @xtime(i8 zeroext %43) #15
  %call146 = call zeroext i8 @xtime(i8 zeroext %call145) #15
  %call147 = call zeroext i8 @xtime(i8 zeroext %call146) #15
  %conv148 = zext i8 %call147 to i32
  %mul149 = mul nsw i32 1, %conv148
  %xor150 = xor i32 %xor144, %mul149
  %44 = load i8, i8* %b, align 1
  %call151 = call zeroext i8 @xtime(i8 zeroext %44) #15
  %call152 = call zeroext i8 @xtime(i8 zeroext %call151) #15
  %call153 = call zeroext i8 @xtime(i8 zeroext %call152) #15
  %call154 = call zeroext i8 @xtime(i8 zeroext %call153) #15
  %conv155 = zext i8 %call154 to i32
  %mul156 = mul nsw i32 0, %conv155
  %xor157 = xor i32 %xor150, %mul156
  %xor158 = xor i32 %xor133, %xor157
  %45 = load i8, i8* %c, align 1
  %conv159 = zext i8 %45 to i32
  %mul160 = mul nsw i32 1, %conv159
  %46 = load i8, i8* %c, align 1
  %call161 = call zeroext i8 @xtime(i8 zeroext %46) #15
  %conv162 = zext i8 %call161 to i32
  %mul163 = mul nsw i32 1, %conv162
  %xor164 = xor i32 %mul160, %mul163
  %47 = load i8, i8* %c, align 1
  %call165 = call zeroext i8 @xtime(i8 zeroext %47) #15
  %call166 = call zeroext i8 @xtime(i8 zeroext %call165) #15
  %conv167 = zext i8 %call166 to i32
  %mul168 = mul nsw i32 0, %conv167
  %xor169 = xor i32 %xor164, %mul168
  %48 = load i8, i8* %c, align 1
  %call170 = call zeroext i8 @xtime(i8 zeroext %48) #15
  %call171 = call zeroext i8 @xtime(i8 zeroext %call170) #15
  %call172 = call zeroext i8 @xtime(i8 zeroext %call171) #15
  %conv173 = zext i8 %call172 to i32
  %mul174 = mul nsw i32 1, %conv173
  %xor175 = xor i32 %xor169, %mul174
  %49 = load i8, i8* %c, align 1
  %call176 = call zeroext i8 @xtime(i8 zeroext %49) #15
  %call177 = call zeroext i8 @xtime(i8 zeroext %call176) #15
  %call178 = call zeroext i8 @xtime(i8 zeroext %call177) #15
  %call179 = call zeroext i8 @xtime(i8 zeroext %call178) #15
  %conv180 = zext i8 %call179 to i32
  %mul181 = mul nsw i32 0, %conv180
  %xor182 = xor i32 %xor175, %mul181
  %xor183 = xor i32 %xor158, %xor182
  %50 = load i8, i8* %d, align 1
  %conv184 = zext i8 %50 to i32
  %mul185 = mul nsw i32 1, %conv184
  %51 = load i8, i8* %d, align 1
  %call186 = call zeroext i8 @xtime(i8 zeroext %51) #15
  %conv187 = zext i8 %call186 to i32
  %mul188 = mul nsw i32 0, %conv187
  %xor189 = xor i32 %mul185, %mul188
  %52 = load i8, i8* %d, align 1
  %call190 = call zeroext i8 @xtime(i8 zeroext %52) #15
  %call191 = call zeroext i8 @xtime(i8 zeroext %call190) #15
  %conv192 = zext i8 %call191 to i32
  %mul193 = mul nsw i32 1, %conv192
  %xor194 = xor i32 %xor189, %mul193
  %53 = load i8, i8* %d, align 1
  %call195 = call zeroext i8 @xtime(i8 zeroext %53) #15
  %call196 = call zeroext i8 @xtime(i8 zeroext %call195) #15
  %call197 = call zeroext i8 @xtime(i8 zeroext %call196) #15
  %conv198 = zext i8 %call197 to i32
  %mul199 = mul nsw i32 1, %conv198
  %xor200 = xor i32 %xor194, %mul199
  %54 = load i8, i8* %d, align 1
  %call201 = call zeroext i8 @xtime(i8 zeroext %54) #15
  %call202 = call zeroext i8 @xtime(i8 zeroext %call201) #15
  %call203 = call zeroext i8 @xtime(i8 zeroext %call202) #15
  %call204 = call zeroext i8 @xtime(i8 zeroext %call203) #15
  %conv205 = zext i8 %call204 to i32
  %mul206 = mul nsw i32 0, %conv205
  %xor207 = xor i32 %xor200, %mul206
  %xor208 = xor i32 %xor183, %xor207
  %conv209 = trunc i32 %xor208 to i8
  %55 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %56 = load i32, i32* %i, align 4
  %idxprom210 = sext i32 %56 to i64
  %arrayidx211 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %55, i64 0, i64 %idxprom210
  %arrayidx212 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx211, i64 0, i64 1
  store i8 %conv209, i8* %arrayidx212, align 1
  %57 = load i8, i8* %a, align 1
  %conv213 = zext i8 %57 to i32
  %mul214 = mul nsw i32 1, %conv213
  %58 = load i8, i8* %a, align 1
  %call215 = call zeroext i8 @xtime(i8 zeroext %58) #15
  %conv216 = zext i8 %call215 to i32
  %mul217 = mul nsw i32 0, %conv216
  %xor218 = xor i32 %mul214, %mul217
  %59 = load i8, i8* %a, align 1
  %call219 = call zeroext i8 @xtime(i8 zeroext %59) #15
  %call220 = call zeroext i8 @xtime(i8 zeroext %call219) #15
  %conv221 = zext i8 %call220 to i32
  %mul222 = mul nsw i32 1, %conv221
  %xor223 = xor i32 %xor218, %mul222
  %60 = load i8, i8* %a, align 1
  %call224 = call zeroext i8 @xtime(i8 zeroext %60) #15
  %call225 = call zeroext i8 @xtime(i8 zeroext %call224) #15
  %call226 = call zeroext i8 @xtime(i8 zeroext %call225) #15
  %conv227 = zext i8 %call226 to i32
  %mul228 = mul nsw i32 1, %conv227
  %xor229 = xor i32 %xor223, %mul228
  %61 = load i8, i8* %a, align 1
  %call230 = call zeroext i8 @xtime(i8 zeroext %61) #15
  %call231 = call zeroext i8 @xtime(i8 zeroext %call230) #15
  %call232 = call zeroext i8 @xtime(i8 zeroext %call231) #15
  %call233 = call zeroext i8 @xtime(i8 zeroext %call232) #15
  %conv234 = zext i8 %call233 to i32
  %mul235 = mul nsw i32 0, %conv234
  %xor236 = xor i32 %xor229, %mul235
  %62 = load i8, i8* %b, align 1
  %conv237 = zext i8 %62 to i32
  %mul238 = mul nsw i32 1, %conv237
  %63 = load i8, i8* %b, align 1
  %call239 = call zeroext i8 @xtime(i8 zeroext %63) #15
  %conv240 = zext i8 %call239 to i32
  %mul241 = mul nsw i32 0, %conv240
  %xor242 = xor i32 %mul238, %mul241
  %64 = load i8, i8* %b, align 1
  %call243 = call zeroext i8 @xtime(i8 zeroext %64) #15
  %call244 = call zeroext i8 @xtime(i8 zeroext %call243) #15
  %conv245 = zext i8 %call244 to i32
  %mul246 = mul nsw i32 0, %conv245
  %xor247 = xor i32 %xor242, %mul246
  %65 = load i8, i8* %b, align 1
  %call248 = call zeroext i8 @xtime(i8 zeroext %65) #15
  %call249 = call zeroext i8 @xtime(i8 zeroext %call248) #15
  %call250 = call zeroext i8 @xtime(i8 zeroext %call249) #15
  %conv251 = zext i8 %call250 to i32
  %mul252 = mul nsw i32 1, %conv251
  %xor253 = xor i32 %xor247, %mul252
  %66 = load i8, i8* %b, align 1
  %call254 = call zeroext i8 @xtime(i8 zeroext %66) #15
  %call255 = call zeroext i8 @xtime(i8 zeroext %call254) #15
  %call256 = call zeroext i8 @xtime(i8 zeroext %call255) #15
  %call257 = call zeroext i8 @xtime(i8 zeroext %call256) #15
  %conv258 = zext i8 %call257 to i32
  %mul259 = mul nsw i32 0, %conv258
  %xor260 = xor i32 %xor253, %mul259
  %xor261 = xor i32 %xor236, %xor260
  %67 = load i8, i8* %c, align 1
  %conv262 = zext i8 %67 to i32
  %mul263 = mul nsw i32 0, %conv262
  %68 = load i8, i8* %c, align 1
  %call264 = call zeroext i8 @xtime(i8 zeroext %68) #15
  %conv265 = zext i8 %call264 to i32
  %mul266 = mul nsw i32 1, %conv265
  %xor267 = xor i32 %mul263, %mul266
  %69 = load i8, i8* %c, align 1
  %call268 = call zeroext i8 @xtime(i8 zeroext %69) #15
  %call269 = call zeroext i8 @xtime(i8 zeroext %call268) #15
  %conv270 = zext i8 %call269 to i32
  %mul271 = mul nsw i32 1, %conv270
  %xor272 = xor i32 %xor267, %mul271
  %70 = load i8, i8* %c, align 1
  %call273 = call zeroext i8 @xtime(i8 zeroext %70) #15
  %call274 = call zeroext i8 @xtime(i8 zeroext %call273) #15
  %call275 = call zeroext i8 @xtime(i8 zeroext %call274) #15
  %conv276 = zext i8 %call275 to i32
  %mul277 = mul nsw i32 1, %conv276
  %xor278 = xor i32 %xor272, %mul277
  %71 = load i8, i8* %c, align 1
  %call279 = call zeroext i8 @xtime(i8 zeroext %71) #15
  %call280 = call zeroext i8 @xtime(i8 zeroext %call279) #15
  %call281 = call zeroext i8 @xtime(i8 zeroext %call280) #15
  %call282 = call zeroext i8 @xtime(i8 zeroext %call281) #15
  %conv283 = zext i8 %call282 to i32
  %mul284 = mul nsw i32 0, %conv283
  %xor285 = xor i32 %xor278, %mul284
  %xor286 = xor i32 %xor261, %xor285
  %72 = load i8, i8* %d, align 1
  %conv287 = zext i8 %72 to i32
  %mul288 = mul nsw i32 1, %conv287
  %73 = load i8, i8* %d, align 1
  %call289 = call zeroext i8 @xtime(i8 zeroext %73) #15
  %conv290 = zext i8 %call289 to i32
  %mul291 = mul nsw i32 1, %conv290
  %xor292 = xor i32 %mul288, %mul291
  %74 = load i8, i8* %d, align 1
  %call293 = call zeroext i8 @xtime(i8 zeroext %74) #15
  %call294 = call zeroext i8 @xtime(i8 zeroext %call293) #15
  %conv295 = zext i8 %call294 to i32
  %mul296 = mul nsw i32 0, %conv295
  %xor297 = xor i32 %xor292, %mul296
  %75 = load i8, i8* %d, align 1
  %call298 = call zeroext i8 @xtime(i8 zeroext %75) #15
  %call299 = call zeroext i8 @xtime(i8 zeroext %call298) #15
  %call300 = call zeroext i8 @xtime(i8 zeroext %call299) #15
  %conv301 = zext i8 %call300 to i32
  %mul302 = mul nsw i32 1, %conv301
  %xor303 = xor i32 %xor297, %mul302
  %76 = load i8, i8* %d, align 1
  %call304 = call zeroext i8 @xtime(i8 zeroext %76) #15
  %call305 = call zeroext i8 @xtime(i8 zeroext %call304) #15
  %call306 = call zeroext i8 @xtime(i8 zeroext %call305) #15
  %call307 = call zeroext i8 @xtime(i8 zeroext %call306) #15
  %conv308 = zext i8 %call307 to i32
  %mul309 = mul nsw i32 0, %conv308
  %xor310 = xor i32 %xor303, %mul309
  %xor311 = xor i32 %xor286, %xor310
  %conv312 = trunc i32 %xor311 to i8
  %77 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %78 = load i32, i32* %i, align 4
  %idxprom313 = sext i32 %78 to i64
  %arrayidx314 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %77, i64 0, i64 %idxprom313
  %arrayidx315 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx314, i64 0, i64 2
  store i8 %conv312, i8* %arrayidx315, align 1
  %79 = load i8, i8* %a, align 1
  %conv316 = zext i8 %79 to i32
  %mul317 = mul nsw i32 1, %conv316
  %80 = load i8, i8* %a, align 1
  %call318 = call zeroext i8 @xtime(i8 zeroext %80) #15
  %conv319 = zext i8 %call318 to i32
  %mul320 = mul nsw i32 1, %conv319
  %xor321 = xor i32 %mul317, %mul320
  %81 = load i8, i8* %a, align 1
  %call322 = call zeroext i8 @xtime(i8 zeroext %81) #15
  %call323 = call zeroext i8 @xtime(i8 zeroext %call322) #15
  %conv324 = zext i8 %call323 to i32
  %mul325 = mul nsw i32 0, %conv324
  %xor326 = xor i32 %xor321, %mul325
  %82 = load i8, i8* %a, align 1
  %call327 = call zeroext i8 @xtime(i8 zeroext %82) #15
  %call328 = call zeroext i8 @xtime(i8 zeroext %call327) #15
  %call329 = call zeroext i8 @xtime(i8 zeroext %call328) #15
  %conv330 = zext i8 %call329 to i32
  %mul331 = mul nsw i32 1, %conv330
  %xor332 = xor i32 %xor326, %mul331
  %83 = load i8, i8* %a, align 1
  %call333 = call zeroext i8 @xtime(i8 zeroext %83) #15
  %call334 = call zeroext i8 @xtime(i8 zeroext %call333) #15
  %call335 = call zeroext i8 @xtime(i8 zeroext %call334) #15
  %call336 = call zeroext i8 @xtime(i8 zeroext %call335) #15
  %conv337 = zext i8 %call336 to i32
  %mul338 = mul nsw i32 0, %conv337
  %xor339 = xor i32 %xor332, %mul338
  %84 = load i8, i8* %b, align 1
  %conv340 = zext i8 %84 to i32
  %mul341 = mul nsw i32 1, %conv340
  %85 = load i8, i8* %b, align 1
  %call342 = call zeroext i8 @xtime(i8 zeroext %85) #15
  %conv343 = zext i8 %call342 to i32
  %mul344 = mul nsw i32 0, %conv343
  %xor345 = xor i32 %mul341, %mul344
  %86 = load i8, i8* %b, align 1
  %call346 = call zeroext i8 @xtime(i8 zeroext %86) #15
  %call347 = call zeroext i8 @xtime(i8 zeroext %call346) #15
  %conv348 = zext i8 %call347 to i32
  %mul349 = mul nsw i32 1, %conv348
  %xor350 = xor i32 %xor345, %mul349
  %87 = load i8, i8* %b, align 1
  %call351 = call zeroext i8 @xtime(i8 zeroext %87) #15
  %call352 = call zeroext i8 @xtime(i8 zeroext %call351) #15
  %call353 = call zeroext i8 @xtime(i8 zeroext %call352) #15
  %conv354 = zext i8 %call353 to i32
  %mul355 = mul nsw i32 1, %conv354
  %xor356 = xor i32 %xor350, %mul355
  %88 = load i8, i8* %b, align 1
  %call357 = call zeroext i8 @xtime(i8 zeroext %88) #15
  %call358 = call zeroext i8 @xtime(i8 zeroext %call357) #15
  %call359 = call zeroext i8 @xtime(i8 zeroext %call358) #15
  %call360 = call zeroext i8 @xtime(i8 zeroext %call359) #15
  %conv361 = zext i8 %call360 to i32
  %mul362 = mul nsw i32 0, %conv361
  %xor363 = xor i32 %xor356, %mul362
  %xor364 = xor i32 %xor339, %xor363
  %89 = load i8, i8* %c, align 1
  %conv365 = zext i8 %89 to i32
  %mul366 = mul nsw i32 1, %conv365
  %90 = load i8, i8* %c, align 1
  %call367 = call zeroext i8 @xtime(i8 zeroext %90) #15
  %conv368 = zext i8 %call367 to i32
  %mul369 = mul nsw i32 0, %conv368
  %xor370 = xor i32 %mul366, %mul369
  %91 = load i8, i8* %c, align 1
  %call371 = call zeroext i8 @xtime(i8 zeroext %91) #15
  %call372 = call zeroext i8 @xtime(i8 zeroext %call371) #15
  %conv373 = zext i8 %call372 to i32
  %mul374 = mul nsw i32 0, %conv373
  %xor375 = xor i32 %xor370, %mul374
  %92 = load i8, i8* %c, align 1
  %call376 = call zeroext i8 @xtime(i8 zeroext %92) #15
  %call377 = call zeroext i8 @xtime(i8 zeroext %call376) #15
  %call378 = call zeroext i8 @xtime(i8 zeroext %call377) #15
  %conv379 = zext i8 %call378 to i32
  %mul380 = mul nsw i32 1, %conv379
  %xor381 = xor i32 %xor375, %mul380
  %93 = load i8, i8* %c, align 1
  %call382 = call zeroext i8 @xtime(i8 zeroext %93) #15
  %call383 = call zeroext i8 @xtime(i8 zeroext %call382) #15
  %call384 = call zeroext i8 @xtime(i8 zeroext %call383) #15
  %call385 = call zeroext i8 @xtime(i8 zeroext %call384) #15
  %conv386 = zext i8 %call385 to i32
  %mul387 = mul nsw i32 0, %conv386
  %xor388 = xor i32 %xor381, %mul387
  %xor389 = xor i32 %xor364, %xor388
  %94 = load i8, i8* %d, align 1
  %conv390 = zext i8 %94 to i32
  %mul391 = mul nsw i32 0, %conv390
  %95 = load i8, i8* %d, align 1
  %call392 = call zeroext i8 @xtime(i8 zeroext %95) #15
  %conv393 = zext i8 %call392 to i32
  %mul394 = mul nsw i32 1, %conv393
  %xor395 = xor i32 %mul391, %mul394
  %96 = load i8, i8* %d, align 1
  %call396 = call zeroext i8 @xtime(i8 zeroext %96) #15
  %call397 = call zeroext i8 @xtime(i8 zeroext %call396) #15
  %conv398 = zext i8 %call397 to i32
  %mul399 = mul nsw i32 1, %conv398
  %xor400 = xor i32 %xor395, %mul399
  %97 = load i8, i8* %d, align 1
  %call401 = call zeroext i8 @xtime(i8 zeroext %97) #15
  %call402 = call zeroext i8 @xtime(i8 zeroext %call401) #15
  %call403 = call zeroext i8 @xtime(i8 zeroext %call402) #15
  %conv404 = zext i8 %call403 to i32
  %mul405 = mul nsw i32 1, %conv404
  %xor406 = xor i32 %xor400, %mul405
  %98 = load i8, i8* %d, align 1
  %call407 = call zeroext i8 @xtime(i8 zeroext %98) #15
  %call408 = call zeroext i8 @xtime(i8 zeroext %call407) #15
  %call409 = call zeroext i8 @xtime(i8 zeroext %call408) #15
  %call410 = call zeroext i8 @xtime(i8 zeroext %call409) #15
  %conv411 = zext i8 %call410 to i32
  %mul412 = mul nsw i32 0, %conv411
  %xor413 = xor i32 %xor406, %mul412
  %xor414 = xor i32 %xor389, %xor413
  %conv415 = trunc i32 %xor414 to i8
  %99 = load [4 x [4 x i8]]*, [4 x [4 x i8]]** @state.155, align 8
  %100 = load i32, i32* %i, align 4
  %idxprom416 = sext i32 %100 to i64
  %arrayidx417 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %99, i64 0, i64 %idxprom416
  %arrayidx418 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx417, i64 0, i64 3
  store i8 %conv415, i8* %arrayidx418, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %101 = load i32, i32* %i, align 4
  %inc = add nsw i32 %101, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @getSBoxInvert(i8 zeroext %num) #6 {
entry:
  %num.addr = alloca i8, align 1
  store i8 %num, i8* %num.addr, align 1
  %0 = load i8, i8* %num.addr, align 1
  %idxprom = zext i8 %0 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @rsbox, i64 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1
  ret i8 %1
}

; Function Attrs: noinline nounwind optnone uwtable
define void @AES128_CBC_encrypt_buffer(i8* %output, i8* %input, i32 %length, i8* %key, i8* %iv) #6 {
entry:
  %output.addr = alloca i8*, align 8
  %input.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %key.addr = alloca i8*, align 8
  %iv.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  %remainders = alloca i8, align 1
  store i8* %output, i8** %output.addr, align 8
  store i8* %input, i8** %input.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i8* %key, i8** %key.addr, align 8
  store i8* %iv, i8** %iv.addr, align 8
  %0 = load i32, i32* %length.addr, align 4
  %rem = urem i32 %0, 16
  %conv = trunc i32 %rem to i8
  store i8 %conv, i8* %remainders, align 1
  %1 = load i8*, i8** %output.addr, align 8
  %2 = load i8*, i8** %input.addr, align 8
  call void @BlockCopy(i8* %1, i8* %2) #15
  %3 = load i8*, i8** %output.addr, align 8
  %4 = bitcast i8* %3 to [4 x [4 x i8]]*
  store [4 x [4 x i8]]* %4, [4 x [4 x i8]]** @state.155, align 8
  %5 = load i8*, i8** %key.addr, align 8
  %cmp = icmp ne i8* null, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i8*, i8** %key.addr, align 8
  store i8* %6, i8** @Key, align 8
  call void @KeyExpansion() #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i8*, i8** %iv.addr, align 8
  %cmp2 = icmp ne i8* %7, null
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %8 = load i8*, i8** %iv.addr, align 8
  store i8* %8, i8** @Iv, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end5
  %9 = load i64, i64* %i, align 8
  %10 = load i32, i32* %length.addr, align 4
  %conv6 = zext i32 %10 to i64
  %cmp7 = icmp ult i64 %9, %conv6
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i8*, i8** %input.addr, align 8
  call void @XorWithIv(i8* %11) #15
  %12 = load i8*, i8** %output.addr, align 8
  %13 = load i8*, i8** %input.addr, align 8
  call void @BlockCopy(i8* %12, i8* %13) #15
  %14 = load i8*, i8** %output.addr, align 8
  %15 = bitcast i8* %14 to [4 x [4 x i8]]*
  store [4 x [4 x i8]]* %15, [4 x [4 x i8]]** @state.155, align 8
  call void @Cipher() #15
  %16 = load i8*, i8** %output.addr, align 8
  store i8* %16, i8** @Iv, align 8
  %17 = load i8*, i8** %input.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 16
  store i8* %add.ptr, i8** %input.addr, align 8
  %18 = load i8*, i8** %output.addr, align 8
  %add.ptr9 = getelementptr inbounds i8, i8* %18, i64 16
  store i8* %add.ptr9, i8** %output.addr, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i64, i64* %i, align 8
  %add = add i64 %19, 16
  store i64 %add, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i8, i8* %remainders, align 1
  %tobool = icmp ne i8 %20, 0
  br i1 %tobool, label %if.then10, label %if.end15

if.then10:                                        ; preds = %for.end
  %21 = load i8*, i8** %output.addr, align 8
  %22 = load i8*, i8** %input.addr, align 8
  call void @BlockCopy(i8* %21, i8* %22) #15
  %23 = load i8*, i8** %output.addr, align 8
  %24 = load i8, i8* %remainders, align 1
  %conv11 = zext i8 %24 to i32
  %idx.ext = sext i32 %conv11 to i64
  %add.ptr12 = getelementptr inbounds i8, i8* %23, i64 %idx.ext
  %25 = load i8, i8* %remainders, align 1
  %conv13 = zext i8 %25 to i32
  %sub = sub nsw i32 16, %conv13
  %conv14 = sext i32 %sub to i64
  %call = call i8* @memset(i8* %add.ptr12, i32 0, i64 %conv14) #19
  %26 = load i8*, i8** %output.addr, align 8
  %27 = bitcast i8* %26 to [4 x [4 x i8]]*
  store [4 x [4 x i8]]* %27, [4 x [4 x i8]]** @state.155, align 8
  call void @Cipher() #15
  br label %if.end15

if.end15:                                         ; preds = %if.then10, %for.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @XorWithIv(i8* %buf) #6 {
entry:
  %buf.addr = alloca i8*, align 8
  %i = alloca i8, align 1
  store i8* %buf, i8** %buf.addr, align 8
  store i8 0, i8* %i, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8, i8* %i, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp slt i32 %conv, 16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** @Iv, align 8
  %2 = load i8, i8* %i, align 1
  %idxprom = zext i8 %2 to i64
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv2 = zext i8 %3 to i32
  %4 = load i8*, i8** %buf.addr, align 8
  %5 = load i8, i8* %i, align 1
  %idxprom3 = zext i8 %5 to i64
  %arrayidx4 = getelementptr inbounds i8, i8* %4, i64 %idxprom3
  %6 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %6 to i32
  %xor = xor i32 %conv5, %conv2
  %conv6 = trunc i32 %xor to i8
  store i8 %conv6, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i8, i8* %i, align 1
  %inc = add i8 %7, 1
  store i8 %inc, i8* %i, align 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @AES128_CBC_decrypt_buffer(i8* %output, i8* %input, i32 %length, i8* %key, i8* %iv) #6 {
entry:
  %output.addr = alloca i8*, align 8
  %input.addr = alloca i8*, align 8
  %length.addr = alloca i32, align 4
  %key.addr = alloca i8*, align 8
  %iv.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  %remainders = alloca i8, align 1
  store i8* %output, i8** %output.addr, align 8
  store i8* %input, i8** %input.addr, align 8
  store i32 %length, i32* %length.addr, align 4
  store i8* %key, i8** %key.addr, align 8
  store i8* %iv, i8** %iv.addr, align 8
  %0 = load i32, i32* %length.addr, align 4
  %rem = urem i32 %0, 16
  %conv = trunc i32 %rem to i8
  store i8 %conv, i8* %remainders, align 1
  %1 = load i8*, i8** %output.addr, align 8
  %2 = load i8*, i8** %input.addr, align 8
  call void @BlockCopy(i8* %1, i8* %2) #15
  %3 = load i8*, i8** %output.addr, align 8
  %4 = bitcast i8* %3 to [4 x [4 x i8]]*
  store [4 x [4 x i8]]* %4, [4 x [4 x i8]]** @state.155, align 8
  %5 = load i8*, i8** %key.addr, align 8
  %cmp = icmp ne i8* null, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i8*, i8** %key.addr, align 8
  store i8* %6, i8** @Key, align 8
  call void @KeyExpansion() #15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i8*, i8** %iv.addr, align 8
  %cmp2 = icmp ne i8* %7, null
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %8 = load i8*, i8** %iv.addr, align 8
  store i8* %8, i8** @Iv, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end5
  %9 = load i64, i64* %i, align 8
  %10 = load i32, i32* %length.addr, align 4
  %conv6 = zext i32 %10 to i64
  %cmp7 = icmp ult i64 %9, %conv6
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i8*, i8** %output.addr, align 8
  %12 = load i8*, i8** %input.addr, align 8
  call void @BlockCopy(i8* %11, i8* %12) #15
  %13 = load i8*, i8** %output.addr, align 8
  %14 = bitcast i8* %13 to [4 x [4 x i8]]*
  store [4 x [4 x i8]]* %14, [4 x [4 x i8]]** @state.155, align 8
  call void @InvCipher() #15
  %15 = load i8*, i8** %output.addr, align 8
  call void @XorWithIv(i8* %15) #15
  %16 = load i8*, i8** %input.addr, align 8
  store i8* %16, i8** @Iv, align 8
  %17 = load i8*, i8** %input.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 16
  store i8* %add.ptr, i8** %input.addr, align 8
  %18 = load i8*, i8** %output.addr, align 8
  %add.ptr9 = getelementptr inbounds i8, i8* %18, i64 16
  store i8* %add.ptr9, i8** %output.addr, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i64, i64* %i, align 8
  %add = add i64 %19, 16
  store i64 %add, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i8, i8* %remainders, align 1
  %tobool = icmp ne i8 %20, 0
  br i1 %tobool, label %if.then10, label %if.end15

if.then10:                                        ; preds = %for.end
  %21 = load i8*, i8** %output.addr, align 8
  %22 = load i8*, i8** %input.addr, align 8
  call void @BlockCopy(i8* %21, i8* %22) #15
  %23 = load i8*, i8** %output.addr, align 8
  %24 = load i8, i8* %remainders, align 1
  %conv11 = zext i8 %24 to i32
  %idx.ext = sext i32 %conv11 to i64
  %add.ptr12 = getelementptr inbounds i8, i8* %23, i64 %idx.ext
  %25 = load i8, i8* %remainders, align 1
  %conv13 = zext i8 %25 to i32
  %sub = sub nsw i32 16, %conv13
  %conv14 = sext i32 %sub to i64
  %call = call i8* @memset(i8* %add.ptr12, i32 0, i64 %conv14) #19
  %26 = load i8*, i8** %output.addr, align 8
  %27 = bitcast i8* %26 to [4 x [4 x i8]]*
  store [4 x [4 x i8]]* %27, [4 x [4 x i8]]** @state.155, align 8
  call void @InvCipher() #15
  br label %if.end15

if.end15:                                         ; preds = %if.then10, %for.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @klee_div_zero_check(i64 %z) #0 !dbg !10261 {
entry:
  %z.addr = alloca i64, align 8
  store i64 %z, i64* %z.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %z.addr, metadata !10266, metadata !DIExpression()), !dbg !10267
  %0 = load i64, i64* %z.addr, align 8, !dbg !10268
  %cmp = icmp eq i64 %0, 0, !dbg !10270
  br i1 %cmp, label %if.then, label %if.end, !dbg !10271

if.then:                                          ; preds = %entry
  call void @klee_report_error(i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.158, i64 0, i64 0), i32 14, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1.159, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2.160, i64 0, i64 0)) #14, !dbg !10272
  unreachable, !dbg !10272

if.end:                                           ; preds = %entry
  ret void, !dbg !10273
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @klee_overshift_check(i64 %bitWidth, i64 %shift) #0 !dbg !10274 {
entry:
  %bitWidth.addr = alloca i64, align 8
  %shift.addr = alloca i64, align 8
  store i64 %bitWidth, i64* %bitWidth.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bitWidth.addr, metadata !10279, metadata !DIExpression()), !dbg !10280
  store i64 %shift, i64* %shift.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %shift.addr, metadata !10281, metadata !DIExpression()), !dbg !10282
  %0 = load i64, i64* %shift.addr, align 8, !dbg !10283
  %1 = load i64, i64* %bitWidth.addr, align 8, !dbg !10285
  %cmp = icmp uge i64 %0, %1, !dbg !10286
  br i1 %cmp, label %if.then, label %if.end, !dbg !10287

if.then:                                          ; preds = %entry
  call void @klee_report_error(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.163, i64 0, i64 0), i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.164, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2.165, i64 0, i64 0)) #14, !dbg !10288
  unreachable, !dbg !10288

if.end:                                           ; preds = %entry
  ret void, !dbg !10290
}

define internal void @klee.ctor_stub() {
entry:
  call void @cgc_initialize_flag_page()
  ret void
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noinline nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn }
attributes #15 = { nobuiltin }
attributes #16 = { nobuiltin noreturn }
attributes #17 = { readnone }
attributes #18 = { noreturn nounwind }
attributes #19 = { nobuiltin nounwind }
attributes #20 = { nobuiltin nounwind readonly }
attributes #21 = { nobuiltin noreturn nounwind }
attributes #22 = { nobuiltin nounwind readnone }
attributes #23 = { nounwind readnone }
attributes #24 = { nounwind readonly }

!llvm.dbg.cu = !{!290, !294, !296, !2, !298, !27, !42, !301, !65, !304, !74, !90, !121, !309, !312, !217, !345, !386, !388, !390, !392}
!llvm.module.flags = !{!394, !395, !396, !397}
!llvm.ident = !{!398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398, !398}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "lookaside", scope: !2, file: !9, line: 43, type: !22, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !21, nameTableKind: None)
!3 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/challenges/3D_Image_Toolkit/lib/malloc.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/build64/challenges/3D_Image_Toolkit")
!4 = !{}
!5 = !{!6, !8, !19}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "pmeta", file: !9, line: 36, baseType: !10)
!9 = !DIFile(filename: "challenges/3D_Image_Toolkit/lib/malloc.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "meta", file: !9, line: 32, size: 192, elements: !12)
!12 = !{!13, !17, !18}
!13 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !11, file: !9, line: 33, baseType: !14, size: 64)
!14 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgc_size_t", file: !15, line: 19, baseType: !16)
!15 = !DIFile(filename: "include/libcgc.h", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!16 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !11, file: !9, line: 34, baseType: !10, size: 64, offset: 64)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !11, file: !9, line: 35, baseType: !10, size: 64, offset: 128)
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64)
!20 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!21 = !{!0}
!22 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 8192, elements: !23)
!23 = !{!24}
!24 = !DISubrange(count: 128)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "state", scope: !27, file: !36, line: 36, type: !37, isLocal: false, isDefinition: true)
!27 = distinct !DICompileUnit(language: DW_LANG_C99, file: !28, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !29, globals: !33, nameTableKind: None)
!28 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/challenges/3D_Image_Toolkit/lib/prng.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/build64/challenges/3D_Image_Toolkit")
!29 = !{!7, !30}
!30 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !31, line: 31, baseType: !32)
!31 = !DIFile(filename: "challenges/3D_Image_Toolkit/lib/cgc_stdint.h", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!32 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!33 = !{!25, !34}
!34 = !DIGlobalVariableExpression(var: !35, expr: !DIExpression())
!35 = distinct !DIGlobalVariable(name: "state_n", scope: !27, file: !36, line: 37, type: !30, isLocal: false, isDefinition: true)
!36 = !DIFile(filename: "challenges/3D_Image_Toolkit/lib/prng.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!37 = !DICompositeType(tag: DW_TAG_array_type, baseType: !30, size: 1024, elements: !38)
!38 = !{!39}
!39 = !DISubrange(count: 32)
!40 = !DIGlobalVariableExpression(var: !41, expr: !DIExpression())
!41 = distinct !DIGlobalVariable(name: "g_putcBuffer", scope: !42, file: !49, line: 75, type: !48, isLocal: false, isDefinition: true)
!42 = distinct !DICompileUnit(language: DW_LANG_C99, file: !43, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !44, globals: !62, nameTableKind: None)
!43 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/challenges/3D_Image_Toolkit/lib/stdio.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/build64/challenges/3D_Image_Toolkit")
!44 = !{!45, !20, !19, !47, !7, !30, !59, !61}
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64)
!46 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "tBufferPutcData", file: !49, line: 73, baseType: !50)
!49 = !DIFile(filename: "challenges/3D_Image_Toolkit/lib/stdio.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!50 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BUFFER_PUTC_DATA", file: !49, line: 67, size: 2064, elements: !51)
!51 = !{!52, !56}
!52 = !DIDerivedType(tag: DW_TAG_member, name: "szBuffer", scope: !50, file: !49, line: 69, baseType: !53, size: 2048)
!53 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 2048, elements: !54)
!54 = !{!55}
!55 = !DISubrange(count: 256)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "bufferPos", scope: !50, file: !49, line: 70, baseType: !57, size: 16, offset: 2048)
!57 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !31, line: 33, baseType: !58)
!58 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!59 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !31, line: 35, baseType: !60)
!60 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!61 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!62 = !{!40}
!63 = !DIGlobalVariableExpression(var: !64, expr: !DIExpression())
!64 = distinct !DIGlobalVariable(name: "StrtokNext", scope: !65, file: !71, line: 83, type: !19, isLocal: false, isDefinition: true)
!65 = distinct !DICompileUnit(language: DW_LANG_C99, file: !66, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !67, globals: !70, nameTableKind: None)
!66 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/challenges/3D_Image_Toolkit/lib/string.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/build64/challenges/3D_Image_Toolkit")
!67 = !{!19, !59, !68, !69}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !59, size: 64)
!70 = !{!63}
!71 = !DIFile(filename: "challenges/3D_Image_Toolkit/lib/string.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!72 = !DIGlobalVariableExpression(var: !73, expr: !DIExpression())
!73 = distinct !DIGlobalVariable(name: "red_blue", scope: !74, file: !81, line: 41, type: !85, isLocal: false, isDefinition: true)
!74 = distinct !DICompileUnit(language: DW_LANG_C99, file: !75, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !76, globals: !78, nameTableKind: None)
!75 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/challenges/3D_Image_Toolkit/src/compress.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/build64/challenges/3D_Image_Toolkit")
!76 = !{!77}
!77 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!78 = !{!72, !79}
!79 = !DIGlobalVariableExpression(var: !80, expr: !DIExpression())
!80 = distinct !DIGlobalVariable(name: "green", scope: !74, file: !81, line: 42, type: !82, isLocal: false, isDefinition: true)
!81 = !DIFile(filename: "challenges/3D_Image_Toolkit/src/compress.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!82 = !DICompositeType(tag: DW_TAG_array_type, baseType: !77, size: 128, elements: !83)
!83 = !{!84}
!84 = !DISubrange(count: 4)
!85 = !DICompositeType(tag: DW_TAG_array_type, baseType: !77, size: 256, elements: !86)
!86 = !{!87}
!87 = !DISubrange(count: 8)
!88 = !DIGlobalVariableExpression(var: !89, expr: !DIExpression())
!89 = distinct !DIGlobalVariable(name: "menuSelections", scope: !90, file: !94, line: 47, type: !93, isLocal: false, isDefinition: true)
!90 = distinct !DICompileUnit(language: DW_LANG_C99, file: !91, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !92, retainedTypes: !113, globals: !116, nameTableKind: None)
!91 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/challenges/3D_Image_Toolkit/src/main.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/build64/challenges/3D_Image_Toolkit")
!92 = !{!93, !108}
!93 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !94, line: 34, baseType: !32, size: 32, elements: !95)
!94 = !DIFile(filename: "challenges/3D_Image_Toolkit/src/main.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!95 = !{!96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107}
!96 = !DIEnumerator(name: "NO_FUNC", value: 0, isUnsigned: true)
!97 = !DIEnumerator(name: "NEW_FILE", value: 1, isUnsigned: true)
!98 = !DIEnumerator(name: "CHECK_FILE", value: 2, isUnsigned: true)
!99 = !DIEnumerator(name: "SKEW_IMAGE", value: 3, isUnsigned: true)
!100 = !DIEnumerator(name: "ROTATE_IMAGE", value: 4, isUnsigned: true)
!101 = !DIEnumerator(name: "BRIGHTNESS", value: 5, isUnsigned: true)
!102 = !DIEnumerator(name: "OPACITY", value: 6, isUnsigned: true)
!103 = !DIEnumerator(name: "COMPRESS", value: 7, isUnsigned: true)
!104 = !DIEnumerator(name: "DECOMPRESS", value: 8, isUnsigned: true)
!105 = !DIEnumerator(name: "SHOW_PIXEL", value: 9, isUnsigned: true)
!106 = !DIEnumerator(name: "SCALE_IMAGE", value: 10, isUnsigned: true)
!107 = !DIEnumerator(name: "EXIT", value: 11, isUnsigned: true)
!108 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !94, line: 49, baseType: !32, size: 32, elements: !109)
!109 = !{!110, !111, !112}
!110 = !DIEnumerator(name: "X", value: 0, isUnsigned: true)
!111 = !DIEnumerator(name: "Y", value: 1, isUnsigned: true)
!112 = !DIEnumerator(name: "Z", value: 2, isUnsigned: true)
!113 = !{!19, !114}
!114 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !31, line: 34, baseType: !115)
!115 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!116 = !{!88, !117}
!117 = !DIGlobalVariableExpression(var: !118, expr: !DIExpression())
!118 = distinct !DIGlobalVariable(name: "coords", scope: !90, file: !94, line: 53, type: !108, isLocal: false, isDefinition: true)
!119 = !DIGlobalVariableExpression(var: !120, expr: !DIExpression())
!120 = distinct !DIGlobalVariable(name: "__exe_env", scope: !121, file: !126, line: 37, type: !192, isLocal: false, isDefinition: true)
!121 = distinct !DICompileUnit(language: DW_LANG_C89, file: !122, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !123, nameTableKind: None)
!122 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/fd_init.c", directory: "/media/haoxin/SeagateData/haoxin-data/smu-research/klee/smu-build/runtime/POSIX")
!123 = !{!119, !124}
!124 = !DIGlobalVariableExpression(var: !125, expr: !DIExpression())
!125 = distinct !DIGlobalVariable(name: "__exe_fs", scope: !121, file: !126, line: 24, type: !127, isLocal: false, isDefinition: true)
!126 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/fd_init.c", directory: "")
!127 = !DIDerivedType(tag: DW_TAG_typedef, name: "exe_file_system_t", file: !128, line: 74, baseType: !129)
!128 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/fd.h", directory: "")
!129 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !128, line: 62, size: 832, elements: !130)
!130 = !{!131, !132, !180, !181, !182, !183, !184, !186, !187, !188, !189, !190, !191}
!131 = !DIDerivedType(tag: DW_TAG_member, name: "n_sym_files", scope: !129, file: !128, line: 63, baseType: !32, size: 32)
!132 = !DIDerivedType(tag: DW_TAG_member, name: "sym_stdin", scope: !129, file: !128, line: 64, baseType: !133, size: 64, offset: 64)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = !DIDerivedType(tag: DW_TAG_typedef, name: "exe_disk_file_t", file: !128, line: 44, baseType: !135)
!135 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !128, line: 40, size: 192, elements: !136)
!136 = !{!137, !138, !139}
!137 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !135, file: !128, line: 41, baseType: !32, size: 32)
!138 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !135, file: !128, line: 42, baseType: !19, size: 64, offset: 64)
!139 = !DIDerivedType(tag: DW_TAG_member, name: "stat", scope: !135, file: !128, line: 43, baseType: !140, size: 64, offset: 128)
!140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64)
!141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat64", file: !142, line: 119, size: 1152, elements: !143)
!142 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!143 = !{!144, !147, !149, !151, !153, !155, !157, !158, !159, !162, !164, !166, !174, !175, !176}
!144 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !141, file: !142, line: 121, baseType: !145, size: 64)
!145 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !146, line: 133, baseType: !16)
!146 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!147 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !141, file: !142, line: 123, baseType: !148, size: 64, offset: 64)
!148 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino64_t", file: !146, line: 137, baseType: !16)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !141, file: !142, line: 124, baseType: !150, size: 64, offset: 128)
!150 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !146, line: 139, baseType: !16)
!151 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !141, file: !142, line: 125, baseType: !152, size: 32, offset: 192)
!152 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !146, line: 138, baseType: !32)
!153 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !141, file: !142, line: 132, baseType: !154, size: 32, offset: 224)
!154 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !146, line: 134, baseType: !32)
!155 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !141, file: !142, line: 133, baseType: !156, size: 32, offset: 256)
!156 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !146, line: 135, baseType: !32)
!157 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !141, file: !142, line: 135, baseType: !77, size: 32, offset: 288)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !141, file: !142, line: 136, baseType: !145, size: 64, offset: 320)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !141, file: !142, line: 137, baseType: !160, size: 64, offset: 384)
!160 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !146, line: 140, baseType: !161)
!161 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !141, file: !142, line: 143, baseType: !163, size: 64, offset: 448)
!163 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !146, line: 162, baseType: !161)
!164 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !141, file: !142, line: 144, baseType: !165, size: 64, offset: 512)
!165 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt64_t", file: !146, line: 168, baseType: !161)
!166 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !141, file: !142, line: 152, baseType: !167, size: 128, offset: 576)
!167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !168, line: 9, size: 128, elements: !169)
!168 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!169 = !{!170, !172}
!170 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !167, file: !168, line: 11, baseType: !171, size: 64)
!171 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !146, line: 148, baseType: !161)
!172 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !167, file: !168, line: 12, baseType: !173, size: 64, offset: 64)
!173 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !146, line: 184, baseType: !161)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !141, file: !142, line: 153, baseType: !167, size: 128, offset: 704)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !141, file: !142, line: 154, baseType: !167, size: 128, offset: 832)
!176 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !141, file: !142, line: 164, baseType: !177, size: 192, offset: 960)
!177 = !DICompositeType(tag: DW_TAG_array_type, baseType: !173, size: 192, elements: !178)
!178 = !{!179}
!179 = !DISubrange(count: 3)
!180 = !DIDerivedType(tag: DW_TAG_member, name: "sym_stdout", scope: !129, file: !128, line: 64, baseType: !133, size: 64, offset: 128)
!181 = !DIDerivedType(tag: DW_TAG_member, name: "stdout_writes", scope: !129, file: !128, line: 65, baseType: !32, size: 32, offset: 192)
!182 = !DIDerivedType(tag: DW_TAG_member, name: "sym_files", scope: !129, file: !128, line: 66, baseType: !133, size: 64, offset: 256)
!183 = !DIDerivedType(tag: DW_TAG_member, name: "max_failures", scope: !129, file: !128, line: 69, baseType: !32, size: 32, offset: 320)
!184 = !DIDerivedType(tag: DW_TAG_member, name: "read_fail", scope: !129, file: !128, line: 72, baseType: !185, size: 64, offset: 384)
!185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !77, size: 64)
!186 = !DIDerivedType(tag: DW_TAG_member, name: "write_fail", scope: !129, file: !128, line: 72, baseType: !185, size: 64, offset: 448)
!187 = !DIDerivedType(tag: DW_TAG_member, name: "close_fail", scope: !129, file: !128, line: 72, baseType: !185, size: 64, offset: 512)
!188 = !DIDerivedType(tag: DW_TAG_member, name: "ftruncate_fail", scope: !129, file: !128, line: 72, baseType: !185, size: 64, offset: 576)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "getcwd_fail", scope: !129, file: !128, line: 72, baseType: !185, size: 64, offset: 640)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "chmod_fail", scope: !129, file: !128, line: 73, baseType: !185, size: 64, offset: 704)
!191 = !DIDerivedType(tag: DW_TAG_member, name: "fchmod_fail", scope: !129, file: !128, line: 73, baseType: !185, size: 64, offset: 768)
!192 = !DIDerivedType(tag: DW_TAG_typedef, name: "exe_sym_env_t", file: !128, line: 89, baseType: !193)
!193 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !128, line: 81, size: 6272, elements: !194)
!194 = !{!195, !207, !209, !210}
!195 = !DIDerivedType(tag: DW_TAG_member, name: "fds", scope: !193, file: !128, line: 82, baseType: !196, size: 6144)
!196 = !DICompositeType(tag: DW_TAG_array_type, baseType: !197, size: 6144, elements: !38)
!197 = !DIDerivedType(tag: DW_TAG_typedef, name: "exe_file_t", file: !128, line: 60, baseType: !198)
!198 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !128, line: 53, size: 192, elements: !199)
!199 = !{!200, !201, !202, !206}
!200 = !DIDerivedType(tag: DW_TAG_member, name: "fd", scope: !198, file: !128, line: 54, baseType: !77, size: 32)
!201 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !198, file: !128, line: 55, baseType: !32, size: 32, offset: 32)
!202 = !DIDerivedType(tag: DW_TAG_member, name: "off", scope: !198, file: !128, line: 58, baseType: !203, size: 64, offset: 64)
!203 = !DIDerivedType(tag: DW_TAG_typedef, name: "off64_t", file: !204, line: 93, baseType: !205)
!204 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/types.h", directory: "")
!205 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !146, line: 141, baseType: !161)
!206 = !DIDerivedType(tag: DW_TAG_member, name: "dfile", scope: !198, file: !128, line: 59, baseType: !133, size: 64, offset: 128)
!207 = !DIDerivedType(tag: DW_TAG_member, name: "umask", scope: !193, file: !128, line: 83, baseType: !208, size: 32, offset: 6144)
!208 = !DIDerivedType(tag: DW_TAG_typedef, name: "mode_t", file: !204, line: 70, baseType: !152)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !193, file: !128, line: 84, baseType: !32, size: 32, offset: 6176)
!210 = !DIDerivedType(tag: DW_TAG_member, name: "save_all_writes", scope: !193, file: !128, line: 88, baseType: !77, size: 32, offset: 6208)
!211 = !DIGlobalVariableExpression(var: !212, expr: !DIExpression())
!212 = distinct !DIGlobalVariable(name: "n_calls", scope: !213, file: !214, line: 297, type: !77, isLocal: true, isDefinition: true)
!213 = distinct !DISubprogram(name: "close", scope: !214, file: !214, line: 296, type: !215, scopeLine: 296, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!214 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/fd.c", directory: "")
!215 = !DISubroutineType(types: !216)
!216 = !{!77, !77}
!217 = distinct !DICompileUnit(language: DW_LANG_C89, file: !218, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !219, globals: !253, nameTableKind: None)
!218 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/fd.c", directory: "/media/haoxin/SeagateData/haoxin-data/smu-research/klee/smu-build/runtime/POSIX")
!219 = !{!161, !7, !203, !16, !220, !19, !229, !77, !20}
!220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent64", file: !222, line: 37, size: 2240, elements: !223)
!222 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/dirent.h", directory: "")
!223 = !{!224, !225, !226, !227, !228}
!224 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !221, file: !222, line: 39, baseType: !148, size: 64)
!225 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !221, file: !222, line: 40, baseType: !205, size: 64, offset: 64)
!226 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !221, file: !222, line: 41, baseType: !58, size: 16, offset: 128)
!227 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !221, file: !222, line: 42, baseType: !60, size: 8, offset: 144)
!228 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !221, file: !222, line: 43, baseType: !53, size: 2048, offset: 152)
!229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !230, size: 64)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !142, line: 46, size: 1152, elements: !231)
!231 = !{!232, !233, !235, !236, !237, !238, !239, !240, !241, !242, !243, !245, !250, !251, !252}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !230, file: !142, line: 48, baseType: !145, size: 64)
!233 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !230, file: !142, line: 53, baseType: !234, size: 64, offset: 64)
!234 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !146, line: 136, baseType: !16)
!235 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !230, file: !142, line: 61, baseType: !150, size: 64, offset: 128)
!236 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !230, file: !142, line: 62, baseType: !152, size: 32, offset: 192)
!237 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !230, file: !142, line: 64, baseType: !154, size: 32, offset: 224)
!238 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !230, file: !142, line: 65, baseType: !156, size: 32, offset: 256)
!239 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !230, file: !142, line: 67, baseType: !77, size: 32, offset: 288)
!240 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !230, file: !142, line: 69, baseType: !145, size: 64, offset: 320)
!241 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !230, file: !142, line: 74, baseType: !160, size: 64, offset: 384)
!242 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !230, file: !142, line: 78, baseType: !163, size: 64, offset: 448)
!243 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !230, file: !142, line: 80, baseType: !244, size: 64, offset: 512)
!244 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !146, line: 167, baseType: !161)
!245 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !230, file: !142, line: 91, baseType: !246, size: 128, offset: 576)
!246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !168, line: 9, size: 128, elements: !247)
!247 = !{!248, !249}
!248 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !246, file: !168, line: 11, baseType: !171, size: 64)
!249 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !246, file: !168, line: 12, baseType: !173, size: 64, offset: 64)
!250 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !230, file: !142, line: 92, baseType: !246, size: 128, offset: 704)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !230, file: !142, line: 93, baseType: !246, size: 128, offset: 832)
!252 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !230, file: !142, line: 106, baseType: !177, size: 192, offset: 960)
!253 = !{!211, !254, !263, !268, !275, !280, !285}
!254 = !DIGlobalVariableExpression(var: !255, expr: !DIExpression())
!255 = distinct !DIGlobalVariable(name: "n_calls", scope: !256, file: !214, line: 329, type: !77, isLocal: true, isDefinition: true)
!256 = distinct !DISubprogram(name: "read", scope: !214, file: !214, line: 328, type: !257, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!257 = !DISubroutineType(types: !258)
!258 = !{!259, !77, !7, !261}
!259 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !204, line: 109, baseType: !260)
!260 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !146, line: 181, baseType: !161)
!261 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !262, line: 46, baseType: !16)
!262 = !DIFile(filename: "dut-research/compilers/llvm-9.0/llvm-src/build/lib/clang/9.0.0/include/stddef.h", directory: "/media/haoxin/SeagateData/haoxin-data")
!263 = !DIGlobalVariableExpression(var: !264, expr: !DIExpression())
!264 = distinct !DIGlobalVariable(name: "n_calls", scope: !265, file: !214, line: 395, type: !77, isLocal: true, isDefinition: true)
!265 = distinct !DISubprogram(name: "write", scope: !214, file: !214, line: 394, type: !266, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!266 = !DISubroutineType(types: !267)
!267 = !{!259, !77, !45, !261}
!268 = !DIGlobalVariableExpression(var: !269, expr: !DIExpression())
!269 = distinct !DIGlobalVariable(name: "n_calls", scope: !270, file: !214, line: 626, type: !77, isLocal: true, isDefinition: true)
!270 = distinct !DISubprogram(name: "chmod", scope: !214, file: !214, line: 625, type: !271, scopeLine: 625, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!271 = !DISubroutineType(types: !272)
!272 = !{!77, !273, !208}
!273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !274, size: 64)
!274 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !20)
!275 = !DIGlobalVariableExpression(var: !276, expr: !DIExpression())
!276 = distinct !DIGlobalVariable(name: "n_calls", scope: !277, file: !214, line: 645, type: !77, isLocal: true, isDefinition: true)
!277 = distinct !DISubprogram(name: "fchmod", scope: !214, file: !214, line: 644, type: !278, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!278 = !DISubroutineType(types: !279)
!279 = !{!77, !77, !208}
!280 = !DIGlobalVariableExpression(var: !281, expr: !DIExpression())
!281 = distinct !DIGlobalVariable(name: "n_calls", scope: !282, file: !214, line: 731, type: !77, isLocal: true, isDefinition: true)
!282 = distinct !DISubprogram(name: "__fd_ftruncate", scope: !214, file: !214, line: 730, type: !283, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!283 = !DISubroutineType(types: !284)
!284 = !{!77, !77, !203}
!285 = !DIGlobalVariableExpression(var: !286, expr: !DIExpression())
!286 = distinct !DIGlobalVariable(name: "n_calls", scope: !287, file: !214, line: 1307, type: !77, isLocal: true, isDefinition: true)
!287 = distinct !DISubprogram(name: "getcwd", scope: !214, file: !214, line: 1306, type: !288, scopeLine: 1306, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!288 = !DISubroutineType(types: !289)
!289 = !{!19, !19, !261}
!290 = distinct !DICompileUnit(language: DW_LANG_C89, file: !291, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !292, nameTableKind: None)
!291 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/klee_init_env.c", directory: "/media/haoxin/SeagateData/haoxin-data/smu-research/klee/smu-build/runtime/POSIX")
!292 = !{!293}
!293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!294 = distinct !DICompileUnit(language: DW_LANG_C99, file: !295, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!295 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/challenges/3D_Image_Toolkit/lib/ctype.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/build64/challenges/3D_Image_Toolkit")
!296 = distinct !DICompileUnit(language: DW_LANG_C99, file: !297, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!297 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/challenges/3D_Image_Toolkit/lib/input.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/build64/challenges/3D_Image_Toolkit")
!298 = distinct !DICompileUnit(language: DW_LANG_C99, file: !299, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !300, nameTableKind: None)
!299 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/challenges/3D_Image_Toolkit/lib/math.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/build64/challenges/3D_Image_Toolkit")
!300 = !{!61}
!301 = distinct !DICompileUnit(language: DW_LANG_C99, file: !302, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !303, nameTableKind: None)
!302 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/challenges/3D_Image_Toolkit/lib/stdlib.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/build64/challenges/3D_Image_Toolkit")
!303 = !{!68, !69, !16, !19}
!304 = distinct !DICompileUnit(language: DW_LANG_C99, file: !305, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !306, nameTableKind: None)
!305 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/challenges/3D_Image_Toolkit/src/3dc.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios/build64/challenges/3D_Image_Toolkit")
!306 = !{!307, !114, !59, !308, !61}
!307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64)
!308 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !31, line: 32, baseType: !77)
!309 = distinct !DICompileUnit(language: DW_LANG_C89, file: !310, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !311, nameTableKind: None)
!310 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/Intrinsic/klee_range.c", directory: "/media/haoxin/SeagateData/haoxin-data/smu-research/klee/smu-build/runtime/Intrinsic")
!311 = !{!32}
!312 = distinct !DICompileUnit(language: DW_LANG_C89, file: !313, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !314, nameTableKind: None)
!313 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/fd_64.c", directory: "/media/haoxin/SeagateData/haoxin-data/smu-research/klee/smu-build/runtime/POSIX")
!314 = !{!315, !337}
!315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !316, size: 64)
!316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat64", file: !142, line: 119, size: 1152, elements: !317)
!317 = !{!318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !334, !335, !336}
!318 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !316, file: !142, line: 121, baseType: !145, size: 64)
!319 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !316, file: !142, line: 123, baseType: !148, size: 64, offset: 64)
!320 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !316, file: !142, line: 124, baseType: !150, size: 64, offset: 128)
!321 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !316, file: !142, line: 125, baseType: !152, size: 32, offset: 192)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !316, file: !142, line: 132, baseType: !154, size: 32, offset: 224)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !316, file: !142, line: 133, baseType: !156, size: 32, offset: 256)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !316, file: !142, line: 135, baseType: !77, size: 32, offset: 288)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !316, file: !142, line: 136, baseType: !145, size: 64, offset: 320)
!326 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !316, file: !142, line: 137, baseType: !160, size: 64, offset: 384)
!327 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !316, file: !142, line: 143, baseType: !163, size: 64, offset: 448)
!328 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !316, file: !142, line: 144, baseType: !165, size: 64, offset: 512)
!329 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !316, file: !142, line: 152, baseType: !330, size: 128, offset: 576)
!330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !168, line: 9, size: 128, elements: !331)
!331 = !{!332, !333}
!332 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !330, file: !168, line: 11, baseType: !171, size: 64)
!333 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !330, file: !168, line: 12, baseType: !173, size: 64, offset: 64)
!334 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !316, file: !142, line: 153, baseType: !330, size: 128, offset: 704)
!335 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !316, file: !142, line: 154, baseType: !330, size: 128, offset: 832)
!336 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !316, file: !142, line: 164, baseType: !177, size: 192, offset: 960)
!337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !338, size: 64)
!338 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent64", file: !222, line: 37, size: 2240, elements: !339)
!339 = !{!340, !341, !342, !343, !344}
!340 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !338, file: !222, line: 39, baseType: !148, size: 64)
!341 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !338, file: !222, line: 40, baseType: !205, size: 64, offset: 64)
!342 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !338, file: !222, line: 41, baseType: !58, size: 16, offset: 128)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !338, file: !222, line: 42, baseType: !60, size: 8, offset: 144)
!344 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !338, file: !222, line: 43, baseType: !53, size: 2048, offset: 152)
!345 = distinct !DICompileUnit(language: DW_LANG_C89, file: !346, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !347, retainedTypes: !381, nameTableKind: None)
!346 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/stubs.c", directory: "/media/haoxin/SeagateData/haoxin-data/smu-research/klee/smu-build/runtime/POSIX")
!347 = !{!348, !354, !360}
!348 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !349, line: 52, baseType: !32, size: 32, elements: !350)
!349 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/waitflags.h", directory: "")
!350 = !{!351, !352, !353}
!351 = !DIEnumerator(name: "P_ALL", value: 0, isUnsigned: true)
!352 = !DIEnumerator(name: "P_PID", value: 1, isUnsigned: true)
!353 = !DIEnumerator(name: "P_PGID", value: 2, isUnsigned: true)
!354 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__priority_which", file: !355, line: 187, baseType: !32, size: 32, elements: !356)
!355 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/resource.h", directory: "")
!356 = !{!357, !358, !359}
!357 = !DIEnumerator(name: "PRIO_PROCESS", value: 0, isUnsigned: true)
!358 = !DIEnumerator(name: "PRIO_PGRP", value: 1, isUnsigned: true)
!359 = !DIEnumerator(name: "PRIO_USER", value: 2, isUnsigned: true)
!360 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__rlimit_resource", file: !355, line: 31, baseType: !32, size: 32, elements: !361)
!361 = !{!362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380}
!362 = !DIEnumerator(name: "RLIMIT_CPU", value: 0, isUnsigned: true)
!363 = !DIEnumerator(name: "RLIMIT_FSIZE", value: 1, isUnsigned: true)
!364 = !DIEnumerator(name: "RLIMIT_DATA", value: 2, isUnsigned: true)
!365 = !DIEnumerator(name: "RLIMIT_STACK", value: 3, isUnsigned: true)
!366 = !DIEnumerator(name: "RLIMIT_CORE", value: 4, isUnsigned: true)
!367 = !DIEnumerator(name: "__RLIMIT_RSS", value: 5, isUnsigned: true)
!368 = !DIEnumerator(name: "RLIMIT_NOFILE", value: 7, isUnsigned: true)
!369 = !DIEnumerator(name: "__RLIMIT_OFILE", value: 7, isUnsigned: true)
!370 = !DIEnumerator(name: "RLIMIT_AS", value: 9, isUnsigned: true)
!371 = !DIEnumerator(name: "__RLIMIT_NPROC", value: 6, isUnsigned: true)
!372 = !DIEnumerator(name: "__RLIMIT_MEMLOCK", value: 8, isUnsigned: true)
!373 = !DIEnumerator(name: "__RLIMIT_LOCKS", value: 10, isUnsigned: true)
!374 = !DIEnumerator(name: "__RLIMIT_SIGPENDING", value: 11, isUnsigned: true)
!375 = !DIEnumerator(name: "__RLIMIT_MSGQUEUE", value: 12, isUnsigned: true)
!376 = !DIEnumerator(name: "__RLIMIT_NICE", value: 13, isUnsigned: true)
!377 = !DIEnumerator(name: "__RLIMIT_RTPRIO", value: 14, isUnsigned: true)
!378 = !DIEnumerator(name: "__RLIMIT_RTTIME", value: 15, isUnsigned: true)
!379 = !DIEnumerator(name: "__RLIMIT_NLIMITS", value: 16, isUnsigned: true)
!380 = !DIEnumerator(name: "__RLIM_NLIMITS", value: 16, isUnsigned: true)
!381 = !{!382, !32, !385, !7}
!382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !383, size: 64)
!383 = !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !384, line: 194, flags: DIFlagFwdDecl)
!384 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/stubs.c", directory: "")
!385 = !DIDerivedType(tag: DW_TAG_typedef, name: "dev_t", file: !204, line: 60, baseType: !145)
!386 = distinct !DICompileUnit(language: DW_LANG_C89, file: !387, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!387 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/FreeStanding/memcpy.c", directory: "/media/haoxin/SeagateData/haoxin-data/smu-research/klee/smu-build/runtime/FreeStanding")
!388 = distinct !DICompileUnit(language: DW_LANG_C89, file: !389, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!389 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/FreeStanding/memset.c", directory: "/media/haoxin/SeagateData/haoxin-data/smu-research/klee/smu-build/runtime/FreeStanding")
!390 = distinct !DICompileUnit(language: DW_LANG_C89, file: !391, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!391 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/Intrinsic/klee_div_zero_check.c", directory: "/media/haoxin/SeagateData/haoxin-data/smu-research/klee/smu-build/runtime/Intrinsic")
!392 = distinct !DICompileUnit(language: DW_LANG_C89, file: !393, producer: "clang version 9.0.0 (tags/RELEASE_900/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!393 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/Intrinsic/klee_overshift_check.c", directory: "/media/haoxin/SeagateData/haoxin-data/smu-research/klee/smu-build/runtime/Intrinsic")
!394 = !{i32 2, !"Dwarf Version", i32 4}
!395 = !{i32 2, !"Debug Info Version", i32 3}
!396 = !{i32 1, !"wchar_size", i32 4}
!397 = !{i32 7, !"PIC Level", i32 2}
!398 = !{!"clang version 9.0.0 (tags/RELEASE_900/final)"}
!399 = distinct !DISubprogram(name: "klee_init_env", scope: !400, file: !400, line: 85, type: !401, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !290, retainedNodes: !4)
!400 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/klee_init_env.c", directory: "")
!401 = !DISubroutineType(types: !402)
!402 = !{null, !185, !403}
!403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !293, size: 64)
!404 = !DILocalVariable(name: "argcPtr", arg: 1, scope: !399, file: !400, line: 85, type: !185)
!405 = !DILocation(line: 85, column: 25, scope: !399)
!406 = !DILocalVariable(name: "argvPtr", arg: 2, scope: !399, file: !400, line: 85, type: !403)
!407 = !DILocation(line: 85, column: 42, scope: !399)
!408 = !DILocalVariable(name: "argc", scope: !399, file: !400, line: 86, type: !77)
!409 = !DILocation(line: 86, column: 7, scope: !399)
!410 = !DILocation(line: 86, column: 15, scope: !399)
!411 = !DILocation(line: 86, column: 14, scope: !399)
!412 = !DILocalVariable(name: "argv", scope: !399, file: !400, line: 87, type: !293)
!413 = !DILocation(line: 87, column: 10, scope: !399)
!414 = !DILocation(line: 87, column: 18, scope: !399)
!415 = !DILocation(line: 87, column: 17, scope: !399)
!416 = !DILocalVariable(name: "new_argc", scope: !399, file: !400, line: 89, type: !77)
!417 = !DILocation(line: 89, column: 7, scope: !399)
!418 = !DILocalVariable(name: "n_args", scope: !399, file: !400, line: 89, type: !77)
!419 = !DILocation(line: 89, column: 21, scope: !399)
!420 = !DILocalVariable(name: "new_argv", scope: !399, file: !400, line: 90, type: !421)
!421 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 65536, elements: !422)
!422 = !{!423}
!423 = !DISubrange(count: 1024)
!424 = !DILocation(line: 90, column: 9, scope: !399)
!425 = !DILocalVariable(name: "max_len", scope: !399, file: !400, line: 91, type: !32)
!426 = !DILocation(line: 91, column: 12, scope: !399)
!427 = !DILocalVariable(name: "min_argvs", scope: !399, file: !400, line: 91, type: !32)
!428 = !DILocation(line: 91, column: 21, scope: !399)
!429 = !DILocalVariable(name: "max_argvs", scope: !399, file: !400, line: 91, type: !32)
!430 = !DILocation(line: 91, column: 32, scope: !399)
!431 = !DILocalVariable(name: "sym_files", scope: !399, file: !400, line: 92, type: !32)
!432 = !DILocation(line: 92, column: 12, scope: !399)
!433 = !DILocalVariable(name: "sym_file_len", scope: !399, file: !400, line: 92, type: !32)
!434 = !DILocation(line: 92, column: 27, scope: !399)
!435 = !DILocalVariable(name: "sym_stdin_len", scope: !399, file: !400, line: 93, type: !32)
!436 = !DILocation(line: 93, column: 12, scope: !399)
!437 = !DILocalVariable(name: "sym_stdout_flag", scope: !399, file: !400, line: 94, type: !77)
!438 = !DILocation(line: 94, column: 7, scope: !399)
!439 = !DILocalVariable(name: "save_all_writes_flag", scope: !399, file: !400, line: 95, type: !77)
!440 = !DILocation(line: 95, column: 7, scope: !399)
!441 = !DILocalVariable(name: "fd_fail", scope: !399, file: !400, line: 96, type: !77)
!442 = !DILocation(line: 96, column: 7, scope: !399)
!443 = !DILocalVariable(name: "final_argv", scope: !399, file: !400, line: 97, type: !293)
!444 = !DILocation(line: 97, column: 10, scope: !399)
!445 = !DILocalVariable(name: "sym_arg_name", scope: !399, file: !400, line: 98, type: !446)
!446 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 48, elements: !447)
!447 = !{!448}
!448 = !DISubrange(count: 6)
!449 = !DILocation(line: 98, column: 8, scope: !399)
!450 = !DILocalVariable(name: "sym_arg_num", scope: !399, file: !400, line: 99, type: !32)
!451 = !DILocation(line: 99, column: 12, scope: !399)
!452 = !DILocalVariable(name: "k", scope: !399, file: !400, line: 100, type: !77)
!453 = !DILocation(line: 100, column: 7, scope: !399)
!454 = !DILocalVariable(name: "i", scope: !399, file: !400, line: 100, type: !77)
!455 = !DILocation(line: 100, column: 14, scope: !399)
!456 = !DILocation(line: 102, column: 3, scope: !399)
!457 = !DILocation(line: 102, column: 19, scope: !399)
!458 = !DILocation(line: 105, column: 7, scope: !459)
!459 = distinct !DILexicalBlock(scope: !399, file: !400, line: 105, column: 7)
!460 = !DILocation(line: 105, column: 12, scope: !459)
!461 = !DILocation(line: 105, column: 17, scope: !459)
!462 = !DILocation(line: 105, column: 28, scope: !459)
!463 = !DILocation(line: 105, column: 20, scope: !459)
!464 = !DILocation(line: 105, column: 7, scope: !399)
!465 = !DILocation(line: 106, column: 5, scope: !466)
!466 = distinct !DILexicalBlock(scope: !459, file: !400, line: 105, column: 48)
!467 = !DILocation(line: 121, column: 3, scope: !466)
!468 = !DILocation(line: 123, column: 3, scope: !399)
!469 = !DILocation(line: 123, column: 10, scope: !399)
!470 = !DILocation(line: 123, column: 14, scope: !399)
!471 = !DILocation(line: 123, column: 12, scope: !399)
!472 = !DILocation(line: 124, column: 17, scope: !473)
!473 = distinct !DILexicalBlock(scope: !474, file: !400, line: 124, column: 9)
!474 = distinct !DILexicalBlock(scope: !399, file: !400, line: 123, column: 20)
!475 = !DILocation(line: 124, column: 22, scope: !473)
!476 = !DILocation(line: 124, column: 9, scope: !473)
!477 = !DILocation(line: 124, column: 39, scope: !473)
!478 = !DILocation(line: 124, column: 50, scope: !473)
!479 = !DILocation(line: 124, column: 55, scope: !473)
!480 = !DILocation(line: 124, column: 42, scope: !473)
!481 = !DILocation(line: 124, column: 9, scope: !474)
!482 = !DILocalVariable(name: "msg", scope: !483, file: !400, line: 125, type: !273)
!483 = distinct !DILexicalBlock(scope: !473, file: !400, line: 124, column: 72)
!484 = !DILocation(line: 125, column: 19, scope: !483)
!485 = !DILocation(line: 126, column: 11, scope: !486)
!486 = distinct !DILexicalBlock(scope: !483, file: !400, line: 126, column: 11)
!487 = !DILocation(line: 126, column: 18, scope: !486)
!488 = !DILocation(line: 126, column: 15, scope: !486)
!489 = !DILocation(line: 126, column: 11, scope: !483)
!490 = !DILocation(line: 127, column: 22, scope: !486)
!491 = !DILocation(line: 127, column: 9, scope: !486)
!492 = !DILocation(line: 129, column: 30, scope: !483)
!493 = !DILocation(line: 129, column: 36, scope: !483)
!494 = !DILocation(line: 129, column: 41, scope: !483)
!495 = !DILocation(line: 129, column: 17, scope: !483)
!496 = !DILocation(line: 129, column: 15, scope: !483)
!497 = !DILocation(line: 131, column: 11, scope: !498)
!498 = distinct !DILexicalBlock(scope: !483, file: !400, line: 131, column: 11)
!499 = !DILocation(line: 131, column: 23, scope: !498)
!500 = !DILocation(line: 131, column: 11, scope: !483)
!501 = !DILocation(line: 132, column: 9, scope: !498)
!502 = !DILocation(line: 134, column: 31, scope: !483)
!503 = !DILocation(line: 134, column: 43, scope: !483)
!504 = !DILocation(line: 134, column: 29, scope: !483)
!505 = !DILocation(line: 134, column: 25, scope: !483)
!506 = !DILocation(line: 134, column: 7, scope: !483)
!507 = !DILocation(line: 134, column: 23, scope: !483)
!508 = !DILocation(line: 135, column: 31, scope: !483)
!509 = !DILocation(line: 135, column: 43, scope: !483)
!510 = !DILocation(line: 135, column: 29, scope: !483)
!511 = !DILocation(line: 135, column: 25, scope: !483)
!512 = !DILocation(line: 135, column: 7, scope: !483)
!513 = !DILocation(line: 135, column: 23, scope: !483)
!514 = !DILocation(line: 136, column: 18, scope: !483)
!515 = !DILocation(line: 137, column: 28, scope: !483)
!516 = !DILocation(line: 137, column: 52, scope: !483)
!517 = !DILocation(line: 137, column: 61, scope: !483)
!518 = !DILocation(line: 137, column: 38, scope: !483)
!519 = !DILocation(line: 137, column: 7, scope: !483)
!520 = !DILocation(line: 139, column: 5, scope: !483)
!521 = !DILocation(line: 139, column: 24, scope: !522)
!522 = distinct !DILexicalBlock(scope: !473, file: !400, line: 139, column: 16)
!523 = !DILocation(line: 139, column: 29, scope: !522)
!524 = !DILocation(line: 139, column: 16, scope: !522)
!525 = !DILocation(line: 139, column: 47, scope: !522)
!526 = !DILocation(line: 140, column: 24, scope: !522)
!527 = !DILocation(line: 140, column: 29, scope: !522)
!528 = !DILocation(line: 140, column: 16, scope: !522)
!529 = !DILocation(line: 139, column: 16, scope: !473)
!530 = !DILocalVariable(name: "msg", scope: !531, file: !400, line: 141, type: !273)
!531 = distinct !DILexicalBlock(scope: !522, file: !400, line: 140, column: 47)
!532 = !DILocation(line: 141, column: 19, scope: !531)
!533 = !DILocation(line: 144, column: 11, scope: !534)
!534 = distinct !DILexicalBlock(scope: !531, file: !400, line: 144, column: 11)
!535 = !DILocation(line: 144, column: 13, scope: !534)
!536 = !DILocation(line: 144, column: 20, scope: !534)
!537 = !DILocation(line: 144, column: 17, scope: !534)
!538 = !DILocation(line: 144, column: 11, scope: !531)
!539 = !DILocation(line: 145, column: 22, scope: !534)
!540 = !DILocation(line: 145, column: 9, scope: !534)
!541 = !DILocation(line: 147, column: 8, scope: !531)
!542 = !DILocation(line: 148, column: 32, scope: !531)
!543 = !DILocation(line: 148, column: 38, scope: !531)
!544 = !DILocation(line: 148, column: 43, scope: !531)
!545 = !DILocation(line: 148, column: 19, scope: !531)
!546 = !DILocation(line: 148, column: 17, scope: !531)
!547 = !DILocation(line: 149, column: 32, scope: !531)
!548 = !DILocation(line: 149, column: 38, scope: !531)
!549 = !DILocation(line: 149, column: 43, scope: !531)
!550 = !DILocation(line: 149, column: 19, scope: !531)
!551 = !DILocation(line: 149, column: 17, scope: !531)
!552 = !DILocation(line: 150, column: 30, scope: !531)
!553 = !DILocation(line: 150, column: 36, scope: !531)
!554 = !DILocation(line: 150, column: 41, scope: !531)
!555 = !DILocation(line: 150, column: 17, scope: !531)
!556 = !DILocation(line: 150, column: 15, scope: !531)
!557 = !DILocation(line: 152, column: 12, scope: !558)
!558 = distinct !DILexicalBlock(scope: !531, file: !400, line: 152, column: 11)
!559 = !DILocation(line: 152, column: 24, scope: !558)
!560 = !DILocation(line: 152, column: 22, scope: !558)
!561 = !DILocation(line: 152, column: 35, scope: !558)
!562 = !DILocation(line: 152, column: 39, scope: !558)
!563 = !DILocation(line: 152, column: 49, scope: !558)
!564 = !DILocation(line: 152, column: 57, scope: !558)
!565 = !DILocation(line: 152, column: 67, scope: !558)
!566 = !DILocation(line: 152, column: 54, scope: !558)
!567 = !DILocation(line: 153, column: 9, scope: !558)
!568 = !DILocation(line: 155, column: 27, scope: !531)
!569 = !DILocation(line: 155, column: 38, scope: !531)
!570 = !DILocation(line: 155, column: 48, scope: !531)
!571 = !DILocation(line: 155, column: 16, scope: !531)
!572 = !DILocation(line: 155, column: 14, scope: !531)
!573 = !DILocation(line: 157, column: 11, scope: !574)
!574 = distinct !DILexicalBlock(scope: !531, file: !400, line: 157, column: 11)
!575 = !DILocation(line: 157, column: 25, scope: !574)
!576 = !DILocation(line: 157, column: 23, scope: !574)
!577 = !DILocation(line: 157, column: 35, scope: !574)
!578 = !DILocation(line: 157, column: 11, scope: !531)
!579 = !DILocation(line: 158, column: 9, scope: !574)
!580 = !DILocation(line: 160, column: 14, scope: !581)
!581 = distinct !DILexicalBlock(scope: !531, file: !400, line: 160, column: 7)
!582 = !DILocation(line: 160, column: 12, scope: !581)
!583 = !DILocation(line: 160, column: 19, scope: !584)
!584 = distinct !DILexicalBlock(scope: !581, file: !400, line: 160, column: 7)
!585 = !DILocation(line: 160, column: 23, scope: !584)
!586 = !DILocation(line: 160, column: 21, scope: !584)
!587 = !DILocation(line: 160, column: 7, scope: !581)
!588 = !DILocation(line: 161, column: 33, scope: !589)
!589 = distinct !DILexicalBlock(scope: !584, file: !400, line: 160, column: 36)
!590 = !DILocation(line: 161, column: 45, scope: !589)
!591 = !DILocation(line: 161, column: 31, scope: !589)
!592 = !DILocation(line: 161, column: 27, scope: !589)
!593 = !DILocation(line: 161, column: 9, scope: !589)
!594 = !DILocation(line: 161, column: 25, scope: !589)
!595 = !DILocation(line: 162, column: 33, scope: !589)
!596 = !DILocation(line: 162, column: 45, scope: !589)
!597 = !DILocation(line: 162, column: 31, scope: !589)
!598 = !DILocation(line: 162, column: 27, scope: !589)
!599 = !DILocation(line: 162, column: 9, scope: !589)
!600 = !DILocation(line: 162, column: 25, scope: !589)
!601 = !DILocation(line: 163, column: 20, scope: !589)
!602 = !DILocation(line: 165, column: 30, scope: !589)
!603 = !DILocation(line: 165, column: 54, scope: !589)
!604 = !DILocation(line: 165, column: 63, scope: !589)
!605 = !DILocation(line: 165, column: 40, scope: !589)
!606 = !DILocation(line: 165, column: 9, scope: !589)
!607 = !DILocation(line: 160, column: 32, scope: !584)
!608 = !DILocation(line: 160, column: 7, scope: !584)
!609 = distinct !{!609, !587, !610}
!610 = !DILocation(line: 167, column: 7, scope: !581)
!611 = !DILocation(line: 168, column: 24, scope: !612)
!612 = distinct !DILexicalBlock(scope: !522, file: !400, line: 168, column: 16)
!613 = !DILocation(line: 168, column: 29, scope: !612)
!614 = !DILocation(line: 168, column: 16, scope: !612)
!615 = !DILocation(line: 168, column: 48, scope: !612)
!616 = !DILocation(line: 169, column: 24, scope: !612)
!617 = !DILocation(line: 169, column: 29, scope: !612)
!618 = !DILocation(line: 169, column: 16, scope: !612)
!619 = !DILocation(line: 168, column: 16, scope: !522)
!620 = !DILocalVariable(name: "msg", scope: !621, file: !400, line: 170, type: !273)
!621 = distinct !DILexicalBlock(scope: !612, file: !400, line: 169, column: 48)
!622 = !DILocation(line: 170, column: 19, scope: !621)
!623 = !DILocation(line: 173, column: 11, scope: !624)
!624 = distinct !DILexicalBlock(scope: !621, file: !400, line: 173, column: 11)
!625 = !DILocation(line: 173, column: 13, scope: !624)
!626 = !DILocation(line: 173, column: 20, scope: !624)
!627 = !DILocation(line: 173, column: 17, scope: !624)
!628 = !DILocation(line: 173, column: 11, scope: !621)
!629 = !DILocation(line: 174, column: 22, scope: !624)
!630 = !DILocation(line: 174, column: 9, scope: !624)
!631 = !DILocation(line: 176, column: 11, scope: !632)
!632 = distinct !DILexicalBlock(scope: !621, file: !400, line: 176, column: 11)
!633 = !DILocation(line: 176, column: 21, scope: !632)
!634 = !DILocation(line: 176, column: 11, scope: !621)
!635 = !DILocation(line: 177, column: 9, scope: !632)
!636 = !DILocation(line: 179, column: 8, scope: !621)
!637 = !DILocation(line: 180, column: 32, scope: !621)
!638 = !DILocation(line: 180, column: 38, scope: !621)
!639 = !DILocation(line: 180, column: 43, scope: !621)
!640 = !DILocation(line: 180, column: 19, scope: !621)
!641 = !DILocation(line: 180, column: 17, scope: !621)
!642 = !DILocation(line: 181, column: 35, scope: !621)
!643 = !DILocation(line: 181, column: 41, scope: !621)
!644 = !DILocation(line: 181, column: 46, scope: !621)
!645 = !DILocation(line: 181, column: 22, scope: !621)
!646 = !DILocation(line: 181, column: 20, scope: !621)
!647 = !DILocation(line: 183, column: 11, scope: !648)
!648 = distinct !DILexicalBlock(scope: !621, file: !400, line: 183, column: 11)
!649 = !DILocation(line: 183, column: 21, scope: !648)
!650 = !DILocation(line: 183, column: 11, scope: !621)
!651 = !DILocation(line: 184, column: 9, scope: !648)
!652 = !DILocation(line: 187, column: 11, scope: !653)
!653 = distinct !DILexicalBlock(scope: !621, file: !400, line: 187, column: 11)
!654 = !DILocation(line: 187, column: 24, scope: !653)
!655 = !DILocation(line: 187, column: 11, scope: !621)
!656 = !DILocation(line: 188, column: 9, scope: !653)
!657 = !DILocation(line: 191, column: 24, scope: !658)
!658 = distinct !DILexicalBlock(scope: !612, file: !400, line: 191, column: 16)
!659 = !DILocation(line: 191, column: 29, scope: !658)
!660 = !DILocation(line: 191, column: 16, scope: !658)
!661 = !DILocation(line: 191, column: 48, scope: !658)
!662 = !DILocation(line: 192, column: 24, scope: !658)
!663 = !DILocation(line: 192, column: 29, scope: !658)
!664 = !DILocation(line: 192, column: 16, scope: !658)
!665 = !DILocation(line: 191, column: 16, scope: !612)
!666 = !DILocalVariable(name: "msg", scope: !667, file: !400, line: 193, type: !273)
!667 = distinct !DILexicalBlock(scope: !658, file: !400, line: 192, column: 48)
!668 = !DILocation(line: 193, column: 19, scope: !667)
!669 = !DILocation(line: 196, column: 11, scope: !670)
!670 = distinct !DILexicalBlock(scope: !667, file: !400, line: 196, column: 11)
!671 = !DILocation(line: 196, column: 18, scope: !670)
!672 = !DILocation(line: 196, column: 15, scope: !670)
!673 = !DILocation(line: 196, column: 11, scope: !667)
!674 = !DILocation(line: 197, column: 22, scope: !670)
!675 = !DILocation(line: 197, column: 9, scope: !670)
!676 = !DILocation(line: 199, column: 36, scope: !667)
!677 = !DILocation(line: 199, column: 42, scope: !667)
!678 = !DILocation(line: 199, column: 47, scope: !667)
!679 = !DILocation(line: 199, column: 23, scope: !667)
!680 = !DILocation(line: 199, column: 21, scope: !667)
!681 = !DILocation(line: 200, column: 5, scope: !667)
!682 = !DILocation(line: 200, column: 24, scope: !683)
!683 = distinct !DILexicalBlock(scope: !658, file: !400, line: 200, column: 16)
!684 = !DILocation(line: 200, column: 29, scope: !683)
!685 = !DILocation(line: 200, column: 16, scope: !683)
!686 = !DILocation(line: 200, column: 49, scope: !683)
!687 = !DILocation(line: 201, column: 24, scope: !683)
!688 = !DILocation(line: 201, column: 29, scope: !683)
!689 = !DILocation(line: 201, column: 16, scope: !683)
!690 = !DILocation(line: 200, column: 16, scope: !658)
!691 = !DILocation(line: 202, column: 23, scope: !692)
!692 = distinct !DILexicalBlock(scope: !683, file: !400, line: 201, column: 49)
!693 = !DILocation(line: 203, column: 8, scope: !692)
!694 = !DILocation(line: 204, column: 5, scope: !692)
!695 = !DILocation(line: 204, column: 24, scope: !696)
!696 = distinct !DILexicalBlock(scope: !683, file: !400, line: 204, column: 16)
!697 = !DILocation(line: 204, column: 29, scope: !696)
!698 = !DILocation(line: 204, column: 16, scope: !696)
!699 = !DILocation(line: 204, column: 54, scope: !696)
!700 = !DILocation(line: 205, column: 24, scope: !696)
!701 = !DILocation(line: 205, column: 29, scope: !696)
!702 = !DILocation(line: 205, column: 16, scope: !696)
!703 = !DILocation(line: 204, column: 16, scope: !683)
!704 = !DILocation(line: 206, column: 28, scope: !705)
!705 = distinct !DILexicalBlock(scope: !696, file: !400, line: 205, column: 54)
!706 = !DILocation(line: 207, column: 8, scope: !705)
!707 = !DILocation(line: 208, column: 5, scope: !705)
!708 = !DILocation(line: 208, column: 24, scope: !709)
!709 = distinct !DILexicalBlock(scope: !696, file: !400, line: 208, column: 16)
!710 = !DILocation(line: 208, column: 29, scope: !709)
!711 = !DILocation(line: 208, column: 16, scope: !709)
!712 = !DILocation(line: 208, column: 46, scope: !709)
!713 = !DILocation(line: 208, column: 57, scope: !709)
!714 = !DILocation(line: 208, column: 62, scope: !709)
!715 = !DILocation(line: 208, column: 49, scope: !709)
!716 = !DILocation(line: 208, column: 16, scope: !696)
!717 = !DILocation(line: 209, column: 15, scope: !718)
!718 = distinct !DILexicalBlock(scope: !709, file: !400, line: 208, column: 79)
!719 = !DILocation(line: 210, column: 8, scope: !718)
!720 = !DILocation(line: 211, column: 5, scope: !718)
!721 = !DILocation(line: 211, column: 24, scope: !722)
!722 = distinct !DILexicalBlock(scope: !709, file: !400, line: 211, column: 16)
!723 = !DILocation(line: 211, column: 29, scope: !722)
!724 = !DILocation(line: 211, column: 16, scope: !722)
!725 = !DILocation(line: 211, column: 48, scope: !722)
!726 = !DILocation(line: 211, column: 59, scope: !722)
!727 = !DILocation(line: 211, column: 64, scope: !722)
!728 = !DILocation(line: 211, column: 51, scope: !722)
!729 = !DILocation(line: 211, column: 16, scope: !709)
!730 = !DILocation(line: 212, column: 9, scope: !731)
!731 = distinct !DILexicalBlock(scope: !722, file: !400, line: 211, column: 83)
!732 = !DILocation(line: 213, column: 5, scope: !731)
!733 = !DILocation(line: 213, column: 24, scope: !734)
!734 = distinct !DILexicalBlock(scope: !722, file: !400, line: 213, column: 16)
!735 = !DILocation(line: 213, column: 29, scope: !734)
!736 = !DILocation(line: 213, column: 16, scope: !734)
!737 = !DILocation(line: 213, column: 47, scope: !734)
!738 = !DILocation(line: 214, column: 24, scope: !734)
!739 = !DILocation(line: 214, column: 29, scope: !734)
!740 = !DILocation(line: 214, column: 16, scope: !734)
!741 = !DILocation(line: 213, column: 16, scope: !722)
!742 = !DILocalVariable(name: "msg", scope: !743, file: !400, line: 215, type: !273)
!743 = distinct !DILexicalBlock(scope: !734, file: !400, line: 214, column: 47)
!744 = !DILocation(line: 215, column: 19, scope: !743)
!745 = !DILocation(line: 216, column: 11, scope: !746)
!746 = distinct !DILexicalBlock(scope: !743, file: !400, line: 216, column: 11)
!747 = !DILocation(line: 216, column: 18, scope: !746)
!748 = !DILocation(line: 216, column: 15, scope: !746)
!749 = !DILocation(line: 216, column: 11, scope: !743)
!750 = !DILocation(line: 217, column: 22, scope: !746)
!751 = !DILocation(line: 217, column: 9, scope: !746)
!752 = !DILocation(line: 219, column: 30, scope: !743)
!753 = !DILocation(line: 219, column: 36, scope: !743)
!754 = !DILocation(line: 219, column: 41, scope: !743)
!755 = !DILocation(line: 219, column: 17, scope: !743)
!756 = !DILocation(line: 219, column: 15, scope: !743)
!757 = !DILocation(line: 220, column: 5, scope: !743)
!758 = !DILocation(line: 222, column: 28, scope: !759)
!759 = distinct !DILexicalBlock(scope: !734, file: !400, line: 220, column: 12)
!760 = !DILocation(line: 222, column: 38, scope: !759)
!761 = !DILocation(line: 222, column: 44, scope: !759)
!762 = !DILocation(line: 222, column: 7, scope: !759)
!763 = distinct !{!763, !468, !764}
!764 = !DILocation(line: 224, column: 3, scope: !399)
!765 = !DILocation(line: 226, column: 33, scope: !399)
!766 = !DILocation(line: 226, column: 42, scope: !399)
!767 = !DILocation(line: 226, column: 32, scope: !399)
!768 = !DILocation(line: 226, column: 47, scope: !399)
!769 = !DILocation(line: 226, column: 25, scope: !399)
!770 = !DILocation(line: 226, column: 16, scope: !399)
!771 = !DILocation(line: 226, column: 14, scope: !399)
!772 = !DILocation(line: 227, column: 20, scope: !399)
!773 = !DILocation(line: 227, column: 3, scope: !399)
!774 = !DILocation(line: 228, column: 10, scope: !399)
!775 = !DILocation(line: 228, column: 3, scope: !399)
!776 = !DILocation(line: 228, column: 32, scope: !399)
!777 = !DILocation(line: 228, column: 41, scope: !399)
!778 = !DILocation(line: 229, column: 3, scope: !399)
!779 = !DILocation(line: 229, column: 14, scope: !399)
!780 = !DILocation(line: 229, column: 24, scope: !399)
!781 = !DILocation(line: 231, column: 14, scope: !399)
!782 = !DILocation(line: 231, column: 4, scope: !399)
!783 = !DILocation(line: 231, column: 12, scope: !399)
!784 = !DILocation(line: 232, column: 14, scope: !399)
!785 = !DILocation(line: 232, column: 4, scope: !399)
!786 = !DILocation(line: 232, column: 12, scope: !399)
!787 = !DILocation(line: 234, column: 17, scope: !399)
!788 = !DILocation(line: 234, column: 28, scope: !399)
!789 = !DILocation(line: 234, column: 42, scope: !399)
!790 = !DILocation(line: 234, column: 57, scope: !399)
!791 = !DILocation(line: 235, column: 17, scope: !399)
!792 = !DILocation(line: 235, column: 39, scope: !399)
!793 = !DILocation(line: 234, column: 3, scope: !399)
!794 = !DILocation(line: 236, column: 1, scope: !399)
!795 = distinct !DISubprogram(name: "__streq", scope: !400, file: !400, line: 53, type: !796, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !290, retainedNodes: !4)
!796 = !DISubroutineType(types: !797)
!797 = !{!77, !273, !273}
!798 = !DILocalVariable(name: "a", arg: 1, scope: !795, file: !400, line: 53, type: !273)
!799 = !DILocation(line: 53, column: 32, scope: !795)
!800 = !DILocalVariable(name: "b", arg: 2, scope: !795, file: !400, line: 53, type: !273)
!801 = !DILocation(line: 53, column: 47, scope: !795)
!802 = !DILocation(line: 54, column: 3, scope: !795)
!803 = !DILocation(line: 54, column: 11, scope: !795)
!804 = !DILocation(line: 54, column: 10, scope: !795)
!805 = !DILocation(line: 54, column: 17, scope: !795)
!806 = !DILocation(line: 54, column: 16, scope: !795)
!807 = !DILocation(line: 54, column: 13, scope: !795)
!808 = !DILocation(line: 55, column: 11, scope: !809)
!809 = distinct !DILexicalBlock(scope: !810, file: !400, line: 55, column: 9)
!810 = distinct !DILexicalBlock(scope: !795, file: !400, line: 54, column: 20)
!811 = !DILocation(line: 55, column: 10, scope: !809)
!812 = !DILocation(line: 55, column: 9, scope: !810)
!813 = !DILocation(line: 56, column: 7, scope: !809)
!814 = !DILocation(line: 57, column: 6, scope: !810)
!815 = !DILocation(line: 58, column: 6, scope: !810)
!816 = distinct !{!816, !802, !817}
!817 = !DILocation(line: 59, column: 3, scope: !795)
!818 = !DILocation(line: 60, column: 3, scope: !795)
!819 = !DILocation(line: 61, column: 1, scope: !795)
!820 = distinct !DISubprogram(name: "__emit_error", scope: !400, file: !400, line: 23, type: !821, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !290, retainedNodes: !4)
!821 = !DISubroutineType(types: !822)
!822 = !{null, !273}
!823 = !DILocalVariable(name: "msg", arg: 1, scope: !820, file: !400, line: 23, type: !273)
!824 = !DILocation(line: 23, column: 38, scope: !820)
!825 = !DILocation(line: 24, column: 41, scope: !820)
!826 = !DILocation(line: 24, column: 3, scope: !820)
!827 = distinct !DISubprogram(name: "__str_to_int", scope: !400, file: !400, line: 30, type: !828, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !290, retainedNodes: !4)
!828 = !DISubroutineType(types: !829)
!829 = !{!161, !19, !273}
!830 = !DILocalVariable(name: "s", arg: 1, scope: !827, file: !400, line: 30, type: !19)
!831 = !DILocation(line: 30, column: 36, scope: !827)
!832 = !DILocalVariable(name: "error_msg", arg: 2, scope: !827, file: !400, line: 30, type: !273)
!833 = !DILocation(line: 30, column: 51, scope: !827)
!834 = !DILocalVariable(name: "res", scope: !827, file: !400, line: 31, type: !161)
!835 = !DILocation(line: 31, column: 12, scope: !827)
!836 = !DILocalVariable(name: "c", scope: !827, file: !400, line: 32, type: !20)
!837 = !DILocation(line: 32, column: 8, scope: !827)
!838 = !DILocation(line: 34, column: 9, scope: !839)
!839 = distinct !DILexicalBlock(scope: !827, file: !400, line: 34, column: 7)
!840 = !DILocation(line: 34, column: 8, scope: !839)
!841 = !DILocation(line: 34, column: 7, scope: !827)
!842 = !DILocation(line: 34, column: 25, scope: !839)
!843 = !DILocation(line: 34, column: 12, scope: !839)
!844 = !DILocation(line: 36, column: 3, scope: !827)
!845 = !DILocation(line: 36, column: 17, scope: !827)
!846 = !DILocation(line: 36, column: 15, scope: !827)
!847 = !DILocation(line: 36, column: 13, scope: !827)
!848 = !DILocation(line: 37, column: 9, scope: !849)
!849 = distinct !DILexicalBlock(scope: !850, file: !400, line: 37, column: 9)
!850 = distinct !DILexicalBlock(scope: !827, file: !400, line: 36, column: 22)
!851 = !DILocation(line: 37, column: 11, scope: !849)
!852 = !DILocation(line: 37, column: 9, scope: !850)
!853 = !DILocation(line: 39, column: 16, scope: !854)
!854 = distinct !DILexicalBlock(scope: !849, file: !400, line: 39, column: 16)
!855 = !DILocation(line: 39, column: 17, scope: !854)
!856 = !DILocation(line: 39, column: 23, scope: !854)
!857 = !DILocation(line: 39, column: 26, scope: !854)
!858 = !DILocation(line: 39, column: 27, scope: !854)
!859 = !DILocation(line: 39, column: 16, scope: !849)
!860 = !DILocation(line: 40, column: 13, scope: !861)
!861 = distinct !DILexicalBlock(scope: !854, file: !400, line: 39, column: 34)
!862 = !DILocation(line: 40, column: 16, scope: !861)
!863 = !DILocation(line: 40, column: 23, scope: !861)
!864 = !DILocation(line: 40, column: 25, scope: !861)
!865 = !DILocation(line: 40, column: 22, scope: !861)
!866 = !DILocation(line: 40, column: 20, scope: !861)
!867 = !DILocation(line: 40, column: 11, scope: !861)
!868 = !DILocation(line: 41, column: 5, scope: !861)
!869 = !DILocation(line: 42, column: 20, scope: !870)
!870 = distinct !DILexicalBlock(scope: !854, file: !400, line: 41, column: 12)
!871 = !DILocation(line: 42, column: 7, scope: !870)
!872 = distinct !{!872, !844, !873}
!873 = !DILocation(line: 44, column: 3, scope: !827)
!874 = !DILocation(line: 45, column: 10, scope: !827)
!875 = !DILocation(line: 45, column: 3, scope: !827)
!876 = distinct !DISubprogram(name: "__add_arg", scope: !400, file: !400, line: 76, type: !877, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !290, retainedNodes: !4)
!877 = !DISubroutineType(types: !878)
!878 = !{null, !185, !293, !19, !77}
!879 = !DILocalVariable(name: "argc", arg: 1, scope: !876, file: !400, line: 76, type: !185)
!880 = !DILocation(line: 76, column: 28, scope: !876)
!881 = !DILocalVariable(name: "argv", arg: 2, scope: !876, file: !400, line: 76, type: !293)
!882 = !DILocation(line: 76, column: 41, scope: !876)
!883 = !DILocalVariable(name: "arg", arg: 3, scope: !876, file: !400, line: 76, type: !19)
!884 = !DILocation(line: 76, column: 53, scope: !876)
!885 = !DILocalVariable(name: "argcMax", arg: 4, scope: !876, file: !400, line: 76, type: !77)
!886 = !DILocation(line: 76, column: 62, scope: !876)
!887 = !DILocation(line: 77, column: 8, scope: !888)
!888 = distinct !DILexicalBlock(scope: !876, file: !400, line: 77, column: 7)
!889 = !DILocation(line: 77, column: 7, scope: !888)
!890 = !DILocation(line: 77, column: 14, scope: !888)
!891 = !DILocation(line: 77, column: 12, scope: !888)
!892 = !DILocation(line: 77, column: 7, scope: !876)
!893 = !DILocation(line: 78, column: 5, scope: !894)
!894 = distinct !DILexicalBlock(scope: !888, file: !400, line: 77, column: 23)
!895 = !DILocation(line: 79, column: 3, scope: !894)
!896 = !DILocation(line: 80, column: 19, scope: !897)
!897 = distinct !DILexicalBlock(scope: !888, file: !400, line: 79, column: 10)
!898 = !DILocation(line: 80, column: 5, scope: !897)
!899 = !DILocation(line: 80, column: 11, scope: !897)
!900 = !DILocation(line: 80, column: 10, scope: !897)
!901 = !DILocation(line: 80, column: 17, scope: !897)
!902 = !DILocation(line: 81, column: 7, scope: !897)
!903 = !DILocation(line: 81, column: 12, scope: !897)
!904 = !DILocation(line: 83, column: 1, scope: !876)
!905 = distinct !DISubprogram(name: "__get_sym_str", scope: !400, file: !400, line: 63, type: !906, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !290, retainedNodes: !4)
!906 = !DISubroutineType(types: !907)
!907 = !{!19, !77, !19}
!908 = !DILocalVariable(name: "numChars", arg: 1, scope: !905, file: !400, line: 63, type: !77)
!909 = !DILocation(line: 63, column: 32, scope: !905)
!910 = !DILocalVariable(name: "name", arg: 2, scope: !905, file: !400, line: 63, type: !19)
!911 = !DILocation(line: 63, column: 48, scope: !905)
!912 = !DILocalVariable(name: "i", scope: !905, file: !400, line: 64, type: !77)
!913 = !DILocation(line: 64, column: 7, scope: !905)
!914 = !DILocalVariable(name: "s", scope: !905, file: !400, line: 65, type: !19)
!915 = !DILocation(line: 65, column: 9, scope: !905)
!916 = !DILocation(line: 65, column: 20, scope: !905)
!917 = !DILocation(line: 65, column: 28, scope: !905)
!918 = !DILocation(line: 65, column: 13, scope: !905)
!919 = !DILocation(line: 66, column: 20, scope: !905)
!920 = !DILocation(line: 66, column: 3, scope: !905)
!921 = !DILocation(line: 67, column: 22, scope: !905)
!922 = !DILocation(line: 67, column: 25, scope: !905)
!923 = !DILocation(line: 67, column: 33, scope: !905)
!924 = !DILocation(line: 67, column: 37, scope: !905)
!925 = !DILocation(line: 67, column: 3, scope: !905)
!926 = !DILocation(line: 69, column: 9, scope: !927)
!927 = distinct !DILexicalBlock(scope: !905, file: !400, line: 69, column: 3)
!928 = !DILocation(line: 69, column: 8, scope: !927)
!929 = !DILocation(line: 69, column: 13, scope: !930)
!930 = distinct !DILexicalBlock(scope: !927, file: !400, line: 69, column: 3)
!931 = !DILocation(line: 69, column: 15, scope: !930)
!932 = !DILocation(line: 69, column: 14, scope: !930)
!933 = !DILocation(line: 0, scope: !905)
!934 = !DILocation(line: 69, column: 3, scope: !927)
!935 = !DILocation(line: 70, column: 40, scope: !930)
!936 = !DILocation(line: 70, column: 42, scope: !930)
!937 = !DILocation(line: 70, column: 30, scope: !930)
!938 = !DILocation(line: 70, column: 5, scope: !930)
!939 = !DILocation(line: 69, column: 26, scope: !930)
!940 = !DILocation(line: 69, column: 3, scope: !930)
!941 = distinct !{!941, !934, !942}
!942 = !DILocation(line: 70, column: 45, scope: !927)
!943 = !DILocation(line: 72, column: 5, scope: !905)
!944 = !DILocation(line: 72, column: 3, scope: !905)
!945 = !DILocation(line: 72, column: 15, scope: !905)
!946 = !DILocation(line: 73, column: 10, scope: !905)
!947 = !DILocation(line: 73, column: 3, scope: !905)
!948 = distinct !DISubprogram(name: "__klee_posix_wrapper", scope: !400, file: !400, line: 243, type: !949, scopeLine: 243, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !290, retainedNodes: !4)
!949 = !DISubroutineType(types: !950)
!950 = !{!77, !77, !293, !293}
!951 = !DILocalVariable(name: "argcPtr", arg: 1, scope: !948, file: !400, line: 243, type: !77)
!952 = !DILocation(line: 243, column: 30, scope: !948)
!953 = !DILocalVariable(name: "argvPtr", arg: 2, scope: !948, file: !400, line: 243, type: !293)
!954 = !DILocation(line: 243, column: 46, scope: !948)
!955 = !DILocalVariable(name: "envp", arg: 3, scope: !948, file: !400, line: 243, type: !293)
!956 = !DILocation(line: 243, column: 62, scope: !948)
!957 = !DILocation(line: 244, column: 3, scope: !948)
!958 = !DILocation(line: 245, column: 36, scope: !948)
!959 = !DILocation(line: 245, column: 45, scope: !948)
!960 = !DILocation(line: 245, column: 54, scope: !948)
!961 = !DILocation(line: 245, column: 10, scope: !948)
!962 = !DILocation(line: 245, column: 3, scope: !948)
!963 = distinct !DISubprogram(name: "__isprint", scope: !400, file: !400, line: 48, type: !964, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !290, retainedNodes: !4)
!964 = !DISubroutineType(types: !965)
!965 = !{!77, !274}
!966 = !DILocalVariable(name: "c", arg: 1, scope: !963, file: !400, line: 48, type: !274)
!967 = !DILocation(line: 48, column: 33, scope: !963)
!968 = !DILocation(line: 50, column: 17, scope: !963)
!969 = !DILocation(line: 50, column: 14, scope: !963)
!970 = !DILocation(line: 50, column: 19, scope: !963)
!971 = !DILocation(line: 50, column: 22, scope: !963)
!972 = !DILocation(line: 50, column: 24, scope: !963)
!973 = !DILocation(line: 0, scope: !963)
!974 = !DILocation(line: 50, column: 3, scope: !963)
!975 = distinct !DISubprogram(name: "cgc_isdigit", scope: !976, file: !976, line: 37, type: !215, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !294, retainedNodes: !4)
!976 = !DIFile(filename: "challenges/3D_Image_Toolkit/lib/ctype.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!977 = !DILocalVariable(name: "c", arg: 1, scope: !975, file: !976, line: 37, type: !77)
!978 = !DILocation(line: 37, column: 22, scope: !975)
!979 = !DILocation(line: 39, column: 7, scope: !980)
!980 = distinct !DILexicalBlock(scope: !975, file: !976, line: 39, column: 7)
!981 = !DILocation(line: 39, column: 9, scope: !980)
!982 = !DILocation(line: 39, column: 16, scope: !980)
!983 = !DILocation(line: 39, column: 19, scope: !980)
!984 = !DILocation(line: 39, column: 21, scope: !980)
!985 = !DILocation(line: 39, column: 7, scope: !975)
!986 = !DILocation(line: 40, column: 3, scope: !980)
!987 = !DILocation(line: 42, column: 3, scope: !980)
!988 = !DILocation(line: 43, column: 1, scope: !975)
!989 = distinct !DISubprogram(name: "cgc_isupper", scope: !976, file: !976, line: 45, type: !215, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !294, retainedNodes: !4)
!990 = !DILocalVariable(name: "c", arg: 1, scope: !989, file: !976, line: 45, type: !77)
!991 = !DILocation(line: 45, column: 22, scope: !989)
!992 = !DILocation(line: 47, column: 7, scope: !993)
!993 = distinct !DILexicalBlock(scope: !989, file: !976, line: 47, column: 7)
!994 = !DILocation(line: 47, column: 9, scope: !993)
!995 = !DILocation(line: 47, column: 16, scope: !993)
!996 = !DILocation(line: 47, column: 19, scope: !993)
!997 = !DILocation(line: 47, column: 21, scope: !993)
!998 = !DILocation(line: 47, column: 7, scope: !989)
!999 = !DILocation(line: 48, column: 3, scope: !993)
!1000 = !DILocation(line: 50, column: 3, scope: !993)
!1001 = !DILocation(line: 51, column: 1, scope: !989)
!1002 = distinct !DISubprogram(name: "cgc_islower", scope: !976, file: !976, line: 53, type: !215, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !294, retainedNodes: !4)
!1003 = !DILocalVariable(name: "c", arg: 1, scope: !1002, file: !976, line: 53, type: !77)
!1004 = !DILocation(line: 53, column: 22, scope: !1002)
!1005 = !DILocation(line: 55, column: 7, scope: !1006)
!1006 = distinct !DILexicalBlock(scope: !1002, file: !976, line: 55, column: 7)
!1007 = !DILocation(line: 55, column: 9, scope: !1006)
!1008 = !DILocation(line: 55, column: 16, scope: !1006)
!1009 = !DILocation(line: 55, column: 19, scope: !1006)
!1010 = !DILocation(line: 55, column: 21, scope: !1006)
!1011 = !DILocation(line: 55, column: 7, scope: !1002)
!1012 = !DILocation(line: 56, column: 3, scope: !1006)
!1013 = !DILocation(line: 58, column: 3, scope: !1006)
!1014 = !DILocation(line: 59, column: 1, scope: !1002)
!1015 = distinct !DISubprogram(name: "cgc_isalpha", scope: !976, file: !976, line: 61, type: !215, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !294, retainedNodes: !4)
!1016 = !DILocalVariable(name: "c", arg: 1, scope: !1015, file: !976, line: 61, type: !77)
!1017 = !DILocation(line: 61, column: 22, scope: !1015)
!1018 = !DILocation(line: 63, column: 20, scope: !1019)
!1019 = distinct !DILexicalBlock(scope: !1015, file: !976, line: 63, column: 7)
!1020 = !DILocation(line: 63, column: 7, scope: !1019)
!1021 = !DILocation(line: 63, column: 24, scope: !1019)
!1022 = !DILocation(line: 63, column: 40, scope: !1019)
!1023 = !DILocation(line: 63, column: 27, scope: !1019)
!1024 = !DILocation(line: 63, column: 7, scope: !1015)
!1025 = !DILocation(line: 64, column: 3, scope: !1019)
!1026 = !DILocation(line: 66, column: 3, scope: !1019)
!1027 = !DILocation(line: 67, column: 1, scope: !1015)
!1028 = distinct !DISubprogram(name: "cgc_isalnum", scope: !976, file: !976, line: 69, type: !215, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !294, retainedNodes: !4)
!1029 = !DILocalVariable(name: "c", arg: 1, scope: !1028, file: !976, line: 69, type: !77)
!1030 = !DILocation(line: 69, column: 22, scope: !1028)
!1031 = !DILocation(line: 71, column: 20, scope: !1032)
!1032 = distinct !DILexicalBlock(scope: !1028, file: !976, line: 71, column: 7)
!1033 = !DILocation(line: 71, column: 7, scope: !1032)
!1034 = !DILocation(line: 71, column: 24, scope: !1032)
!1035 = !DILocation(line: 71, column: 40, scope: !1032)
!1036 = !DILocation(line: 71, column: 27, scope: !1032)
!1037 = !DILocation(line: 71, column: 7, scope: !1028)
!1038 = !DILocation(line: 72, column: 3, scope: !1032)
!1039 = !DILocation(line: 74, column: 3, scope: !1032)
!1040 = !DILocation(line: 75, column: 1, scope: !1028)
!1041 = distinct !DISubprogram(name: "cgc_isprint", scope: !976, file: !976, line: 77, type: !215, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !294, retainedNodes: !4)
!1042 = !DILocalVariable(name: "c", arg: 1, scope: !1041, file: !976, line: 77, type: !77)
!1043 = !DILocation(line: 77, column: 22, scope: !1041)
!1044 = !DILocation(line: 79, column: 7, scope: !1045)
!1045 = distinct !DILexicalBlock(scope: !1041, file: !976, line: 79, column: 7)
!1046 = !DILocation(line: 79, column: 9, scope: !1045)
!1047 = !DILocation(line: 79, column: 16, scope: !1045)
!1048 = !DILocation(line: 79, column: 19, scope: !1045)
!1049 = !DILocation(line: 79, column: 21, scope: !1045)
!1050 = !DILocation(line: 79, column: 7, scope: !1041)
!1051 = !DILocation(line: 80, column: 3, scope: !1045)
!1052 = !DILocation(line: 82, column: 3, scope: !1045)
!1053 = !DILocation(line: 83, column: 1, scope: !1041)
!1054 = distinct !DISubprogram(name: "cgc_toupper", scope: !976, file: !976, line: 85, type: !215, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !294, retainedNodes: !4)
!1055 = !DILocalVariable(name: "c", arg: 1, scope: !1054, file: !976, line: 85, type: !77)
!1056 = !DILocation(line: 85, column: 22, scope: !1054)
!1057 = !DILocation(line: 87, column: 20, scope: !1058)
!1058 = distinct !DILexicalBlock(scope: !1054, file: !976, line: 87, column: 7)
!1059 = !DILocation(line: 87, column: 7, scope: !1058)
!1060 = !DILocation(line: 87, column: 7, scope: !1054)
!1061 = !DILocation(line: 88, column: 11, scope: !1058)
!1062 = !DILocation(line: 88, column: 13, scope: !1058)
!1063 = !DILocation(line: 88, column: 20, scope: !1058)
!1064 = !DILocation(line: 88, column: 3, scope: !1058)
!1065 = !DILocation(line: 90, column: 10, scope: !1058)
!1066 = !DILocation(line: 90, column: 3, scope: !1058)
!1067 = !DILocation(line: 91, column: 1, scope: !1054)
!1068 = distinct !DISubprogram(name: "cgc_tolower", scope: !976, file: !976, line: 93, type: !215, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !294, retainedNodes: !4)
!1069 = !DILocalVariable(name: "c", arg: 1, scope: !1068, file: !976, line: 93, type: !77)
!1070 = !DILocation(line: 93, column: 22, scope: !1068)
!1071 = !DILocation(line: 95, column: 20, scope: !1072)
!1072 = distinct !DILexicalBlock(scope: !1068, file: !976, line: 95, column: 7)
!1073 = !DILocation(line: 95, column: 7, scope: !1072)
!1074 = !DILocation(line: 95, column: 7, scope: !1068)
!1075 = !DILocation(line: 96, column: 17, scope: !1072)
!1076 = !DILocation(line: 96, column: 19, scope: !1072)
!1077 = !DILocation(line: 96, column: 26, scope: !1072)
!1078 = !DILocation(line: 96, column: 9, scope: !1072)
!1079 = !DILocation(line: 98, column: 10, scope: !1072)
!1080 = !DILocation(line: 98, column: 3, scope: !1072)
!1081 = !DILocation(line: 99, column: 1, scope: !1068)
!1082 = distinct !DISubprogram(name: "cgc_isspace", scope: !976, file: !976, line: 101, type: !215, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !294, retainedNodes: !4)
!1083 = !DILocalVariable(name: "c", arg: 1, scope: !1082, file: !976, line: 101, type: !77)
!1084 = !DILocation(line: 101, column: 22, scope: !1082)
!1085 = !DILocation(line: 103, column: 7, scope: !1086)
!1086 = distinct !DILexicalBlock(scope: !1082, file: !976, line: 103, column: 7)
!1087 = !DILocation(line: 103, column: 9, scope: !1086)
!1088 = !DILocation(line: 103, column: 16, scope: !1086)
!1089 = !DILocation(line: 104, column: 7, scope: !1086)
!1090 = !DILocation(line: 104, column: 9, scope: !1086)
!1091 = !DILocation(line: 104, column: 16, scope: !1086)
!1092 = !DILocation(line: 105, column: 7, scope: !1086)
!1093 = !DILocation(line: 105, column: 9, scope: !1086)
!1094 = !DILocation(line: 105, column: 15, scope: !1086)
!1095 = !DILocation(line: 106, column: 7, scope: !1086)
!1096 = !DILocation(line: 106, column: 9, scope: !1086)
!1097 = !DILocation(line: 106, column: 15, scope: !1086)
!1098 = !DILocation(line: 107, column: 7, scope: !1086)
!1099 = !DILocation(line: 107, column: 9, scope: !1086)
!1100 = !DILocation(line: 107, column: 15, scope: !1086)
!1101 = !DILocation(line: 108, column: 7, scope: !1086)
!1102 = !DILocation(line: 108, column: 9, scope: !1086)
!1103 = !DILocation(line: 103, column: 7, scope: !1082)
!1104 = !DILocation(line: 109, column: 3, scope: !1086)
!1105 = !DILocation(line: 111, column: 3, scope: !1086)
!1106 = !DILocation(line: 112, column: 1, scope: !1082)
!1107 = distinct !DISubprogram(name: "cgc_receive_bytes", scope: !1108, file: !1108, line: 30, type: !1109, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !296, retainedNodes: !4)
!1108 = !DIFile(filename: "challenges/3D_Image_Toolkit/lib/input.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!1109 = !DISubroutineType(types: !1110)
!1110 = !{!77, !19, !14}
!1111 = !DILocalVariable(name: "buffer", arg: 1, scope: !1107, file: !1108, line: 30, type: !19)
!1112 = !DILocation(line: 30, column: 30, scope: !1107)
!1113 = !DILocalVariable(name: "count", arg: 2, scope: !1107, file: !1108, line: 30, type: !14)
!1114 = !DILocation(line: 30, column: 49, scope: !1107)
!1115 = !DILocalVariable(name: "total", scope: !1107, file: !1108, line: 32, type: !14)
!1116 = !DILocation(line: 32, column: 12, scope: !1107)
!1117 = !DILocalVariable(name: "rxbytes", scope: !1107, file: !1108, line: 33, type: !14)
!1118 = !DILocation(line: 33, column: 12, scope: !1107)
!1119 = !DILocation(line: 35, column: 11, scope: !1107)
!1120 = !DILocation(line: 37, column: 5, scope: !1107)
!1121 = !DILocation(line: 37, column: 11, scope: !1107)
!1122 = !DILocation(line: 37, column: 19, scope: !1107)
!1123 = !DILocation(line: 37, column: 17, scope: !1107)
!1124 = !DILocation(line: 39, column: 17, scope: !1125)
!1125 = distinct !DILexicalBlock(scope: !1107, file: !1108, line: 37, column: 27)
!1126 = !DILocation(line: 41, column: 32, scope: !1127)
!1127 = distinct !DILexicalBlock(scope: !1125, file: !1108, line: 41, column: 13)
!1128 = !DILocation(line: 41, column: 39, scope: !1127)
!1129 = !DILocation(line: 41, column: 38, scope: !1127)
!1130 = !DILocation(line: 41, column: 46, scope: !1127)
!1131 = !DILocation(line: 41, column: 52, scope: !1127)
!1132 = !DILocation(line: 41, column: 51, scope: !1127)
!1133 = !DILocation(line: 41, column: 13, scope: !1127)
!1134 = !DILocation(line: 41, column: 68, scope: !1127)
!1135 = !DILocation(line: 41, column: 13, scope: !1125)
!1136 = !DILocation(line: 43, column: 17, scope: !1137)
!1137 = distinct !DILexicalBlock(scope: !1138, file: !1108, line: 43, column: 17)
!1138 = distinct !DILexicalBlock(scope: !1127, file: !1108, line: 41, column: 74)
!1139 = !DILocation(line: 43, column: 25, scope: !1137)
!1140 = !DILocation(line: 43, column: 17, scope: !1138)
!1141 = !DILocation(line: 44, column: 17, scope: !1137)
!1142 = !DILocation(line: 46, column: 26, scope: !1137)
!1143 = !DILocation(line: 46, column: 23, scope: !1137)
!1144 = !DILocation(line: 48, column: 9, scope: !1138)
!1145 = !DILocation(line: 51, column: 13, scope: !1146)
!1146 = distinct !DILexicalBlock(scope: !1127, file: !1108, line: 49, column: 14)
!1147 = distinct !{!1147, !1120, !1148}
!1148 = !DILocation(line: 55, column: 5, scope: !1107)
!1149 = !DILocation(line: 57, column: 1, scope: !1107)
!1150 = !DILocation(line: 59, column: 1, scope: !1107)
!1151 = distinct !DISubprogram(name: "cgc_receive_until", scope: !1108, file: !1108, line: 62, type: !1152, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !296, retainedNodes: !4)
!1152 = !DISubroutineType(types: !1153)
!1153 = !{!14, !19, !20, !14}
!1154 = !DILocalVariable(name: "buffer", arg: 1, scope: !1151, file: !1108, line: 62, type: !19)
!1155 = !DILocation(line: 62, column: 37, scope: !1151)
!1156 = !DILocalVariable(name: "delim", arg: 2, scope: !1151, file: !1108, line: 62, type: !20)
!1157 = !DILocation(line: 62, column: 50, scope: !1151)
!1158 = !DILocalVariable(name: "limit", arg: 3, scope: !1151, file: !1108, line: 62, type: !14)
!1159 = !DILocation(line: 62, column: 68, scope: !1151)
!1160 = !DILocalVariable(name: "len", scope: !1151, file: !1108, line: 64, type: !14)
!1161 = !DILocation(line: 64, column: 16, scope: !1151)
!1162 = !DILocalVariable(name: "rx", scope: !1151, file: !1108, line: 65, type: !14)
!1163 = !DILocation(line: 65, column: 16, scope: !1151)
!1164 = !DILocalVariable(name: "c", scope: !1151, file: !1108, line: 66, type: !20)
!1165 = !DILocation(line: 66, column: 10, scope: !1151)
!1166 = !DILocation(line: 68, column: 5, scope: !1151)
!1167 = !DILocation(line: 68, column: 12, scope: !1151)
!1168 = !DILocation(line: 68, column: 18, scope: !1151)
!1169 = !DILocation(line: 68, column: 16, scope: !1151)
!1170 = !DILocation(line: 69, column: 9, scope: !1171)
!1171 = distinct !DILexicalBlock(scope: !1151, file: !1108, line: 68, column: 26)
!1172 = !DILocation(line: 69, column: 16, scope: !1171)
!1173 = !DILocation(line: 69, column: 21, scope: !1171)
!1174 = !DILocation(line: 71, column: 14, scope: !1175)
!1175 = distinct !DILexicalBlock(scope: !1171, file: !1108, line: 71, column: 14)
!1176 = !DILocation(line: 71, column: 47, scope: !1175)
!1177 = !DILocation(line: 71, column: 14, scope: !1171)
!1178 = !DILocation(line: 72, column: 17, scope: !1179)
!1179 = distinct !DILexicalBlock(scope: !1175, file: !1108, line: 71, column: 54)
!1180 = !DILocation(line: 73, column: 13, scope: !1179)
!1181 = !DILocation(line: 76, column: 6, scope: !1182)
!1182 = distinct !DILexicalBlock(scope: !1171, file: !1108, line: 76, column: 6)
!1183 = !DILocation(line: 76, column: 9, scope: !1182)
!1184 = !DILocation(line: 76, column: 6, scope: !1171)
!1185 = !DILocation(line: 77, column: 7, scope: !1186)
!1186 = distinct !DILexicalBlock(scope: !1182, file: !1108, line: 76, column: 15)
!1187 = !DILocation(line: 78, column: 3, scope: !1186)
!1188 = !DILocation(line: 81, column: 14, scope: !1189)
!1189 = distinct !DILexicalBlock(scope: !1171, file: !1108, line: 81, column: 14)
!1190 = !DILocation(line: 81, column: 19, scope: !1189)
!1191 = !DILocation(line: 81, column: 16, scope: !1189)
!1192 = !DILocation(line: 81, column: 14, scope: !1171)
!1193 = !DILocation(line: 82, column: 13, scope: !1194)
!1194 = distinct !DILexicalBlock(scope: !1189, file: !1108, line: 81, column: 27)
!1195 = !DILocation(line: 85, column: 23, scope: !1171)
!1196 = !DILocation(line: 85, column: 9, scope: !1171)
!1197 = !DILocation(line: 85, column: 16, scope: !1171)
!1198 = !DILocation(line: 85, column: 21, scope: !1171)
!1199 = !DILocation(line: 86, column: 12, scope: !1171)
!1200 = distinct !{!1200, !1166, !1201}
!1201 = !DILocation(line: 87, column: 5, scope: !1151)
!1202 = !DILabel(scope: !1151, name: "end", file: !1108, line: 88)
!1203 = !DILocation(line: 88, column: 1, scope: !1151)
!1204 = !DILocation(line: 89, column: 12, scope: !1151)
!1205 = !DILocation(line: 89, column: 5, scope: !1151)
!1206 = distinct !DISubprogram(name: "cgc_link", scope: !9, file: !9, line: 45, type: !1207, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1207 = !DISubroutineType(types: !1208)
!1208 = !{null, !8}
!1209 = !DILocalVariable(name: "linkme", arg: 1, scope: !1206, file: !9, line: 45, type: !8)
!1210 = !DILocation(line: 45, column: 22, scope: !1206)
!1211 = !DILocalVariable(name: "walker", scope: !1206, file: !9, line: 47, type: !8)
!1212 = !DILocation(line: 47, column: 8, scope: !1206)
!1213 = !DILocation(line: 47, column: 17, scope: !1206)
!1214 = !DILocation(line: 49, column: 7, scope: !1215)
!1215 = distinct !DILexicalBlock(scope: !1206, file: !9, line: 49, column: 7)
!1216 = !DILocation(line: 49, column: 14, scope: !1215)
!1217 = !DILocation(line: 49, column: 7, scope: !1206)
!1218 = !DILocation(line: 50, column: 3, scope: !1219)
!1219 = distinct !DILexicalBlock(scope: !1215, file: !9, line: 49, column: 24)
!1220 = !DILocation(line: 54, column: 7, scope: !1221)
!1221 = distinct !DILexicalBlock(scope: !1206, file: !9, line: 54, column: 7)
!1222 = !DILocation(line: 54, column: 15, scope: !1221)
!1223 = !DILocation(line: 54, column: 22, scope: !1221)
!1224 = !DILocation(line: 54, column: 7, scope: !1206)
!1225 = !DILocation(line: 56, column: 29, scope: !1226)
!1226 = distinct !DILexicalBlock(scope: !1221, file: !9, line: 54, column: 32)
!1227 = !DILocation(line: 56, column: 18, scope: !1226)
!1228 = !DILocation(line: 56, column: 3, scope: !1226)
!1229 = !DILocation(line: 56, column: 11, scope: !1226)
!1230 = !DILocation(line: 56, column: 16, scope: !1226)
!1231 = !DILocation(line: 57, column: 43, scope: !1226)
!1232 = !DILocation(line: 57, column: 14, scope: !1226)
!1233 = !DILocation(line: 57, column: 3, scope: !1226)
!1234 = !DILocation(line: 57, column: 41, scope: !1226)
!1235 = !DILocation(line: 58, column: 3, scope: !1226)
!1236 = !DILocation(line: 61, column: 2, scope: !1206)
!1237 = !DILocation(line: 61, column: 10, scope: !1206)
!1238 = !DILocation(line: 62, column: 8, scope: !1239)
!1239 = distinct !DILexicalBlock(scope: !1240, file: !9, line: 62, column: 8)
!1240 = distinct !DILexicalBlock(scope: !1206, file: !9, line: 61, column: 19)
!1241 = !DILocation(line: 62, column: 16, scope: !1239)
!1242 = !DILocation(line: 62, column: 21, scope: !1239)
!1243 = !DILocation(line: 62, column: 8, scope: !1240)
!1244 = !DILocation(line: 63, column: 19, scope: !1245)
!1245 = distinct !DILexicalBlock(scope: !1239, file: !9, line: 62, column: 31)
!1246 = !DILocation(line: 63, column: 4, scope: !1245)
!1247 = !DILocation(line: 63, column: 12, scope: !1245)
!1248 = !DILocation(line: 63, column: 17, scope: !1245)
!1249 = !DILocation(line: 64, column: 19, scope: !1245)
!1250 = !DILocation(line: 64, column: 4, scope: !1245)
!1251 = !DILocation(line: 64, column: 12, scope: !1245)
!1252 = !DILocation(line: 64, column: 17, scope: !1245)
!1253 = !DILocation(line: 65, column: 4, scope: !1245)
!1254 = !DILocation(line: 65, column: 12, scope: !1245)
!1255 = !DILocation(line: 65, column: 17, scope: !1245)
!1256 = !DILocation(line: 66, column: 4, scope: !1245)
!1257 = !DILocation(line: 67, column: 15, scope: !1258)
!1258 = distinct !DILexicalBlock(scope: !1239, file: !9, line: 67, column: 15)
!1259 = !DILocation(line: 67, column: 23, scope: !1258)
!1260 = !DILocation(line: 67, column: 32, scope: !1258)
!1261 = !DILocation(line: 67, column: 40, scope: !1258)
!1262 = !DILocation(line: 67, column: 46, scope: !1258)
!1263 = !DILocation(line: 67, column: 30, scope: !1258)
!1264 = !DILocation(line: 67, column: 15, scope: !1239)
!1265 = !DILocation(line: 68, column: 19, scope: !1266)
!1266 = distinct !DILexicalBlock(scope: !1258, file: !9, line: 67, column: 55)
!1267 = !DILocation(line: 68, column: 27, scope: !1266)
!1268 = !DILocation(line: 68, column: 4, scope: !1266)
!1269 = !DILocation(line: 68, column: 12, scope: !1266)
!1270 = !DILocation(line: 68, column: 17, scope: !1266)
!1271 = !DILocation(line: 69, column: 19, scope: !1266)
!1272 = !DILocation(line: 69, column: 4, scope: !1266)
!1273 = !DILocation(line: 69, column: 12, scope: !1266)
!1274 = !DILocation(line: 69, column: 17, scope: !1266)
!1275 = !DILocation(line: 70, column: 25, scope: !1266)
!1276 = !DILocation(line: 70, column: 4, scope: !1266)
!1277 = !DILocation(line: 70, column: 12, scope: !1266)
!1278 = !DILocation(line: 70, column: 18, scope: !1266)
!1279 = !DILocation(line: 70, column: 23, scope: !1266)
!1280 = !DILocation(line: 71, column: 19, scope: !1266)
!1281 = !DILocation(line: 71, column: 4, scope: !1266)
!1282 = !DILocation(line: 71, column: 12, scope: !1266)
!1283 = !DILocation(line: 71, column: 17, scope: !1266)
!1284 = !DILocation(line: 72, column: 4, scope: !1266)
!1285 = !DILocation(line: 74, column: 13, scope: !1286)
!1286 = distinct !DILexicalBlock(scope: !1258, file: !9, line: 73, column: 10)
!1287 = !DILocation(line: 74, column: 21, scope: !1286)
!1288 = !DILocation(line: 74, column: 11, scope: !1286)
!1289 = distinct !{!1289, !1236, !1290}
!1290 = !DILocation(line: 76, column: 2, scope: !1206)
!1291 = !DILocation(line: 78, column: 2, scope: !1206)
!1292 = !DILocation(line: 79, column: 1, scope: !1206)
!1293 = distinct !DISubprogram(name: "cgc_add_freelist_block", scope: !9, file: !9, line: 81, type: !1294, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1294 = !DISubroutineType(types: !1295)
!1295 = !{null, !14}
!1296 = !DILocalVariable(name: "length", arg: 1, scope: !1293, file: !9, line: 81, type: !14)
!1297 = !DILocation(line: 81, column: 41, scope: !1293)
!1298 = !DILocalVariable(name: "block", scope: !1293, file: !9, line: 83, type: !8)
!1299 = !DILocation(line: 83, column: 8, scope: !1293)
!1300 = !DILocalVariable(name: "walker", scope: !1293, file: !9, line: 84, type: !8)
!1301 = !DILocation(line: 84, column: 8, scope: !1293)
!1302 = !DILocation(line: 89, column: 9, scope: !1293)
!1303 = !DILocation(line: 91, column: 12, scope: !1293)
!1304 = !DILocation(line: 91, column: 19, scope: !1293)
!1305 = !DILocation(line: 91, column: 28, scope: !1293)
!1306 = !DILocation(line: 91, column: 9, scope: !1293)
!1307 = !DILocation(line: 93, column: 21, scope: !1308)
!1308 = distinct !DILexicalBlock(scope: !1293, file: !9, line: 93, column: 7)
!1309 = !DILocation(line: 93, column: 32, scope: !1308)
!1310 = !DILocation(line: 93, column: 7, scope: !1308)
!1311 = !DILocation(line: 93, column: 48, scope: !1308)
!1312 = !DILocation(line: 93, column: 7, scope: !1293)
!1313 = !DILocation(line: 94, column: 67, scope: !1314)
!1314 = distinct !DILexicalBlock(scope: !1308, file: !9, line: 93, column: 55)
!1315 = !DILocation(line: 94, column: 3, scope: !1314)
!1316 = !DILocation(line: 95, column: 3, scope: !1314)
!1317 = !DILocation(line: 98, column: 13, scope: !1293)
!1318 = !DILocation(line: 98, column: 20, scope: !1293)
!1319 = !DILocation(line: 98, column: 2, scope: !1293)
!1320 = !DILocation(line: 100, column: 18, scope: !1293)
!1321 = !DILocation(line: 100, column: 24, scope: !1293)
!1322 = !DILocation(line: 100, column: 2, scope: !1293)
!1323 = !DILocation(line: 100, column: 9, scope: !1293)
!1324 = !DILocation(line: 100, column: 16, scope: !1293)
!1325 = !DILocation(line: 102, column: 7, scope: !1326)
!1326 = distinct !DILexicalBlock(scope: !1293, file: !9, line: 102, column: 7)
!1327 = !DILocation(line: 102, column: 20, scope: !1326)
!1328 = !DILocation(line: 102, column: 7, scope: !1293)
!1329 = !DILocation(line: 103, column: 18, scope: !1330)
!1330 = distinct !DILexicalBlock(scope: !1326, file: !9, line: 102, column: 30)
!1331 = !DILocation(line: 103, column: 16, scope: !1330)
!1332 = !DILocation(line: 104, column: 3, scope: !1330)
!1333 = !DILocation(line: 107, column: 12, scope: !1293)
!1334 = !DILocation(line: 107, column: 2, scope: !1293)
!1335 = !DILocation(line: 109, column: 2, scope: !1293)
!1336 = !DILocation(line: 110, column: 1, scope: !1293)
!1337 = distinct !DISubprogram(name: "cgc_printf", scope: !49, file: !49, line: 169, type: !1338, scopeLine: 170, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!1338 = !DISubroutineType(types: !1339)
!1339 = !{!77, !273, null}
!1340 = !DILocalVariable(name: "format", arg: 1, scope: !1337, file: !49, line: 169, type: !273)
!1341 = !DILocation(line: 169, column: 29, scope: !1337)
!1342 = !DILocalVariable(name: "args", scope: !1337, file: !49, line: 171, type: !1343)
!1343 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !1344, line: 32, baseType: !1345)
!1344 = !DIFile(filename: "challenges/3D_Image_Toolkit/lib/cgc_stdarg.h", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!1345 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !43, line: 171, baseType: !1346)
!1346 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1347, size: 192, elements: !1353)
!1347 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !43, line: 136, size: 192, elements: !1348)
!1348 = !{!1349, !1350, !1351, !1352}
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !1347, file: !43, line: 136, baseType: !32, size: 32)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !1347, file: !43, line: 136, baseType: !32, size: 32, offset: 32)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !1347, file: !43, line: 136, baseType: !7, size: 64, offset: 64)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !1347, file: !43, line: 136, baseType: !7, size: 64, offset: 128)
!1353 = !{!1354}
!1354 = !DISubrange(count: 1)
!1355 = !DILocation(line: 171, column: 10, scope: !1337)
!1356 = !DILocation(line: 172, column: 2, scope: !1337)
!1357 = !DILocalVariable(name: "return_val", scope: !1337, file: !49, line: 174, type: !77)
!1358 = !DILocation(line: 174, column: 6, scope: !1337)
!1359 = !DILocation(line: 174, column: 41, scope: !1337)
!1360 = !DILocation(line: 174, column: 49, scope: !1337)
!1361 = !DILocation(line: 174, column: 19, scope: !1337)
!1362 = !DILocation(line: 176, column: 2, scope: !1337)
!1363 = !DILocation(line: 178, column: 10, scope: !1337)
!1364 = !DILocation(line: 178, column: 2, scope: !1337)
!1365 = distinct !DISubprogram(name: "cgc_bzero", scope: !71, file: !71, line: 38, type: !1366, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !65, retainedNodes: !4)
!1366 = !DISubroutineType(types: !1367)
!1367 = !{null, !7, !14}
!1368 = !DILocalVariable(name: "s", arg: 1, scope: !1365, file: !71, line: 38, type: !7)
!1369 = !DILocation(line: 38, column: 22, scope: !1365)
!1370 = !DILocalVariable(name: "n", arg: 2, scope: !1365, file: !71, line: 38, type: !14)
!1371 = !DILocation(line: 38, column: 36, scope: !1365)
!1372 = !DILocation(line: 39, column: 9, scope: !1365)
!1373 = !DILocation(line: 39, column: 16, scope: !1365)
!1374 = !DILocation(line: 40, column: 26, scope: !1375)
!1375 = distinct !DILexicalBlock(scope: !1365, file: !71, line: 39, column: 19)
!1376 = !DILocation(line: 40, column: 29, scope: !1375)
!1377 = !DILocation(line: 40, column: 17, scope: !1375)
!1378 = !DILocation(line: 40, column: 34, scope: !1375)
!1379 = distinct !{!1379, !1372, !1380}
!1380 = !DILocation(line: 41, column: 9, scope: !1365)
!1381 = !DILocation(line: 42, column: 18, scope: !1365)
!1382 = !DILocation(line: 42, column: 21, scope: !1365)
!1383 = !DILocation(line: 42, column: 9, scope: !1365)
!1384 = !DILocation(line: 42, column: 24, scope: !1365)
!1385 = !DILocation(line: 43, column: 1, scope: !1365)
!1386 = distinct !DISubprogram(name: "cgc_vprintf_buffered", scope: !49, file: !49, line: 138, type: !1387, scopeLine: 139, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!1387 = !DISubroutineType(types: !1388)
!1388 = !{!77, !273, !1389}
!1389 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1347, size: 64)
!1390 = !DILocalVariable(name: "format", arg: 1, scope: !1386, file: !49, line: 138, type: !273)
!1391 = !DILocation(line: 138, column: 39, scope: !1386)
!1392 = !DILocalVariable(name: "args", arg: 2, scope: !1386, file: !49, line: 138, type: !1389)
!1393 = !DILocation(line: 138, column: 55, scope: !1386)
!1394 = !DILocalVariable(name: "wrapper_putc_buffered", scope: !1386, file: !49, line: 140, type: !1395)
!1395 = !DIDerivedType(tag: DW_TAG_typedef, name: "tPrintfWrapperFP", file: !49, line: 45, baseType: !1396)
!1396 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1397, size: 64)
!1397 = !DISubroutineType(types: !1398)
!1398 = !{!77, !7, !77, !14}
!1399 = !DILocation(line: 140, column: 19, scope: !1386)
!1400 = !DILocalVariable(name: "g_putcBuffer", scope: !1386, file: !49, line: 142, type: !48)
!1401 = !DILocation(line: 142, column: 18, scope: !1386)
!1402 = !DILocation(line: 143, column: 15, scope: !1386)
!1403 = !DILocation(line: 143, column: 25, scope: !1386)
!1404 = !DILocalVariable(name: "ctx", scope: !1386, file: !49, line: 145, type: !7)
!1405 = !DILocation(line: 145, column: 8, scope: !1386)
!1406 = !DILocation(line: 145, column: 14, scope: !1386)
!1407 = !DILocalVariable(name: "pos", scope: !1386, file: !49, line: 146, type: !14)
!1408 = !DILocation(line: 146, column: 13, scope: !1386)
!1409 = !DILocalVariable(name: "iReturn", scope: !1386, file: !49, line: 148, type: !77)
!1410 = !DILocation(line: 148, column: 6, scope: !1386)
!1411 = !DILocation(line: 148, column: 36, scope: !1386)
!1412 = !DILocation(line: 148, column: 41, scope: !1386)
!1413 = !DILocation(line: 148, column: 64, scope: !1386)
!1414 = !DILocation(line: 148, column: 69, scope: !1386)
!1415 = !DILocation(line: 148, column: 77, scope: !1386)
!1416 = !DILocation(line: 148, column: 16, scope: !1386)
!1417 = !DILocalVariable(name: "pBufferPos", scope: !1386, file: !49, line: 151, type: !19)
!1418 = !DILocation(line: 151, column: 8, scope: !1386)
!1419 = !DILocation(line: 151, column: 34, scope: !1386)
!1420 = !DILocation(line: 151, column: 21, scope: !1386)
!1421 = !DILocation(line: 152, column: 2, scope: !1386)
!1422 = !DILocation(line: 152, column: 23, scope: !1386)
!1423 = !DILocation(line: 152, column: 10, scope: !1386)
!1424 = !DILocation(line: 152, column: 33, scope: !1386)
!1425 = !DILocalVariable(name: "tx_bytes", scope: !1426, file: !49, line: 154, type: !14)
!1426 = distinct !DILexicalBlock(scope: !1386, file: !49, line: 153, column: 2)
!1427 = !DILocation(line: 154, column: 21, scope: !1426)
!1428 = !DILocation(line: 156, column: 51, scope: !1429)
!1429 = distinct !DILexicalBlock(scope: !1426, file: !49, line: 156, column: 15)
!1430 = !DILocation(line: 156, column: 76, scope: !1429)
!1431 = !DILocation(line: 156, column: 63, scope: !1429)
!1432 = !DILocation(line: 156, column: 15, scope: !1429)
!1433 = !DILocation(line: 156, column: 99, scope: !1429)
!1434 = !DILocation(line: 156, column: 15, scope: !1426)
!1435 = !DILocation(line: 157, column: 18, scope: !1429)
!1436 = !DILocation(line: 159, column: 8, scope: !1437)
!1437 = distinct !DILexicalBlock(scope: !1426, file: !49, line: 159, column: 8)
!1438 = !DILocation(line: 159, column: 17, scope: !1437)
!1439 = !DILocation(line: 159, column: 8, scope: !1426)
!1440 = !DILocation(line: 160, column: 4, scope: !1437)
!1441 = !DILocation(line: 162, column: 29, scope: !1426)
!1442 = !DILocation(line: 162, column: 16, scope: !1426)
!1443 = !DILocation(line: 162, column: 26, scope: !1426)
!1444 = !DILocation(line: 163, column: 17, scope: !1426)
!1445 = !DILocation(line: 163, column: 14, scope: !1426)
!1446 = distinct !{!1446, !1421, !1447}
!1447 = !DILocation(line: 164, column: 2, scope: !1386)
!1448 = !DILocation(line: 166, column: 9, scope: !1386)
!1449 = !DILocation(line: 166, column: 2, scope: !1386)
!1450 = !DILocation(line: 167, column: 1, scope: !1386)
!1451 = distinct !DISubprogram(name: "cgc_WRAPPER_BUFFER_PUTC", scope: !49, file: !49, line: 77, type: !1397, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!1452 = !DILocalVariable(name: "ctx", arg: 1, scope: !1451, file: !49, line: 77, type: !7)
!1453 = !DILocation(line: 77, column: 36, scope: !1451)
!1454 = !DILocalVariable(name: "c", arg: 2, scope: !1451, file: !49, line: 77, type: !77)
!1455 = !DILocation(line: 77, column: 45, scope: !1451)
!1456 = !DILocalVariable(name: "pos", arg: 3, scope: !1451, file: !49, line: 77, type: !14)
!1457 = !DILocation(line: 77, column: 59, scope: !1451)
!1458 = !DILocalVariable(name: "pBufferData", scope: !1451, file: !49, line: 79, type: !47)
!1459 = !DILocation(line: 79, column: 19, scope: !1451)
!1460 = !DILocation(line: 79, column: 52, scope: !1451)
!1461 = !DILocation(line: 79, column: 33, scope: !1451)
!1462 = !DILocation(line: 81, column: 7, scope: !1463)
!1463 = distinct !DILexicalBlock(scope: !1451, file: !49, line: 81, column: 7)
!1464 = !DILocation(line: 81, column: 20, scope: !1463)
!1465 = !DILocation(line: 81, column: 30, scope: !1463)
!1466 = !DILocation(line: 81, column: 7, scope: !1451)
!1467 = !DILocalVariable(name: "pBufferPos", scope: !1468, file: !49, line: 83, type: !19)
!1468 = distinct !DILexicalBlock(scope: !1463, file: !49, line: 82, column: 2)
!1469 = !DILocation(line: 83, column: 9, scope: !1468)
!1470 = !DILocation(line: 83, column: 22, scope: !1468)
!1471 = !DILocation(line: 83, column: 35, scope: !1468)
!1472 = !DILocation(line: 85, column: 3, scope: !1468)
!1473 = !DILocation(line: 85, column: 11, scope: !1468)
!1474 = !DILocation(line: 85, column: 24, scope: !1468)
!1475 = !DILocation(line: 85, column: 34, scope: !1468)
!1476 = !DILocalVariable(name: "tx_bytes", scope: !1477, file: !49, line: 87, type: !14)
!1477 = distinct !DILexicalBlock(scope: !1468, file: !49, line: 86, column: 3)
!1478 = !DILocation(line: 87, column: 15, scope: !1477)
!1479 = !DILocation(line: 89, column: 45, scope: !1480)
!1480 = distinct !DILexicalBlock(scope: !1477, file: !49, line: 89, column: 9)
!1481 = !DILocation(line: 89, column: 57, scope: !1480)
!1482 = !DILocation(line: 89, column: 70, scope: !1480)
!1483 = !DILocation(line: 89, column: 9, scope: !1480)
!1484 = !DILocation(line: 89, column: 93, scope: !1480)
!1485 = !DILocation(line: 89, column: 9, scope: !1477)
!1486 = !DILocation(line: 90, column: 5, scope: !1480)
!1487 = !DILocation(line: 92, column: 9, scope: !1488)
!1488 = distinct !DILexicalBlock(scope: !1477, file: !49, line: 92, column: 9)
!1489 = !DILocation(line: 92, column: 18, scope: !1488)
!1490 = !DILocation(line: 92, column: 9, scope: !1477)
!1491 = !DILocation(line: 93, column: 5, scope: !1488)
!1492 = !DILocation(line: 95, column: 30, scope: !1477)
!1493 = !DILocation(line: 95, column: 4, scope: !1477)
!1494 = !DILocation(line: 95, column: 17, scope: !1477)
!1495 = !DILocation(line: 95, column: 27, scope: !1477)
!1496 = !DILocation(line: 96, column: 18, scope: !1477)
!1497 = !DILocation(line: 96, column: 15, scope: !1477)
!1498 = distinct !{!1498, !1472, !1499}
!1499 = !DILocation(line: 97, column: 3, scope: !1468)
!1500 = !DILocation(line: 98, column: 2, scope: !1468)
!1501 = !DILocation(line: 100, column: 58, scope: !1451)
!1502 = !DILocation(line: 100, column: 52, scope: !1451)
!1503 = !DILocation(line: 100, column: 2, scope: !1451)
!1504 = !DILocation(line: 100, column: 15, scope: !1451)
!1505 = !DILocation(line: 100, column: 24, scope: !1451)
!1506 = !DILocation(line: 100, column: 37, scope: !1451)
!1507 = !DILocation(line: 100, column: 46, scope: !1451)
!1508 = !DILocation(line: 100, column: 50, scope: !1451)
!1509 = !DILocation(line: 102, column: 10, scope: !1451)
!1510 = !DILocation(line: 102, column: 13, scope: !1451)
!1511 = !DILocation(line: 102, column: 9, scope: !1451)
!1512 = !DILocation(line: 102, column: 2, scope: !1451)
!1513 = !DILocation(line: 103, column: 1, scope: !1451)
!1514 = distinct !DISubprogram(name: "cgc_wrapper_output", scope: !49, file: !49, line: 655, type: !1515, scopeLine: 656, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!1515 = !DISubroutineType(types: !1516)
!1516 = !{!77, !7, !1395, !14, !273, !1389}
!1517 = !DILocalVariable(name: "ctx", arg: 1, scope: !1514, file: !49, line: 655, type: !7)
!1518 = !DILocation(line: 655, column: 31, scope: !1514)
!1519 = !DILocalVariable(name: "fpOut", arg: 2, scope: !1514, file: !49, line: 655, type: !1395)
!1520 = !DILocation(line: 655, column: 53, scope: !1514)
!1521 = !DILocalVariable(name: "pos", arg: 3, scope: !1514, file: !49, line: 655, type: !14)
!1522 = !DILocation(line: 655, column: 71, scope: !1514)
!1523 = !DILocalVariable(name: "format", arg: 4, scope: !1514, file: !49, line: 655, type: !273)
!1524 = !DILocation(line: 655, column: 88, scope: !1514)
!1525 = !DILocalVariable(name: "args", arg: 5, scope: !1514, file: !49, line: 655, type: !1389)
!1526 = !DILocation(line: 655, column: 104, scope: !1514)
!1527 = !DILocalVariable(name: "flags", scope: !1514, file: !49, line: 658, type: !308)
!1528 = !DILocation(line: 658, column: 10, scope: !1514)
!1529 = !DILocalVariable(name: "width", scope: !1514, file: !49, line: 659, type: !308)
!1530 = !DILocation(line: 659, column: 10, scope: !1514)
!1531 = !DILocalVariable(name: "pad_length", scope: !1514, file: !49, line: 660, type: !308)
!1532 = !DILocation(line: 660, column: 10, scope: !1514)
!1533 = !DILocalVariable(name: "precision", scope: !1514, file: !49, line: 661, type: !308)
!1534 = !DILocation(line: 661, column: 10, scope: !1514)
!1535 = !DILocation(line: 663, column: 2, scope: !1514)
!1536 = !DILocation(line: 663, column: 11, scope: !1514)
!1537 = !DILocation(line: 663, column: 10, scope: !1514)
!1538 = !DILocation(line: 663, column: 18, scope: !1514)
!1539 = !DILocalVariable(name: "curChar", scope: !1540, file: !49, line: 665, type: !20)
!1540 = distinct !DILexicalBlock(scope: !1514, file: !49, line: 664, column: 2)
!1541 = !DILocation(line: 665, column: 8, scope: !1540)
!1542 = !DILocation(line: 665, column: 19, scope: !1540)
!1543 = !DILocation(line: 665, column: 18, scope: !1540)
!1544 = !DILocation(line: 666, column: 9, scope: !1540)
!1545 = !DILocation(line: 668, column: 8, scope: !1546)
!1546 = distinct !DILexicalBlock(scope: !1540, file: !49, line: 668, column: 8)
!1547 = !DILocation(line: 668, column: 16, scope: !1546)
!1548 = !DILocation(line: 668, column: 8, scope: !1540)
!1549 = !DILocation(line: 670, column: 43, scope: !1550)
!1550 = distinct !DILexicalBlock(scope: !1546, file: !49, line: 669, column: 3)
!1551 = !DILocation(line: 670, column: 31, scope: !1550)
!1552 = !DILocation(line: 670, column: 18, scope: !1550)
!1553 = !DILocation(line: 670, column: 10, scope: !1550)
!1554 = !DILocation(line: 672, column: 10, scope: !1555)
!1555 = distinct !DILexicalBlock(scope: !1550, file: !49, line: 672, column: 9)
!1556 = !DILocation(line: 672, column: 9, scope: !1555)
!1557 = !DILocation(line: 672, column: 17, scope: !1555)
!1558 = !DILocation(line: 672, column: 9, scope: !1550)
!1559 = !DILocation(line: 673, column: 5, scope: !1555)
!1560 = !DILocation(line: 675, column: 10, scope: !1561)
!1561 = distinct !DILexicalBlock(scope: !1550, file: !49, line: 675, column: 9)
!1562 = !DILocation(line: 675, column: 9, scope: !1561)
!1563 = !DILocation(line: 675, column: 17, scope: !1561)
!1564 = !DILocation(line: 675, column: 9, scope: !1550)
!1565 = !DILocation(line: 678, column: 13, scope: !1566)
!1566 = distinct !DILexicalBlock(scope: !1561, file: !49, line: 676, column: 4)
!1567 = !DILocation(line: 678, column: 21, scope: !1566)
!1568 = !DILocation(line: 678, column: 31, scope: !1566)
!1569 = !DILocation(line: 678, column: 11, scope: !1566)
!1570 = !DILocation(line: 678, column: 9, scope: !1566)
!1571 = !DILocation(line: 679, column: 5, scope: !1566)
!1572 = distinct !{!1572, !1535, !1573}
!1573 = !DILocation(line: 810, column: 2, scope: !1514)
!1574 = !DILocation(line: 682, column: 10, scope: !1575)
!1575 = distinct !DILexicalBlock(scope: !1550, file: !49, line: 682, column: 9)
!1576 = !DILocation(line: 682, column: 9, scope: !1575)
!1577 = !DILocation(line: 682, column: 17, scope: !1575)
!1578 = !DILocation(line: 682, column: 9, scope: !1550)
!1579 = !DILocation(line: 684, column: 11, scope: !1580)
!1580 = distinct !DILexicalBlock(scope: !1575, file: !49, line: 683, column: 4)
!1581 = !DILocation(line: 686, column: 11, scope: !1580)
!1582 = !DILocation(line: 688, column: 11, scope: !1583)
!1583 = distinct !DILexicalBlock(scope: !1580, file: !49, line: 688, column: 10)
!1584 = !DILocation(line: 688, column: 10, scope: !1583)
!1585 = !DILocation(line: 688, column: 18, scope: !1583)
!1586 = !DILocation(line: 688, column: 10, scope: !1580)
!1587 = !DILocation(line: 689, column: 6, scope: !1583)
!1588 = !DILocation(line: 690, column: 4, scope: !1580)
!1589 = !DILocation(line: 693, column: 23, scope: !1590)
!1590 = distinct !DILexicalBlock(scope: !1550, file: !49, line: 693, column: 9)
!1591 = !DILocation(line: 693, column: 22, scope: !1590)
!1592 = !DILocation(line: 693, column: 9, scope: !1590)
!1593 = !DILocation(line: 693, column: 9, scope: !1550)
!1594 = !DILocation(line: 695, column: 11, scope: !1595)
!1595 = distinct !DILexicalBlock(scope: !1596, file: !49, line: 695, column: 10)
!1596 = distinct !DILexicalBlock(scope: !1590, file: !49, line: 694, column: 4)
!1597 = !DILocation(line: 695, column: 10, scope: !1595)
!1598 = !DILocation(line: 695, column: 18, scope: !1595)
!1599 = !DILocation(line: 695, column: 10, scope: !1596)
!1600 = !DILocation(line: 696, column: 12, scope: !1595)
!1601 = !DILocation(line: 696, column: 6, scope: !1595)
!1602 = !DILocalVariable(name: "startpos", scope: !1596, file: !49, line: 698, type: !273)
!1603 = !DILocation(line: 698, column: 17, scope: !1596)
!1604 = !DILocation(line: 698, column: 28, scope: !1596)
!1605 = !DILocation(line: 699, column: 5, scope: !1596)
!1606 = !DILocation(line: 699, column: 27, scope: !1596)
!1607 = !DILocation(line: 699, column: 26, scope: !1596)
!1608 = !DILocation(line: 699, column: 13, scope: !1596)
!1609 = !DILocation(line: 700, column: 12, scope: !1596)
!1610 = distinct !{!1610, !1605, !1609}
!1611 = !DILocation(line: 702, column: 23, scope: !1596)
!1612 = !DILocation(line: 702, column: 13, scope: !1596)
!1613 = !DILocation(line: 702, column: 11, scope: !1596)
!1614 = !DILocation(line: 704, column: 11, scope: !1615)
!1615 = distinct !DILexicalBlock(scope: !1596, file: !49, line: 704, column: 10)
!1616 = !DILocation(line: 704, column: 10, scope: !1615)
!1617 = !DILocation(line: 704, column: 18, scope: !1615)
!1618 = !DILocation(line: 704, column: 10, scope: !1596)
!1619 = !DILocation(line: 705, column: 6, scope: !1615)
!1620 = !DILocation(line: 706, column: 4, scope: !1596)
!1621 = !DILocation(line: 709, column: 10, scope: !1622)
!1622 = distinct !DILexicalBlock(scope: !1550, file: !49, line: 709, column: 9)
!1623 = !DILocation(line: 709, column: 9, scope: !1622)
!1624 = !DILocation(line: 709, column: 17, scope: !1622)
!1625 = !DILocation(line: 709, column: 9, scope: !1550)
!1626 = !DILocation(line: 711, column: 11, scope: !1627)
!1627 = distinct !DILexicalBlock(scope: !1622, file: !49, line: 710, column: 4)
!1628 = !DILocation(line: 713, column: 11, scope: !1629)
!1629 = distinct !DILexicalBlock(scope: !1627, file: !49, line: 713, column: 10)
!1630 = !DILocation(line: 713, column: 10, scope: !1629)
!1631 = !DILocation(line: 713, column: 18, scope: !1629)
!1632 = !DILocation(line: 713, column: 10, scope: !1627)
!1633 = !DILocation(line: 714, column: 6, scope: !1629)
!1634 = !DILocalVariable(name: "startpos", scope: !1627, file: !49, line: 716, type: !273)
!1635 = !DILocation(line: 716, column: 17, scope: !1627)
!1636 = !DILocation(line: 716, column: 28, scope: !1627)
!1637 = !DILocation(line: 717, column: 5, scope: !1627)
!1638 = !DILocation(line: 717, column: 27, scope: !1627)
!1639 = !DILocation(line: 717, column: 26, scope: !1627)
!1640 = !DILocation(line: 717, column: 13, scope: !1627)
!1641 = !DILocation(line: 718, column: 12, scope: !1627)
!1642 = distinct !{!1642, !1637, !1641}
!1643 = !DILocation(line: 720, column: 27, scope: !1627)
!1644 = !DILocation(line: 720, column: 17, scope: !1627)
!1645 = !DILocation(line: 720, column: 15, scope: !1627)
!1646 = !DILocation(line: 722, column: 11, scope: !1647)
!1647 = distinct !DILexicalBlock(scope: !1627, file: !49, line: 722, column: 10)
!1648 = !DILocation(line: 722, column: 10, scope: !1647)
!1649 = !DILocation(line: 722, column: 18, scope: !1647)
!1650 = !DILocation(line: 722, column: 10, scope: !1627)
!1651 = !DILocation(line: 723, column: 6, scope: !1647)
!1652 = !DILocation(line: 724, column: 4, scope: !1627)
!1653 = !DILocation(line: 726, column: 14, scope: !1550)
!1654 = !DILocation(line: 726, column: 13, scope: !1550)
!1655 = !DILocation(line: 726, column: 4, scope: !1550)
!1656 = !DILocalVariable(name: "print_str", scope: !1657, file: !49, line: 731, type: !273)
!1657 = distinct !DILexicalBlock(scope: !1658, file: !49, line: 729, column: 5)
!1658 = distinct !DILexicalBlock(scope: !1550, file: !49, line: 727, column: 4)
!1659 = !DILocation(line: 731, column: 18, scope: !1657)
!1660 = !DILocation(line: 731, column: 30, scope: !1657)
!1661 = !DILocation(line: 732, column: 38, scope: !1657)
!1662 = !DILocation(line: 732, column: 43, scope: !1657)
!1663 = !DILocation(line: 732, column: 50, scope: !1657)
!1664 = !DILocation(line: 732, column: 55, scope: !1657)
!1665 = !DILocation(line: 732, column: 66, scope: !1657)
!1666 = !DILocation(line: 732, column: 73, scope: !1657)
!1667 = !DILocation(line: 732, column: 84, scope: !1657)
!1668 = !DILocation(line: 732, column: 12, scope: !1657)
!1669 = !DILocation(line: 732, column: 10, scope: !1657)
!1670 = !DILocation(line: 734, column: 5, scope: !1658)
!1671 = !DILocalVariable(name: "print_int", scope: !1672, file: !49, line: 739, type: !308)
!1672 = distinct !DILexicalBlock(scope: !1658, file: !49, line: 737, column: 5)
!1673 = !DILocation(line: 739, column: 14, scope: !1672)
!1674 = !DILocation(line: 739, column: 26, scope: !1672)
!1675 = !DILocation(line: 740, column: 35, scope: !1672)
!1676 = !DILocation(line: 740, column: 40, scope: !1672)
!1677 = !DILocation(line: 740, column: 47, scope: !1672)
!1678 = !DILocation(line: 740, column: 52, scope: !1672)
!1679 = !DILocation(line: 740, column: 67, scope: !1672)
!1680 = !DILocation(line: 740, column: 74, scope: !1672)
!1681 = !DILocation(line: 740, column: 85, scope: !1672)
!1682 = !DILocation(line: 740, column: 12, scope: !1672)
!1683 = !DILocation(line: 740, column: 10, scope: !1672)
!1684 = !DILocation(line: 742, column: 5, scope: !1658)
!1685 = !DILocalVariable(name: "print_int", scope: !1686, file: !49, line: 747, type: !308)
!1686 = distinct !DILexicalBlock(scope: !1658, file: !49, line: 745, column: 5)
!1687 = !DILocation(line: 747, column: 14, scope: !1686)
!1688 = !DILocation(line: 747, column: 26, scope: !1686)
!1689 = !DILocation(line: 748, column: 35, scope: !1686)
!1690 = !DILocation(line: 748, column: 40, scope: !1686)
!1691 = !DILocation(line: 748, column: 47, scope: !1686)
!1692 = !DILocation(line: 748, column: 52, scope: !1686)
!1693 = !DILocation(line: 748, column: 67, scope: !1686)
!1694 = !DILocation(line: 748, column: 74, scope: !1686)
!1695 = !DILocation(line: 748, column: 85, scope: !1686)
!1696 = !DILocation(line: 748, column: 12, scope: !1686)
!1697 = !DILocation(line: 748, column: 10, scope: !1686)
!1698 = !DILocation(line: 750, column: 5, scope: !1658)
!1699 = !DILocation(line: 755, column: 12, scope: !1700)
!1700 = distinct !DILexicalBlock(scope: !1658, file: !49, line: 753, column: 5)
!1701 = !DILocalVariable(name: "print_int", scope: !1700, file: !49, line: 757, type: !308)
!1702 = !DILocation(line: 757, column: 14, scope: !1700)
!1703 = !DILocation(line: 757, column: 26, scope: !1700)
!1704 = !DILocation(line: 758, column: 35, scope: !1700)
!1705 = !DILocation(line: 758, column: 40, scope: !1700)
!1706 = !DILocation(line: 758, column: 47, scope: !1700)
!1707 = !DILocation(line: 758, column: 52, scope: !1700)
!1708 = !DILocation(line: 758, column: 67, scope: !1700)
!1709 = !DILocation(line: 758, column: 74, scope: !1700)
!1710 = !DILocation(line: 758, column: 85, scope: !1700)
!1711 = !DILocation(line: 758, column: 12, scope: !1700)
!1712 = !DILocation(line: 758, column: 10, scope: !1700)
!1713 = !DILocation(line: 760, column: 5, scope: !1658)
!1714 = !DILocalVariable(name: "print_float", scope: !1715, file: !49, line: 765, type: !61)
!1715 = distinct !DILexicalBlock(scope: !1658, file: !49, line: 763, column: 5)
!1716 = !DILocation(line: 765, column: 13, scope: !1715)
!1717 = !DILocation(line: 765, column: 27, scope: !1715)
!1718 = !DILocation(line: 766, column: 37, scope: !1715)
!1719 = !DILocation(line: 766, column: 42, scope: !1715)
!1720 = !DILocation(line: 766, column: 49, scope: !1715)
!1721 = !DILocation(line: 766, column: 54, scope: !1715)
!1722 = !DILocation(line: 766, column: 67, scope: !1715)
!1723 = !DILocation(line: 766, column: 74, scope: !1715)
!1724 = !DILocation(line: 766, column: 85, scope: !1715)
!1725 = !DILocation(line: 766, column: 12, scope: !1715)
!1726 = !DILocation(line: 766, column: 10, scope: !1715)
!1727 = !DILocation(line: 768, column: 5, scope: !1658)
!1728 = !DILocation(line: 773, column: 12, scope: !1729)
!1729 = distinct !DILexicalBlock(scope: !1658, file: !49, line: 771, column: 5)
!1730 = !DILocalVariable(name: "print_float", scope: !1729, file: !49, line: 775, type: !61)
!1731 = !DILocation(line: 775, column: 13, scope: !1729)
!1732 = !DILocation(line: 775, column: 27, scope: !1729)
!1733 = !DILocation(line: 776, column: 37, scope: !1729)
!1734 = !DILocation(line: 776, column: 42, scope: !1729)
!1735 = !DILocation(line: 776, column: 49, scope: !1729)
!1736 = !DILocation(line: 776, column: 54, scope: !1729)
!1737 = !DILocation(line: 776, column: 67, scope: !1729)
!1738 = !DILocation(line: 776, column: 74, scope: !1729)
!1739 = !DILocation(line: 776, column: 85, scope: !1729)
!1740 = !DILocation(line: 776, column: 12, scope: !1729)
!1741 = !DILocation(line: 776, column: 10, scope: !1729)
!1742 = !DILocation(line: 778, column: 5, scope: !1658)
!1743 = !DILocalVariable(name: "signed_int_p", scope: !1744, file: !49, line: 782, type: !1745)
!1744 = distinct !DILexicalBlock(scope: !1658, file: !49, line: 781, column: 5)
!1745 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !308, size: 64)
!1746 = !DILocation(line: 782, column: 15, scope: !1744)
!1747 = !DILocation(line: 782, column: 30, scope: !1744)
!1748 = !DILocation(line: 784, column: 24, scope: !1744)
!1749 = !DILocation(line: 784, column: 8, scope: !1744)
!1750 = !DILocation(line: 784, column: 22, scope: !1744)
!1751 = !DILocation(line: 786, column: 5, scope: !1658)
!1752 = !DILocalVariable(name: "char_arg", scope: !1753, file: !49, line: 791, type: !20)
!1753 = distinct !DILexicalBlock(scope: !1658, file: !49, line: 789, column: 5)
!1754 = !DILocation(line: 791, column: 11, scope: !1753)
!1755 = !DILocation(line: 791, column: 29, scope: !1753)
!1756 = !DILocation(line: 791, column: 22, scope: !1753)
!1757 = !DILocalVariable(name: "temp_str", scope: !1753, file: !49, line: 793, type: !1758)
!1758 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 16, elements: !1759)
!1759 = !{!1760}
!1760 = !DISubrange(count: 2)
!1761 = !DILocation(line: 793, column: 11, scope: !1753)
!1762 = !DILocation(line: 794, column: 20, scope: !1753)
!1763 = !DILocation(line: 794, column: 6, scope: !1753)
!1764 = !DILocation(line: 794, column: 18, scope: !1753)
!1765 = !DILocation(line: 795, column: 6, scope: !1753)
!1766 = !DILocation(line: 795, column: 18, scope: !1753)
!1767 = !DILocation(line: 797, column: 38, scope: !1753)
!1768 = !DILocation(line: 797, column: 43, scope: !1753)
!1769 = !DILocation(line: 797, column: 50, scope: !1753)
!1770 = !DILocation(line: 797, column: 55, scope: !1753)
!1771 = !DILocation(line: 797, column: 65, scope: !1753)
!1772 = !DILocation(line: 797, column: 75, scope: !1753)
!1773 = !DILocation(line: 797, column: 12, scope: !1753)
!1774 = !DILocation(line: 797, column: 10, scope: !1753)
!1775 = !DILocation(line: 799, column: 5, scope: !1658)
!1776 = !DILocation(line: 803, column: 5, scope: !1658)
!1777 = !DILocation(line: 806, column: 10, scope: !1550)
!1778 = !DILocation(line: 807, column: 3, scope: !1550)
!1779 = !DILocation(line: 809, column: 12, scope: !1546)
!1780 = !DILocation(line: 809, column: 20, scope: !1546)
!1781 = !DILocation(line: 809, column: 25, scope: !1546)
!1782 = !DILocation(line: 809, column: 34, scope: !1546)
!1783 = !DILocation(line: 809, column: 10, scope: !1546)
!1784 = !DILocation(line: 809, column: 8, scope: !1546)
!1785 = !DILocation(line: 812, column: 10, scope: !1514)
!1786 = !DILocation(line: 812, column: 9, scope: !1514)
!1787 = !DILocation(line: 812, column: 2, scope: !1514)
!1788 = distinct !DISubprogram(name: "cgc_atoi", scope: !1789, file: !1789, line: 45, type: !1790, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!1789 = !DIFile(filename: "challenges/3D_Image_Toolkit/lib/stdlib.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!1790 = !DISubroutineType(types: !1791)
!1791 = !{!77, !273}
!1792 = !DILocalVariable(name: "pStr", arg: 1, scope: !1788, file: !1789, line: 45, type: !273)
!1793 = !DILocation(line: 45, column: 27, scope: !1788)
!1794 = !DILocalVariable(name: "value", scope: !1788, file: !1789, line: 47, type: !77)
!1795 = !DILocation(line: 47, column: 6, scope: !1788)
!1796 = !DILocalVariable(name: "negative", scope: !1788, file: !1789, line: 48, type: !77)
!1797 = !DILocation(line: 48, column: 6, scope: !1788)
!1798 = !DILocation(line: 50, column: 2, scope: !1788)
!1799 = !DILocation(line: 50, column: 24, scope: !1788)
!1800 = !DILocation(line: 50, column: 23, scope: !1788)
!1801 = !DILocation(line: 50, column: 10, scope: !1788)
!1802 = !DILocation(line: 51, column: 7, scope: !1788)
!1803 = distinct !{!1803, !1798, !1802}
!1804 = !DILocation(line: 53, column: 8, scope: !1805)
!1805 = distinct !DILexicalBlock(scope: !1788, file: !1789, line: 53, column: 7)
!1806 = !DILocation(line: 53, column: 7, scope: !1805)
!1807 = !DILocation(line: 53, column: 13, scope: !1805)
!1808 = !DILocation(line: 53, column: 7, scope: !1788)
!1809 = !DILocation(line: 54, column: 3, scope: !1805)
!1810 = !DILocation(line: 56, column: 8, scope: !1811)
!1811 = distinct !DILexicalBlock(scope: !1788, file: !1789, line: 56, column: 7)
!1812 = !DILocation(line: 56, column: 7, scope: !1811)
!1813 = !DILocation(line: 56, column: 13, scope: !1811)
!1814 = !DILocation(line: 56, column: 7, scope: !1788)
!1815 = !DILocation(line: 58, column: 12, scope: !1816)
!1816 = distinct !DILexicalBlock(scope: !1811, file: !1789, line: 57, column: 2)
!1817 = !DILocation(line: 59, column: 7, scope: !1816)
!1818 = !DILocation(line: 60, column: 2, scope: !1816)
!1819 = !DILocation(line: 63, column: 2, scope: !1788)
!1820 = !DILocation(line: 63, column: 24, scope: !1788)
!1821 = !DILocation(line: 63, column: 23, scope: !1788)
!1822 = !DILocation(line: 63, column: 10, scope: !1788)
!1823 = !DILocation(line: 64, column: 12, scope: !1788)
!1824 = !DILocation(line: 64, column: 18, scope: !1788)
!1825 = !DILocation(line: 64, column: 32, scope: !1788)
!1826 = !DILocation(line: 64, column: 27, scope: !1788)
!1827 = !DILocation(line: 64, column: 35, scope: !1788)
!1828 = !DILocation(line: 64, column: 24, scope: !1788)
!1829 = !DILocation(line: 64, column: 9, scope: !1788)
!1830 = distinct !{!1830, !1819, !1831}
!1831 = !DILocation(line: 64, column: 40, scope: !1788)
!1832 = !DILocation(line: 66, column: 7, scope: !1833)
!1833 = distinct !DILexicalBlock(scope: !1788, file: !1789, line: 66, column: 7)
!1834 = !DILocation(line: 66, column: 7, scope: !1788)
!1835 = !DILocation(line: 67, column: 12, scope: !1833)
!1836 = !DILocation(line: 67, column: 11, scope: !1833)
!1837 = !DILocation(line: 67, column: 3, scope: !1833)
!1838 = !DILocation(line: 69, column: 10, scope: !1833)
!1839 = !DILocation(line: 69, column: 3, scope: !1833)
!1840 = !DILocation(line: 70, column: 1, scope: !1788)
!1841 = distinct !DISubprogram(name: "cgc_printf_helper_string", scope: !49, file: !49, line: 602, type: !1842, scopeLine: 603, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!1842 = !DISubroutineType(types: !1843)
!1843 = !{!14, !7, !1395, !14, !273, !308, !308, !308}
!1844 = !DILocalVariable(name: "ctx", arg: 1, scope: !1841, file: !49, line: 602, type: !7)
!1845 = !DILocation(line: 602, column: 44, scope: !1841)
!1846 = !DILocalVariable(name: "fpOut", arg: 2, scope: !1841, file: !49, line: 602, type: !1395)
!1847 = !DILocation(line: 602, column: 66, scope: !1841)
!1848 = !DILocalVariable(name: "pos", arg: 3, scope: !1841, file: !49, line: 602, type: !14)
!1849 = !DILocation(line: 602, column: 84, scope: !1841)
!1850 = !DILocalVariable(name: "outStr", arg: 4, scope: !1841, file: !49, line: 602, type: !273)
!1851 = !DILocation(line: 602, column: 101, scope: !1841)
!1852 = !DILocalVariable(name: "width", arg: 5, scope: !1841, file: !49, line: 602, type: !308)
!1853 = !DILocation(line: 602, column: 117, scope: !1841)
!1854 = !DILocalVariable(name: "precision", arg: 6, scope: !1841, file: !49, line: 602, type: !308)
!1855 = !DILocation(line: 602, column: 132, scope: !1841)
!1856 = !DILocalVariable(name: "flags", arg: 7, scope: !1841, file: !49, line: 602, type: !308)
!1857 = !DILocation(line: 602, column: 151, scope: !1841)
!1858 = !DILocation(line: 604, column: 7, scope: !1859)
!1859 = distinct !DILexicalBlock(scope: !1841, file: !49, line: 604, column: 7)
!1860 = !DILocation(line: 604, column: 17, scope: !1859)
!1861 = !DILocation(line: 604, column: 22, scope: !1859)
!1862 = !DILocation(line: 604, column: 25, scope: !1859)
!1863 = !DILocation(line: 604, column: 31, scope: !1859)
!1864 = !DILocation(line: 604, column: 7, scope: !1841)
!1865 = !DILocation(line: 607, column: 3, scope: !1866)
!1866 = distinct !DILexicalBlock(scope: !1859, file: !49, line: 605, column: 2)
!1867 = !DILocation(line: 607, column: 12, scope: !1866)
!1868 = !DILocation(line: 607, column: 11, scope: !1866)
!1869 = !DILocation(line: 607, column: 19, scope: !1866)
!1870 = !DILocation(line: 609, column: 12, scope: !1871)
!1871 = distinct !DILexicalBlock(scope: !1866, file: !49, line: 608, column: 3)
!1872 = !DILocation(line: 609, column: 20, scope: !1871)
!1873 = !DILocation(line: 609, column: 26, scope: !1871)
!1874 = !DILocation(line: 609, column: 25, scope: !1871)
!1875 = !DILocation(line: 609, column: 34, scope: !1871)
!1876 = !DILocation(line: 609, column: 10, scope: !1871)
!1877 = !DILocation(line: 609, column: 8, scope: !1871)
!1878 = !DILocation(line: 610, column: 10, scope: !1871)
!1879 = distinct !{!1879, !1865, !1880}
!1880 = !DILocation(line: 611, column: 3, scope: !1866)
!1881 = !DILocation(line: 613, column: 11, scope: !1866)
!1882 = !DILocation(line: 613, column: 3, scope: !1866)
!1883 = !DILocalVariable(name: "max_printlen", scope: !1841, file: !49, line: 616, type: !14)
!1884 = !DILocation(line: 616, column: 13, scope: !1841)
!1885 = !DILocation(line: 616, column: 40, scope: !1841)
!1886 = !DILocation(line: 616, column: 28, scope: !1841)
!1887 = !DILocalVariable(name: "pad_length", scope: !1841, file: !49, line: 617, type: !14)
!1888 = !DILocation(line: 617, column: 13, scope: !1841)
!1889 = !DILocation(line: 619, column: 7, scope: !1890)
!1890 = distinct !DILexicalBlock(scope: !1841, file: !49, line: 619, column: 7)
!1891 = !DILocation(line: 619, column: 17, scope: !1890)
!1892 = !DILocation(line: 619, column: 7, scope: !1841)
!1893 = !DILocation(line: 621, column: 8, scope: !1894)
!1894 = distinct !DILexicalBlock(scope: !1895, file: !49, line: 621, column: 8)
!1895 = distinct !DILexicalBlock(scope: !1890, file: !49, line: 620, column: 2)
!1896 = !DILocation(line: 621, column: 23, scope: !1894)
!1897 = !DILocation(line: 621, column: 21, scope: !1894)
!1898 = !DILocation(line: 621, column: 8, scope: !1895)
!1899 = !DILocation(line: 622, column: 19, scope: !1894)
!1900 = !DILocation(line: 622, column: 17, scope: !1894)
!1901 = !DILocation(line: 622, column: 4, scope: !1894)
!1902 = !DILocation(line: 623, column: 2, scope: !1895)
!1903 = !DILocation(line: 625, column: 7, scope: !1904)
!1904 = distinct !DILexicalBlock(scope: !1841, file: !49, line: 625, column: 7)
!1905 = !DILocation(line: 625, column: 13, scope: !1904)
!1906 = !DILocation(line: 625, column: 7, scope: !1841)
!1907 = !DILocation(line: 627, column: 8, scope: !1908)
!1908 = distinct !DILexicalBlock(scope: !1909, file: !49, line: 627, column: 8)
!1909 = distinct !DILexicalBlock(scope: !1904, file: !49, line: 626, column: 2)
!1910 = !DILocation(line: 627, column: 23, scope: !1908)
!1911 = !DILocation(line: 627, column: 21, scope: !1908)
!1912 = !DILocation(line: 627, column: 8, scope: !1909)
!1913 = !DILocation(line: 628, column: 17, scope: !1908)
!1914 = !DILocation(line: 628, column: 23, scope: !1908)
!1915 = !DILocation(line: 628, column: 22, scope: !1908)
!1916 = !DILocation(line: 628, column: 15, scope: !1908)
!1917 = !DILocation(line: 628, column: 4, scope: !1908)
!1918 = !DILocation(line: 629, column: 2, scope: !1909)
!1919 = !DILocation(line: 631, column: 9, scope: !1920)
!1920 = distinct !DILexicalBlock(scope: !1841, file: !49, line: 631, column: 7)
!1921 = !DILocation(line: 631, column: 15, scope: !1920)
!1922 = !DILocation(line: 631, column: 7, scope: !1841)
!1923 = !DILocation(line: 633, column: 3, scope: !1924)
!1924 = distinct !DILexicalBlock(scope: !1920, file: !49, line: 632, column: 2)
!1925 = !DILocation(line: 633, column: 21, scope: !1924)
!1926 = !DILocation(line: 633, column: 24, scope: !1924)
!1927 = !DILocation(line: 635, column: 10, scope: !1928)
!1928 = distinct !DILexicalBlock(scope: !1929, file: !49, line: 635, column: 9)
!1929 = distinct !DILexicalBlock(scope: !1924, file: !49, line: 634, column: 3)
!1930 = !DILocation(line: 635, column: 16, scope: !1928)
!1931 = !DILocation(line: 635, column: 9, scope: !1929)
!1932 = !DILocation(line: 636, column: 13, scope: !1928)
!1933 = !DILocation(line: 636, column: 21, scope: !1928)
!1934 = !DILocation(line: 636, column: 31, scope: !1928)
!1935 = !DILocation(line: 636, column: 11, scope: !1928)
!1936 = !DILocation(line: 636, column: 9, scope: !1928)
!1937 = !DILocation(line: 636, column: 5, scope: !1928)
!1938 = !DILocation(line: 638, column: 13, scope: !1928)
!1939 = !DILocation(line: 638, column: 21, scope: !1928)
!1940 = !DILocation(line: 638, column: 31, scope: !1928)
!1941 = !DILocation(line: 638, column: 11, scope: !1928)
!1942 = !DILocation(line: 638, column: 9, scope: !1928)
!1943 = distinct !{!1943, !1923, !1944}
!1944 = !DILocation(line: 639, column: 3, scope: !1924)
!1945 = !DILocation(line: 640, column: 2, scope: !1924)
!1946 = !DILocation(line: 643, column: 2, scope: !1841)
!1947 = !DILocation(line: 643, column: 22, scope: !1841)
!1948 = !DILocation(line: 643, column: 25, scope: !1841)
!1949 = !DILocation(line: 644, column: 11, scope: !1841)
!1950 = !DILocation(line: 644, column: 19, scope: !1841)
!1951 = !DILocation(line: 644, column: 31, scope: !1841)
!1952 = !DILocation(line: 644, column: 24, scope: !1841)
!1953 = !DILocation(line: 644, column: 35, scope: !1841)
!1954 = !DILocation(line: 644, column: 9, scope: !1841)
!1955 = !DILocation(line: 644, column: 7, scope: !1841)
!1956 = distinct !{!1956, !1946, !1957}
!1957 = !DILocation(line: 644, column: 39, scope: !1841)
!1958 = !DILocation(line: 646, column: 8, scope: !1959)
!1959 = distinct !DILexicalBlock(scope: !1841, file: !49, line: 646, column: 7)
!1960 = !DILocation(line: 646, column: 14, scope: !1959)
!1961 = !DILocation(line: 646, column: 7, scope: !1841)
!1962 = !DILocation(line: 648, column: 3, scope: !1963)
!1963 = distinct !DILexicalBlock(scope: !1959, file: !49, line: 647, column: 2)
!1964 = !DILocation(line: 648, column: 21, scope: !1963)
!1965 = !DILocation(line: 648, column: 24, scope: !1963)
!1966 = !DILocation(line: 649, column: 12, scope: !1963)
!1967 = !DILocation(line: 649, column: 20, scope: !1963)
!1968 = !DILocation(line: 649, column: 30, scope: !1963)
!1969 = !DILocation(line: 649, column: 10, scope: !1963)
!1970 = !DILocation(line: 649, column: 8, scope: !1963)
!1971 = distinct !{!1971, !1962, !1972}
!1972 = !DILocation(line: 649, column: 34, scope: !1963)
!1973 = !DILocation(line: 650, column: 2, scope: !1963)
!1974 = !DILocation(line: 652, column: 9, scope: !1841)
!1975 = !DILocation(line: 652, column: 2, scope: !1841)
!1976 = !DILocation(line: 653, column: 1, scope: !1841)
!1977 = distinct !DISubprogram(name: "cgc_printf_helper_int", scope: !49, file: !49, line: 253, type: !1978, scopeLine: 254, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!1978 = !DISubroutineType(types: !1979)
!1979 = !{!14, !7, !1395, !14, !308, !30, !308, !308, !308}
!1980 = !DILocalVariable(name: "ctx", arg: 1, scope: !1977, file: !49, line: 253, type: !7)
!1981 = !DILocation(line: 253, column: 41, scope: !1977)
!1982 = !DILocalVariable(name: "fpOut", arg: 2, scope: !1977, file: !49, line: 253, type: !1395)
!1983 = !DILocation(line: 253, column: 63, scope: !1977)
!1984 = !DILocalVariable(name: "pos", arg: 3, scope: !1977, file: !49, line: 253, type: !14)
!1985 = !DILocation(line: 253, column: 81, scope: !1977)
!1986 = !DILocalVariable(name: "val", arg: 4, scope: !1977, file: !49, line: 253, type: !308)
!1987 = !DILocation(line: 253, column: 94, scope: !1977)
!1988 = !DILocalVariable(name: "base", arg: 5, scope: !1977, file: !49, line: 253, type: !30)
!1989 = !DILocation(line: 253, column: 108, scope: !1977)
!1990 = !DILocalVariable(name: "width", arg: 6, scope: !1977, file: !49, line: 253, type: !308)
!1991 = !DILocation(line: 253, column: 122, scope: !1977)
!1992 = !DILocalVariable(name: "precision", arg: 7, scope: !1977, file: !49, line: 253, type: !308)
!1993 = !DILocation(line: 253, column: 137, scope: !1977)
!1994 = !DILocalVariable(name: "flags", arg: 8, scope: !1977, file: !49, line: 253, type: !308)
!1995 = !DILocation(line: 253, column: 156, scope: !1977)
!1996 = !DILocalVariable(name: "max_printlen", scope: !1977, file: !49, line: 255, type: !14)
!1997 = !DILocation(line: 255, column: 13, scope: !1977)
!1998 = !DILocalVariable(name: "pad_length", scope: !1977, file: !49, line: 256, type: !14)
!1999 = !DILocation(line: 256, column: 13, scope: !1977)
!2000 = !DILocalVariable(name: "is_negative", scope: !1977, file: !49, line: 257, type: !2001)
!2001 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !31, line: 36, baseType: !2002)
!2002 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2003 = !DILocation(line: 257, column: 9, scope: !1977)
!2004 = !DILocalVariable(name: "character_count", scope: !1977, file: !49, line: 258, type: !14)
!2005 = !DILocation(line: 258, column: 13, scope: !1977)
!2006 = !DILocalVariable(name: "temp_str", scope: !1977, file: !49, line: 259, type: !2007)
!2007 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 256, elements: !38)
!2008 = !DILocation(line: 259, column: 7, scope: !1977)
!2009 = !DILocation(line: 261, column: 7, scope: !2010)
!2010 = distinct !DILexicalBlock(scope: !1977, file: !49, line: 261, column: 7)
!2011 = !DILocation(line: 261, column: 12, scope: !2010)
!2012 = !DILocation(line: 261, column: 18, scope: !2010)
!2013 = !DILocation(line: 261, column: 21, scope: !2010)
!2014 = !DILocation(line: 261, column: 25, scope: !2010)
!2015 = !DILocation(line: 261, column: 7, scope: !1977)
!2016 = !DILocation(line: 263, column: 15, scope: !2017)
!2017 = distinct !DILexicalBlock(scope: !2010, file: !49, line: 262, column: 2)
!2018 = !DILocation(line: 264, column: 10, scope: !2017)
!2019 = !DILocation(line: 264, column: 9, scope: !2017)
!2020 = !DILocation(line: 264, column: 7, scope: !2017)
!2021 = !DILocation(line: 266, column: 15, scope: !2017)
!2022 = !DILocation(line: 267, column: 2, scope: !2017)
!2023 = !DILocation(line: 269, column: 56, scope: !1977)
!2024 = !DILocation(line: 269, column: 61, scope: !1977)
!2025 = !DILocation(line: 269, column: 67, scope: !1977)
!2026 = !DILocation(line: 269, column: 77, scope: !1977)
!2027 = !DILocation(line: 269, column: 20, scope: !1977)
!2028 = !DILocation(line: 269, column: 18, scope: !1977)
!2029 = !DILocation(line: 270, column: 18, scope: !1977)
!2030 = !DILocation(line: 270, column: 15, scope: !1977)
!2031 = !DILocation(line: 272, column: 7, scope: !2032)
!2032 = distinct !DILexicalBlock(scope: !1977, file: !49, line: 272, column: 7)
!2033 = !DILocation(line: 272, column: 13, scope: !2032)
!2034 = !DILocation(line: 272, column: 7, scope: !1977)
!2035 = !DILocation(line: 274, column: 8, scope: !2036)
!2036 = distinct !DILexicalBlock(scope: !2037, file: !49, line: 274, column: 8)
!2037 = distinct !DILexicalBlock(scope: !2032, file: !49, line: 273, column: 2)
!2038 = !DILocation(line: 274, column: 23, scope: !2036)
!2039 = !DILocation(line: 274, column: 21, scope: !2036)
!2040 = !DILocation(line: 274, column: 8, scope: !2037)
!2041 = !DILocation(line: 275, column: 17, scope: !2036)
!2042 = !DILocation(line: 275, column: 23, scope: !2036)
!2043 = !DILocation(line: 275, column: 22, scope: !2036)
!2044 = !DILocation(line: 275, column: 15, scope: !2036)
!2045 = !DILocation(line: 275, column: 4, scope: !2036)
!2046 = !DILocation(line: 276, column: 2, scope: !2037)
!2047 = !DILocation(line: 279, column: 7, scope: !2048)
!2048 = distinct !DILexicalBlock(scope: !1977, file: !49, line: 279, column: 7)
!2049 = !DILocation(line: 279, column: 17, scope: !2048)
!2050 = !DILocation(line: 279, column: 7, scope: !1977)
!2051 = !DILocation(line: 281, column: 9, scope: !2052)
!2052 = distinct !DILexicalBlock(scope: !2048, file: !49, line: 280, column: 2)
!2053 = !DILocation(line: 282, column: 8, scope: !2054)
!2054 = distinct !DILexicalBlock(scope: !2052, file: !49, line: 282, column: 8)
!2055 = !DILocation(line: 282, column: 26, scope: !2054)
!2056 = !DILocation(line: 282, column: 24, scope: !2054)
!2057 = !DILocation(line: 282, column: 8, scope: !2052)
!2058 = !DILocation(line: 283, column: 17, scope: !2054)
!2059 = !DILocation(line: 283, column: 27, scope: !2054)
!2060 = !DILocation(line: 283, column: 26, scope: !2054)
!2061 = !DILocation(line: 283, column: 15, scope: !2054)
!2062 = !DILocation(line: 283, column: 4, scope: !2054)
!2063 = !DILocation(line: 284, column: 2, scope: !2052)
!2064 = !DILocation(line: 286, column: 9, scope: !2065)
!2065 = distinct !DILexicalBlock(scope: !1977, file: !49, line: 286, column: 7)
!2066 = !DILocation(line: 286, column: 15, scope: !2065)
!2067 = !DILocation(line: 286, column: 7, scope: !1977)
!2068 = !DILocation(line: 288, column: 8, scope: !2069)
!2069 = distinct !DILexicalBlock(scope: !2070, file: !49, line: 288, column: 8)
!2070 = distinct !DILexicalBlock(scope: !2065, file: !49, line: 287, column: 2)
!2071 = !DILocation(line: 288, column: 20, scope: !2069)
!2072 = !DILocation(line: 288, column: 23, scope: !2069)
!2073 = !DILocation(line: 288, column: 34, scope: !2069)
!2074 = !DILocation(line: 288, column: 38, scope: !2069)
!2075 = !DILocation(line: 288, column: 42, scope: !2069)
!2076 = !DILocation(line: 288, column: 48, scope: !2069)
!2077 = !DILocation(line: 288, column: 8, scope: !2070)
!2078 = !DILocation(line: 290, column: 12, scope: !2079)
!2079 = distinct !DILexicalBlock(scope: !2069, file: !49, line: 289, column: 3)
!2080 = !DILocation(line: 290, column: 20, scope: !2079)
!2081 = !DILocation(line: 290, column: 30, scope: !2079)
!2082 = !DILocation(line: 290, column: 10, scope: !2079)
!2083 = !DILocation(line: 290, column: 8, scope: !2079)
!2084 = !DILocation(line: 291, column: 16, scope: !2079)
!2085 = !DILocation(line: 292, column: 3, scope: !2079)
!2086 = !DILocation(line: 294, column: 3, scope: !2070)
!2087 = !DILocation(line: 294, column: 21, scope: !2070)
!2088 = !DILocation(line: 294, column: 24, scope: !2070)
!2089 = !DILocation(line: 296, column: 10, scope: !2090)
!2090 = distinct !DILexicalBlock(scope: !2091, file: !49, line: 296, column: 9)
!2091 = distinct !DILexicalBlock(scope: !2070, file: !49, line: 295, column: 3)
!2092 = !DILocation(line: 296, column: 16, scope: !2090)
!2093 = !DILocation(line: 296, column: 9, scope: !2091)
!2094 = !DILocation(line: 297, column: 13, scope: !2090)
!2095 = !DILocation(line: 297, column: 21, scope: !2090)
!2096 = !DILocation(line: 297, column: 31, scope: !2090)
!2097 = !DILocation(line: 297, column: 11, scope: !2090)
!2098 = !DILocation(line: 297, column: 9, scope: !2090)
!2099 = !DILocation(line: 297, column: 5, scope: !2090)
!2100 = !DILocation(line: 299, column: 13, scope: !2090)
!2101 = !DILocation(line: 299, column: 21, scope: !2090)
!2102 = !DILocation(line: 299, column: 31, scope: !2090)
!2103 = !DILocation(line: 299, column: 11, scope: !2090)
!2104 = !DILocation(line: 299, column: 9, scope: !2090)
!2105 = distinct !{!2105, !2086, !2106}
!2106 = !DILocation(line: 300, column: 3, scope: !2070)
!2107 = !DILocation(line: 301, column: 2, scope: !2070)
!2108 = !DILocation(line: 303, column: 7, scope: !2109)
!2109 = distinct !DILexicalBlock(scope: !1977, file: !49, line: 303, column: 7)
!2110 = !DILocation(line: 303, column: 7, scope: !1977)
!2111 = !DILocation(line: 305, column: 11, scope: !2112)
!2112 = distinct !DILexicalBlock(scope: !2109, file: !49, line: 304, column: 2)
!2113 = !DILocation(line: 305, column: 19, scope: !2112)
!2114 = !DILocation(line: 305, column: 29, scope: !2112)
!2115 = !DILocation(line: 305, column: 9, scope: !2112)
!2116 = !DILocation(line: 305, column: 7, scope: !2112)
!2117 = !DILocation(line: 306, column: 15, scope: !2112)
!2118 = !DILocation(line: 307, column: 2, scope: !2112)
!2119 = !DILocalVariable(name: "i", scope: !1977, file: !49, line: 309, type: !14)
!2120 = !DILocation(line: 309, column: 13, scope: !1977)
!2121 = !DILocation(line: 309, column: 17, scope: !1977)
!2122 = !DILocation(line: 310, column: 2, scope: !1977)
!2123 = !DILocation(line: 310, column: 10, scope: !1977)
!2124 = !DILocation(line: 310, column: 12, scope: !1977)
!2125 = !DILocation(line: 312, column: 11, scope: !2126)
!2126 = distinct !DILexicalBlock(scope: !1977, file: !49, line: 311, column: 2)
!2127 = !DILocation(line: 312, column: 19, scope: !2126)
!2128 = !DILocation(line: 312, column: 33, scope: !2126)
!2129 = !DILocation(line: 312, column: 34, scope: !2126)
!2130 = !DILocation(line: 312, column: 24, scope: !2126)
!2131 = !DILocation(line: 312, column: 39, scope: !2126)
!2132 = !DILocation(line: 312, column: 9, scope: !2126)
!2133 = !DILocation(line: 312, column: 7, scope: !2126)
!2134 = !DILocation(line: 313, column: 4, scope: !2126)
!2135 = distinct !{!2135, !2122, !2136}
!2136 = !DILocation(line: 314, column: 2, scope: !1977)
!2137 = !DILocation(line: 316, column: 8, scope: !2138)
!2138 = distinct !DILexicalBlock(scope: !1977, file: !49, line: 316, column: 7)
!2139 = !DILocation(line: 316, column: 14, scope: !2138)
!2140 = !DILocation(line: 316, column: 7, scope: !1977)
!2141 = !DILocation(line: 318, column: 3, scope: !2142)
!2142 = distinct !DILexicalBlock(scope: !2138, file: !49, line: 317, column: 2)
!2143 = !DILocation(line: 318, column: 21, scope: !2142)
!2144 = !DILocation(line: 318, column: 24, scope: !2142)
!2145 = !DILocation(line: 319, column: 12, scope: !2142)
!2146 = !DILocation(line: 319, column: 20, scope: !2142)
!2147 = !DILocation(line: 319, column: 30, scope: !2142)
!2148 = !DILocation(line: 319, column: 10, scope: !2142)
!2149 = !DILocation(line: 319, column: 8, scope: !2142)
!2150 = distinct !{!2150, !2141, !2151}
!2151 = !DILocation(line: 319, column: 34, scope: !2142)
!2152 = !DILocation(line: 320, column: 2, scope: !2142)
!2153 = !DILocation(line: 322, column: 9, scope: !1977)
!2154 = !DILocation(line: 322, column: 2, scope: !1977)
!2155 = distinct !DISubprogram(name: "cgc_printf_helper_float", scope: !49, file: !49, line: 538, type: !2156, scopeLine: 539, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!2156 = !DISubroutineType(types: !2157)
!2157 = !{!14, !7, !1395, !14, !61, !308, !308, !308}
!2158 = !DILocalVariable(name: "ctx", arg: 1, scope: !2155, file: !49, line: 538, type: !7)
!2159 = !DILocation(line: 538, column: 43, scope: !2155)
!2160 = !DILocalVariable(name: "fpOut", arg: 2, scope: !2155, file: !49, line: 538, type: !1395)
!2161 = !DILocation(line: 538, column: 65, scope: !2155)
!2162 = !DILocalVariable(name: "pos", arg: 3, scope: !2155, file: !49, line: 538, type: !14)
!2163 = !DILocation(line: 538, column: 83, scope: !2155)
!2164 = !DILocalVariable(name: "val", arg: 4, scope: !2155, file: !49, line: 538, type: !61)
!2165 = !DILocation(line: 538, column: 95, scope: !2155)
!2166 = !DILocalVariable(name: "width", arg: 5, scope: !2155, file: !49, line: 538, type: !308)
!2167 = !DILocation(line: 538, column: 108, scope: !2155)
!2168 = !DILocalVariable(name: "precision", arg: 6, scope: !2155, file: !49, line: 538, type: !308)
!2169 = !DILocation(line: 538, column: 123, scope: !2155)
!2170 = !DILocalVariable(name: "flags", arg: 7, scope: !2155, file: !49, line: 538, type: !308)
!2171 = !DILocation(line: 538, column: 142, scope: !2155)
!2172 = !DILocalVariable(name: "max_printlen", scope: !2155, file: !49, line: 540, type: !14)
!2173 = !DILocation(line: 540, column: 13, scope: !2155)
!2174 = !DILocalVariable(name: "pad_length", scope: !2155, file: !49, line: 541, type: !14)
!2175 = !DILocation(line: 541, column: 13, scope: !2155)
!2176 = !DILocalVariable(name: "is_negative", scope: !2155, file: !49, line: 542, type: !2001)
!2177 = !DILocation(line: 542, column: 9, scope: !2155)
!2178 = !DILocalVariable(name: "character_count", scope: !2155, file: !49, line: 543, type: !14)
!2179 = !DILocation(line: 543, column: 13, scope: !2155)
!2180 = !DILocalVariable(name: "temp_str", scope: !2155, file: !49, line: 544, type: !2007)
!2181 = !DILocation(line: 544, column: 7, scope: !2155)
!2182 = !DILocation(line: 546, column: 7, scope: !2183)
!2183 = distinct !DILexicalBlock(scope: !2155, file: !49, line: 546, column: 7)
!2184 = !DILocation(line: 546, column: 11, scope: !2183)
!2185 = !DILocation(line: 546, column: 7, scope: !2155)
!2186 = !DILocation(line: 548, column: 10, scope: !2187)
!2187 = distinct !DILexicalBlock(scope: !2183, file: !49, line: 547, column: 2)
!2188 = !DILocation(line: 548, column: 9, scope: !2187)
!2189 = !DILocation(line: 548, column: 7, scope: !2187)
!2190 = !DILocation(line: 549, column: 15, scope: !2187)
!2191 = !DILocation(line: 551, column: 15, scope: !2187)
!2192 = !DILocation(line: 552, column: 2, scope: !2187)
!2193 = !DILocation(line: 554, column: 7, scope: !2194)
!2194 = distinct !DILexicalBlock(scope: !2155, file: !49, line: 554, column: 7)
!2195 = !DILocation(line: 554, column: 17, scope: !2194)
!2196 = !DILocation(line: 554, column: 7, scope: !2155)
!2197 = !DILocation(line: 555, column: 49, scope: !2194)
!2198 = !DILocation(line: 555, column: 79, scope: !2194)
!2199 = !DILocation(line: 555, column: 89, scope: !2194)
!2200 = !DILocation(line: 555, column: 21, scope: !2194)
!2201 = !DILocation(line: 555, column: 19, scope: !2194)
!2202 = !DILocation(line: 555, column: 3, scope: !2194)
!2203 = !DILocation(line: 557, column: 49, scope: !2194)
!2204 = !DILocation(line: 557, column: 54, scope: !2194)
!2205 = !DILocation(line: 557, column: 65, scope: !2194)
!2206 = !DILocation(line: 557, column: 75, scope: !2194)
!2207 = !DILocation(line: 557, column: 21, scope: !2194)
!2208 = !DILocation(line: 557, column: 19, scope: !2194)
!2209 = !DILocation(line: 559, column: 18, scope: !2155)
!2210 = !DILocation(line: 559, column: 15, scope: !2155)
!2211 = !DILocation(line: 561, column: 7, scope: !2212)
!2212 = distinct !DILexicalBlock(scope: !2155, file: !49, line: 561, column: 7)
!2213 = !DILocation(line: 561, column: 13, scope: !2212)
!2214 = !DILocation(line: 561, column: 7, scope: !2155)
!2215 = !DILocation(line: 563, column: 8, scope: !2216)
!2216 = distinct !DILexicalBlock(scope: !2217, file: !49, line: 563, column: 8)
!2217 = distinct !DILexicalBlock(scope: !2212, file: !49, line: 562, column: 2)
!2218 = !DILocation(line: 563, column: 23, scope: !2216)
!2219 = !DILocation(line: 563, column: 21, scope: !2216)
!2220 = !DILocation(line: 563, column: 8, scope: !2217)
!2221 = !DILocation(line: 564, column: 17, scope: !2216)
!2222 = !DILocation(line: 564, column: 23, scope: !2216)
!2223 = !DILocation(line: 564, column: 22, scope: !2216)
!2224 = !DILocation(line: 564, column: 15, scope: !2216)
!2225 = !DILocation(line: 564, column: 4, scope: !2216)
!2226 = !DILocation(line: 565, column: 2, scope: !2217)
!2227 = !DILocation(line: 567, column: 9, scope: !2228)
!2228 = distinct !DILexicalBlock(scope: !2155, file: !49, line: 567, column: 7)
!2229 = !DILocation(line: 567, column: 15, scope: !2228)
!2230 = !DILocation(line: 567, column: 7, scope: !2155)
!2231 = !DILocation(line: 569, column: 8, scope: !2232)
!2232 = distinct !DILexicalBlock(scope: !2233, file: !49, line: 569, column: 8)
!2233 = distinct !DILexicalBlock(scope: !2228, file: !49, line: 568, column: 2)
!2234 = !DILocation(line: 569, column: 20, scope: !2232)
!2235 = !DILocation(line: 569, column: 23, scope: !2232)
!2236 = !DILocation(line: 569, column: 34, scope: !2232)
!2237 = !DILocation(line: 569, column: 38, scope: !2232)
!2238 = !DILocation(line: 569, column: 42, scope: !2232)
!2239 = !DILocation(line: 569, column: 48, scope: !2232)
!2240 = !DILocation(line: 569, column: 8, scope: !2233)
!2241 = !DILocation(line: 571, column: 12, scope: !2242)
!2242 = distinct !DILexicalBlock(scope: !2232, file: !49, line: 570, column: 3)
!2243 = !DILocation(line: 571, column: 20, scope: !2242)
!2244 = !DILocation(line: 571, column: 30, scope: !2242)
!2245 = !DILocation(line: 571, column: 10, scope: !2242)
!2246 = !DILocation(line: 571, column: 8, scope: !2242)
!2247 = !DILocation(line: 572, column: 16, scope: !2242)
!2248 = !DILocation(line: 573, column: 3, scope: !2242)
!2249 = !DILocation(line: 575, column: 3, scope: !2233)
!2250 = !DILocation(line: 575, column: 21, scope: !2233)
!2251 = !DILocation(line: 575, column: 24, scope: !2233)
!2252 = !DILocation(line: 577, column: 10, scope: !2253)
!2253 = distinct !DILexicalBlock(scope: !2254, file: !49, line: 577, column: 9)
!2254 = distinct !DILexicalBlock(scope: !2233, file: !49, line: 576, column: 3)
!2255 = !DILocation(line: 577, column: 16, scope: !2253)
!2256 = !DILocation(line: 577, column: 9, scope: !2254)
!2257 = !DILocation(line: 578, column: 13, scope: !2253)
!2258 = !DILocation(line: 578, column: 21, scope: !2253)
!2259 = !DILocation(line: 578, column: 31, scope: !2253)
!2260 = !DILocation(line: 578, column: 11, scope: !2253)
!2261 = !DILocation(line: 578, column: 9, scope: !2253)
!2262 = !DILocation(line: 578, column: 5, scope: !2253)
!2263 = !DILocation(line: 580, column: 13, scope: !2253)
!2264 = !DILocation(line: 580, column: 21, scope: !2253)
!2265 = !DILocation(line: 580, column: 31, scope: !2253)
!2266 = !DILocation(line: 580, column: 11, scope: !2253)
!2267 = !DILocation(line: 580, column: 9, scope: !2253)
!2268 = distinct !{!2268, !2249, !2269}
!2269 = !DILocation(line: 581, column: 3, scope: !2233)
!2270 = !DILocation(line: 582, column: 2, scope: !2233)
!2271 = !DILocation(line: 584, column: 7, scope: !2272)
!2272 = distinct !DILexicalBlock(scope: !2155, file: !49, line: 584, column: 7)
!2273 = !DILocation(line: 584, column: 7, scope: !2155)
!2274 = !DILocation(line: 586, column: 11, scope: !2275)
!2275 = distinct !DILexicalBlock(scope: !2272, file: !49, line: 585, column: 2)
!2276 = !DILocation(line: 586, column: 19, scope: !2275)
!2277 = !DILocation(line: 586, column: 29, scope: !2275)
!2278 = !DILocation(line: 586, column: 9, scope: !2275)
!2279 = !DILocation(line: 586, column: 7, scope: !2275)
!2280 = !DILocation(line: 587, column: 15, scope: !2275)
!2281 = !DILocation(line: 588, column: 2, scope: !2275)
!2282 = !DILocalVariable(name: "i", scope: !2283, file: !49, line: 590, type: !14)
!2283 = distinct !DILexicalBlock(scope: !2155, file: !49, line: 590, column: 2)
!2284 = !DILocation(line: 590, column: 19, scope: !2283)
!2285 = !DILocation(line: 590, column: 8, scope: !2283)
!2286 = !DILocation(line: 590, column: 26, scope: !2287)
!2287 = distinct !DILexicalBlock(scope: !2283, file: !49, line: 590, column: 2)
!2288 = !DILocation(line: 590, column: 30, scope: !2287)
!2289 = !DILocation(line: 590, column: 28, scope: !2287)
!2290 = !DILocation(line: 590, column: 2, scope: !2283)
!2291 = !DILocation(line: 591, column: 11, scope: !2287)
!2292 = !DILocation(line: 591, column: 19, scope: !2287)
!2293 = !DILocation(line: 591, column: 33, scope: !2287)
!2294 = !DILocation(line: 591, column: 24, scope: !2287)
!2295 = !DILocation(line: 591, column: 37, scope: !2287)
!2296 = !DILocation(line: 591, column: 9, scope: !2287)
!2297 = !DILocation(line: 591, column: 7, scope: !2287)
!2298 = !DILocation(line: 591, column: 3, scope: !2287)
!2299 = !DILocation(line: 590, column: 48, scope: !2287)
!2300 = !DILocation(line: 590, column: 2, scope: !2287)
!2301 = distinct !{!2301, !2290, !2302}
!2302 = !DILocation(line: 591, column: 41, scope: !2283)
!2303 = !DILocation(line: 593, column: 8, scope: !2304)
!2304 = distinct !DILexicalBlock(scope: !2155, file: !49, line: 593, column: 7)
!2305 = !DILocation(line: 593, column: 14, scope: !2304)
!2306 = !DILocation(line: 593, column: 7, scope: !2155)
!2307 = !DILocation(line: 595, column: 3, scope: !2308)
!2308 = distinct !DILexicalBlock(scope: !2304, file: !49, line: 594, column: 2)
!2309 = !DILocation(line: 595, column: 21, scope: !2308)
!2310 = !DILocation(line: 595, column: 24, scope: !2308)
!2311 = !DILocation(line: 596, column: 12, scope: !2308)
!2312 = !DILocation(line: 596, column: 20, scope: !2308)
!2313 = !DILocation(line: 596, column: 30, scope: !2308)
!2314 = !DILocation(line: 596, column: 10, scope: !2308)
!2315 = !DILocation(line: 596, column: 8, scope: !2308)
!2316 = distinct !{!2316, !2307, !2317}
!2317 = !DILocation(line: 596, column: 34, scope: !2308)
!2318 = !DILocation(line: 597, column: 2, scope: !2308)
!2319 = !DILocation(line: 599, column: 10, scope: !2155)
!2320 = !DILocation(line: 599, column: 2, scope: !2155)
!2321 = distinct !DISubprogram(name: "cgc_printf_float_to_string", scope: !49, file: !49, line: 325, type: !2322, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!2322 = !DISubroutineType(types: !2323)
!2323 = !{!14, !61, !59, !19, !308}
!2324 = !DILocalVariable(name: "val", arg: 1, scope: !2321, file: !49, line: 325, type: !61)
!2325 = !DILocation(line: 325, column: 47, scope: !2321)
!2326 = !DILocalVariable(name: "fraction_precision_digit_count", arg: 2, scope: !2321, file: !49, line: 325, type: !59)
!2327 = !DILocation(line: 325, column: 60, scope: !2321)
!2328 = !DILocalVariable(name: "str", arg: 3, scope: !2321, file: !49, line: 325, type: !19)
!2329 = !DILocation(line: 325, column: 98, scope: !2321)
!2330 = !DILocalVariable(name: "flags", arg: 4, scope: !2321, file: !49, line: 325, type: !308)
!2331 = !DILocation(line: 325, column: 111, scope: !2321)
!2332 = !DILocalVariable(name: "pos", scope: !2321, file: !49, line: 327, type: !14)
!2333 = !DILocation(line: 327, column: 13, scope: !2321)
!2334 = !DILocalVariable(name: "n", scope: !2321, file: !49, line: 328, type: !308)
!2335 = !DILocation(line: 328, column: 10, scope: !2321)
!2336 = !DILocalVariable(name: "display_precision", scope: !2321, file: !49, line: 330, type: !61)
!2337 = !DILocation(line: 330, column: 9, scope: !2321)
!2338 = !DILocation(line: 330, column: 45, scope: !2321)
!2339 = !DILocation(line: 330, column: 44, scope: !2321)
!2340 = !DILocation(line: 330, column: 29, scope: !2321)
!2341 = !DILocation(line: 332, column: 7, scope: !2342)
!2342 = distinct !DILexicalBlock(scope: !2321, file: !49, line: 332, column: 7)
!2343 = !DILocation(line: 332, column: 11, scope: !2342)
!2344 = !DILocation(line: 332, column: 7, scope: !2321)
!2345 = !DILocation(line: 334, column: 3, scope: !2346)
!2346 = distinct !DILexicalBlock(scope: !2342, file: !49, line: 333, column: 2)
!2347 = !DILocation(line: 334, column: 10, scope: !2346)
!2348 = !DILocation(line: 334, column: 14, scope: !2346)
!2349 = !DILocation(line: 335, column: 3, scope: !2346)
!2350 = !DILocation(line: 335, column: 10, scope: !2346)
!2351 = !DILocation(line: 335, column: 14, scope: !2346)
!2352 = !DILocalVariable(name: "i", scope: !2353, file: !49, line: 337, type: !59)
!2353 = distinct !DILexicalBlock(scope: !2346, file: !49, line: 337, column: 3)
!2354 = !DILocation(line: 337, column: 17, scope: !2353)
!2355 = !DILocation(line: 337, column: 9, scope: !2353)
!2356 = !DILocation(line: 337, column: 24, scope: !2357)
!2357 = distinct !DILexicalBlock(scope: !2353, file: !49, line: 337, column: 3)
!2358 = !DILocation(line: 337, column: 28, scope: !2357)
!2359 = !DILocation(line: 337, column: 26, scope: !2357)
!2360 = !DILocation(line: 337, column: 3, scope: !2353)
!2361 = !DILocation(line: 338, column: 4, scope: !2357)
!2362 = !DILocation(line: 338, column: 11, scope: !2357)
!2363 = !DILocation(line: 338, column: 15, scope: !2357)
!2364 = !DILocation(line: 337, column: 61, scope: !2357)
!2365 = !DILocation(line: 337, column: 3, scope: !2357)
!2366 = distinct !{!2366, !2360, !2367}
!2367 = !DILocation(line: 338, column: 17, scope: !2353)
!2368 = !DILocation(line: 340, column: 8, scope: !2369)
!2369 = distinct !DILexicalBlock(scope: !2346, file: !49, line: 340, column: 8)
!2370 = !DILocation(line: 340, column: 14, scope: !2369)
!2371 = !DILocation(line: 340, column: 8, scope: !2346)
!2372 = !DILocation(line: 342, column: 4, scope: !2373)
!2373 = distinct !DILexicalBlock(scope: !2369, file: !49, line: 341, column: 3)
!2374 = !DILocation(line: 342, column: 11, scope: !2373)
!2375 = !DILocation(line: 342, column: 15, scope: !2373)
!2376 = !DILocation(line: 343, column: 4, scope: !2373)
!2377 = !DILocation(line: 343, column: 11, scope: !2373)
!2378 = !DILocation(line: 343, column: 15, scope: !2373)
!2379 = !DILocation(line: 344, column: 4, scope: !2373)
!2380 = !DILocation(line: 344, column: 11, scope: !2373)
!2381 = !DILocation(line: 344, column: 15, scope: !2373)
!2382 = !DILocation(line: 345, column: 4, scope: !2373)
!2383 = !DILocation(line: 345, column: 11, scope: !2373)
!2384 = !DILocation(line: 345, column: 15, scope: !2373)
!2385 = !DILocation(line: 346, column: 4, scope: !2373)
!2386 = !DILocation(line: 346, column: 11, scope: !2373)
!2387 = !DILocation(line: 346, column: 15, scope: !2373)
!2388 = !DILocation(line: 347, column: 3, scope: !2373)
!2389 = !DILocation(line: 349, column: 10, scope: !2346)
!2390 = !DILocation(line: 349, column: 3, scope: !2346)
!2391 = !DILocation(line: 351, column: 12, scope: !2392)
!2392 = distinct !DILexicalBlock(scope: !2342, file: !49, line: 351, column: 12)
!2393 = !DILocation(line: 351, column: 12, scope: !2342)
!2394 = !DILocation(line: 353, column: 3, scope: !2395)
!2395 = distinct !DILexicalBlock(scope: !2392, file: !49, line: 352, column: 2)
!2396 = !DILocation(line: 353, column: 10, scope: !2395)
!2397 = !DILocation(line: 353, column: 14, scope: !2395)
!2398 = !DILocation(line: 354, column: 3, scope: !2395)
!2399 = !DILocation(line: 354, column: 10, scope: !2395)
!2400 = !DILocation(line: 354, column: 14, scope: !2395)
!2401 = !DILocation(line: 355, column: 3, scope: !2395)
!2402 = !DILocation(line: 355, column: 10, scope: !2395)
!2403 = !DILocation(line: 355, column: 14, scope: !2395)
!2404 = !DILocation(line: 356, column: 10, scope: !2395)
!2405 = !DILocation(line: 356, column: 3, scope: !2395)
!2406 = !DILocation(line: 358, column: 12, scope: !2407)
!2407 = distinct !DILexicalBlock(scope: !2392, file: !49, line: 358, column: 12)
!2408 = !DILocation(line: 358, column: 12, scope: !2392)
!2409 = !DILocation(line: 360, column: 3, scope: !2410)
!2410 = distinct !DILexicalBlock(scope: !2407, file: !49, line: 359, column: 2)
!2411 = !DILocation(line: 360, column: 10, scope: !2410)
!2412 = !DILocation(line: 360, column: 14, scope: !2410)
!2413 = !DILocation(line: 361, column: 3, scope: !2410)
!2414 = !DILocation(line: 361, column: 10, scope: !2410)
!2415 = !DILocation(line: 361, column: 14, scope: !2410)
!2416 = !DILocation(line: 362, column: 3, scope: !2410)
!2417 = !DILocation(line: 362, column: 10, scope: !2410)
!2418 = !DILocation(line: 362, column: 14, scope: !2410)
!2419 = !DILocation(line: 363, column: 10, scope: !2410)
!2420 = !DILocation(line: 363, column: 3, scope: !2410)
!2421 = !DILocation(line: 367, column: 7, scope: !2422)
!2422 = distinct !DILexicalBlock(scope: !2321, file: !49, line: 367, column: 7)
!2423 = !DILocation(line: 367, column: 11, scope: !2422)
!2424 = !DILocation(line: 367, column: 7, scope: !2321)
!2425 = !DILocation(line: 368, column: 9, scope: !2422)
!2426 = !DILocation(line: 368, column: 3, scope: !2422)
!2427 = !DILocation(line: 370, column: 7, scope: !2428)
!2428 = distinct !DILexicalBlock(scope: !2321, file: !49, line: 370, column: 7)
!2429 = !DILocation(line: 370, column: 11, scope: !2428)
!2430 = !DILocation(line: 370, column: 7, scope: !2321)
!2431 = !DILocation(line: 371, column: 9, scope: !2428)
!2432 = !DILocation(line: 371, column: 16, scope: !2428)
!2433 = !DILocation(line: 371, column: 34, scope: !2428)
!2434 = !DILocation(line: 371, column: 13, scope: !2428)
!2435 = !DILocation(line: 371, column: 7, scope: !2428)
!2436 = !DILocation(line: 371, column: 3, scope: !2428)
!2437 = !DILocation(line: 373, column: 9, scope: !2428)
!2438 = !DILocation(line: 373, column: 16, scope: !2428)
!2439 = !DILocation(line: 373, column: 34, scope: !2428)
!2440 = !DILocation(line: 373, column: 13, scope: !2428)
!2441 = !DILocation(line: 373, column: 7, scope: !2428)
!2442 = !DILocalVariable(name: "magnitude", scope: !2321, file: !49, line: 376, type: !114)
!2443 = !DILocation(line: 376, column: 10, scope: !2321)
!2444 = !DILocation(line: 376, column: 33, scope: !2321)
!2445 = !DILocation(line: 376, column: 22, scope: !2321)
!2446 = !DILocation(line: 379, column: 7, scope: !2447)
!2447 = distinct !DILexicalBlock(scope: !2321, file: !49, line: 379, column: 7)
!2448 = !DILocation(line: 379, column: 13, scope: !2447)
!2449 = !DILocation(line: 379, column: 7, scope: !2321)
!2450 = !DILocalVariable(name: "new_round_precision", scope: !2451, file: !49, line: 381, type: !61)
!2451 = distinct !DILexicalBlock(scope: !2447, file: !49, line: 380, column: 2)
!2452 = !DILocation(line: 381, column: 10, scope: !2451)
!2453 = !DILocalVariable(name: "round_position", scope: !2451, file: !49, line: 383, type: !114)
!2454 = !DILocation(line: 383, column: 12, scope: !2451)
!2455 = !DILocation(line: 383, column: 29, scope: !2451)
!2456 = !DILocation(line: 383, column: 41, scope: !2451)
!2457 = !DILocation(line: 383, column: 39, scope: !2451)
!2458 = !DILocation(line: 385, column: 8, scope: !2459)
!2459 = distinct !DILexicalBlock(scope: !2451, file: !49, line: 385, column: 8)
!2460 = !DILocation(line: 385, column: 12, scope: !2459)
!2461 = !DILocation(line: 385, column: 8, scope: !2451)
!2462 = !DILocation(line: 386, column: 39, scope: !2459)
!2463 = !DILocation(line: 386, column: 53, scope: !2459)
!2464 = !DILocation(line: 386, column: 26, scope: !2459)
!2465 = !DILocation(line: 386, column: 24, scope: !2459)
!2466 = !DILocation(line: 386, column: 4, scope: !2459)
!2467 = !DILocation(line: 388, column: 39, scope: !2459)
!2468 = !DILocation(line: 388, column: 26, scope: !2459)
!2469 = !DILocation(line: 388, column: 24, scope: !2459)
!2470 = !DILocation(line: 391, column: 23, scope: !2451)
!2471 = !DILocation(line: 391, column: 21, scope: !2451)
!2472 = !DILocation(line: 392, column: 2, scope: !2451)
!2473 = !DILocation(line: 395, column: 7, scope: !2474)
!2474 = distinct !DILexicalBlock(scope: !2321, file: !49, line: 395, column: 7)
!2475 = !DILocation(line: 395, column: 11, scope: !2474)
!2476 = !DILocation(line: 395, column: 7, scope: !2321)
!2477 = !DILocation(line: 397, column: 10, scope: !2478)
!2478 = distinct !DILexicalBlock(scope: !2474, file: !49, line: 396, column: 2)
!2479 = !DILocation(line: 397, column: 9, scope: !2478)
!2480 = !DILocation(line: 397, column: 7, scope: !2478)
!2481 = !DILocation(line: 398, column: 3, scope: !2478)
!2482 = !DILocation(line: 398, column: 7, scope: !2478)
!2483 = !DILocation(line: 398, column: 12, scope: !2478)
!2484 = !DILocation(line: 399, column: 6, scope: !2478)
!2485 = !DILocation(line: 400, column: 2, scope: !2478)
!2486 = !DILocalVariable(name: "exponent_value", scope: !2321, file: !49, line: 404, type: !114)
!2487 = !DILocation(line: 404, column: 10, scope: !2321)
!2488 = !DILocalVariable(name: "fraction_count", scope: !2321, file: !49, line: 406, type: !57)
!2489 = !DILocation(line: 406, column: 11, scope: !2321)
!2490 = !DILocalVariable(name: "is_fraction_digits", scope: !2321, file: !49, line: 407, type: !2001)
!2491 = !DILocation(line: 407, column: 9, scope: !2321)
!2492 = !DILocation(line: 409, column: 7, scope: !2493)
!2493 = distinct !DILexicalBlock(scope: !2321, file: !49, line: 409, column: 7)
!2494 = !DILocation(line: 409, column: 13, scope: !2493)
!2495 = !DILocation(line: 409, column: 11, scope: !2493)
!2496 = !DILocation(line: 409, column: 7, scope: !2321)
!2497 = !DILocation(line: 411, column: 3, scope: !2498)
!2498 = distinct !DILexicalBlock(scope: !2493, file: !49, line: 410, column: 2)
!2499 = !DILocation(line: 411, column: 10, scope: !2498)
!2500 = !DILocation(line: 411, column: 14, scope: !2498)
!2501 = !DILocation(line: 412, column: 3, scope: !2498)
!2502 = !DILocation(line: 412, column: 10, scope: !2498)
!2503 = !DILocation(line: 412, column: 14, scope: !2498)
!2504 = !DILocation(line: 414, column: 22, scope: !2498)
!2505 = !DILocation(line: 415, column: 2, scope: !2498)
!2506 = !DILocation(line: 416, column: 12, scope: !2507)
!2507 = distinct !DILexicalBlock(scope: !2493, file: !49, line: 416, column: 12)
!2508 = !DILocation(line: 416, column: 22, scope: !2507)
!2509 = !DILocation(line: 416, column: 26, scope: !2507)
!2510 = !DILocation(line: 416, column: 29, scope: !2507)
!2511 = !DILocation(line: 416, column: 35, scope: !2507)
!2512 = !DILocation(line: 416, column: 33, scope: !2507)
!2513 = !DILocation(line: 416, column: 53, scope: !2507)
!2514 = !DILocation(line: 416, column: 58, scope: !2507)
!2515 = !DILocation(line: 416, column: 64, scope: !2507)
!2516 = !DILocation(line: 416, column: 12, scope: !2493)
!2517 = !DILocation(line: 418, column: 3, scope: !2518)
!2518 = distinct !DILexicalBlock(scope: !2507, file: !49, line: 417, column: 2)
!2519 = !DILocation(line: 418, column: 10, scope: !2518)
!2520 = !DILocation(line: 418, column: 14, scope: !2518)
!2521 = !DILocation(line: 419, column: 3, scope: !2518)
!2522 = !DILocation(line: 419, column: 10, scope: !2518)
!2523 = !DILocation(line: 419, column: 14, scope: !2518)
!2524 = !DILocalVariable(name: "temp_zero_count", scope: !2518, file: !49, line: 421, type: !114)
!2525 = !DILocation(line: 421, column: 11, scope: !2518)
!2526 = !DILocation(line: 421, column: 29, scope: !2518)
!2527 = !DILocation(line: 422, column: 3, scope: !2518)
!2528 = !DILocation(line: 422, column: 11, scope: !2518)
!2529 = !DILocation(line: 422, column: 29, scope: !2518)
!2530 = !DILocation(line: 424, column: 4, scope: !2531)
!2531 = distinct !DILexicalBlock(scope: !2518, file: !49, line: 423, column: 3)
!2532 = !DILocation(line: 424, column: 11, scope: !2531)
!2533 = !DILocation(line: 424, column: 15, scope: !2531)
!2534 = !DILocation(line: 425, column: 18, scope: !2531)
!2535 = distinct !{!2535, !2527, !2536}
!2536 = !DILocation(line: 426, column: 3, scope: !2518)
!2537 = !DILocation(line: 427, column: 22, scope: !2518)
!2538 = !DILocation(line: 428, column: 2, scope: !2518)
!2539 = !DILocation(line: 430, column: 2, scope: !2321)
!2540 = !DILocation(line: 430, column: 10, scope: !2321)
!2541 = !DILocation(line: 430, column: 20, scope: !2321)
!2542 = !DILocation(line: 430, column: 25, scope: !2321)
!2543 = !DILocation(line: 430, column: 28, scope: !2321)
!2544 = !DILocation(line: 430, column: 34, scope: !2321)
!2545 = !DILocation(line: 430, column: 32, scope: !2321)
!2546 = !DILocalVariable(name: "divider", scope: !2547, file: !49, line: 432, type: !61)
!2547 = distinct !DILexicalBlock(scope: !2321, file: !49, line: 431, column: 2)
!2548 = !DILocation(line: 432, column: 10, scope: !2547)
!2549 = !DILocation(line: 432, column: 35, scope: !2547)
!2550 = !DILocation(line: 432, column: 20, scope: !2547)
!2551 = !DILocation(line: 434, column: 8, scope: !2552)
!2552 = distinct !DILexicalBlock(scope: !2547, file: !49, line: 434, column: 8)
!2553 = !DILocation(line: 434, column: 16, scope: !2552)
!2554 = !DILocation(line: 434, column: 22, scope: !2552)
!2555 = !DILocation(line: 434, column: 26, scope: !2552)
!2556 = !DILocation(line: 434, column: 8, scope: !2547)
!2557 = !DILocalVariable(name: "digit", scope: !2558, file: !49, line: 436, type: !59)
!2558 = distinct !DILexicalBlock(scope: !2552, file: !49, line: 435, column: 3)
!2559 = !DILocation(line: 436, column: 12, scope: !2558)
!2560 = !DILocation(line: 436, column: 40, scope: !2558)
!2561 = !DILocation(line: 436, column: 46, scope: !2558)
!2562 = !DILocation(line: 436, column: 44, scope: !2558)
!2563 = !DILocation(line: 436, column: 29, scope: !2558)
!2564 = !DILocation(line: 436, column: 20, scope: !2558)
!2565 = !DILocation(line: 437, column: 20, scope: !2558)
!2566 = !DILocation(line: 437, column: 12, scope: !2558)
!2567 = !DILocation(line: 437, column: 28, scope: !2558)
!2568 = !DILocation(line: 437, column: 26, scope: !2558)
!2569 = !DILocation(line: 437, column: 8, scope: !2558)
!2570 = !DILocation(line: 439, column: 9, scope: !2571)
!2571 = distinct !DILexicalBlock(scope: !2558, file: !49, line: 439, column: 9)
!2572 = !DILocation(line: 439, column: 15, scope: !2571)
!2573 = !DILocation(line: 439, column: 37, scope: !2571)
!2574 = !DILocation(line: 439, column: 40, scope: !2571)
!2575 = !DILocation(line: 439, column: 59, scope: !2571)
!2576 = !DILocation(line: 439, column: 9, scope: !2558)
!2577 = !DILocation(line: 442, column: 10, scope: !2578)
!2578 = distinct !DILexicalBlock(scope: !2579, file: !49, line: 442, column: 10)
!2579 = distinct !DILexicalBlock(scope: !2571, file: !49, line: 440, column: 4)
!2580 = !DILocation(line: 442, column: 25, scope: !2578)
!2581 = !DILocation(line: 442, column: 10, scope: !2579)
!2582 = !DILocation(line: 443, column: 23, scope: !2578)
!2583 = !DILocation(line: 443, column: 21, scope: !2578)
!2584 = !DILocation(line: 443, column: 6, scope: !2578)
!2585 = !DILocation(line: 445, column: 10, scope: !2586)
!2586 = distinct !DILexicalBlock(scope: !2579, file: !49, line: 445, column: 10)
!2587 = !DILocation(line: 445, column: 16, scope: !2586)
!2588 = !DILocation(line: 445, column: 10, scope: !2579)
!2589 = !DILocation(line: 446, column: 20, scope: !2586)
!2590 = !DILocation(line: 446, column: 6, scope: !2586)
!2591 = !DILocation(line: 449, column: 25, scope: !2592)
!2592 = distinct !DILexicalBlock(scope: !2586, file: !49, line: 448, column: 5)
!2593 = !DILocation(line: 449, column: 23, scope: !2592)
!2594 = !DILocation(line: 449, column: 19, scope: !2592)
!2595 = !DILocation(line: 449, column: 6, scope: !2592)
!2596 = !DILocation(line: 449, column: 13, scope: !2592)
!2597 = !DILocation(line: 449, column: 17, scope: !2592)
!2598 = !DILocation(line: 450, column: 6, scope: !2592)
!2599 = !DILocation(line: 450, column: 13, scope: !2592)
!2600 = !DILocation(line: 450, column: 17, scope: !2592)
!2601 = !DILocation(line: 453, column: 25, scope: !2592)
!2602 = !DILocation(line: 455, column: 4, scope: !2579)
!2603 = !DILocation(line: 458, column: 10, scope: !2604)
!2604 = distinct !DILexicalBlock(scope: !2605, file: !49, line: 458, column: 10)
!2605 = distinct !DILexicalBlock(scope: !2571, file: !49, line: 457, column: 4)
!2606 = !DILocation(line: 458, column: 20, scope: !2604)
!2607 = !DILocation(line: 458, column: 26, scope: !2604)
!2608 = !DILocation(line: 458, column: 29, scope: !2604)
!2609 = !DILocation(line: 458, column: 48, scope: !2604)
!2610 = !DILocation(line: 458, column: 10, scope: !2605)
!2611 = !DILocation(line: 460, column: 6, scope: !2612)
!2612 = distinct !DILexicalBlock(scope: !2604, file: !49, line: 459, column: 5)
!2613 = !DILocation(line: 460, column: 13, scope: !2612)
!2614 = !DILocation(line: 460, column: 17, scope: !2612)
!2615 = !DILocation(line: 461, column: 6, scope: !2612)
!2616 = !DILocation(line: 461, column: 13, scope: !2612)
!2617 = !DILocation(line: 461, column: 17, scope: !2612)
!2618 = !DILocation(line: 463, column: 25, scope: !2612)
!2619 = !DILocation(line: 464, column: 5, scope: !2612)
!2620 = !DILocation(line: 466, column: 24, scope: !2605)
!2621 = !DILocation(line: 466, column: 22, scope: !2605)
!2622 = !DILocation(line: 466, column: 18, scope: !2605)
!2623 = !DILocation(line: 466, column: 5, scope: !2605)
!2624 = !DILocation(line: 466, column: 12, scope: !2605)
!2625 = !DILocation(line: 466, column: 16, scope: !2605)
!2626 = !DILocation(line: 468, column: 10, scope: !2627)
!2627 = distinct !DILexicalBlock(scope: !2605, file: !49, line: 468, column: 10)
!2628 = !DILocation(line: 468, column: 10, scope: !2605)
!2629 = !DILocation(line: 469, column: 20, scope: !2627)
!2630 = !DILocation(line: 469, column: 6, scope: !2627)
!2631 = !DILocation(line: 471, column: 3, scope: !2558)
!2632 = !DILocation(line: 473, column: 8, scope: !2633)
!2633 = distinct !DILexicalBlock(scope: !2547, file: !49, line: 473, column: 8)
!2634 = !DILocation(line: 473, column: 18, scope: !2633)
!2635 = !DILocation(line: 473, column: 25, scope: !2633)
!2636 = !DILocation(line: 473, column: 28, scope: !2633)
!2637 = !DILocation(line: 473, column: 32, scope: !2633)
!2638 = !DILocation(line: 473, column: 38, scope: !2633)
!2639 = !DILocation(line: 473, column: 43, scope: !2633)
!2640 = !DILocation(line: 473, column: 49, scope: !2633)
!2641 = !DILocation(line: 473, column: 8, scope: !2547)
!2642 = !DILocation(line: 475, column: 4, scope: !2643)
!2643 = distinct !DILexicalBlock(scope: !2633, file: !49, line: 474, column: 3)
!2644 = !DILocation(line: 475, column: 11, scope: !2643)
!2645 = !DILocation(line: 475, column: 15, scope: !2643)
!2646 = !DILocation(line: 477, column: 23, scope: !2643)
!2647 = !DILocation(line: 478, column: 3, scope: !2643)
!2648 = !DILocation(line: 480, column: 8, scope: !2649)
!2649 = distinct !DILexicalBlock(scope: !2547, file: !49, line: 480, column: 8)
!2650 = !DILocation(line: 480, column: 26, scope: !2649)
!2651 = !DILocation(line: 480, column: 23, scope: !2649)
!2652 = !DILocation(line: 480, column: 8, scope: !2547)
!2653 = !DILocation(line: 481, column: 4, scope: !2649)
!2654 = !DILocation(line: 483, column: 12, scope: !2547)
!2655 = distinct !{!2655, !2539, !2656}
!2656 = !DILocation(line: 484, column: 2, scope: !2321)
!2657 = !DILocation(line: 486, column: 2, scope: !2321)
!2658 = !DILocation(line: 486, column: 10, scope: !2321)
!2659 = !DILocation(line: 486, column: 29, scope: !2321)
!2660 = !DILocation(line: 486, column: 32, scope: !2321)
!2661 = !DILocation(line: 486, column: 49, scope: !2321)
!2662 = !DILocation(line: 486, column: 47, scope: !2321)
!2663 = !DILocation(line: 0, scope: !2321)
!2664 = !DILocation(line: 489, column: 3, scope: !2665)
!2665 = distinct !DILexicalBlock(scope: !2321, file: !49, line: 487, column: 2)
!2666 = !DILocation(line: 489, column: 10, scope: !2665)
!2667 = !DILocation(line: 489, column: 14, scope: !2665)
!2668 = !DILocation(line: 490, column: 17, scope: !2665)
!2669 = distinct !{!2669, !2657, !2670}
!2670 = !DILocation(line: 491, column: 2, scope: !2321)
!2671 = !DILocation(line: 493, column: 8, scope: !2672)
!2672 = distinct !DILexicalBlock(scope: !2321, file: !49, line: 493, column: 7)
!2673 = !DILocation(line: 493, column: 14, scope: !2672)
!2674 = !DILocation(line: 493, column: 7, scope: !2321)
!2675 = !DILocation(line: 496, column: 3, scope: !2676)
!2676 = distinct !DILexicalBlock(scope: !2672, file: !49, line: 494, column: 2)
!2677 = !DILocation(line: 496, column: 10, scope: !2676)
!2678 = !DILocation(line: 496, column: 14, scope: !2676)
!2679 = !DILocation(line: 498, column: 8, scope: !2680)
!2680 = distinct !DILexicalBlock(scope: !2676, file: !49, line: 498, column: 8)
!2681 = !DILocation(line: 498, column: 23, scope: !2680)
!2682 = !DILocation(line: 498, column: 8, scope: !2676)
!2683 = !DILocation(line: 500, column: 22, scope: !2684)
!2684 = distinct !DILexicalBlock(scope: !2680, file: !49, line: 499, column: 3)
!2685 = !DILocation(line: 500, column: 21, scope: !2684)
!2686 = !DILocation(line: 500, column: 19, scope: !2684)
!2687 = !DILocation(line: 501, column: 4, scope: !2684)
!2688 = !DILocation(line: 501, column: 11, scope: !2684)
!2689 = !DILocation(line: 501, column: 15, scope: !2684)
!2690 = !DILocation(line: 502, column: 3, scope: !2684)
!2691 = !DILocation(line: 504, column: 4, scope: !2680)
!2692 = !DILocation(line: 504, column: 11, scope: !2680)
!2693 = !DILocation(line: 504, column: 15, scope: !2680)
!2694 = !DILocation(line: 506, column: 8, scope: !2695)
!2695 = distinct !DILexicalBlock(scope: !2676, file: !49, line: 506, column: 8)
!2696 = !DILocation(line: 506, column: 23, scope: !2695)
!2697 = !DILocation(line: 506, column: 8, scope: !2676)
!2698 = !DILocalVariable(name: "i", scope: !2699, file: !49, line: 508, type: !59)
!2699 = distinct !DILexicalBlock(scope: !2700, file: !49, line: 508, column: 4)
!2700 = distinct !DILexicalBlock(scope: !2695, file: !49, line: 507, column: 3)
!2701 = !DILocation(line: 508, column: 18, scope: !2699)
!2702 = !DILocation(line: 508, column: 10, scope: !2699)
!2703 = !DILocation(line: 508, column: 25, scope: !2704)
!2704 = distinct !DILexicalBlock(scope: !2699, file: !49, line: 508, column: 4)
!2705 = !DILocation(line: 508, column: 27, scope: !2704)
!2706 = !DILocation(line: 508, column: 4, scope: !2699)
!2707 = !DILocation(line: 509, column: 5, scope: !2704)
!2708 = !DILocation(line: 509, column: 12, scope: !2704)
!2709 = !DILocation(line: 509, column: 16, scope: !2704)
!2710 = !DILocation(line: 508, column: 33, scope: !2704)
!2711 = !DILocation(line: 508, column: 4, scope: !2704)
!2712 = distinct !{!2712, !2706, !2713}
!2713 = !DILocation(line: 509, column: 18, scope: !2699)
!2714 = !DILocation(line: 510, column: 3, scope: !2700)
!2715 = !DILocalVariable(name: "exponent_digit_count", scope: !2716, file: !49, line: 513, type: !59)
!2716 = distinct !DILexicalBlock(scope: !2695, file: !49, line: 512, column: 3)
!2717 = !DILocation(line: 513, column: 12, scope: !2716)
!2718 = !DILocalVariable(name: "exponent_magnitude", scope: !2716, file: !49, line: 514, type: !57)
!2719 = !DILocation(line: 514, column: 13, scope: !2716)
!2720 = !DILocation(line: 514, column: 45, scope: !2716)
!2721 = !DILocation(line: 514, column: 34, scope: !2716)
!2722 = !DILocalVariable(name: "i", scope: !2723, file: !49, line: 516, type: !59)
!2723 = distinct !DILexicalBlock(scope: !2716, file: !49, line: 516, column: 4)
!2724 = !DILocation(line: 516, column: 18, scope: !2723)
!2725 = !DILocation(line: 516, column: 22, scope: !2723)
!2726 = !DILocation(line: 516, column: 10, scope: !2723)
!2727 = !DILocation(line: 516, column: 42, scope: !2728)
!2728 = distinct !DILexicalBlock(scope: !2723, file: !49, line: 516, column: 4)
!2729 = !DILocation(line: 516, column: 44, scope: !2728)
!2730 = !DILocation(line: 516, column: 4, scope: !2723)
!2731 = !DILocation(line: 518, column: 5, scope: !2732)
!2732 = distinct !DILexicalBlock(scope: !2728, file: !49, line: 517, column: 4)
!2733 = !DILocation(line: 518, column: 12, scope: !2732)
!2734 = !DILocation(line: 518, column: 16, scope: !2732)
!2735 = !DILocation(line: 519, column: 25, scope: !2732)
!2736 = !DILocation(line: 520, column: 4, scope: !2732)
!2737 = !DILocation(line: 516, column: 50, scope: !2728)
!2738 = !DILocation(line: 516, column: 4, scope: !2728)
!2739 = distinct !{!2739, !2730, !2740}
!2740 = !DILocation(line: 520, column: 4, scope: !2723)
!2741 = !DILocation(line: 522, column: 4, scope: !2716)
!2742 = !DILocation(line: 522, column: 32, scope: !2716)
!2743 = !DILocation(line: 522, column: 12, scope: !2716)
!2744 = !DILocation(line: 522, column: 35, scope: !2716)
!2745 = !DILocalVariable(name: "exponent_divider", scope: !2746, file: !49, line: 524, type: !57)
!2746 = distinct !DILexicalBlock(scope: !2716, file: !49, line: 523, column: 4)
!2747 = !DILocation(line: 524, column: 14, scope: !2746)
!2748 = !DILocation(line: 524, column: 46, scope: !2746)
!2749 = !DILocation(line: 524, column: 33, scope: !2746)
!2750 = !DILocalVariable(name: "exponent_digit", scope: !2746, file: !49, line: 526, type: !59)
!2751 = !DILocation(line: 526, column: 13, scope: !2746)
!2752 = !DILocation(line: 526, column: 31, scope: !2746)
!2753 = !DILocation(line: 526, column: 48, scope: !2746)
!2754 = !DILocation(line: 526, column: 46, scope: !2746)
!2755 = !{!"True"}
!2756 = !DILocation(line: 526, column: 30, scope: !2746)
!2757 = !DILocation(line: 527, column: 24, scope: !2746)
!2758 = !DILocation(line: 527, column: 22, scope: !2746)
!2759 = !DILocation(line: 527, column: 18, scope: !2746)
!2760 = !DILocation(line: 527, column: 5, scope: !2746)
!2761 = !DILocation(line: 527, column: 12, scope: !2746)
!2762 = !DILocation(line: 527, column: 16, scope: !2746)
!2763 = !DILocation(line: 529, column: 24, scope: !2746)
!2764 = !DILocation(line: 529, column: 41, scope: !2746)
!2765 = !DILocation(line: 529, column: 39, scope: !2746)
!2766 = !DILocation(line: 529, column: 20, scope: !2746)
!2767 = !DILocation(line: 530, column: 23, scope: !2746)
!2768 = distinct !{!2768, !2741, !2769}
!2769 = !DILocation(line: 531, column: 4, scope: !2716)
!2770 = !DILocation(line: 533, column: 2, scope: !2676)
!2771 = !DILocation(line: 535, column: 10, scope: !2321)
!2772 = !DILocation(line: 535, column: 2, scope: !2321)
!2773 = !DILocation(line: 536, column: 1, scope: !2321)
!2774 = distinct !DISubprogram(name: "cgc_floor", scope: !2775, file: !2775, line: 40, type: !2776, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !298, retainedNodes: !4)
!2775 = !DIFile(filename: "challenges/3D_Image_Toolkit/lib/math.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!2776 = !DISubroutineType(types: !2777)
!2777 = !{!61, !61}
!2778 = !DILocalVariable(name: "val", arg: 1, scope: !2774, file: !2775, line: 40, type: !61)
!2779 = !DILocation(line: 40, column: 26, scope: !2774)
!2780 = !DILocation(line: 42, column: 7, scope: !2781)
!2781 = distinct !DILexicalBlock(scope: !2774, file: !2775, line: 42, column: 7)
!2782 = !DILocation(line: 42, column: 11, scope: !2781)
!2783 = !DILocation(line: 42, column: 7, scope: !2774)
!2784 = !DILocation(line: 43, column: 29, scope: !2781)
!2785 = !DILocation(line: 43, column: 33, scope: !2781)
!2786 = !DILocation(line: 43, column: 18, scope: !2781)
!2787 = !DILocation(line: 43, column: 42, scope: !2781)
!2788 = !DILocation(line: 43, column: 3, scope: !2781)
!2789 = !DILocation(line: 44, column: 12, scope: !2790)
!2790 = distinct !DILexicalBlock(scope: !2781, file: !2775, line: 44, column: 12)
!2791 = !DILocation(line: 44, column: 16, scope: !2790)
!2792 = !DILocation(line: 44, column: 12, scope: !2781)
!2793 = !DILocation(line: 45, column: 29, scope: !2790)
!2794 = !DILocation(line: 45, column: 33, scope: !2790)
!2795 = !DILocation(line: 45, column: 18, scope: !2790)
!2796 = !DILocation(line: 45, column: 42, scope: !2790)
!2797 = !DILocation(line: 45, column: 3, scope: !2790)
!2798 = !DILocation(line: 47, column: 10, scope: !2790)
!2799 = !DILocation(line: 47, column: 3, scope: !2790)
!2800 = !DILocation(line: 48, column: 1, scope: !2774)
!2801 = distinct !DISubprogram(name: "cgc_printf_int_to_string", scope: !49, file: !49, line: 218, type: !2802, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!2802 = !DISubroutineType(types: !2803)
!2803 = !{!14, !30, !30, !19, !308}
!2804 = !DILocalVariable(name: "val", arg: 1, scope: !2801, file: !49, line: 218, type: !30)
!2805 = !DILocation(line: 218, column: 47, scope: !2801)
!2806 = !DILocalVariable(name: "base", arg: 2, scope: !2801, file: !49, line: 218, type: !30)
!2807 = !DILocation(line: 218, column: 61, scope: !2801)
!2808 = !DILocalVariable(name: "str", arg: 3, scope: !2801, file: !49, line: 218, type: !19)
!2809 = !DILocation(line: 218, column: 73, scope: !2801)
!2810 = !DILocalVariable(name: "flags", arg: 4, scope: !2801, file: !49, line: 218, type: !308)
!2811 = !DILocation(line: 218, column: 86, scope: !2801)
!2812 = !DILocalVariable(name: "pos", scope: !2801, file: !49, line: 220, type: !14)
!2813 = !DILocation(line: 220, column: 13, scope: !2801)
!2814 = !DILocalVariable(name: "n", scope: !2801, file: !49, line: 221, type: !308)
!2815 = !DILocation(line: 221, column: 10, scope: !2801)
!2816 = !DILocation(line: 223, column: 7, scope: !2817)
!2817 = distinct !DILexicalBlock(scope: !2801, file: !49, line: 223, column: 7)
!2818 = !DILocation(line: 223, column: 11, scope: !2817)
!2819 = !DILocation(line: 223, column: 7, scope: !2801)
!2820 = !DILocation(line: 225, column: 3, scope: !2821)
!2821 = distinct !DILexicalBlock(scope: !2817, file: !49, line: 224, column: 2)
!2822 = !DILocation(line: 225, column: 10, scope: !2821)
!2823 = !DILocation(line: 226, column: 3, scope: !2821)
!2824 = !DILocation(line: 229, column: 2, scope: !2801)
!2825 = !DILocation(line: 229, column: 10, scope: !2801)
!2826 = !DILocation(line: 229, column: 14, scope: !2801)
!2827 = !DILocation(line: 231, column: 7, scope: !2828)
!2828 = distinct !DILexicalBlock(scope: !2801, file: !49, line: 230, column: 2)
!2829 = !DILocation(line: 231, column: 13, scope: !2828)
!2830 = !DILocation(line: 231, column: 11, scope: !2828)
!2831 = !DILocation(line: 231, column: 5, scope: !2828)
!2832 = !DILocation(line: 232, column: 9, scope: !2828)
!2833 = !DILocation(line: 232, column: 15, scope: !2828)
!2834 = !DILocation(line: 232, column: 13, scope: !2828)
!2835 = !DILocation(line: 232, column: 7, scope: !2828)
!2836 = !DILocation(line: 234, column: 8, scope: !2837)
!2837 = distinct !DILexicalBlock(scope: !2828, file: !49, line: 234, column: 8)
!2838 = !DILocation(line: 234, column: 13, scope: !2837)
!2839 = !DILocation(line: 234, column: 8, scope: !2828)
!2840 = !DILocation(line: 236, column: 9, scope: !2841)
!2841 = distinct !DILexicalBlock(scope: !2842, file: !49, line: 236, column: 9)
!2842 = distinct !DILexicalBlock(scope: !2837, file: !49, line: 235, column: 3)
!2843 = !DILocation(line: 236, column: 11, scope: !2841)
!2844 = !DILocation(line: 236, column: 9, scope: !2842)
!2845 = !DILocation(line: 237, column: 24, scope: !2841)
!2846 = !DILocation(line: 237, column: 22, scope: !2841)
!2847 = !DILocation(line: 237, column: 18, scope: !2841)
!2848 = !DILocation(line: 237, column: 5, scope: !2841)
!2849 = !DILocation(line: 237, column: 12, scope: !2841)
!2850 = !DILocation(line: 237, column: 16, scope: !2841)
!2851 = !DILocation(line: 240, column: 10, scope: !2852)
!2852 = distinct !DILexicalBlock(scope: !2853, file: !49, line: 240, column: 10)
!2853 = distinct !DILexicalBlock(scope: !2841, file: !49, line: 239, column: 4)
!2854 = !DILocation(line: 240, column: 16, scope: !2852)
!2855 = !DILocation(line: 240, column: 10, scope: !2853)
!2856 = !DILocation(line: 241, column: 26, scope: !2852)
!2857 = !DILocation(line: 241, column: 27, scope: !2852)
!2858 = !DILocation(line: 241, column: 23, scope: !2852)
!2859 = !DILocation(line: 241, column: 19, scope: !2852)
!2860 = !DILocation(line: 241, column: 6, scope: !2852)
!2861 = !DILocation(line: 241, column: 13, scope: !2852)
!2862 = !DILocation(line: 241, column: 17, scope: !2852)
!2863 = !DILocation(line: 243, column: 26, scope: !2852)
!2864 = !DILocation(line: 243, column: 27, scope: !2852)
!2865 = !DILocation(line: 243, column: 23, scope: !2852)
!2866 = !DILocation(line: 243, column: 19, scope: !2852)
!2867 = !DILocation(line: 243, column: 6, scope: !2852)
!2868 = !DILocation(line: 243, column: 13, scope: !2852)
!2869 = !DILocation(line: 243, column: 17, scope: !2852)
!2870 = !DILocation(line: 245, column: 3, scope: !2842)
!2871 = !DILocation(line: 247, column: 23, scope: !2837)
!2872 = !DILocation(line: 247, column: 21, scope: !2837)
!2873 = !DILocation(line: 247, column: 17, scope: !2837)
!2874 = !DILocation(line: 247, column: 4, scope: !2837)
!2875 = !DILocation(line: 247, column: 11, scope: !2837)
!2876 = !DILocation(line: 247, column: 15, scope: !2837)
!2877 = distinct !{!2877, !2824, !2878}
!2878 = !DILocation(line: 248, column: 2, scope: !2801)
!2879 = !DILocation(line: 250, column: 10, scope: !2801)
!2880 = !DILocation(line: 250, column: 2, scope: !2801)
!2881 = !DILocation(line: 251, column: 1, scope: !2801)
!2882 = distinct !DISubprogram(name: "cgc_strlen", scope: !71, file: !71, line: 29, type: !2883, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !65, retainedNodes: !4)
!2883 = !DISubroutineType(types: !2884)
!2884 = !{!14, !273}
!2885 = !DILocalVariable(name: "str", arg: 1, scope: !2882, file: !71, line: 29, type: !273)
!2886 = !DILocation(line: 29, column: 36, scope: !2882)
!2887 = !DILocalVariable(name: "len", scope: !2882, file: !71, line: 31, type: !14)
!2888 = !DILocation(line: 31, column: 13, scope: !2882)
!2889 = !DILocation(line: 32, column: 2, scope: !2882)
!2890 = !DILocation(line: 32, column: 14, scope: !2882)
!2891 = !DILocation(line: 32, column: 10, scope: !2882)
!2892 = !DILocation(line: 32, column: 17, scope: !2882)
!2893 = !DILocation(line: 33, column: 6, scope: !2882)
!2894 = distinct !{!2894, !2889, !2893}
!2895 = !DILocation(line: 35, column: 9, scope: !2882)
!2896 = !DILocation(line: 35, column: 2, scope: !2882)
!2897 = distinct !DISubprogram(name: "cgc_free", scope: !9, file: !9, line: 112, type: !2898, scopeLine: 113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2898 = !DISubroutineType(types: !2899)
!2899 = !{null, !7}
!2900 = !DILocalVariable(name: "block", arg: 1, scope: !2897, file: !9, line: 112, type: !7)
!2901 = !DILocation(line: 112, column: 22, scope: !2897)
!2902 = !DILocalVariable(name: "nb", scope: !2897, file: !9, line: 114, type: !8)
!2903 = !DILocation(line: 114, column: 8, scope: !2897)
!2904 = !DILocation(line: 116, column: 7, scope: !2905)
!2905 = distinct !DILexicalBlock(scope: !2897, file: !9, line: 116, column: 7)
!2906 = !DILocation(line: 116, column: 7, scope: !2897)
!2907 = !DILocation(line: 117, column: 26, scope: !2908)
!2908 = distinct !DILexicalBlock(scope: !2905, file: !9, line: 116, column: 15)
!2909 = !DILocation(line: 117, column: 33, scope: !2908)
!2910 = !DILocation(line: 117, column: 8, scope: !2908)
!2911 = !DILocation(line: 117, column: 6, scope: !2908)
!2912 = !DILocation(line: 118, column: 12, scope: !2908)
!2913 = !DILocation(line: 118, column: 3, scope: !2908)
!2914 = !DILocation(line: 119, column: 2, scope: !2908)
!2915 = !DILocation(line: 121, column: 2, scope: !2897)
!2916 = distinct !DISubprogram(name: "cgc_init_freelist", scope: !9, file: !9, line: 124, type: !2917, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2917 = !DISubroutineType(types: !2918)
!2918 = !{null}
!2919 = !DILocalVariable(name: "zero_block", scope: !2916, file: !9, line: 126, type: !8)
!2920 = !DILocation(line: 126, column: 8, scope: !2916)
!2921 = !DILocalVariable(name: "base_block", scope: !2916, file: !9, line: 127, type: !8)
!2922 = !DILocation(line: 127, column: 8, scope: !2916)
!2923 = !DILocation(line: 129, column: 7, scope: !2924)
!2924 = distinct !DILexicalBlock(scope: !2916, file: !9, line: 129, column: 7)
!2925 = !DILocation(line: 129, column: 49, scope: !2924)
!2926 = !DILocation(line: 129, column: 7, scope: !2916)
!2927 = !DILocation(line: 130, column: 3, scope: !2928)
!2928 = distinct !DILexicalBlock(scope: !2924, file: !9, line: 129, column: 56)
!2929 = !DILocation(line: 131, column: 3, scope: !2928)
!2930 = !DILocation(line: 134, column: 13, scope: !2916)
!2931 = !DILocation(line: 134, column: 2, scope: !2916)
!2932 = !DILocation(line: 136, column: 15, scope: !2916)
!2933 = !DILocation(line: 136, column: 13, scope: !2916)
!2934 = !DILocation(line: 137, column: 15, scope: !2916)
!2935 = !DILocation(line: 137, column: 26, scope: !2916)
!2936 = !DILocation(line: 137, column: 13, scope: !2916)
!2937 = !DILocation(line: 141, column: 2, scope: !2916)
!2938 = !DILocation(line: 141, column: 14, scope: !2916)
!2939 = !DILocation(line: 141, column: 21, scope: !2916)
!2940 = !DILocation(line: 142, column: 21, scope: !2916)
!2941 = !DILocation(line: 142, column: 2, scope: !2916)
!2942 = !DILocation(line: 142, column: 14, scope: !2916)
!2943 = !DILocation(line: 142, column: 19, scope: !2916)
!2944 = !DILocation(line: 143, column: 2, scope: !2916)
!2945 = !DILocation(line: 143, column: 14, scope: !2916)
!2946 = !DILocation(line: 143, column: 19, scope: !2916)
!2947 = !DILocation(line: 145, column: 2, scope: !2916)
!2948 = !DILocation(line: 145, column: 14, scope: !2916)
!2949 = !DILocation(line: 145, column: 21, scope: !2916)
!2950 = !DILocation(line: 146, column: 21, scope: !2916)
!2951 = !DILocation(line: 146, column: 2, scope: !2916)
!2952 = !DILocation(line: 146, column: 14, scope: !2916)
!2953 = !DILocation(line: 146, column: 19, scope: !2916)
!2954 = !DILocation(line: 147, column: 2, scope: !2916)
!2955 = !DILocation(line: 147, column: 14, scope: !2916)
!2956 = !DILocation(line: 147, column: 19, scope: !2916)
!2957 = !DILocation(line: 151, column: 2, scope: !2916)
!2958 = distinct !DISubprogram(name: "cgc_unlink", scope: !9, file: !9, line: 154, type: !1207, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2959 = !DILocalVariable(name: "block", arg: 1, scope: !2958, file: !9, line: 154, type: !8)
!2960 = !DILocation(line: 154, column: 24, scope: !2958)
!2961 = !DILocation(line: 156, column: 7, scope: !2962)
!2962 = distinct !DILexicalBlock(scope: !2958, file: !9, line: 156, column: 7)
!2963 = !DILocation(line: 156, column: 13, scope: !2962)
!2964 = !DILocation(line: 156, column: 7, scope: !2958)
!2965 = !DILocation(line: 157, column: 3, scope: !2966)
!2966 = distinct !DILexicalBlock(scope: !2962, file: !9, line: 156, column: 23)
!2967 = !DILocation(line: 160, column: 7, scope: !2968)
!2968 = distinct !DILexicalBlock(scope: !2958, file: !9, line: 160, column: 7)
!2969 = !DILocation(line: 160, column: 14, scope: !2968)
!2970 = !DILocation(line: 160, column: 19, scope: !2968)
!2971 = !DILocation(line: 160, column: 7, scope: !2958)
!2972 = !DILocation(line: 161, column: 23, scope: !2973)
!2973 = distinct !DILexicalBlock(scope: !2968, file: !9, line: 160, column: 29)
!2974 = !DILocation(line: 161, column: 30, scope: !2973)
!2975 = !DILocation(line: 161, column: 3, scope: !2973)
!2976 = !DILocation(line: 161, column: 10, scope: !2973)
!2977 = !DILocation(line: 161, column: 16, scope: !2973)
!2978 = !DILocation(line: 161, column: 21, scope: !2973)
!2979 = !DILocation(line: 162, column: 2, scope: !2973)
!2980 = !DILocation(line: 164, column: 7, scope: !2981)
!2981 = distinct !DILexicalBlock(scope: !2958, file: !9, line: 164, column: 7)
!2982 = !DILocation(line: 164, column: 14, scope: !2981)
!2983 = !DILocation(line: 164, column: 19, scope: !2981)
!2984 = !DILocation(line: 164, column: 7, scope: !2958)
!2985 = !DILocation(line: 165, column: 23, scope: !2986)
!2986 = distinct !DILexicalBlock(scope: !2981, file: !9, line: 164, column: 29)
!2987 = !DILocation(line: 165, column: 30, scope: !2986)
!2988 = !DILocation(line: 165, column: 3, scope: !2986)
!2989 = !DILocation(line: 165, column: 10, scope: !2986)
!2990 = !DILocation(line: 165, column: 16, scope: !2986)
!2991 = !DILocation(line: 165, column: 21, scope: !2986)
!2992 = !DILocation(line: 166, column: 2, scope: !2986)
!2993 = !DILocation(line: 168, column: 2, scope: !2958)
!2994 = !DILocation(line: 169, column: 1, scope: !2958)
!2995 = distinct !DISubprogram(name: "cgc_freelist_alloc", scope: !9, file: !9, line: 171, type: !2996, scopeLine: 172, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2996 = !DISubroutineType(types: !2997)
!2997 = !{!7, !14}
!2998 = !DILocalVariable(name: "length", arg: 1, scope: !2995, file: !9, line: 171, type: !14)
!2999 = !DILocation(line: 171, column: 38, scope: !2995)
!3000 = !DILocalVariable(name: "walker", scope: !2995, file: !9, line: 173, type: !8)
!3001 = !DILocation(line: 173, column: 8, scope: !2995)
!3002 = !DILocalVariable(name: "newone", scope: !2995, file: !9, line: 174, type: !8)
!3003 = !DILocation(line: 174, column: 8, scope: !2995)
!3004 = !DILocation(line: 178, column: 7, scope: !3005)
!3005 = distinct !DILexicalBlock(scope: !2995, file: !9, line: 178, column: 7)
!3006 = !DILocation(line: 178, column: 20, scope: !3005)
!3007 = !DILocation(line: 178, column: 7, scope: !2995)
!3008 = !DILocation(line: 179, column: 3, scope: !3009)
!3009 = distinct !DILexicalBlock(scope: !3005, file: !9, line: 178, column: 30)
!3010 = !DILocation(line: 180, column: 2, scope: !3009)
!3011 = !DILocation(line: 182, column: 18, scope: !2995)
!3012 = !DILocation(line: 182, column: 9, scope: !2995)
!3013 = !DILocation(line: 185, column: 2, scope: !2995)
!3014 = !DILocation(line: 185, column: 10, scope: !2995)
!3015 = !DILocation(line: 186, column: 8, scope: !3016)
!3016 = distinct !DILexicalBlock(scope: !3017, file: !9, line: 186, column: 8)
!3017 = distinct !DILexicalBlock(scope: !2995, file: !9, line: 185, column: 19)
!3018 = !DILocation(line: 186, column: 16, scope: !3016)
!3019 = !DILocation(line: 186, column: 25, scope: !3016)
!3020 = !DILocation(line: 186, column: 23, scope: !3016)
!3021 = !DILocation(line: 186, column: 8, scope: !3017)
!3022 = !DILocation(line: 187, column: 13, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !3016, file: !9, line: 186, column: 34)
!3024 = !DILocation(line: 187, column: 21, scope: !3023)
!3025 = !DILocation(line: 187, column: 11, scope: !3023)
!3026 = !DILocation(line: 188, column: 3, scope: !3023)
!3027 = !DILocation(line: 189, column: 4, scope: !3028)
!3028 = distinct !DILexicalBlock(scope: !3016, file: !9, line: 188, column: 10)
!3029 = distinct !{!3029, !3013, !3030}
!3030 = !DILocation(line: 191, column: 2, scope: !2995)
!3031 = !DILocation(line: 193, column: 7, scope: !3032)
!3032 = distinct !DILexicalBlock(scope: !2995, file: !9, line: 193, column: 7)
!3033 = !DILocation(line: 193, column: 14, scope: !3032)
!3034 = !DILocation(line: 193, column: 7, scope: !2995)
!3035 = !DILocation(line: 195, column: 27, scope: !3036)
!3036 = distinct !DILexicalBlock(scope: !3032, file: !9, line: 193, column: 24)
!3037 = !DILocation(line: 195, column: 3, scope: !3036)
!3038 = !DILocation(line: 196, column: 29, scope: !3036)
!3039 = !DILocation(line: 196, column: 10, scope: !3036)
!3040 = !DILocation(line: 196, column: 3, scope: !3036)
!3041 = !DILocation(line: 200, column: 14, scope: !3042)
!3042 = distinct !DILexicalBlock(scope: !3032, file: !9, line: 197, column: 9)
!3043 = !DILocation(line: 200, column: 3, scope: !3042)
!3044 = !DILocation(line: 206, column: 8, scope: !3045)
!3045 = distinct !DILexicalBlock(scope: !3042, file: !9, line: 206, column: 8)
!3046 = !DILocation(line: 206, column: 16, scope: !3045)
!3047 = !DILocation(line: 206, column: 25, scope: !3045)
!3048 = !DILocation(line: 206, column: 23, scope: !3045)
!3049 = !DILocation(line: 206, column: 32, scope: !3045)
!3050 = !DILocation(line: 206, column: 8, scope: !3042)
!3051 = !DILocation(line: 208, column: 19, scope: !3052)
!3052 = distinct !DILexicalBlock(scope: !3045, file: !9, line: 206, column: 49)
!3053 = !DILocation(line: 208, column: 12, scope: !3052)
!3054 = !DILocation(line: 208, column: 27, scope: !3052)
!3055 = !DILocation(line: 208, column: 4, scope: !3052)
!3056 = !DILocation(line: 212, column: 30, scope: !3042)
!3057 = !DILocation(line: 212, column: 23, scope: !3042)
!3058 = !DILocation(line: 212, column: 38, scope: !3042)
!3059 = !DILocation(line: 212, column: 44, scope: !3042)
!3060 = !DILocation(line: 212, column: 42, scope: !3042)
!3061 = !DILocation(line: 212, column: 12, scope: !3042)
!3062 = !DILocation(line: 212, column: 10, scope: !3042)
!3063 = !DILocation(line: 213, column: 20, scope: !3042)
!3064 = !DILocation(line: 213, column: 28, scope: !3042)
!3065 = !DILocation(line: 213, column: 38, scope: !3042)
!3066 = !DILocation(line: 213, column: 44, scope: !3042)
!3067 = !DILocation(line: 213, column: 35, scope: !3042)
!3068 = !DILocation(line: 213, column: 3, scope: !3042)
!3069 = !DILocation(line: 213, column: 11, scope: !3042)
!3070 = !DILocation(line: 213, column: 18, scope: !3042)
!3071 = !DILocation(line: 216, column: 20, scope: !3042)
!3072 = !DILocation(line: 216, column: 3, scope: !3042)
!3073 = !DILocation(line: 216, column: 11, scope: !3042)
!3074 = !DILocation(line: 216, column: 18, scope: !3042)
!3075 = !DILocation(line: 218, column: 12, scope: !3042)
!3076 = !DILocation(line: 218, column: 3, scope: !3042)
!3077 = !DILocation(line: 221, column: 18, scope: !3042)
!3078 = !DILocation(line: 221, column: 11, scope: !3042)
!3079 = !DILocation(line: 221, column: 26, scope: !3042)
!3080 = !DILocation(line: 221, column: 3, scope: !3042)
!3081 = !DILocation(line: 225, column: 1, scope: !2995)
!3082 = distinct !DISubprogram(name: "cgc_calloc", scope: !9, file: !9, line: 228, type: !2996, scopeLine: 229, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!3083 = !DILocalVariable(name: "length", arg: 1, scope: !3082, file: !9, line: 228, type: !14)
!3084 = !DILocation(line: 228, column: 30, scope: !3082)
!3085 = !DILocalVariable(name: "out", scope: !3082, file: !9, line: 230, type: !7)
!3086 = !DILocation(line: 230, column: 8, scope: !3082)
!3087 = !DILocation(line: 230, column: 26, scope: !3082)
!3088 = !DILocation(line: 230, column: 14, scope: !3082)
!3089 = !DILocation(line: 232, column: 8, scope: !3090)
!3090 = distinct !DILexicalBlock(scope: !3082, file: !9, line: 232, column: 7)
!3091 = !DILocation(line: 232, column: 7, scope: !3082)
!3092 = !DILocation(line: 233, column: 10, scope: !3093)
!3093 = distinct !DILexicalBlock(scope: !3090, file: !9, line: 232, column: 14)
!3094 = !DILocation(line: 233, column: 3, scope: !3093)
!3095 = !DILocation(line: 236, column: 12, scope: !3082)
!3096 = !DILocation(line: 236, column: 18, scope: !3082)
!3097 = !DILocation(line: 236, column: 22, scope: !3082)
!3098 = !DILocation(line: 236, column: 9, scope: !3082)
!3099 = !DILocation(line: 238, column: 13, scope: !3082)
!3100 = !DILocation(line: 238, column: 18, scope: !3082)
!3101 = !DILocation(line: 238, column: 2, scope: !3082)
!3102 = !DILocation(line: 240, column: 9, scope: !3082)
!3103 = !DILocation(line: 240, column: 2, scope: !3082)
!3104 = !DILocation(line: 241, column: 1, scope: !3082)
!3105 = distinct !DISubprogram(name: "cgc_malloc", scope: !9, file: !9, line: 243, type: !2996, scopeLine: 244, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!3106 = !DILocalVariable(name: "length", arg: 1, scope: !3105, file: !9, line: 243, type: !14)
!3107 = !DILocation(line: 243, column: 30, scope: !3105)
!3108 = !DILocalVariable(name: "bucket", scope: !3105, file: !9, line: 245, type: !77)
!3109 = !DILocation(line: 245, column: 6, scope: !3105)
!3110 = !DILocalVariable(name: "outb", scope: !3105, file: !9, line: 246, type: !8)
!3111 = !DILocation(line: 246, column: 8, scope: !3105)
!3112 = !DILocation(line: 249, column: 7, scope: !3113)
!3113 = distinct !DILexicalBlock(scope: !3105, file: !9, line: 249, column: 7)
!3114 = !DILocation(line: 249, column: 14, scope: !3113)
!3115 = !DILocation(line: 249, column: 7, scope: !3105)
!3116 = !DILocation(line: 250, column: 10, scope: !3117)
!3117 = distinct !DILexicalBlock(scope: !3113, file: !9, line: 249, column: 20)
!3118 = !DILocation(line: 251, column: 2, scope: !3117)
!3119 = !DILocation(line: 254, column: 12, scope: !3105)
!3120 = !DILocation(line: 254, column: 18, scope: !3105)
!3121 = !DILocation(line: 254, column: 22, scope: !3105)
!3122 = !DILocation(line: 254, column: 9, scope: !3105)
!3123 = !DILocation(line: 256, column: 11, scope: !3105)
!3124 = !DILocation(line: 256, column: 9, scope: !3105)
!3125 = !DILocation(line: 258, column: 7, scope: !3126)
!3126 = distinct !DILexicalBlock(scope: !3105, file: !9, line: 258, column: 7)
!3127 = !DILocation(line: 258, column: 14, scope: !3126)
!3128 = !DILocation(line: 258, column: 7, scope: !3105)
!3129 = !DILocation(line: 259, column: 30, scope: !3130)
!3130 = distinct !DILexicalBlock(scope: !3126, file: !9, line: 258, column: 21)
!3131 = !DILocation(line: 259, column: 10, scope: !3130)
!3132 = !DILocation(line: 259, column: 3, scope: !3130)
!3133 = !DILocation(line: 261, column: 3, scope: !3134)
!3134 = distinct !DILexicalBlock(scope: !3126, file: !9, line: 260, column: 9)
!3135 = !DILocation(line: 261, column: 11, scope: !3134)
!3136 = !DILocation(line: 261, column: 18, scope: !3134)
!3137 = !DILocation(line: 262, column: 20, scope: !3138)
!3138 = distinct !DILexicalBlock(scope: !3139, file: !9, line: 262, column: 9)
!3139 = distinct !DILexicalBlock(scope: !3134, file: !9, line: 261, column: 26)
!3140 = !DILocation(line: 262, column: 9, scope: !3138)
!3141 = !DILocation(line: 262, column: 28, scope: !3138)
!3142 = !DILocation(line: 262, column: 9, scope: !3139)
!3143 = !DILocation(line: 263, column: 5, scope: !3144)
!3144 = distinct !DILexicalBlock(scope: !3138, file: !9, line: 262, column: 38)
!3145 = !DILocation(line: 266, column: 10, scope: !3139)
!3146 = distinct !{!3146, !3133, !3147}
!3147 = !DILocation(line: 267, column: 3, scope: !3134)
!3148 = !DILocation(line: 270, column: 7, scope: !3149)
!3149 = distinct !DILexicalBlock(scope: !3105, file: !9, line: 270, column: 7)
!3150 = !DILocation(line: 270, column: 14, scope: !3149)
!3151 = !DILocation(line: 270, column: 7, scope: !3105)
!3152 = !DILocation(line: 272, column: 30, scope: !3153)
!3153 = distinct !DILexicalBlock(scope: !3149, file: !9, line: 270, column: 23)
!3154 = !DILocation(line: 272, column: 10, scope: !3153)
!3155 = !DILocation(line: 272, column: 3, scope: !3153)
!3156 = !DILocation(line: 275, column: 21, scope: !3157)
!3157 = distinct !DILexicalBlock(scope: !3149, file: !9, line: 273, column: 9)
!3158 = !DILocation(line: 275, column: 10, scope: !3157)
!3159 = !DILocation(line: 275, column: 8, scope: !3157)
!3160 = !DILocation(line: 276, column: 23, scope: !3157)
!3161 = !DILocation(line: 276, column: 29, scope: !3157)
!3162 = !DILocation(line: 276, column: 13, scope: !3157)
!3163 = !DILocation(line: 276, column: 3, scope: !3157)
!3164 = !DILocation(line: 276, column: 21, scope: !3157)
!3165 = !DILocation(line: 278, column: 19, scope: !3157)
!3166 = !DILocation(line: 278, column: 12, scope: !3157)
!3167 = !DILocation(line: 278, column: 26, scope: !3157)
!3168 = !DILocation(line: 278, column: 3, scope: !3157)
!3169 = !DILocation(line: 282, column: 1, scope: !3105)
!3170 = distinct !DISubprogram(name: "cgc_round", scope: !2775, file: !2775, line: 29, type: !2776, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !298, retainedNodes: !4)
!3171 = !DILocalVariable(name: "val", arg: 1, scope: !3170, file: !2775, line: 29, type: !61)
!3172 = !DILocation(line: 29, column: 26, scope: !3170)
!3173 = !DILocation(line: 32, column: 7, scope: !3174)
!3174 = distinct !DILexicalBlock(scope: !3170, file: !2775, line: 32, column: 7)
!3175 = !DILocation(line: 32, column: 11, scope: !3174)
!3176 = !DILocation(line: 32, column: 7, scope: !3170)
!3177 = !DILocation(line: 33, column: 29, scope: !3174)
!3178 = !DILocation(line: 33, column: 33, scope: !3174)
!3179 = !DILocation(line: 33, column: 18, scope: !3174)
!3180 = !DILocation(line: 33, column: 3, scope: !3174)
!3181 = !DILocation(line: 34, column: 12, scope: !3182)
!3182 = distinct !DILexicalBlock(scope: !3174, file: !2775, line: 34, column: 12)
!3183 = !DILocation(line: 34, column: 16, scope: !3182)
!3184 = !DILocation(line: 34, column: 12, scope: !3174)
!3185 = !DILocation(line: 35, column: 29, scope: !3182)
!3186 = !DILocation(line: 35, column: 33, scope: !3182)
!3187 = !DILocation(line: 35, column: 18, scope: !3182)
!3188 = !DILocation(line: 35, column: 3, scope: !3182)
!3189 = !DILocation(line: 37, column: 10, scope: !3182)
!3190 = !DILocation(line: 37, column: 3, scope: !3182)
!3191 = !DILocation(line: 38, column: 1, scope: !3170)
!3192 = distinct !DISubprogram(name: "cgc_seed_prng_array", scope: !36, file: !36, line: 39, type: !3193, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !27, retainedNodes: !4)
!3193 = !DISubroutineType(types: !3194)
!3194 = !{null, !68, !30}
!3195 = !DILocalVariable(name: "pSeedArray", arg: 1, scope: !3192, file: !36, line: 39, type: !68)
!3196 = !DILocation(line: 39, column: 37, scope: !3192)
!3197 = !DILocalVariable(name: "arrayLen", arg: 2, scope: !3192, file: !36, line: 39, type: !30)
!3198 = !DILocation(line: 39, column: 58, scope: !3192)
!3199 = !DILocalVariable(name: "i", scope: !3192, file: !36, line: 41, type: !30)
!3200 = !DILocation(line: 41, column: 11, scope: !3192)
!3201 = !DILocation(line: 44, column: 2, scope: !3192)
!3202 = !DILocation(line: 46, column: 10, scope: !3192)
!3203 = !DILocation(line: 49, column: 7, scope: !3204)
!3204 = distinct !DILexicalBlock(scope: !3192, file: !36, line: 49, column: 7)
!3205 = !DILocation(line: 49, column: 16, scope: !3204)
!3206 = !DILocation(line: 49, column: 7, scope: !3192)
!3207 = !DILocation(line: 50, column: 12, scope: !3204)
!3208 = !DILocation(line: 50, column: 3, scope: !3204)
!3209 = !DILocation(line: 52, column: 10, scope: !3210)
!3210 = distinct !DILexicalBlock(scope: !3192, file: !36, line: 52, column: 2)
!3211 = !DILocation(line: 52, column: 8, scope: !3210)
!3212 = !DILocation(line: 52, column: 15, scope: !3213)
!3213 = distinct !DILexicalBlock(scope: !3210, file: !36, line: 52, column: 2)
!3214 = !DILocation(line: 52, column: 19, scope: !3213)
!3215 = !DILocation(line: 52, column: 17, scope: !3213)
!3216 = !DILocation(line: 52, column: 2, scope: !3210)
!3217 = !DILocation(line: 53, column: 14, scope: !3213)
!3218 = !DILocation(line: 53, column: 25, scope: !3213)
!3219 = !DILocation(line: 53, column: 9, scope: !3213)
!3220 = !DILocation(line: 53, column: 3, scope: !3213)
!3221 = !DILocation(line: 53, column: 12, scope: !3213)
!3222 = !DILocation(line: 52, column: 30, scope: !3213)
!3223 = !DILocation(line: 52, column: 2, scope: !3213)
!3224 = distinct !{!3224, !3216, !3225}
!3225 = !DILocation(line: 53, column: 26, scope: !3210)
!3226 = !DILocation(line: 55, column: 12, scope: !3227)
!3227 = distinct !DILexicalBlock(scope: !3192, file: !36, line: 55, column: 2)
!3228 = !DILocation(line: 55, column: 10, scope: !3227)
!3229 = !DILocation(line: 55, column: 8, scope: !3227)
!3230 = !DILocation(line: 55, column: 22, scope: !3231)
!3231 = distinct !DILexicalBlock(scope: !3227, file: !36, line: 55, column: 2)
!3232 = !DILocation(line: 55, column: 24, scope: !3231)
!3233 = !DILocation(line: 55, column: 2, scope: !3227)
!3234 = !DILocalVariable(name: "state_value", scope: !3235, file: !36, line: 57, type: !30)
!3235 = distinct !DILexicalBlock(scope: !3231, file: !36, line: 56, column: 2)
!3236 = !DILocation(line: 57, column: 12, scope: !3235)
!3237 = !DILocation(line: 57, column: 33, scope: !3235)
!3238 = !DILocation(line: 57, column: 34, scope: !3235)
!3239 = !DILocation(line: 57, column: 37, scope: !3235)
!3240 = !DILocation(line: 57, column: 26, scope: !3235)
!3241 = !DILocation(line: 60, column: 26, scope: !3235)
!3242 = !DILocation(line: 60, column: 41, scope: !3235)
!3243 = !DILocation(line: 60, column: 53, scope: !3235)
!3244 = !DILocation(line: 60, column: 62, scope: !3235)
!3245 = !DILocation(line: 60, column: 60, scope: !3235)
!3246 = !DILocation(line: 60, column: 38, scope: !3235)
!3247 = !DILocation(line: 60, column: 65, scope: !3235)
!3248 = !DILocation(line: 60, column: 9, scope: !3235)
!3249 = !DILocation(line: 60, column: 3, scope: !3235)
!3250 = !DILocation(line: 60, column: 12, scope: !3235)
!3251 = !DILocation(line: 61, column: 2, scope: !3235)
!3252 = !DILocation(line: 55, column: 30, scope: !3231)
!3253 = !DILocation(line: 55, column: 2, scope: !3231)
!3254 = distinct !{!3254, !3233, !3255}
!3255 = !DILocation(line: 61, column: 2, scope: !3227)
!3256 = !DILocation(line: 62, column: 1, scope: !3192)
!3257 = distinct !DISubprogram(name: "cgc_seed_prng", scope: !36, file: !36, line: 64, type: !3258, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !27, retainedNodes: !4)
!3258 = !DISubroutineType(types: !3259)
!3259 = !{null, !30}
!3260 = !DILocalVariable(name: "seedValue", arg: 1, scope: !3257, file: !36, line: 64, type: !30)
!3261 = !DILocation(line: 64, column: 30, scope: !3257)
!3262 = !DILocation(line: 66, column: 2, scope: !3257)
!3263 = !DILocation(line: 67, column: 1, scope: !3257)
!3264 = distinct !DISubprogram(name: "cgc_prng", scope: !36, file: !36, line: 69, type: !3265, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !27, retainedNodes: !4)
!3265 = !DISubroutineType(types: !3266)
!3266 = !{!30}
!3267 = !DILocalVariable(name: "v0", scope: !3264, file: !36, line: 72, type: !30)
!3268 = !DILocation(line: 72, column: 11, scope: !3264)
!3269 = !DILocation(line: 72, column: 23, scope: !3264)
!3270 = !DILocation(line: 72, column: 16, scope: !3264)
!3271 = !DILocalVariable(name: "vM1", scope: !3264, file: !36, line: 73, type: !30)
!3272 = !DILocation(line: 73, column: 11, scope: !3264)
!3273 = !DILocation(line: 73, column: 25, scope: !3264)
!3274 = !DILocation(line: 73, column: 33, scope: !3264)
!3275 = !DILocation(line: 73, column: 39, scope: !3264)
!3276 = !DILocation(line: 73, column: 17, scope: !3264)
!3277 = !DILocalVariable(name: "vM2", scope: !3264, file: !36, line: 74, type: !30)
!3278 = !DILocation(line: 74, column: 11, scope: !3264)
!3279 = !DILocation(line: 74, column: 25, scope: !3264)
!3280 = !DILocation(line: 74, column: 33, scope: !3264)
!3281 = !DILocation(line: 74, column: 39, scope: !3264)
!3282 = !DILocation(line: 74, column: 17, scope: !3264)
!3283 = !DILocalVariable(name: "vM3", scope: !3264, file: !36, line: 75, type: !30)
!3284 = !DILocation(line: 75, column: 11, scope: !3264)
!3285 = !DILocation(line: 75, column: 25, scope: !3264)
!3286 = !DILocation(line: 75, column: 33, scope: !3264)
!3287 = !DILocation(line: 75, column: 39, scope: !3264)
!3288 = !DILocation(line: 75, column: 17, scope: !3264)
!3289 = !DILocalVariable(name: "z0", scope: !3264, file: !36, line: 77, type: !30)
!3290 = !DILocation(line: 77, column: 11, scope: !3264)
!3291 = !DILocation(line: 77, column: 24, scope: !3264)
!3292 = !DILocation(line: 77, column: 31, scope: !3264)
!3293 = !DILocation(line: 77, column: 36, scope: !3264)
!3294 = !DILocation(line: 77, column: 16, scope: !3264)
!3295 = !DILocalVariable(name: "z1", scope: !3264, file: !36, line: 78, type: !30)
!3296 = !DILocation(line: 78, column: 11, scope: !3264)
!3297 = !DILocation(line: 78, column: 16, scope: !3264)
!3298 = !DILocation(line: 78, column: 22, scope: !3264)
!3299 = !DILocation(line: 78, column: 29, scope: !3264)
!3300 = !DILocation(line: 78, column: 33, scope: !3264)
!3301 = !DILocation(line: 78, column: 26, scope: !3264)
!3302 = !DILocation(line: 78, column: 19, scope: !3264)
!3303 = !DILocalVariable(name: "z2", scope: !3264, file: !36, line: 79, type: !30)
!3304 = !DILocation(line: 79, column: 11, scope: !3264)
!3305 = !DILocation(line: 79, column: 17, scope: !3264)
!3306 = !DILocation(line: 79, column: 24, scope: !3264)
!3307 = !DILocation(line: 79, column: 28, scope: !3264)
!3308 = !DILocation(line: 79, column: 21, scope: !3264)
!3309 = !DILocation(line: 79, column: 39, scope: !3264)
!3310 = !DILocation(line: 79, column: 46, scope: !3264)
!3311 = !DILocation(line: 79, column: 50, scope: !3264)
!3312 = !DILocation(line: 79, column: 43, scope: !3264)
!3313 = !DILocation(line: 79, column: 36, scope: !3264)
!3314 = !DILocalVariable(name: "newV1", scope: !3264, file: !36, line: 81, type: !30)
!3315 = !DILocation(line: 81, column: 11, scope: !3264)
!3316 = !DILocation(line: 81, column: 19, scope: !3264)
!3317 = !DILocation(line: 81, column: 24, scope: !3264)
!3318 = !DILocation(line: 81, column: 22, scope: !3264)
!3319 = !DILocalVariable(name: "newV0", scope: !3264, file: !36, line: 82, type: !30)
!3320 = !DILocation(line: 82, column: 11, scope: !3264)
!3321 = !DILocation(line: 82, column: 20, scope: !3264)
!3322 = !DILocation(line: 82, column: 26, scope: !3264)
!3323 = !DILocation(line: 82, column: 29, scope: !3264)
!3324 = !DILocation(line: 82, column: 23, scope: !3264)
!3325 = !DILocation(line: 82, column: 40, scope: !3264)
!3326 = !DILocation(line: 82, column: 46, scope: !3264)
!3327 = !DILocation(line: 82, column: 49, scope: !3264)
!3328 = !DILocation(line: 82, column: 43, scope: !3264)
!3329 = !DILocation(line: 82, column: 37, scope: !3264)
!3330 = !DILocation(line: 82, column: 59, scope: !3264)
!3331 = !DILocation(line: 82, column: 65, scope: !3264)
!3332 = !DILocation(line: 82, column: 68, scope: !3264)
!3333 = !DILocation(line: 82, column: 62, scope: !3264)
!3334 = !DILocation(line: 82, column: 56, scope: !3264)
!3335 = !DILocation(line: 84, column: 21, scope: !3264)
!3336 = !DILocation(line: 84, column: 9, scope: !3264)
!3337 = !DILocation(line: 84, column: 2, scope: !3264)
!3338 = !DILocation(line: 84, column: 19, scope: !3264)
!3339 = !DILocation(line: 85, column: 33, scope: !3264)
!3340 = !DILocation(line: 85, column: 10, scope: !3264)
!3341 = !DILocation(line: 85, column: 17, scope: !3264)
!3342 = !DILocation(line: 85, column: 22, scope: !3264)
!3343 = !DILocation(line: 85, column: 2, scope: !3264)
!3344 = !DILocation(line: 85, column: 31, scope: !3264)
!3345 = !DILocation(line: 87, column: 13, scope: !3264)
!3346 = !DILocation(line: 87, column: 21, scope: !3264)
!3347 = !DILocation(line: 87, column: 27, scope: !3264)
!3348 = !DILocation(line: 87, column: 10, scope: !3264)
!3349 = !DILocation(line: 89, column: 9, scope: !3264)
!3350 = !DILocation(line: 89, column: 2, scope: !3264)
!3351 = distinct !DISubprogram(name: "cgc_random_in_range", scope: !36, file: !36, line: 93, type: !3352, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !27, retainedNodes: !4)
!3352 = !DISubroutineType(types: !3353)
!3353 = !{!30, !30, !30}
!3354 = !DILocalVariable(name: "min", arg: 1, scope: !3351, file: !36, line: 93, type: !30)
!3355 = !DILocation(line: 93, column: 40, scope: !3351)
!3356 = !DILocalVariable(name: "max", arg: 2, scope: !3351, file: !36, line: 93, type: !30)
!3357 = !DILocation(line: 93, column: 54, scope: !3351)
!3358 = !DILocation(line: 95, column: 7, scope: !3359)
!3359 = distinct !DILexicalBlock(scope: !3351, file: !36, line: 95, column: 7)
!3360 = !DILocation(line: 95, column: 13, scope: !3359)
!3361 = !DILocation(line: 95, column: 11, scope: !3359)
!3362 = !DILocation(line: 95, column: 7, scope: !3351)
!3363 = !DILocation(line: 96, column: 3, scope: !3359)
!3364 = !DILocation(line: 98, column: 7, scope: !3365)
!3365 = distinct !DILexicalBlock(scope: !3351, file: !36, line: 98, column: 7)
!3366 = !DILocation(line: 98, column: 14, scope: !3365)
!3367 = !DILocation(line: 98, column: 11, scope: !3365)
!3368 = !DILocation(line: 98, column: 7, scope: !3351)
!3369 = !DILocation(line: 99, column: 10, scope: !3365)
!3370 = !DILocation(line: 99, column: 3, scope: !3365)
!3371 = !DILocalVariable(name: "random_value", scope: !3351, file: !36, line: 101, type: !30)
!3372 = !DILocation(line: 101, column: 11, scope: !3351)
!3373 = !DILocalVariable(name: "delta", scope: !3351, file: !36, line: 102, type: !30)
!3374 = !DILocation(line: 102, column: 11, scope: !3351)
!3375 = !DILocation(line: 102, column: 19, scope: !3351)
!3376 = !DILocation(line: 102, column: 25, scope: !3351)
!3377 = !DILocation(line: 102, column: 23, scope: !3351)
!3378 = !DILocation(line: 102, column: 29, scope: !3351)
!3379 = !DILocation(line: 105, column: 7, scope: !3380)
!3380 = distinct !DILexicalBlock(scope: !3351, file: !36, line: 105, column: 7)
!3381 = !DILocation(line: 105, column: 13, scope: !3380)
!3382 = !DILocation(line: 105, column: 7, scope: !3351)
!3383 = !DILocation(line: 106, column: 10, scope: !3380)
!3384 = !DILocation(line: 106, column: 3, scope: !3380)
!3385 = !DILocalVariable(name: "scale_divider", scope: !3351, file: !36, line: 108, type: !30)
!3386 = !DILocation(line: 108, column: 11, scope: !3351)
!3387 = !DILocation(line: 108, column: 42, scope: !3351)
!3388 = !DILocation(line: 108, column: 40, scope: !3351)
!3389 = !DILocation(line: 110, column: 2, scope: !3351)
!3390 = !DILocation(line: 112, column: 18, scope: !3391)
!3391 = distinct !DILexicalBlock(scope: !3351, file: !36, line: 111, column: 2)
!3392 = !DILocation(line: 112, column: 16, scope: !3391)
!3393 = !DILocation(line: 115, column: 2, scope: !3391)
!3394 = !DILocation(line: 115, column: 12, scope: !3351)
!3395 = !DILocation(line: 115, column: 28, scope: !3351)
!3396 = !DILocation(line: 115, column: 44, scope: !3351)
!3397 = !DILocation(line: 115, column: 42, scope: !3351)
!3398 = !DILocation(line: 115, column: 25, scope: !3351)
!3399 = distinct !{!3399, !3389, !3400}
!3400 = !DILocation(line: 115, column: 49, scope: !3351)
!3401 = !DILocation(line: 118, column: 9, scope: !3351)
!3402 = !DILocation(line: 118, column: 16, scope: !3351)
!3403 = !DILocation(line: 118, column: 31, scope: !3351)
!3404 = !DILocation(line: 118, column: 29, scope: !3351)
!3405 = !DILocation(line: 118, column: 13, scope: !3351)
!3406 = !DILocation(line: 118, column: 2, scope: !3351)
!3407 = !DILocation(line: 119, column: 1, scope: !3351)
!3408 = distinct !DISubprogram(name: "cgc_WRAPPER_PUTC", scope: !49, file: !49, line: 49, type: !1397, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!3409 = !DILocalVariable(name: "ctx", arg: 1, scope: !3408, file: !49, line: 49, type: !7)
!3410 = !DILocation(line: 49, column: 29, scope: !3408)
!3411 = !DILocalVariable(name: "c", arg: 2, scope: !3408, file: !49, line: 49, type: !77)
!3412 = !DILocation(line: 49, column: 38, scope: !3408)
!3413 = !DILocalVariable(name: "pos", arg: 3, scope: !3408, file: !49, line: 49, type: !14)
!3414 = !DILocation(line: 49, column: 52, scope: !3408)
!3415 = !DILocalVariable(name: "tx_bytes", scope: !3408, file: !49, line: 51, type: !14)
!3416 = !DILocation(line: 51, column: 20, scope: !3408)
!3417 = !DILocation(line: 53, column: 36, scope: !3418)
!3418 = distinct !DILexicalBlock(scope: !3408, file: !49, line: 53, column: 14)
!3419 = !DILocation(line: 53, column: 14, scope: !3418)
!3420 = !DILocation(line: 53, column: 69, scope: !3418)
!3421 = !DILocation(line: 53, column: 14, scope: !3408)
!3422 = !DILocation(line: 54, column: 17, scope: !3418)
!3423 = !DILocation(line: 56, column: 17, scope: !3408)
!3424 = !DILocation(line: 56, column: 20, scope: !3408)
!3425 = !DILocation(line: 56, column: 16, scope: !3408)
!3426 = !DILocation(line: 56, column: 9, scope: !3408)
!3427 = !DILocation(line: 57, column: 1, scope: !3408)
!3428 = distinct !DISubprogram(name: "cgc_WRAPPER_OUTC", scope: !49, file: !49, line: 59, type: !1397, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!3429 = !DILocalVariable(name: "ctx", arg: 1, scope: !3428, file: !49, line: 59, type: !7)
!3430 = !DILocation(line: 59, column: 29, scope: !3428)
!3431 = !DILocalVariable(name: "c", arg: 2, scope: !3428, file: !49, line: 59, type: !77)
!3432 = !DILocation(line: 59, column: 38, scope: !3428)
!3433 = !DILocalVariable(name: "pos", arg: 3, scope: !3428, file: !49, line: 59, type: !14)
!3434 = !DILocation(line: 59, column: 52, scope: !3428)
!3435 = !DILocation(line: 61, column: 31, scope: !3428)
!3436 = !DILocation(line: 61, column: 25, scope: !3428)
!3437 = !DILocation(line: 61, column: 13, scope: !3428)
!3438 = !DILocation(line: 61, column: 18, scope: !3428)
!3439 = !DILocation(line: 61, column: 17, scope: !3428)
!3440 = !DILocation(line: 61, column: 23, scope: !3428)
!3441 = !DILocation(line: 63, column: 10, scope: !3428)
!3442 = !DILocation(line: 63, column: 13, scope: !3428)
!3443 = !DILocation(line: 63, column: 9, scope: !3428)
!3444 = !DILocation(line: 63, column: 2, scope: !3428)
!3445 = distinct !DISubprogram(name: "cgc_putchar", scope: !49, file: !49, line: 105, type: !215, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!3446 = !DILocalVariable(name: "c", arg: 1, scope: !3445, file: !49, line: 105, type: !77)
!3447 = !DILocation(line: 105, column: 22, scope: !3445)
!3448 = !DILocalVariable(name: "tx_bytes", scope: !3445, file: !49, line: 107, type: !14)
!3449 = !DILocation(line: 107, column: 20, scope: !3445)
!3450 = !DILocation(line: 109, column: 36, scope: !3451)
!3451 = distinct !DILexicalBlock(scope: !3445, file: !49, line: 109, column: 14)
!3452 = !DILocation(line: 109, column: 14, scope: !3451)
!3453 = !DILocation(line: 109, column: 69, scope: !3451)
!3454 = !DILocation(line: 109, column: 14, scope: !3445)
!3455 = !DILocation(line: 110, column: 17, scope: !3451)
!3456 = !DILocation(line: 112, column: 17, scope: !3445)
!3457 = !DILocation(line: 112, column: 9, scope: !3445)
!3458 = !DILocation(line: 113, column: 1, scope: !3445)
!3459 = distinct !DISubprogram(name: "cgc_puts", scope: !49, file: !49, line: 115, type: !1790, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!3460 = !DILocalVariable(name: "s", arg: 1, scope: !3459, file: !49, line: 115, type: !273)
!3461 = !DILocation(line: 115, column: 27, scope: !3459)
!3462 = !DILocalVariable(name: "tx_bytes", scope: !3459, file: !49, line: 117, type: !14)
!3463 = !DILocation(line: 117, column: 13, scope: !3459)
!3464 = !DILocalVariable(name: "s_len", scope: !3459, file: !49, line: 118, type: !14)
!3465 = !DILocation(line: 118, column: 13, scope: !3459)
!3466 = !DILocalVariable(name: "total_sent", scope: !3459, file: !49, line: 119, type: !14)
!3467 = !DILocation(line: 119, column: 13, scope: !3459)
!3468 = !DILocation(line: 121, column: 21, scope: !3459)
!3469 = !DILocation(line: 121, column: 10, scope: !3459)
!3470 = !DILocation(line: 121, column: 8, scope: !3459)
!3471 = !DILocation(line: 123, column: 2, scope: !3459)
!3472 = !DILocation(line: 123, column: 9, scope: !3459)
!3473 = !DILocation(line: 123, column: 23, scope: !3459)
!3474 = !DILocation(line: 123, column: 20, scope: !3459)
!3475 = !DILocation(line: 124, column: 30, scope: !3476)
!3476 = distinct !DILexicalBlock(scope: !3477, file: !49, line: 124, column: 8)
!3477 = distinct !DILexicalBlock(scope: !3459, file: !49, line: 123, column: 30)
!3478 = !DILocation(line: 124, column: 32, scope: !3476)
!3479 = !DILocation(line: 124, column: 31, scope: !3476)
!3480 = !DILocation(line: 124, column: 44, scope: !3476)
!3481 = !DILocation(line: 124, column: 50, scope: !3476)
!3482 = !DILocation(line: 124, column: 49, scope: !3476)
!3483 = !DILocation(line: 124, column: 8, scope: !3476)
!3484 = !DILocation(line: 124, column: 74, scope: !3476)
!3485 = !DILocation(line: 124, column: 8, scope: !3477)
!3486 = !DILocation(line: 125, column: 4, scope: !3487)
!3487 = distinct !DILexicalBlock(scope: !3476, file: !49, line: 124, column: 81)
!3488 = !DILocation(line: 127, column: 7, scope: !3489)
!3489 = distinct !DILexicalBlock(scope: !3477, file: !49, line: 127, column: 7)
!3490 = !DILocation(line: 127, column: 16, scope: !3489)
!3491 = !DILocation(line: 127, column: 7, scope: !3477)
!3492 = !DILocation(line: 128, column: 4, scope: !3493)
!3493 = distinct !DILexicalBlock(scope: !3489, file: !49, line: 127, column: 22)
!3494 = !DILocation(line: 130, column: 17, scope: !3477)
!3495 = !DILocation(line: 130, column: 14, scope: !3477)
!3496 = distinct !{!3496, !3471, !3497}
!3497 = !DILocation(line: 131, column: 2, scope: !3459)
!3498 = !DILocation(line: 133, column: 2, scope: !3459)
!3499 = !DILocation(line: 135, column: 2, scope: !3459)
!3500 = !DILocation(line: 136, column: 1, scope: !3459)
!3501 = distinct !DISubprogram(name: "cgc_sprintf", scope: !49, file: !49, line: 192, type: !3502, scopeLine: 193, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!3502 = !DISubroutineType(types: !3503)
!3503 = !{!77, !19, !273, null}
!3504 = !DILocalVariable(name: "buf", arg: 1, scope: !3501, file: !49, line: 192, type: !19)
!3505 = !DILocation(line: 192, column: 24, scope: !3501)
!3506 = !DILocalVariable(name: "format", arg: 2, scope: !3501, file: !49, line: 192, type: !273)
!3507 = !DILocation(line: 192, column: 41, scope: !3501)
!3508 = !DILocalVariable(name: "args", scope: !3501, file: !49, line: 194, type: !1343)
!3509 = !DILocation(line: 194, column: 10, scope: !3501)
!3510 = !DILocation(line: 195, column: 2, scope: !3501)
!3511 = !DILocalVariable(name: "return_val", scope: !3501, file: !49, line: 197, type: !77)
!3512 = !DILocation(line: 197, column: 6, scope: !3501)
!3513 = !DILocation(line: 197, column: 33, scope: !3501)
!3514 = !DILocation(line: 197, column: 38, scope: !3501)
!3515 = !DILocation(line: 197, column: 46, scope: !3501)
!3516 = !DILocation(line: 197, column: 19, scope: !3501)
!3517 = !DILocation(line: 199, column: 2, scope: !3501)
!3518 = !DILocation(line: 201, column: 10, scope: !3501)
!3519 = !DILocation(line: 201, column: 2, scope: !3501)
!3520 = distinct !DISubprogram(name: "cgc_vsprintf", scope: !49, file: !49, line: 204, type: !3521, scopeLine: 205, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !4)
!3521 = !DISubroutineType(types: !3522)
!3522 = !{!77, !19, !273, !1389}
!3523 = !DILocalVariable(name: "buf", arg: 1, scope: !3520, file: !49, line: 204, type: !19)
!3524 = !DILocation(line: 204, column: 25, scope: !3520)
!3525 = !DILocalVariable(name: "format", arg: 2, scope: !3520, file: !49, line: 204, type: !273)
!3526 = !DILocation(line: 204, column: 42, scope: !3520)
!3527 = !DILocalVariable(name: "args", arg: 3, scope: !3520, file: !49, line: 204, type: !1389)
!3528 = !DILocation(line: 204, column: 58, scope: !3520)
!3529 = !DILocalVariable(name: "wrapper_outc", scope: !3520, file: !49, line: 206, type: !1395)
!3530 = !DILocation(line: 206, column: 19, scope: !3520)
!3531 = !DILocalVariable(name: "ctx", scope: !3520, file: !49, line: 207, type: !7)
!3532 = !DILocation(line: 207, column: 8, scope: !3520)
!3533 = !DILocation(line: 207, column: 14, scope: !3520)
!3534 = !DILocalVariable(name: "pos", scope: !3520, file: !49, line: 208, type: !14)
!3535 = !DILocation(line: 208, column: 13, scope: !3520)
!3536 = !DILocalVariable(name: "iReturnValue", scope: !3520, file: !49, line: 210, type: !77)
!3537 = !DILocation(line: 210, column: 6, scope: !3520)
!3538 = !DILocation(line: 210, column: 41, scope: !3520)
!3539 = !DILocation(line: 210, column: 46, scope: !3520)
!3540 = !DILocation(line: 210, column: 60, scope: !3520)
!3541 = !DILocation(line: 210, column: 65, scope: !3520)
!3542 = !DILocation(line: 210, column: 73, scope: !3520)
!3543 = !DILocation(line: 210, column: 21, scope: !3520)
!3544 = !DILocation(line: 212, column: 4, scope: !3520)
!3545 = !DILocation(line: 212, column: 19, scope: !3520)
!3546 = !DILocation(line: 212, column: 30, scope: !3520)
!3547 = !DILocation(line: 212, column: 2, scope: !3520)
!3548 = !DILocation(line: 214, column: 9, scope: !3520)
!3549 = !DILocation(line: 214, column: 2, scope: !3520)
!3550 = distinct !DISubprogram(name: "cgc_rand", scope: !1789, file: !1789, line: 35, type: !3551, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!3551 = !DISubroutineType(types: !76)
!3552 = !DILocation(line: 37, column: 10, scope: !3550)
!3553 = !DILocation(line: 37, column: 2, scope: !3550)
!3554 = distinct !DISubprogram(name: "cgc_srand", scope: !1789, file: !1789, line: 40, type: !3555, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!3555 = !DISubroutineType(types: !3556)
!3556 = !{null, !32}
!3557 = !DILocalVariable(name: "seed", arg: 1, scope: !3554, file: !1789, line: 40, type: !32)
!3558 = !DILocation(line: 40, column: 30, scope: !3554)
!3559 = !DILocation(line: 42, column: 17, scope: !3554)
!3560 = !DILocation(line: 42, column: 2, scope: !3554)
!3561 = !DILocation(line: 43, column: 1, scope: !3554)
!3562 = distinct !DISubprogram(name: "cgc_atof", scope: !1789, file: !1789, line: 72, type: !3563, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!3563 = !DISubroutineType(types: !3564)
!3564 = !{!61, !19}
!3565 = !DILocalVariable(name: "pStr", arg: 1, scope: !3562, file: !1789, line: 72, type: !19)
!3566 = !DILocation(line: 72, column: 24, scope: !3562)
!3567 = !DILocalVariable(name: "whole", scope: !3562, file: !1789, line: 74, type: !61)
!3568 = !DILocation(line: 74, column: 9, scope: !3562)
!3569 = !DILocalVariable(name: "fraction", scope: !3562, file: !1789, line: 75, type: !61)
!3570 = !DILocation(line: 75, column: 9, scope: !3562)
!3571 = !DILocalVariable(name: "pWhole", scope: !3562, file: !1789, line: 76, type: !19)
!3572 = !DILocation(line: 76, column: 8, scope: !3562)
!3573 = !DILocation(line: 76, column: 17, scope: !3562)
!3574 = !DILocalVariable(name: "pFraction", scope: !3562, file: !1789, line: 77, type: !19)
!3575 = !DILocation(line: 77, column: 8, scope: !3562)
!3576 = !DILocation(line: 80, column: 14, scope: !3562)
!3577 = !DILocation(line: 80, column: 12, scope: !3562)
!3578 = !DILocation(line: 81, column: 2, scope: !3562)
!3579 = !DILocation(line: 81, column: 11, scope: !3562)
!3580 = !DILocation(line: 81, column: 10, scope: !3562)
!3581 = !DILocation(line: 81, column: 21, scope: !3562)
!3582 = !DILocation(line: 83, column: 8, scope: !3583)
!3583 = distinct !DILexicalBlock(scope: !3584, file: !1789, line: 83, column: 7)
!3584 = distinct !DILexicalBlock(scope: !3562, file: !1789, line: 82, column: 2)
!3585 = !DILocation(line: 83, column: 7, scope: !3583)
!3586 = !DILocation(line: 83, column: 18, scope: !3583)
!3587 = !DILocation(line: 83, column: 7, scope: !3584)
!3588 = !DILocation(line: 85, column: 5, scope: !3589)
!3589 = distinct !DILexicalBlock(scope: !3583, file: !1789, line: 84, column: 3)
!3590 = !DILocation(line: 85, column: 15, scope: !3589)
!3591 = !DILocation(line: 86, column: 13, scope: !3589)
!3592 = !DILocation(line: 87, column: 4, scope: !3589)
!3593 = !DILocation(line: 89, column: 12, scope: !3584)
!3594 = distinct !{!3594, !3578, !3595}
!3595 = !DILocation(line: 90, column: 2, scope: !3562)
!3596 = !DILocation(line: 93, column: 19, scope: !3562)
!3597 = !DILocation(line: 93, column: 10, scope: !3562)
!3598 = !DILocation(line: 93, column: 8, scope: !3562)
!3599 = !DILocation(line: 96, column: 7, scope: !3600)
!3600 = distinct !DILexicalBlock(scope: !3562, file: !1789, line: 96, column: 6)
!3601 = !DILocation(line: 96, column: 6, scope: !3600)
!3602 = !DILocation(line: 96, column: 17, scope: !3600)
!3603 = !DILocation(line: 96, column: 6, scope: !3562)
!3604 = !DILocation(line: 97, column: 23, scope: !3605)
!3605 = distinct !DILexicalBlock(scope: !3600, file: !1789, line: 96, column: 26)
!3606 = !DILocation(line: 97, column: 14, scope: !3605)
!3607 = !DILocation(line: 97, column: 12, scope: !3605)
!3608 = !DILocation(line: 98, column: 3, scope: !3605)
!3609 = !DILocation(line: 98, column: 11, scope: !3605)
!3610 = !DILocation(line: 98, column: 21, scope: !3605)
!3611 = !DILocation(line: 98, column: 29, scope: !3605)
!3612 = !DILocation(line: 98, column: 46, scope: !3605)
!3613 = !DILocation(line: 98, column: 45, scope: !3605)
!3614 = !DILocation(line: 98, column: 32, scope: !3605)
!3615 = !DILocation(line: 0, scope: !3605)
!3616 = !DILocation(line: 99, column: 13, scope: !3617)
!3617 = distinct !DILexicalBlock(scope: !3605, file: !1789, line: 98, column: 60)
!3618 = !DILocation(line: 100, column: 13, scope: !3617)
!3619 = distinct !{!3619, !3608, !3620}
!3620 = !DILocation(line: 101, column: 3, scope: !3605)
!3621 = !DILocation(line: 102, column: 2, scope: !3605)
!3622 = !DILocation(line: 104, column: 11, scope: !3562)
!3623 = !DILocation(line: 104, column: 19, scope: !3562)
!3624 = !DILocation(line: 104, column: 17, scope: !3562)
!3625 = !DILocation(line: 104, column: 2, scope: !3562)
!3626 = distinct !DISubprogram(name: "cgc_strcpy", scope: !1789, file: !1789, line: 109, type: !3627, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!3627 = !DISubroutineType(types: !3628)
!3628 = !{!19, !19, !273}
!3629 = !DILocalVariable(name: "pDest", arg: 1, scope: !3626, file: !1789, line: 109, type: !19)
!3630 = !DILocation(line: 109, column: 25, scope: !3626)
!3631 = !DILocalVariable(name: "pSrc", arg: 2, scope: !3626, file: !1789, line: 109, type: !273)
!3632 = !DILocation(line: 109, column: 44, scope: !3626)
!3633 = !DILocalVariable(name: "pDestReturn", scope: !3626, file: !1789, line: 111, type: !19)
!3634 = !DILocation(line: 111, column: 8, scope: !3626)
!3635 = !DILocation(line: 111, column: 22, scope: !3626)
!3636 = !DILocation(line: 113, column: 2, scope: !3626)
!3637 = !DILocation(line: 113, column: 11, scope: !3626)
!3638 = !DILocation(line: 113, column: 10, scope: !3626)
!3639 = !DILocation(line: 113, column: 16, scope: !3626)
!3640 = !DILocation(line: 114, column: 19, scope: !3626)
!3641 = !DILocation(line: 114, column: 14, scope: !3626)
!3642 = !DILocation(line: 114, column: 9, scope: !3626)
!3643 = !DILocation(line: 114, column: 12, scope: !3626)
!3644 = distinct !{!3644, !3636, !3640}
!3645 = !DILocation(line: 116, column: 3, scope: !3626)
!3646 = !DILocation(line: 116, column: 9, scope: !3626)
!3647 = !DILocation(line: 118, column: 10, scope: !3626)
!3648 = !DILocation(line: 118, column: 2, scope: !3626)
!3649 = distinct !DISubprogram(name: "cgc_strncpy", scope: !1789, file: !1789, line: 121, type: !3650, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!3650 = !DISubroutineType(types: !3651)
!3651 = !{!19, !19, !273, !14}
!3652 = !DILocalVariable(name: "pDest", arg: 1, scope: !3649, file: !1789, line: 121, type: !19)
!3653 = !DILocation(line: 121, column: 26, scope: !3649)
!3654 = !DILocalVariable(name: "pSrc", arg: 2, scope: !3649, file: !1789, line: 121, type: !273)
!3655 = !DILocation(line: 121, column: 45, scope: !3649)
!3656 = !DILocalVariable(name: "maxlen", arg: 3, scope: !3649, file: !1789, line: 121, type: !14)
!3657 = !DILocation(line: 121, column: 62, scope: !3649)
!3658 = !DILocalVariable(name: "n", scope: !3649, file: !1789, line: 123, type: !14)
!3659 = !DILocation(line: 123, column: 13, scope: !3649)
!3660 = !DILocation(line: 125, column: 10, scope: !3661)
!3661 = distinct !DILexicalBlock(scope: !3649, file: !1789, line: 125, column: 2)
!3662 = !DILocation(line: 125, column: 8, scope: !3661)
!3663 = !DILocation(line: 125, column: 15, scope: !3664)
!3664 = distinct !DILexicalBlock(scope: !3661, file: !1789, line: 125, column: 2)
!3665 = !DILocation(line: 125, column: 19, scope: !3664)
!3666 = !DILocation(line: 125, column: 17, scope: !3664)
!3667 = !DILocation(line: 125, column: 2, scope: !3661)
!3668 = !DILocation(line: 127, column: 8, scope: !3669)
!3669 = distinct !DILexicalBlock(scope: !3670, file: !1789, line: 127, column: 8)
!3670 = distinct !DILexicalBlock(scope: !3664, file: !1789, line: 126, column: 2)
!3671 = !DILocation(line: 127, column: 13, scope: !3669)
!3672 = !DILocation(line: 127, column: 16, scope: !3669)
!3673 = !DILocation(line: 127, column: 8, scope: !3670)
!3674 = !DILocation(line: 128, column: 4, scope: !3669)
!3675 = !DILocation(line: 130, column: 14, scope: !3670)
!3676 = !DILocation(line: 130, column: 19, scope: !3670)
!3677 = !DILocation(line: 130, column: 3, scope: !3670)
!3678 = !DILocation(line: 130, column: 9, scope: !3670)
!3679 = !DILocation(line: 130, column: 12, scope: !3670)
!3680 = !DILocation(line: 131, column: 2, scope: !3670)
!3681 = !DILocation(line: 125, column: 28, scope: !3664)
!3682 = !DILocation(line: 125, column: 2, scope: !3664)
!3683 = distinct !{!3683, !3667, !3684}
!3684 = !DILocation(line: 131, column: 2, scope: !3661)
!3685 = !DILocation(line: 133, column: 2, scope: !3649)
!3686 = !DILocation(line: 133, column: 10, scope: !3687)
!3687 = distinct !DILexicalBlock(scope: !3688, file: !1789, line: 133, column: 2)
!3688 = distinct !DILexicalBlock(scope: !3649, file: !1789, line: 133, column: 2)
!3689 = !DILocation(line: 133, column: 14, scope: !3687)
!3690 = !DILocation(line: 133, column: 12, scope: !3687)
!3691 = !DILocation(line: 133, column: 2, scope: !3688)
!3692 = !DILocation(line: 134, column: 3, scope: !3687)
!3693 = !DILocation(line: 134, column: 9, scope: !3687)
!3694 = !DILocation(line: 134, column: 12, scope: !3687)
!3695 = !DILocation(line: 133, column: 23, scope: !3687)
!3696 = !DILocation(line: 133, column: 2, scope: !3687)
!3697 = distinct !{!3697, !3691, !3698}
!3698 = !DILocation(line: 134, column: 14, scope: !3688)
!3699 = !DILocation(line: 136, column: 10, scope: !3649)
!3700 = !DILocation(line: 136, column: 2, scope: !3649)
!3701 = distinct !DISubprogram(name: "cgc_memcpy", scope: !1789, file: !1789, line: 139, type: !3702, scopeLine: 140, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!3702 = !DISubroutineType(types: !3703)
!3703 = !{!7, !7, !45, !14}
!3704 = !DILocalVariable(name: "pDest", arg: 1, scope: !3701, file: !1789, line: 139, type: !7)
!3705 = !DILocation(line: 139, column: 25, scope: !3701)
!3706 = !DILocalVariable(name: "pSource", arg: 2, scope: !3701, file: !1789, line: 139, type: !45)
!3707 = !DILocation(line: 139, column: 44, scope: !3701)
!3708 = !DILocalVariable(name: "nbytes", arg: 3, scope: !3701, file: !1789, line: 139, type: !14)
!3709 = !DILocation(line: 139, column: 64, scope: !3701)
!3710 = !DILocalVariable(name: "pDestReturn", scope: !3701, file: !1789, line: 141, type: !7)
!3711 = !DILocation(line: 141, column: 8, scope: !3701)
!3712 = !DILocation(line: 141, column: 22, scope: !3701)
!3713 = !DILocation(line: 143, column: 2, scope: !3701)
!3714 = !DILocation(line: 143, column: 10, scope: !3701)
!3715 = !DILocation(line: 143, column: 17, scope: !3701)
!3716 = !DILocation(line: 145, column: 38, scope: !3717)
!3717 = distinct !DILexicalBlock(scope: !3701, file: !1789, line: 144, column: 2)
!3718 = !DILocation(line: 145, column: 27, scope: !3717)
!3719 = !DILocation(line: 145, column: 25, scope: !3717)
!3720 = !DILocation(line: 145, column: 16, scope: !3717)
!3721 = !DILocation(line: 145, column: 5, scope: !3717)
!3722 = !DILocation(line: 145, column: 23, scope: !3717)
!3723 = !DILocation(line: 147, column: 9, scope: !3717)
!3724 = !DILocation(line: 148, column: 11, scope: !3717)
!3725 = !DILocation(line: 149, column: 9, scope: !3717)
!3726 = distinct !{!3726, !3713, !3727}
!3727 = !DILocation(line: 150, column: 2, scope: !3701)
!3728 = !DILocation(line: 152, column: 2, scope: !3701)
!3729 = !DILocation(line: 152, column: 10, scope: !3701)
!3730 = !DILocation(line: 152, column: 17, scope: !3701)
!3731 = !DILocation(line: 154, column: 36, scope: !3732)
!3732 = distinct !DILexicalBlock(scope: !3701, file: !1789, line: 153, column: 2)
!3733 = !DILocation(line: 154, column: 24, scope: !3732)
!3734 = !DILocation(line: 154, column: 15, scope: !3732)
!3735 = !DILocation(line: 154, column: 22, scope: !3732)
!3736 = !DILocation(line: 156, column: 8, scope: !3732)
!3737 = !DILocation(line: 157, column: 10, scope: !3732)
!3738 = !DILocation(line: 158, column: 9, scope: !3732)
!3739 = distinct !{!3739, !3728, !3740}
!3740 = !DILocation(line: 159, column: 2, scope: !3701)
!3741 = !DILocation(line: 161, column: 10, scope: !3701)
!3742 = !DILocation(line: 161, column: 2, scope: !3701)
!3743 = distinct !DISubprogram(name: "cgc_strtol", scope: !1789, file: !1789, line: 164, type: !3744, scopeLine: 165, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!3744 = !DISubroutineType(types: !3745)
!3745 = !{!161, !273, !293, !77}
!3746 = !DILocalVariable(name: "str", arg: 1, scope: !3743, file: !1789, line: 164, type: !273)
!3747 = !DILocation(line: 164, column: 34, scope: !3743)
!3748 = !DILocalVariable(name: "endptr", arg: 2, scope: !3743, file: !1789, line: 164, type: !293)
!3749 = !DILocation(line: 164, column: 46, scope: !3743)
!3750 = !DILocalVariable(name: "base", arg: 3, scope: !3743, file: !1789, line: 164, type: !77)
!3751 = !DILocation(line: 164, column: 58, scope: !3743)
!3752 = !DILocalVariable(name: "value", scope: !3743, file: !1789, line: 166, type: !161)
!3753 = !DILocation(line: 166, column: 11, scope: !3743)
!3754 = !DILocalVariable(name: "neg", scope: !3743, file: !1789, line: 167, type: !77)
!3755 = !DILocation(line: 167, column: 6, scope: !3743)
!3756 = !DILocation(line: 169, column: 7, scope: !3757)
!3757 = distinct !DILexicalBlock(scope: !3743, file: !1789, line: 169, column: 7)
!3758 = !DILocation(line: 169, column: 11, scope: !3757)
!3759 = !DILocation(line: 169, column: 7, scope: !3743)
!3760 = !DILocation(line: 170, column: 3, scope: !3757)
!3761 = !DILocation(line: 172, column: 7, scope: !3762)
!3762 = distinct !DILexicalBlock(scope: !3743, file: !1789, line: 172, column: 7)
!3763 = !DILocation(line: 172, column: 12, scope: !3762)
!3764 = !DILocation(line: 172, column: 7, scope: !3743)
!3765 = !DILocation(line: 173, column: 8, scope: !3762)
!3766 = !DILocation(line: 173, column: 3, scope: !3762)
!3767 = !DILocation(line: 176, column: 2, scope: !3743)
!3768 = !DILocation(line: 176, column: 24, scope: !3743)
!3769 = !DILocation(line: 176, column: 23, scope: !3743)
!3770 = !DILocation(line: 176, column: 10, scope: !3743)
!3771 = !DILocation(line: 177, column: 6, scope: !3743)
!3772 = distinct !{!3772, !3767, !3771}
!3773 = !DILocation(line: 179, column: 8, scope: !3774)
!3774 = distinct !DILexicalBlock(scope: !3743, file: !1789, line: 179, column: 7)
!3775 = !DILocation(line: 179, column: 7, scope: !3774)
!3776 = !DILocation(line: 179, column: 12, scope: !3774)
!3777 = !DILocation(line: 179, column: 7, scope: !3743)
!3778 = !DILocation(line: 181, column: 7, scope: !3779)
!3779 = distinct !DILexicalBlock(scope: !3774, file: !1789, line: 180, column: 2)
!3780 = !DILocation(line: 182, column: 6, scope: !3779)
!3781 = !DILocation(line: 183, column: 2, scope: !3779)
!3782 = !DILocation(line: 184, column: 13, scope: !3783)
!3783 = distinct !DILexicalBlock(scope: !3774, file: !1789, line: 184, column: 12)
!3784 = !DILocation(line: 184, column: 12, scope: !3783)
!3785 = !DILocation(line: 184, column: 17, scope: !3783)
!3786 = !DILocation(line: 184, column: 12, scope: !3774)
!3787 = !DILocation(line: 185, column: 6, scope: !3783)
!3788 = !DILocation(line: 185, column: 3, scope: !3783)
!3789 = !DILocation(line: 187, column: 8, scope: !3790)
!3790 = distinct !DILexicalBlock(scope: !3743, file: !1789, line: 187, column: 7)
!3791 = !DILocation(line: 187, column: 13, scope: !3790)
!3792 = !DILocation(line: 187, column: 19, scope: !3790)
!3793 = !DILocation(line: 187, column: 22, scope: !3790)
!3794 = !DILocation(line: 187, column: 27, scope: !3790)
!3795 = !DILocation(line: 187, column: 33, scope: !3790)
!3796 = !DILocation(line: 187, column: 37, scope: !3790)
!3797 = !DILocation(line: 187, column: 36, scope: !3790)
!3798 = !DILocation(line: 187, column: 41, scope: !3790)
!3799 = !DILocation(line: 187, column: 48, scope: !3790)
!3800 = !DILocation(line: 187, column: 54, scope: !3790)
!3801 = !DILocation(line: 187, column: 57, scope: !3790)
!3802 = !DILocation(line: 187, column: 52, scope: !3790)
!3803 = !DILocation(line: 187, column: 61, scope: !3790)
!3804 = !DILocation(line: 187, column: 68, scope: !3790)
!3805 = !DILocation(line: 187, column: 73, scope: !3790)
!3806 = !DILocation(line: 187, column: 76, scope: !3790)
!3807 = !DILocation(line: 187, column: 71, scope: !3790)
!3808 = !DILocation(line: 187, column: 80, scope: !3790)
!3809 = !DILocation(line: 187, column: 7, scope: !3743)
!3810 = !DILocation(line: 189, column: 6, scope: !3811)
!3811 = distinct !DILexicalBlock(scope: !3790, file: !1789, line: 188, column: 2)
!3812 = !DILocation(line: 190, column: 8, scope: !3811)
!3813 = !DILocation(line: 191, column: 2, scope: !3811)
!3814 = !DILocation(line: 192, column: 13, scope: !3815)
!3815 = distinct !DILexicalBlock(scope: !3790, file: !1789, line: 192, column: 12)
!3816 = !DILocation(line: 192, column: 18, scope: !3815)
!3817 = !DILocation(line: 192, column: 23, scope: !3815)
!3818 = !DILocation(line: 192, column: 26, scope: !3815)
!3819 = !DILocation(line: 192, column: 31, scope: !3815)
!3820 = !DILocation(line: 192, column: 38, scope: !3815)
!3821 = !DILocation(line: 192, column: 42, scope: !3815)
!3822 = !DILocation(line: 192, column: 41, scope: !3815)
!3823 = !DILocation(line: 192, column: 46, scope: !3815)
!3824 = !DILocation(line: 192, column: 53, scope: !3815)
!3825 = !DILocation(line: 192, column: 59, scope: !3815)
!3826 = !DILocation(line: 192, column: 62, scope: !3815)
!3827 = !DILocation(line: 192, column: 57, scope: !3815)
!3828 = !DILocation(line: 192, column: 66, scope: !3815)
!3829 = !DILocation(line: 192, column: 73, scope: !3815)
!3830 = !DILocation(line: 192, column: 78, scope: !3815)
!3831 = !DILocation(line: 192, column: 81, scope: !3815)
!3832 = !DILocation(line: 192, column: 76, scope: !3815)
!3833 = !DILocation(line: 192, column: 85, scope: !3815)
!3834 = !DILocation(line: 192, column: 12, scope: !3790)
!3835 = !DILocation(line: 194, column: 6, scope: !3836)
!3836 = distinct !DILexicalBlock(scope: !3815, file: !1789, line: 193, column: 2)
!3837 = !DILocation(line: 195, column: 8, scope: !3836)
!3838 = !DILocation(line: 196, column: 2, scope: !3836)
!3839 = !DILocation(line: 198, column: 7, scope: !3840)
!3840 = distinct !DILexicalBlock(scope: !3743, file: !1789, line: 198, column: 7)
!3841 = !DILocation(line: 198, column: 12, scope: !3840)
!3842 = !DILocation(line: 198, column: 7, scope: !3743)
!3843 = !DILocation(line: 200, column: 9, scope: !3844)
!3844 = distinct !DILexicalBlock(scope: !3845, file: !1789, line: 200, column: 8)
!3845 = distinct !DILexicalBlock(scope: !3840, file: !1789, line: 199, column: 2)
!3846 = !DILocation(line: 200, column: 8, scope: !3844)
!3847 = !DILocation(line: 200, column: 13, scope: !3844)
!3848 = !DILocation(line: 200, column: 8, scope: !3845)
!3849 = !DILocation(line: 202, column: 9, scope: !3850)
!3850 = distinct !DILexicalBlock(scope: !3844, file: !1789, line: 201, column: 3)
!3851 = !DILocation(line: 203, column: 3, scope: !3850)
!3852 = !DILocation(line: 205, column: 9, scope: !3844)
!3853 = !DILocation(line: 206, column: 2, scope: !3845)
!3854 = !DILocalVariable(name: "cutoff_value", scope: !3743, file: !1789, line: 208, type: !16)
!3855 = !DILocation(line: 208, column: 16, scope: !3743)
!3856 = !DILocation(line: 209, column: 7, scope: !3857)
!3857 = distinct !DILexicalBlock(scope: !3743, file: !1789, line: 209, column: 7)
!3858 = !DILocation(line: 209, column: 7, scope: !3743)
!3859 = !DILocation(line: 210, column: 16, scope: !3857)
!3860 = !DILocation(line: 210, column: 3, scope: !3857)
!3861 = !DILocation(line: 212, column: 16, scope: !3857)
!3862 = !DILocalVariable(name: "cutlim_value", scope: !3743, file: !1789, line: 213, type: !161)
!3863 = !DILocation(line: 213, column: 11, scope: !3743)
!3864 = !DILocation(line: 213, column: 26, scope: !3743)
!3865 = !DILocation(line: 213, column: 56, scope: !3743)
!3866 = !DILocation(line: 213, column: 41, scope: !3743)
!3867 = !DILocation(line: 213, column: 39, scope: !3743)
!3868 = !DILocation(line: 215, column: 18, scope: !3743)
!3869 = !DILocation(line: 215, column: 15, scope: !3743)
!3870 = !DILocation(line: 217, column: 2, scope: !3743)
!3871 = !DILocation(line: 217, column: 11, scope: !3743)
!3872 = !DILocation(line: 217, column: 10, scope: !3743)
!3873 = !DILocation(line: 217, column: 15, scope: !3743)
!3874 = !DILocalVariable(name: "c", scope: !3875, file: !1789, line: 219, type: !77)
!3875 = distinct !DILexicalBlock(scope: !3743, file: !1789, line: 218, column: 2)
!3876 = !DILocation(line: 219, column: 7, scope: !3875)
!3877 = !DILocation(line: 219, column: 12, scope: !3875)
!3878 = !DILocation(line: 219, column: 11, scope: !3875)
!3879 = !DILocation(line: 221, column: 21, scope: !3880)
!3880 = distinct !DILexicalBlock(scope: !3875, file: !1789, line: 221, column: 8)
!3881 = !DILocation(line: 221, column: 8, scope: !3880)
!3882 = !DILocation(line: 221, column: 8, scope: !3875)
!3883 = !DILocation(line: 222, column: 6, scope: !3880)
!3884 = !DILocation(line: 222, column: 4, scope: !3880)
!3885 = !DILocation(line: 223, column: 25, scope: !3886)
!3886 = distinct !DILexicalBlock(scope: !3880, file: !1789, line: 223, column: 13)
!3887 = !DILocation(line: 223, column: 13, scope: !3886)
!3888 = !DILocation(line: 223, column: 13, scope: !3880)
!3889 = !DILocation(line: 225, column: 21, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3891, file: !1789, line: 225, column: 9)
!3891 = distinct !DILexicalBlock(scope: !3886, file: !1789, line: 224, column: 3)
!3892 = !DILocation(line: 225, column: 9, scope: !3890)
!3893 = !DILocation(line: 225, column: 9, scope: !3891)
!3894 = !DILocation(line: 226, column: 7, scope: !3890)
!3895 = !DILocation(line: 226, column: 5, scope: !3890)
!3896 = !DILocation(line: 228, column: 7, scope: !3890)
!3897 = !DILocation(line: 229, column: 3, scope: !3891)
!3898 = !DILocation(line: 231, column: 4, scope: !3886)
!3899 = !DILocation(line: 233, column: 8, scope: !3900)
!3900 = distinct !DILexicalBlock(scope: !3875, file: !1789, line: 233, column: 8)
!3901 = !DILocation(line: 233, column: 13, scope: !3900)
!3902 = !DILocation(line: 233, column: 10, scope: !3900)
!3903 = !DILocation(line: 233, column: 8, scope: !3875)
!3904 = !DILocation(line: 234, column: 4, scope: !3900)
!3905 = !DILocation(line: 236, column: 8, scope: !3906)
!3906 = distinct !DILexicalBlock(scope: !3875, file: !1789, line: 236, column: 8)
!3907 = !DILocation(line: 236, column: 16, scope: !3906)
!3908 = !DILocation(line: 236, column: 14, scope: !3906)
!3909 = !DILocation(line: 236, column: 29, scope: !3906)
!3910 = !DILocation(line: 236, column: 33, scope: !3906)
!3911 = !DILocation(line: 236, column: 42, scope: !3906)
!3912 = !DILocation(line: 236, column: 39, scope: !3906)
!3913 = !DILocation(line: 236, column: 55, scope: !3906)
!3914 = !DILocation(line: 236, column: 58, scope: !3906)
!3915 = !DILocation(line: 236, column: 62, scope: !3906)
!3916 = !DILocation(line: 236, column: 60, scope: !3906)
!3917 = !DILocation(line: 236, column: 8, scope: !3875)
!3918 = !DILocation(line: 237, column: 4, scope: !3906)
!3919 = !DILocation(line: 240, column: 13, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3906, file: !1789, line: 239, column: 3)
!3921 = !DILocation(line: 240, column: 10, scope: !3920)
!3922 = !DILocation(line: 241, column: 13, scope: !3920)
!3923 = !DILocation(line: 241, column: 10, scope: !3920)
!3924 = !DILocation(line: 244, column: 6, scope: !3875)
!3925 = distinct !{!3925, !3870, !3926}
!3926 = !DILocation(line: 245, column: 2, scope: !3743)
!3927 = !DILocation(line: 248, column: 7, scope: !3928)
!3928 = distinct !DILexicalBlock(scope: !3743, file: !1789, line: 248, column: 7)
!3929 = !DILocation(line: 248, column: 7, scope: !3743)
!3930 = !DILocation(line: 249, column: 21, scope: !3928)
!3931 = !DILocation(line: 249, column: 4, scope: !3928)
!3932 = !DILocation(line: 249, column: 11, scope: !3928)
!3933 = !DILocation(line: 249, column: 3, scope: !3928)
!3934 = !DILocation(line: 251, column: 7, scope: !3935)
!3935 = distinct !DILexicalBlock(scope: !3743, file: !1789, line: 251, column: 7)
!3936 = !DILocation(line: 251, column: 7, scope: !3743)
!3937 = !DILocation(line: 252, column: 11, scope: !3935)
!3938 = !DILocation(line: 252, column: 10, scope: !3935)
!3939 = !DILocation(line: 252, column: 3, scope: !3935)
!3940 = !DILocation(line: 254, column: 10, scope: !3935)
!3941 = !DILocation(line: 254, column: 3, scope: !3935)
!3942 = !DILocation(line: 255, column: 1, scope: !3743)
!3943 = distinct !DISubprogram(name: "cgc_memset", scope: !71, file: !71, line: 45, type: !3944, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !65, retainedNodes: !4)
!3944 = !DISubroutineType(types: !3945)
!3945 = !{!7, !7, !77, !14}
!3946 = !DILocalVariable(name: "ptr", arg: 1, scope: !3943, file: !71, line: 45, type: !7)
!3947 = !DILocation(line: 45, column: 25, scope: !3943)
!3948 = !DILocalVariable(name: "value", arg: 2, scope: !3943, file: !71, line: 45, type: !77)
!3949 = !DILocation(line: 45, column: 34, scope: !3943)
!3950 = !DILocalVariable(name: "num", arg: 3, scope: !3943, file: !71, line: 45, type: !14)
!3951 = !DILocation(line: 45, column: 52, scope: !3943)
!3952 = !DILocalVariable(name: "ptr_temp", scope: !3943, file: !71, line: 47, type: !7)
!3953 = !DILocation(line: 47, column: 8, scope: !3943)
!3954 = !DILocation(line: 47, column: 19, scope: !3943)
!3955 = !DILocalVariable(name: "set_value_byte", scope: !3943, file: !71, line: 48, type: !59)
!3956 = !DILocation(line: 48, column: 10, scope: !3943)
!3957 = !DILocation(line: 48, column: 36, scope: !3943)
!3958 = !DILocation(line: 48, column: 27, scope: !3943)
!3959 = !DILocalVariable(name: "set_value_dword", scope: !3943, file: !71, line: 49, type: !30)
!3960 = !DILocation(line: 49, column: 11, scope: !3943)
!3961 = !DILocation(line: 49, column: 30, scope: !3943)
!3962 = !DILocation(line: 49, column: 45, scope: !3943)
!3963 = !DILocation(line: 49, column: 55, scope: !3943)
!3964 = !DILocation(line: 49, column: 70, scope: !3943)
!3965 = !DILocation(line: 49, column: 52, scope: !3943)
!3966 = !DILocation(line: 49, column: 80, scope: !3943)
!3967 = !DILocation(line: 49, column: 95, scope: !3943)
!3968 = !DILocation(line: 49, column: 77, scope: !3943)
!3969 = !DILocation(line: 49, column: 103, scope: !3943)
!3970 = !DILocation(line: 49, column: 101, scope: !3943)
!3971 = !DILocation(line: 51, column: 2, scope: !3943)
!3972 = !DILocation(line: 51, column: 10, scope: !3943)
!3973 = !DILocation(line: 51, column: 14, scope: !3943)
!3974 = !DILocation(line: 53, column: 23, scope: !3975)
!3975 = distinct !DILexicalBlock(scope: !3943, file: !71, line: 52, column: 2)
!3976 = !DILocation(line: 53, column: 16, scope: !3975)
!3977 = !DILocation(line: 53, column: 5, scope: !3975)
!3978 = !DILocation(line: 53, column: 21, scope: !3975)
!3979 = !DILocation(line: 54, column: 6, scope: !3975)
!3980 = !DILocation(line: 55, column: 6, scope: !3975)
!3981 = distinct !{!3981, !3971, !3982}
!3982 = !DILocation(line: 56, column: 2, scope: !3943)
!3983 = !DILocation(line: 58, column: 2, scope: !3943)
!3984 = !DILocation(line: 58, column: 10, scope: !3943)
!3985 = !DILocation(line: 58, column: 14, scope: !3943)
!3986 = !DILocation(line: 60, column: 24, scope: !3987)
!3987 = distinct !DILexicalBlock(scope: !3943, file: !71, line: 59, column: 2)
!3988 = !DILocation(line: 60, column: 18, scope: !3987)
!3989 = !DILocation(line: 60, column: 22, scope: !3987)
!3990 = !DILocation(line: 61, column: 6, scope: !3987)
!3991 = distinct !{!3991, !3983, !3992}
!3992 = !DILocation(line: 62, column: 2, scope: !3943)
!3993 = !DILocation(line: 64, column: 10, scope: !3943)
!3994 = !DILocation(line: 64, column: 2, scope: !3943)
!3995 = distinct !DISubprogram(name: "cgc_strchr", scope: !71, file: !71, line: 67, type: !3996, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !65, retainedNodes: !4)
!3996 = !DISubroutineType(types: !3997)
!3997 = !{!19, !19, !77}
!3998 = !DILocalVariable(name: "s", arg: 1, scope: !3995, file: !71, line: 67, type: !19)
!3999 = !DILocation(line: 67, column: 24, scope: !3995)
!4000 = !DILocalVariable(name: "c", arg: 2, scope: !3995, file: !71, line: 67, type: !77)
!4001 = !DILocation(line: 67, column: 31, scope: !3995)
!4002 = !DILocalVariable(name: "i", scope: !3995, file: !71, line: 68, type: !30)
!4003 = !DILocation(line: 68, column: 11, scope: !3995)
!4004 = !DILocation(line: 70, column: 7, scope: !4005)
!4005 = distinct !DILexicalBlock(scope: !3995, file: !71, line: 70, column: 6)
!4006 = !DILocation(line: 70, column: 6, scope: !3995)
!4007 = !DILocation(line: 71, column: 3, scope: !4008)
!4008 = distinct !DILexicalBlock(scope: !4005, file: !71, line: 70, column: 10)
!4009 = !DILocation(line: 73, column: 9, scope: !4010)
!4010 = distinct !DILexicalBlock(scope: !3995, file: !71, line: 73, column: 2)
!4011 = !DILocation(line: 73, column: 7, scope: !4010)
!4012 = !DILocation(line: 73, column: 14, scope: !4013)
!4013 = distinct !DILexicalBlock(scope: !4010, file: !71, line: 73, column: 2)
!4014 = !DILocation(line: 73, column: 29, scope: !4013)
!4015 = !DILocation(line: 73, column: 18, scope: !4013)
!4016 = !DILocation(line: 73, column: 16, scope: !4013)
!4017 = !DILocation(line: 73, column: 2, scope: !4010)
!4018 = !DILocation(line: 74, column: 7, scope: !4019)
!4019 = distinct !DILexicalBlock(scope: !4020, file: !71, line: 74, column: 7)
!4020 = distinct !DILexicalBlock(scope: !4013, file: !71, line: 73, column: 38)
!4021 = !DILocation(line: 74, column: 9, scope: !4019)
!4022 = !DILocation(line: 74, column: 15, scope: !4019)
!4023 = !DILocation(line: 74, column: 12, scope: !4019)
!4024 = !DILocation(line: 74, column: 7, scope: !4020)
!4025 = !DILocation(line: 75, column: 11, scope: !4026)
!4026 = distinct !DILexicalBlock(scope: !4019, file: !71, line: 74, column: 18)
!4027 = !DILocation(line: 75, column: 13, scope: !4026)
!4028 = !DILocation(line: 75, column: 12, scope: !4026)
!4029 = !DILocation(line: 75, column: 4, scope: !4026)
!4030 = !DILocation(line: 77, column: 2, scope: !4020)
!4031 = !DILocation(line: 73, column: 34, scope: !4013)
!4032 = !DILocation(line: 73, column: 2, scope: !4013)
!4033 = distinct !{!4033, !4017, !4034}
!4034 = !DILocation(line: 77, column: 2, scope: !4010)
!4035 = !DILocation(line: 79, column: 2, scope: !3995)
!4036 = !DILocation(line: 81, column: 1, scope: !3995)
!4037 = distinct !DISubprogram(name: "cgc_strtok", scope: !71, file: !71, line: 84, type: !4038, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !65, retainedNodes: !4)
!4038 = !DISubroutineType(types: !4039)
!4039 = !{!19, !19, !19}
!4040 = !DILocalVariable(name: "str", arg: 1, scope: !4037, file: !71, line: 84, type: !19)
!4041 = !DILocation(line: 84, column: 24, scope: !4037)
!4042 = !DILocalVariable(name: "sep", arg: 2, scope: !4037, file: !71, line: 84, type: !19)
!4043 = !DILocation(line: 84, column: 35, scope: !4037)
!4044 = !DILocalVariable(name: "i", scope: !4037, file: !71, line: 85, type: !30)
!4045 = !DILocation(line: 85, column: 11, scope: !4037)
!4046 = !DILocalVariable(name: "j", scope: !4037, file: !71, line: 85, type: !30)
!4047 = !DILocation(line: 85, column: 14, scope: !4037)
!4048 = !DILocalVariable(name: "str_len", scope: !4037, file: !71, line: 86, type: !30)
!4049 = !DILocation(line: 86, column: 11, scope: !4037)
!4050 = !DILocalVariable(name: "tok", scope: !4037, file: !71, line: 87, type: !19)
!4051 = !DILocation(line: 87, column: 8, scope: !4037)
!4052 = !DILocation(line: 89, column: 7, scope: !4053)
!4053 = distinct !DILexicalBlock(scope: !4037, file: !71, line: 89, column: 6)
!4054 = !DILocation(line: 89, column: 6, scope: !4037)
!4055 = !DILocation(line: 90, column: 3, scope: !4056)
!4056 = distinct !DILexicalBlock(scope: !4053, file: !71, line: 89, column: 12)
!4057 = !DILocation(line: 93, column: 7, scope: !4058)
!4058 = distinct !DILexicalBlock(scope: !4037, file: !71, line: 93, column: 6)
!4059 = !DILocation(line: 93, column: 6, scope: !4037)
!4060 = !DILocation(line: 94, column: 8, scope: !4061)
!4061 = distinct !DILexicalBlock(scope: !4062, file: !71, line: 94, column: 7)
!4062 = distinct !DILexicalBlock(scope: !4058, file: !71, line: 93, column: 12)
!4063 = !DILocation(line: 94, column: 7, scope: !4062)
!4064 = !DILocation(line: 95, column: 4, scope: !4065)
!4065 = distinct !DILexicalBlock(scope: !4061, file: !71, line: 94, column: 20)
!4066 = !DILocation(line: 97, column: 10, scope: !4067)
!4067 = distinct !DILexicalBlock(scope: !4061, file: !71, line: 96, column: 10)
!4068 = !DILocation(line: 97, column: 8, scope: !4067)
!4069 = !DILocation(line: 99, column: 2, scope: !4062)
!4070 = !DILocation(line: 102, column: 2, scope: !4037)
!4071 = !DILocation(line: 102, column: 20, scope: !4037)
!4072 = !DILocation(line: 102, column: 26, scope: !4037)
!4073 = !DILocation(line: 102, column: 25, scope: !4037)
!4074 = !DILocation(line: 102, column: 9, scope: !4037)
!4075 = !DILocation(line: 102, column: 31, scope: !4037)
!4076 = !DILocation(line: 102, column: 35, scope: !4037)
!4077 = !DILocation(line: 102, column: 34, scope: !4037)
!4078 = !DILocation(line: 102, column: 39, scope: !4037)
!4079 = !DILocation(line: 0, scope: !4037)
!4080 = !DILocation(line: 103, column: 6, scope: !4081)
!4081 = distinct !DILexicalBlock(scope: !4037, file: !71, line: 102, column: 48)
!4082 = distinct !{!4082, !4070, !4083}
!4083 = !DILocation(line: 104, column: 2, scope: !4037)
!4084 = !DILocation(line: 105, column: 7, scope: !4085)
!4085 = distinct !DILexicalBlock(scope: !4037, file: !71, line: 105, column: 6)
!4086 = !DILocation(line: 105, column: 6, scope: !4085)
!4087 = !DILocation(line: 105, column: 11, scope: !4085)
!4088 = !DILocation(line: 105, column: 6, scope: !4037)
!4089 = !DILocation(line: 106, column: 14, scope: !4090)
!4090 = distinct !DILexicalBlock(scope: !4085, file: !71, line: 105, column: 20)
!4091 = !DILocation(line: 107, column: 3, scope: !4090)
!4092 = !DILocation(line: 110, column: 23, scope: !4037)
!4093 = !DILocation(line: 110, column: 12, scope: !4037)
!4094 = !DILocation(line: 110, column: 10, scope: !4037)
!4095 = !DILocation(line: 111, column: 9, scope: !4096)
!4096 = distinct !DILexicalBlock(scope: !4037, file: !71, line: 111, column: 2)
!4097 = !DILocation(line: 111, column: 7, scope: !4096)
!4098 = !DILocation(line: 111, column: 14, scope: !4099)
!4099 = distinct !DILexicalBlock(scope: !4096, file: !71, line: 111, column: 2)
!4100 = !DILocation(line: 111, column: 18, scope: !4099)
!4101 = !DILocation(line: 111, column: 16, scope: !4099)
!4102 = !DILocation(line: 111, column: 2, scope: !4096)
!4103 = !DILocation(line: 112, column: 18, scope: !4104)
!4104 = distinct !DILexicalBlock(scope: !4105, file: !71, line: 112, column: 7)
!4105 = distinct !DILexicalBlock(scope: !4099, file: !71, line: 111, column: 32)
!4106 = !DILocation(line: 112, column: 23, scope: !4104)
!4107 = !DILocation(line: 112, column: 27, scope: !4104)
!4108 = !DILocation(line: 112, column: 7, scope: !4104)
!4109 = !DILocation(line: 112, column: 7, scope: !4105)
!4110 = !DILocation(line: 114, column: 4, scope: !4111)
!4111 = distinct !DILexicalBlock(scope: !4104, file: !71, line: 112, column: 32)
!4112 = !DILocation(line: 114, column: 8, scope: !4111)
!4113 = !DILocation(line: 114, column: 11, scope: !4111)
!4114 = !DILocation(line: 116, column: 13, scope: !4115)
!4115 = distinct !DILexicalBlock(scope: !4111, file: !71, line: 116, column: 4)
!4116 = !DILocation(line: 116, column: 14, scope: !4115)
!4117 = !DILocation(line: 116, column: 11, scope: !4115)
!4118 = !DILocation(line: 116, column: 9, scope: !4115)
!4119 = !DILocation(line: 116, column: 18, scope: !4120)
!4120 = distinct !DILexicalBlock(scope: !4115, file: !71, line: 116, column: 4)
!4121 = !DILocation(line: 116, column: 22, scope: !4120)
!4122 = !DILocation(line: 116, column: 20, scope: !4120)
!4123 = !DILocation(line: 116, column: 4, scope: !4115)
!4124 = !DILocation(line: 117, column: 20, scope: !4125)
!4125 = distinct !DILexicalBlock(scope: !4126, file: !71, line: 117, column: 9)
!4126 = distinct !DILexicalBlock(scope: !4120, file: !71, line: 116, column: 36)
!4127 = !DILocation(line: 117, column: 25, scope: !4125)
!4128 = !DILocation(line: 117, column: 29, scope: !4125)
!4129 = !DILocation(line: 117, column: 9, scope: !4125)
!4130 = !DILocation(line: 117, column: 9, scope: !4126)
!4131 = !DILocation(line: 119, column: 6, scope: !4132)
!4132 = distinct !DILexicalBlock(scope: !4125, file: !71, line: 117, column: 34)
!4133 = !DILocation(line: 119, column: 10, scope: !4132)
!4134 = !DILocation(line: 119, column: 13, scope: !4132)
!4135 = !DILocation(line: 120, column: 5, scope: !4132)
!4136 = !DILocation(line: 122, column: 19, scope: !4137)
!4137 = distinct !DILexicalBlock(scope: !4125, file: !71, line: 120, column: 12)
!4138 = !DILocation(line: 122, column: 23, scope: !4137)
!4139 = !DILocation(line: 122, column: 22, scope: !4137)
!4140 = !DILocation(line: 122, column: 17, scope: !4137)
!4141 = !DILocation(line: 123, column: 13, scope: !4137)
!4142 = !DILocation(line: 123, column: 6, scope: !4137)
!4143 = !DILocation(line: 125, column: 4, scope: !4126)
!4144 = !DILocation(line: 116, column: 32, scope: !4120)
!4145 = !DILocation(line: 116, column: 4, scope: !4120)
!4146 = distinct !{!4146, !4123, !4147}
!4147 = !DILocation(line: 125, column: 4, scope: !4115)
!4148 = !DILocation(line: 126, column: 8, scope: !4149)
!4149 = distinct !DILexicalBlock(scope: !4111, file: !71, line: 126, column: 8)
!4150 = !DILocation(line: 126, column: 13, scope: !4149)
!4151 = !DILocation(line: 126, column: 10, scope: !4149)
!4152 = !DILocation(line: 126, column: 8, scope: !4111)
!4153 = !DILocation(line: 127, column: 16, scope: !4154)
!4154 = distinct !DILexicalBlock(scope: !4149, file: !71, line: 126, column: 22)
!4155 = !DILocation(line: 128, column: 4, scope: !4154)
!4156 = !DILocation(line: 129, column: 11, scope: !4111)
!4157 = !DILocation(line: 129, column: 4, scope: !4111)
!4158 = !DILocation(line: 131, column: 2, scope: !4105)
!4159 = !DILocation(line: 111, column: 28, scope: !4099)
!4160 = !DILocation(line: 111, column: 2, scope: !4099)
!4161 = distinct !{!4161, !4102, !4162}
!4162 = !DILocation(line: 131, column: 2, scope: !4096)
!4163 = !DILocation(line: 134, column: 13, scope: !4037)
!4164 = !DILocation(line: 135, column: 9, scope: !4037)
!4165 = !DILocation(line: 135, column: 2, scope: !4037)
!4166 = !DILocation(line: 136, column: 1, scope: !4037)
!4167 = distinct !DISubprogram(name: "cgc_strcmp", scope: !71, file: !71, line: 138, type: !796, scopeLine: 138, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !65, retainedNodes: !4)
!4168 = !DILocalVariable(name: "s1", arg: 1, scope: !4167, file: !71, line: 138, type: !273)
!4169 = !DILocation(line: 138, column: 28, scope: !4167)
!4170 = !DILocalVariable(name: "s2", arg: 2, scope: !4167, file: !71, line: 138, type: !273)
!4171 = !DILocation(line: 138, column: 44, scope: !4167)
!4172 = !DILocation(line: 140, column: 6, scope: !4173)
!4173 = distinct !DILexicalBlock(scope: !4167, file: !71, line: 140, column: 6)
!4174 = !DILocation(line: 140, column: 9, scope: !4173)
!4175 = !DILocation(line: 140, column: 13, scope: !4173)
!4176 = !DILocation(line: 140, column: 6, scope: !4167)
!4177 = !DILocation(line: 141, column: 3, scope: !4178)
!4178 = distinct !DILexicalBlock(scope: !4173, file: !71, line: 140, column: 17)
!4179 = !DILocation(line: 143, column: 7, scope: !4180)
!4180 = distinct !DILexicalBlock(scope: !4167, file: !71, line: 143, column: 6)
!4181 = !DILocation(line: 143, column: 10, scope: !4180)
!4182 = !DILocation(line: 143, column: 13, scope: !4180)
!4183 = !DILocation(line: 143, column: 6, scope: !4167)
!4184 = !DILocation(line: 144, column: 3, scope: !4185)
!4185 = distinct !DILexicalBlock(scope: !4180, file: !71, line: 143, column: 17)
!4186 = !DILocation(line: 146, column: 7, scope: !4187)
!4187 = distinct !DILexicalBlock(scope: !4167, file: !71, line: 146, column: 6)
!4188 = !DILocation(line: 146, column: 10, scope: !4187)
!4189 = !DILocation(line: 146, column: 14, scope: !4187)
!4190 = !DILocation(line: 146, column: 6, scope: !4167)
!4191 = !DILocation(line: 147, column: 3, scope: !4192)
!4192 = distinct !DILexicalBlock(scope: !4187, file: !71, line: 146, column: 18)
!4193 = !DILocation(line: 150, column: 2, scope: !4167)
!4194 = !DILocation(line: 150, column: 10, scope: !4167)
!4195 = !DILocation(line: 150, column: 9, scope: !4167)
!4196 = !DILocation(line: 150, column: 13, scope: !4167)
!4197 = !DILocation(line: 150, column: 21, scope: !4167)
!4198 = !DILocation(line: 150, column: 25, scope: !4167)
!4199 = !DILocation(line: 150, column: 24, scope: !4167)
!4200 = !DILocation(line: 150, column: 28, scope: !4167)
!4201 = !DILocation(line: 0, scope: !4167)
!4202 = !DILocation(line: 151, column: 8, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !4204, file: !71, line: 151, column: 7)
!4204 = distinct !DILexicalBlock(scope: !4167, file: !71, line: 150, column: 37)
!4205 = !DILocation(line: 151, column: 7, scope: !4203)
!4206 = !DILocation(line: 151, column: 14, scope: !4203)
!4207 = !DILocation(line: 151, column: 13, scope: !4203)
!4208 = !DILocation(line: 151, column: 11, scope: !4203)
!4209 = !DILocation(line: 151, column: 7, scope: !4204)
!4210 = !DILocation(line: 152, column: 4, scope: !4211)
!4211 = distinct !DILexicalBlock(scope: !4203, file: !71, line: 151, column: 18)
!4212 = !DILocation(line: 154, column: 8, scope: !4213)
!4213 = distinct !DILexicalBlock(scope: !4204, file: !71, line: 154, column: 7)
!4214 = !DILocation(line: 154, column: 7, scope: !4213)
!4215 = !DILocation(line: 154, column: 14, scope: !4213)
!4216 = !DILocation(line: 154, column: 13, scope: !4213)
!4217 = !DILocation(line: 154, column: 11, scope: !4213)
!4218 = !DILocation(line: 154, column: 7, scope: !4204)
!4219 = !DILocation(line: 155, column: 4, scope: !4220)
!4220 = distinct !DILexicalBlock(scope: !4213, file: !71, line: 154, column: 18)
!4221 = !DILocation(line: 157, column: 5, scope: !4204)
!4222 = !DILocation(line: 158, column: 5, scope: !4204)
!4223 = distinct !{!4223, !4193, !4224}
!4224 = !DILocation(line: 159, column: 2, scope: !4167)
!4225 = !DILocation(line: 160, column: 7, scope: !4226)
!4226 = distinct !DILexicalBlock(scope: !4167, file: !71, line: 160, column: 6)
!4227 = !DILocation(line: 160, column: 6, scope: !4226)
!4228 = !DILocation(line: 160, column: 10, scope: !4226)
!4229 = !DILocation(line: 160, column: 18, scope: !4226)
!4230 = !DILocation(line: 160, column: 22, scope: !4226)
!4231 = !DILocation(line: 160, column: 21, scope: !4226)
!4232 = !DILocation(line: 160, column: 25, scope: !4226)
!4233 = !DILocation(line: 160, column: 6, scope: !4167)
!4234 = !DILocation(line: 161, column: 3, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4226, file: !71, line: 160, column: 34)
!4236 = !DILocation(line: 163, column: 7, scope: !4237)
!4237 = distinct !DILexicalBlock(scope: !4167, file: !71, line: 163, column: 6)
!4238 = !DILocation(line: 163, column: 6, scope: !4237)
!4239 = !DILocation(line: 163, column: 10, scope: !4237)
!4240 = !DILocation(line: 163, column: 18, scope: !4237)
!4241 = !DILocation(line: 163, column: 22, scope: !4237)
!4242 = !DILocation(line: 163, column: 21, scope: !4237)
!4243 = !DILocation(line: 163, column: 25, scope: !4237)
!4244 = !DILocation(line: 163, column: 6, scope: !4167)
!4245 = !DILocation(line: 164, column: 3, scope: !4246)
!4246 = distinct !DILexicalBlock(scope: !4237, file: !71, line: 163, column: 34)
!4247 = !DILocation(line: 166, column: 2, scope: !4167)
!4248 = !DILocation(line: 168, column: 1, scope: !4167)
!4249 = distinct !DISubprogram(name: "cgc_strcat", scope: !71, file: !71, line: 170, type: !4250, scopeLine: 170, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !65, retainedNodes: !4)
!4250 = !DISubroutineType(types: !4251)
!4251 = !{!19, !4252, !4253}
!4252 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !19)
!4253 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !273)
!4254 = !DILocalVariable(name: "s1", arg: 1, scope: !4249, file: !71, line: 170, type: !4252)
!4255 = !DILocation(line: 170, column: 33, scope: !4249)
!4256 = !DILocalVariable(name: "s2", arg: 2, scope: !4249, file: !71, line: 170, type: !4253)
!4257 = !DILocation(line: 170, column: 58, scope: !4249)
!4258 = !DILocalVariable(name: "i", scope: !4249, file: !71, line: 171, type: !30)
!4259 = !DILocation(line: 171, column: 11, scope: !4249)
!4260 = !DILocalVariable(name: "j", scope: !4249, file: !71, line: 171, type: !30)
!4261 = !DILocation(line: 171, column: 13, scope: !4249)
!4262 = !DILocation(line: 173, column: 7, scope: !4263)
!4263 = distinct !DILexicalBlock(scope: !4249, file: !71, line: 173, column: 6)
!4264 = !DILocation(line: 173, column: 10, scope: !4263)
!4265 = !DILocation(line: 173, column: 14, scope: !4263)
!4266 = !DILocation(line: 173, column: 6, scope: !4249)
!4267 = !DILocation(line: 174, column: 3, scope: !4268)
!4268 = distinct !DILexicalBlock(scope: !4263, file: !71, line: 173, column: 18)
!4269 = !DILocation(line: 177, column: 22, scope: !4270)
!4270 = distinct !DILexicalBlock(scope: !4249, file: !71, line: 177, column: 2)
!4271 = !DILocation(line: 177, column: 11, scope: !4270)
!4272 = !DILocation(line: 177, column: 9, scope: !4270)
!4273 = !DILocation(line: 177, column: 29, scope: !4270)
!4274 = !DILocation(line: 177, column: 7, scope: !4270)
!4275 = !DILocation(line: 177, column: 34, scope: !4276)
!4276 = distinct !DILexicalBlock(scope: !4270, file: !71, line: 177, column: 2)
!4277 = !DILocation(line: 177, column: 49, scope: !4276)
!4278 = !DILocation(line: 177, column: 38, scope: !4276)
!4279 = !DILocation(line: 177, column: 36, scope: !4276)
!4280 = !DILocation(line: 177, column: 2, scope: !4270)
!4281 = !DILocation(line: 178, column: 11, scope: !4282)
!4282 = distinct !DILexicalBlock(scope: !4276, file: !71, line: 177, column: 64)
!4283 = !DILocation(line: 178, column: 14, scope: !4282)
!4284 = !DILocation(line: 178, column: 3, scope: !4282)
!4285 = !DILocation(line: 178, column: 6, scope: !4282)
!4286 = !DILocation(line: 178, column: 9, scope: !4282)
!4287 = !DILocation(line: 179, column: 2, scope: !4282)
!4288 = !DILocation(line: 177, column: 55, scope: !4276)
!4289 = !DILocation(line: 177, column: 60, scope: !4276)
!4290 = !DILocation(line: 177, column: 2, scope: !4276)
!4291 = distinct !{!4291, !4280, !4292}
!4292 = !DILocation(line: 179, column: 2, scope: !4270)
!4293 = !DILocation(line: 180, column: 2, scope: !4249)
!4294 = !DILocation(line: 180, column: 5, scope: !4249)
!4295 = !DILocation(line: 180, column: 8, scope: !4249)
!4296 = !DILocation(line: 182, column: 9, scope: !4249)
!4297 = !DILocation(line: 182, column: 2, scope: !4249)
!4298 = !DILocation(line: 183, column: 1, scope: !4249)
!4299 = distinct !DISubprogram(name: "cgc_memcmp", scope: !71, file: !71, line: 185, type: !4300, scopeLine: 186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !65, retainedNodes: !4)
!4300 = !DISubroutineType(types: !4301)
!4301 = !{!77, !45, !45, !14}
!4302 = !DILocalVariable(name: "s1", arg: 1, scope: !4299, file: !71, line: 185, type: !45)
!4303 = !DILocation(line: 185, column: 29, scope: !4299)
!4304 = !DILocalVariable(name: "s2", arg: 2, scope: !4299, file: !71, line: 185, type: !45)
!4305 = !DILocation(line: 185, column: 45, scope: !4299)
!4306 = !DILocalVariable(name: "n", arg: 3, scope: !4299, file: !71, line: 185, type: !14)
!4307 = !DILocation(line: 185, column: 60, scope: !4299)
!4308 = !DILocalVariable(name: "pos", scope: !4309, file: !71, line: 187, type: !14)
!4309 = distinct !DILexicalBlock(scope: !4299, file: !71, line: 187, column: 2)
!4310 = !DILocation(line: 187, column: 19, scope: !4309)
!4311 = !DILocation(line: 187, column: 8, scope: !4309)
!4312 = !DILocation(line: 187, column: 28, scope: !4313)
!4313 = distinct !DILexicalBlock(scope: !4309, file: !71, line: 187, column: 2)
!4314 = !DILocation(line: 187, column: 34, scope: !4313)
!4315 = !DILocation(line: 187, column: 32, scope: !4313)
!4316 = !DILocation(line: 187, column: 2, scope: !4309)
!4317 = !DILocalVariable(name: "val1", scope: !4318, file: !71, line: 189, type: !59)
!4318 = distinct !DILexicalBlock(scope: !4313, file: !71, line: 188, column: 2)
!4319 = !DILocation(line: 189, column: 11, scope: !4318)
!4320 = !DILocation(line: 189, column: 29, scope: !4318)
!4321 = !DILocation(line: 189, column: 33, scope: !4318)
!4322 = !DILocation(line: 189, column: 18, scope: !4318)
!4323 = !DILocalVariable(name: "val2", scope: !4318, file: !71, line: 190, type: !59)
!4324 = !DILocation(line: 190, column: 11, scope: !4318)
!4325 = !DILocation(line: 190, column: 29, scope: !4318)
!4326 = !DILocation(line: 190, column: 33, scope: !4318)
!4327 = !DILocation(line: 190, column: 18, scope: !4318)
!4328 = !DILocation(line: 192, column: 8, scope: !4329)
!4329 = distinct !DILexicalBlock(scope: !4318, file: !71, line: 192, column: 8)
!4330 = !DILocation(line: 192, column: 15, scope: !4329)
!4331 = !DILocation(line: 192, column: 13, scope: !4329)
!4332 = !DILocation(line: 192, column: 8, scope: !4318)
!4333 = !DILocation(line: 193, column: 4, scope: !4329)
!4334 = !DILocation(line: 194, column: 13, scope: !4335)
!4335 = distinct !DILexicalBlock(scope: !4329, file: !71, line: 194, column: 13)
!4336 = !DILocation(line: 194, column: 20, scope: !4335)
!4337 = !DILocation(line: 194, column: 18, scope: !4335)
!4338 = !DILocation(line: 194, column: 13, scope: !4329)
!4339 = !DILocation(line: 195, column: 4, scope: !4335)
!4340 = !DILocation(line: 196, column: 2, scope: !4318)
!4341 = !DILocation(line: 187, column: 40, scope: !4313)
!4342 = !DILocation(line: 187, column: 2, scope: !4313)
!4343 = distinct !{!4343, !4316, !4344}
!4344 = !DILocation(line: 196, column: 2, scope: !4309)
!4345 = !DILocation(line: 198, column: 2, scope: !4299)
!4346 = !DILocation(line: 199, column: 1, scope: !4299)
!4347 = distinct !DISubprogram(name: "cgc_Push", scope: !4348, file: !4348, line: 31, type: !4349, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4348 = !DIFile(filename: "challenges/3D_Image_Toolkit/src/3dc.c", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!4349 = !DISubroutineType(types: !4350)
!4350 = !{null, !4351, !4352}
!4351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4352, size: 64)
!4352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4353, size: 64)
!4353 = !DIDerivedType(tag: DW_TAG_typedef, name: "t3DCPixel", file: !4354, line: 57, baseType: !4355)
!4354 = !DIFile(filename: "challenges/3D_Image_Toolkit/src/cgc_3dc.h", directory: "/home/haoxin/haoxin-data/smu-research/cgc/cgc-env-64/cb-multios")
!4355 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !4354, line: 49, size: 80, elements: !4356)
!4356 = !{!4357, !4358, !4359, !4360, !4361, !4362, !4363}
!4357 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !4355, file: !4354, line: 50, baseType: !114, size: 16)
!4358 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !4355, file: !4354, line: 51, baseType: !114, size: 16, offset: 16)
!4359 = !DIDerivedType(tag: DW_TAG_member, name: "z", scope: !4355, file: !4354, line: 52, baseType: !114, size: 16, offset: 32)
!4360 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !4355, file: !4354, line: 53, baseType: !59, size: 8, offset: 48)
!4361 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !4355, file: !4354, line: 54, baseType: !59, size: 8, offset: 56)
!4362 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !4355, file: !4354, line: 55, baseType: !59, size: 8, offset: 64)
!4363 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !4355, file: !4354, line: 56, baseType: !59, size: 8, offset: 72)
!4364 = !DILocalVariable(name: "px_list", arg: 1, scope: !4347, file: !4348, line: 31, type: !4351)
!4365 = !DILocation(line: 31, column: 27, scope: !4347)
!4366 = !DILocalVariable(name: "px", arg: 2, scope: !4347, file: !4348, line: 31, type: !4352)
!4367 = !DILocation(line: 31, column: 47, scope: !4347)
!4368 = !DILocation(line: 32, column: 9, scope: !4369)
!4369 = distinct !DILexicalBlock(scope: !4347, file: !4348, line: 32, column: 9)
!4370 = !DILocation(line: 32, column: 12, scope: !4369)
!4371 = !DILocation(line: 32, column: 9, scope: !4347)
!4372 = !DILocation(line: 33, column: 7, scope: !4369)
!4373 = !DILocation(line: 35, column: 9, scope: !4374)
!4374 = distinct !DILexicalBlock(scope: !4347, file: !4348, line: 35, column: 9)
!4375 = !DILocation(line: 35, column: 17, scope: !4374)
!4376 = !DILocation(line: 35, column: 9, scope: !4347)
!4377 = !DILocation(line: 36, column: 7, scope: !4374)
!4378 = !DILocalVariable(name: "i", scope: !4347, file: !4348, line: 38, type: !77)
!4379 = !DILocation(line: 38, column: 9, scope: !4347)
!4380 = !DILocalVariable(name: "new", scope: !4347, file: !4348, line: 40, type: !4352)
!4381 = !DILocation(line: 40, column: 16, scope: !4347)
!4382 = !DILocation(line: 40, column: 22, scope: !4347)
!4383 = !DILocation(line: 42, column: 16, scope: !4347)
!4384 = !DILocation(line: 42, column: 21, scope: !4347)
!4385 = !DILocation(line: 42, column: 5, scope: !4347)
!4386 = !DILocation(line: 44, column: 12, scope: !4387)
!4387 = distinct !DILexicalBlock(scope: !4347, file: !4348, line: 44, column: 5)
!4388 = !DILocation(line: 44, column: 10, scope: !4387)
!4389 = !DILocation(line: 44, column: 17, scope: !4390)
!4390 = distinct !DILexicalBlock(scope: !4387, file: !4348, line: 44, column: 5)
!4391 = !DILocation(line: 44, column: 19, scope: !4390)
!4392 = !DILocation(line: 44, column: 5, scope: !4387)
!4393 = !DILocation(line: 45, column: 11, scope: !4394)
!4394 = distinct !DILexicalBlock(scope: !4395, file: !4348, line: 45, column: 11)
!4395 = distinct !DILexicalBlock(scope: !4390, file: !4348, line: 44, column: 39)
!4396 = !DILocation(line: 45, column: 19, scope: !4394)
!4397 = !DILocation(line: 45, column: 22, scope: !4394)
!4398 = !DILocation(line: 45, column: 11, scope: !4395)
!4399 = !DILocation(line: 46, column: 24, scope: !4400)
!4400 = distinct !DILexicalBlock(scope: !4394, file: !4348, line: 45, column: 31)
!4401 = !DILocation(line: 46, column: 11, scope: !4400)
!4402 = !DILocation(line: 46, column: 19, scope: !4400)
!4403 = !DILocation(line: 46, column: 22, scope: !4400)
!4404 = !DILocation(line: 47, column: 11, scope: !4400)
!4405 = !DILocation(line: 49, column: 5, scope: !4395)
!4406 = !DILocation(line: 44, column: 35, scope: !4390)
!4407 = !DILocation(line: 44, column: 5, scope: !4390)
!4408 = distinct !{!4408, !4392, !4409}
!4409 = !DILocation(line: 49, column: 5, scope: !4387)
!4410 = !DILocation(line: 51, column: 5, scope: !4347)
!4411 = !DILocation(line: 52, column: 1, scope: !4347)
!4412 = distinct !DISubprogram(name: "cgc_RunTask", scope: !4348, file: !4348, line: 54, type: !4413, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4413 = !DISubroutineType(types: !4414)
!4414 = !{null, !4351, !4415, !114}
!4415 = !DIDerivedType(tag: DW_TAG_typedef, name: "task_callback", file: !4354, line: 59, baseType: !4416)
!4416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4417, size: 64)
!4417 = !DISubroutineType(types: !4418)
!4418 = !{null, !4352, !114}
!4419 = !DILocalVariable(name: "px_list", arg: 1, scope: !4412, file: !4348, line: 54, type: !4351)
!4420 = !DILocation(line: 54, column: 30, scope: !4412)
!4421 = !DILocalVariable(name: "exec_task", arg: 2, scope: !4412, file: !4348, line: 54, type: !4415)
!4422 = !DILocation(line: 54, column: 53, scope: !4412)
!4423 = !DILocalVariable(name: "fptr_arg", arg: 3, scope: !4412, file: !4348, line: 54, type: !114)
!4424 = !DILocation(line: 54, column: 72, scope: !4412)
!4425 = !DILocalVariable(name: "count", scope: !4412, file: !4348, line: 55, type: !114)
!4426 = !DILocation(line: 55, column: 11, scope: !4412)
!4427 = !DILocalVariable(name: "i", scope: !4412, file: !4348, line: 56, type: !114)
!4428 = !DILocation(line: 56, column: 11, scope: !4412)
!4429 = !DILocation(line: 58, column: 3, scope: !4412)
!4430 = !DILocation(line: 58, column: 15, scope: !4412)
!4431 = !DILocation(line: 59, column: 5, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4412, file: !4348, line: 58, column: 19)
!4433 = !DILocation(line: 59, column: 15, scope: !4432)
!4434 = !DILocation(line: 59, column: 24, scope: !4432)
!4435 = !DILocation(line: 59, column: 29, scope: !4432)
!4436 = distinct !{!4436, !4429, !4437}
!4437 = !DILocation(line: 61, column: 3, scope: !4412)
!4438 = !DILocation(line: 63, column: 3, scope: !4412)
!4439 = distinct !DISubprogram(name: "cgc_ReadFile", scope: !4348, file: !4348, line: 66, type: !4440, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4440 = !DISubroutineType(types: !4441)
!4441 = !{null, !4351}
!4442 = !DILocalVariable(name: "px_list", arg: 1, scope: !4439, file: !4348, line: 66, type: !4351)
!4443 = !DILocation(line: 66, column: 31, scope: !4439)
!4444 = !DILocalVariable(name: "dataSize", scope: !4439, file: !4348, line: 67, type: !308)
!4445 = !DILocation(line: 67, column: 11, scope: !4439)
!4446 = !DILocation(line: 68, column: 17, scope: !4439)
!4447 = !DILocation(line: 68, column: 3, scope: !4439)
!4448 = !DILocalVariable(name: "px", scope: !4439, file: !4348, line: 70, type: !4352)
!4449 = !DILocation(line: 70, column: 14, scope: !4439)
!4450 = !DILocalVariable(name: "offset", scope: !4439, file: !4348, line: 71, type: !30)
!4451 = !DILocation(line: 71, column: 12, scope: !4439)
!4452 = !DILocation(line: 73, column: 3, scope: !4439)
!4453 = !DILocation(line: 73, column: 9, scope: !4439)
!4454 = !DILocation(line: 73, column: 18, scope: !4439)
!4455 = !DILocation(line: 74, column: 10, scope: !4456)
!4456 = distinct !DILexicalBlock(scope: !4439, file: !4348, line: 73, column: 23)
!4457 = !DILocation(line: 74, column: 8, scope: !4456)
!4458 = !DILocation(line: 76, column: 23, scope: !4456)
!4459 = !DILocation(line: 76, column: 13, scope: !4456)
!4460 = !DILocation(line: 76, column: 5, scope: !4456)
!4461 = !DILocation(line: 76, column: 9, scope: !4456)
!4462 = !DILocation(line: 76, column: 11, scope: !4456)
!4463 = !DILocation(line: 77, column: 23, scope: !4456)
!4464 = !DILocation(line: 77, column: 13, scope: !4456)
!4465 = !DILocation(line: 77, column: 5, scope: !4456)
!4466 = !DILocation(line: 77, column: 9, scope: !4456)
!4467 = !DILocation(line: 77, column: 11, scope: !4456)
!4468 = !DILocation(line: 78, column: 23, scope: !4456)
!4469 = !DILocation(line: 78, column: 13, scope: !4456)
!4470 = !DILocation(line: 78, column: 5, scope: !4456)
!4471 = !DILocation(line: 78, column: 9, scope: !4456)
!4472 = !DILocation(line: 78, column: 11, scope: !4456)
!4473 = !DILocation(line: 79, column: 23, scope: !4456)
!4474 = !DILocation(line: 79, column: 13, scope: !4456)
!4475 = !DILocation(line: 79, column: 5, scope: !4456)
!4476 = !DILocation(line: 79, column: 9, scope: !4456)
!4477 = !DILocation(line: 79, column: 11, scope: !4456)
!4478 = !DILocation(line: 80, column: 23, scope: !4456)
!4479 = !DILocation(line: 80, column: 13, scope: !4456)
!4480 = !DILocation(line: 80, column: 5, scope: !4456)
!4481 = !DILocation(line: 80, column: 9, scope: !4456)
!4482 = !DILocation(line: 80, column: 11, scope: !4456)
!4483 = !DILocation(line: 81, column: 23, scope: !4456)
!4484 = !DILocation(line: 81, column: 13, scope: !4456)
!4485 = !DILocation(line: 81, column: 5, scope: !4456)
!4486 = !DILocation(line: 81, column: 9, scope: !4456)
!4487 = !DILocation(line: 81, column: 11, scope: !4456)
!4488 = !DILocation(line: 82, column: 23, scope: !4456)
!4489 = !DILocation(line: 82, column: 13, scope: !4456)
!4490 = !DILocation(line: 82, column: 5, scope: !4456)
!4491 = !DILocation(line: 82, column: 9, scope: !4456)
!4492 = !DILocation(line: 82, column: 11, scope: !4456)
!4493 = !DILocation(line: 84, column: 14, scope: !4456)
!4494 = !DILocation(line: 84, column: 23, scope: !4456)
!4495 = !DILocation(line: 84, column: 5, scope: !4456)
!4496 = !DILocation(line: 86, column: 14, scope: !4456)
!4497 = !DILocation(line: 88, column: 14, scope: !4456)
!4498 = !DILocation(line: 88, column: 5, scope: !4456)
!4499 = distinct !{!4499, !4452, !4500}
!4500 = !DILocation(line: 89, column: 3, scope: !4439)
!4501 = !DILocation(line: 91, column: 1, scope: !4439)
!4502 = distinct !DISubprogram(name: "cgc_NewFile", scope: !4348, file: !4348, line: 93, type: !4503, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4503 = !DISubroutineType(types: !4504)
!4504 = !{null, !4351, !19}
!4505 = !DILocalVariable(name: "px_list", arg: 1, scope: !4502, file: !4348, line: 93, type: !4351)
!4506 = !DILocation(line: 93, column: 30, scope: !4502)
!4507 = !DILocalVariable(name: "buf", arg: 2, scope: !4502, file: !4348, line: 93, type: !19)
!4508 = !DILocation(line: 93, column: 45, scope: !4502)
!4509 = !DILocalVariable(name: "maxSize", scope: !4502, file: !4348, line: 94, type: !57)
!4510 = !DILocation(line: 94, column: 12, scope: !4502)
!4511 = !DILocation(line: 95, column: 64, scope: !4502)
!4512 = !DILocation(line: 95, column: 3, scope: !4502)
!4513 = !DILocation(line: 96, column: 21, scope: !4502)
!4514 = !DILocation(line: 96, column: 26, scope: !4502)
!4515 = !DILocation(line: 96, column: 3, scope: !4502)
!4516 = !DILocalVariable(name: "offset", scope: !4502, file: !4348, line: 98, type: !57)
!4517 = !DILocation(line: 98, column: 12, scope: !4502)
!4518 = !DILocalVariable(name: "i", scope: !4502, file: !4348, line: 99, type: !57)
!4519 = !DILocation(line: 99, column: 12, scope: !4502)
!4520 = !DILocalVariable(name: "tmp", scope: !4502, file: !4348, line: 100, type: !4352)
!4521 = !DILocation(line: 100, column: 14, scope: !4502)
!4522 = !DILocation(line: 102, column: 3, scope: !4502)
!4523 = !DILocation(line: 102, column: 10, scope: !4502)
!4524 = !DILocation(line: 102, column: 19, scope: !4502)
!4525 = !DILocation(line: 102, column: 17, scope: !4502)
!4526 = !DILocation(line: 103, column: 11, scope: !4527)
!4527 = distinct !DILexicalBlock(scope: !4502, file: !4348, line: 102, column: 28)
!4528 = !DILocation(line: 103, column: 20, scope: !4527)
!4529 = !DILocation(line: 103, column: 9, scope: !4527)
!4530 = !DILocation(line: 105, column: 17, scope: !4527)
!4531 = !DILocation(line: 105, column: 22, scope: !4527)
!4532 = !DILocation(line: 105, column: 16, scope: !4527)
!4533 = !DILocation(line: 105, column: 25, scope: !4527)
!4534 = !DILocation(line: 105, column: 29, scope: !4527)
!4535 = !DILocation(line: 105, column: 28, scope: !4527)
!4536 = !DILocation(line: 105, column: 5, scope: !4527)
!4537 = !DILocation(line: 106, column: 12, scope: !4527)
!4538 = !DILocation(line: 108, column: 17, scope: !4527)
!4539 = !DILocation(line: 108, column: 22, scope: !4527)
!4540 = !DILocation(line: 108, column: 16, scope: !4527)
!4541 = !DILocation(line: 108, column: 25, scope: !4527)
!4542 = !DILocation(line: 108, column: 29, scope: !4527)
!4543 = !DILocation(line: 108, column: 28, scope: !4527)
!4544 = !DILocation(line: 108, column: 5, scope: !4527)
!4545 = !DILocation(line: 109, column: 12, scope: !4527)
!4546 = !DILocation(line: 111, column: 17, scope: !4527)
!4547 = !DILocation(line: 111, column: 22, scope: !4527)
!4548 = !DILocation(line: 111, column: 16, scope: !4527)
!4549 = !DILocation(line: 111, column: 25, scope: !4527)
!4550 = !DILocation(line: 111, column: 29, scope: !4527)
!4551 = !DILocation(line: 111, column: 28, scope: !4527)
!4552 = !DILocation(line: 111, column: 5, scope: !4527)
!4553 = !DILocation(line: 112, column: 12, scope: !4527)
!4554 = !DILocation(line: 114, column: 17, scope: !4527)
!4555 = !DILocation(line: 114, column: 22, scope: !4527)
!4556 = !DILocation(line: 114, column: 25, scope: !4527)
!4557 = !DILocation(line: 114, column: 29, scope: !4527)
!4558 = !DILocation(line: 114, column: 28, scope: !4527)
!4559 = !DILocation(line: 114, column: 5, scope: !4527)
!4560 = !DILocation(line: 115, column: 12, scope: !4527)
!4561 = !DILocation(line: 117, column: 17, scope: !4527)
!4562 = !DILocation(line: 117, column: 22, scope: !4527)
!4563 = !DILocation(line: 117, column: 25, scope: !4527)
!4564 = !DILocation(line: 117, column: 29, scope: !4527)
!4565 = !DILocation(line: 117, column: 28, scope: !4527)
!4566 = !DILocation(line: 117, column: 5, scope: !4527)
!4567 = !DILocation(line: 118, column: 12, scope: !4527)
!4568 = !DILocation(line: 120, column: 17, scope: !4527)
!4569 = !DILocation(line: 120, column: 22, scope: !4527)
!4570 = !DILocation(line: 120, column: 25, scope: !4527)
!4571 = !DILocation(line: 120, column: 29, scope: !4527)
!4572 = !DILocation(line: 120, column: 28, scope: !4527)
!4573 = !DILocation(line: 120, column: 5, scope: !4527)
!4574 = !DILocation(line: 121, column: 12, scope: !4527)
!4575 = !DILocation(line: 123, column: 17, scope: !4527)
!4576 = !DILocation(line: 123, column: 22, scope: !4527)
!4577 = !DILocation(line: 123, column: 25, scope: !4527)
!4578 = !DILocation(line: 123, column: 29, scope: !4527)
!4579 = !DILocation(line: 123, column: 28, scope: !4527)
!4580 = !DILocation(line: 123, column: 5, scope: !4527)
!4581 = !DILocation(line: 124, column: 12, scope: !4527)
!4582 = distinct !{!4582, !4522, !4583}
!4583 = !DILocation(line: 126, column: 3, scope: !4502)
!4584 = !DILocation(line: 128, column: 3, scope: !4502)
!4585 = !DILocation(line: 130, column: 1, scope: !4502)
!4586 = distinct !DISubprogram(name: "cgc_ShowPixel", scope: !4348, file: !4348, line: 132, type: !4587, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4587 = !DISubroutineType(types: !4588)
!4588 = !{null, !4352}
!4589 = !DILocalVariable(name: "px", arg: 1, scope: !4586, file: !4348, line: 132, type: !4352)
!4590 = !DILocation(line: 132, column: 31, scope: !4586)
!4591 = !DILocation(line: 134, column: 38, scope: !4586)
!4592 = !DILocation(line: 134, column: 42, scope: !4586)
!4593 = !DILocation(line: 134, column: 45, scope: !4586)
!4594 = !DILocation(line: 134, column: 49, scope: !4586)
!4595 = !DILocation(line: 134, column: 52, scope: !4586)
!4596 = !DILocation(line: 134, column: 56, scope: !4586)
!4597 = !DILocation(line: 134, column: 3, scope: !4586)
!4598 = !DILocation(line: 135, column: 45, scope: !4586)
!4599 = !DILocation(line: 135, column: 49, scope: !4586)
!4600 = !DILocation(line: 135, column: 52, scope: !4586)
!4601 = !DILocation(line: 135, column: 56, scope: !4586)
!4602 = !DILocation(line: 135, column: 59, scope: !4586)
!4603 = !DILocation(line: 135, column: 63, scope: !4586)
!4604 = !DILocation(line: 135, column: 66, scope: !4586)
!4605 = !DILocation(line: 135, column: 70, scope: !4586)
!4606 = !DILocation(line: 135, column: 3, scope: !4586)
!4607 = !DILocation(line: 136, column: 3, scope: !4586)
!4608 = !DILocation(line: 138, column: 3, scope: !4586)
!4609 = distinct !DISubprogram(name: "cgc_CheckFile", scope: !4348, file: !4348, line: 142, type: !4610, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4610 = !DISubroutineType(types: !4611)
!4611 = !{null, !4351, !114}
!4612 = !DILocalVariable(name: "px", arg: 1, scope: !4609, file: !4348, line: 142, type: !4351)
!4613 = !DILocation(line: 142, column: 32, scope: !4609)
!4614 = !DILocalVariable(name: "num", arg: 2, scope: !4609, file: !4348, line: 142, type: !114)
!4615 = !DILocation(line: 142, column: 44, scope: !4609)
!4616 = !DILocation(line: 143, column: 7, scope: !4617)
!4617 = distinct !DILexicalBlock(scope: !4609, file: !4348, line: 143, column: 7)
!4618 = !DILocation(line: 143, column: 10, scope: !4617)
!4619 = !DILocation(line: 143, column: 7, scope: !4609)
!4620 = !DILocation(line: 144, column: 5, scope: !4617)
!4621 = !DILocalVariable(name: "i", scope: !4622, file: !4348, line: 146, type: !77)
!4622 = distinct !DILexicalBlock(scope: !4609, file: !4348, line: 146, column: 3)
!4623 = !DILocation(line: 146, column: 12, scope: !4622)
!4624 = !DILocation(line: 146, column: 8, scope: !4622)
!4625 = !DILocation(line: 146, column: 17, scope: !4626)
!4626 = distinct !DILexicalBlock(scope: !4622, file: !4348, line: 146, column: 3)
!4627 = !DILocation(line: 146, column: 21, scope: !4626)
!4628 = !DILocation(line: 146, column: 19, scope: !4626)
!4629 = !DILocation(line: 146, column: 3, scope: !4622)
!4630 = !DILocation(line: 147, column: 40, scope: !4631)
!4631 = distinct !DILexicalBlock(scope: !4626, file: !4348, line: 146, column: 31)
!4632 = !DILocation(line: 147, column: 43, scope: !4631)
!4633 = !DILocation(line: 147, column: 47, scope: !4631)
!4634 = !DILocation(line: 147, column: 50, scope: !4631)
!4635 = !DILocation(line: 147, column: 53, scope: !4631)
!4636 = !DILocation(line: 147, column: 57, scope: !4631)
!4637 = !DILocation(line: 147, column: 60, scope: !4631)
!4638 = !DILocation(line: 147, column: 63, scope: !4631)
!4639 = !DILocation(line: 147, column: 67, scope: !4631)
!4640 = !DILocation(line: 147, column: 5, scope: !4631)
!4641 = !DILocation(line: 148, column: 47, scope: !4631)
!4642 = !DILocation(line: 148, column: 50, scope: !4631)
!4643 = !DILocation(line: 148, column: 54, scope: !4631)
!4644 = !DILocation(line: 148, column: 57, scope: !4631)
!4645 = !DILocation(line: 148, column: 60, scope: !4631)
!4646 = !DILocation(line: 148, column: 64, scope: !4631)
!4647 = !DILocation(line: 148, column: 67, scope: !4631)
!4648 = !DILocation(line: 148, column: 70, scope: !4631)
!4649 = !DILocation(line: 148, column: 74, scope: !4631)
!4650 = !DILocation(line: 148, column: 77, scope: !4631)
!4651 = !DILocation(line: 148, column: 80, scope: !4631)
!4652 = !DILocation(line: 148, column: 84, scope: !4631)
!4653 = !DILocation(line: 148, column: 5, scope: !4631)
!4654 = !DILocation(line: 149, column: 5, scope: !4631)
!4655 = !DILocation(line: 150, column: 3, scope: !4631)
!4656 = !DILocation(line: 146, column: 27, scope: !4626)
!4657 = !DILocation(line: 146, column: 3, scope: !4626)
!4658 = distinct !{!4658, !4629, !4659}
!4659 = !DILocation(line: 150, column: 3, scope: !4622)
!4660 = !DILocation(line: 152, column: 1, scope: !4609)
!4661 = distinct !DISubprogram(name: "cgc_RotateX", scope: !4348, file: !4348, line: 155, type: !4417, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4662 = !DILocalVariable(name: "px", arg: 1, scope: !4661, file: !4348, line: 155, type: !4352)
!4663 = !DILocation(line: 155, column: 29, scope: !4661)
!4664 = !DILocalVariable(name: "degree", arg: 2, scope: !4661, file: !4348, line: 155, type: !114)
!4665 = !DILocation(line: 155, column: 41, scope: !4661)
!4666 = !DILocalVariable(name: "a", scope: !4661, file: !4348, line: 157, type: !61)
!4667 = !DILocation(line: 157, column: 10, scope: !4661)
!4668 = !DILocation(line: 157, column: 35, scope: !4661)
!4669 = !DILocation(line: 157, column: 14, scope: !4661)
!4670 = !DILocation(line: 159, column: 33, scope: !4661)
!4671 = !DILocation(line: 159, column: 37, scope: !4661)
!4672 = !DILocation(line: 159, column: 48, scope: !4661)
!4673 = !DILocation(line: 159, column: 40, scope: !4661)
!4674 = !DILocation(line: 159, column: 20, scope: !4661)
!4675 = !DILocation(line: 159, column: 11, scope: !4661)
!4676 = !DILocation(line: 159, column: 67, scope: !4661)
!4677 = !DILocation(line: 159, column: 71, scope: !4661)
!4678 = !DILocation(line: 159, column: 82, scope: !4661)
!4679 = !DILocation(line: 159, column: 74, scope: !4661)
!4680 = !DILocation(line: 159, column: 54, scope: !4661)
!4681 = !DILocation(line: 159, column: 52, scope: !4661)
!4682 = !DILocation(line: 159, column: 3, scope: !4661)
!4683 = !DILocation(line: 159, column: 7, scope: !4661)
!4684 = !DILocation(line: 159, column: 9, scope: !4661)
!4685 = !DILocation(line: 160, column: 33, scope: !4661)
!4686 = !DILocation(line: 160, column: 37, scope: !4661)
!4687 = !DILocation(line: 160, column: 48, scope: !4661)
!4688 = !DILocation(line: 160, column: 40, scope: !4661)
!4689 = !DILocation(line: 160, column: 20, scope: !4661)
!4690 = !DILocation(line: 160, column: 11, scope: !4661)
!4691 = !DILocation(line: 160, column: 67, scope: !4661)
!4692 = !DILocation(line: 160, column: 71, scope: !4661)
!4693 = !DILocation(line: 160, column: 82, scope: !4661)
!4694 = !DILocation(line: 160, column: 74, scope: !4661)
!4695 = !DILocation(line: 160, column: 54, scope: !4661)
!4696 = !DILocation(line: 160, column: 52, scope: !4661)
!4697 = !DILocation(line: 160, column: 3, scope: !4661)
!4698 = !DILocation(line: 160, column: 7, scope: !4661)
!4699 = !DILocation(line: 160, column: 9, scope: !4661)
!4700 = !DILocation(line: 162, column: 1, scope: !4661)
!4701 = distinct !DISubprogram(name: "cgc_degree_to_radian", scope: !4348, file: !4348, line: 295, type: !4702, scopeLine: 295, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4702 = !DISubroutineType(types: !4703)
!4703 = !{!114, !114}
!4704 = !DILocalVariable(name: "degree", arg: 1, scope: !4701, file: !4348, line: 295, type: !114)
!4705 = !DILocation(line: 295, column: 38, scope: !4701)
!4706 = !DILocation(line: 296, column: 23, scope: !4701)
!4707 = !DILocation(line: 296, column: 31, scope: !4701)
!4708 = !DILocation(line: 296, column: 10, scope: !4701)
!4709 = !DILocation(line: 296, column: 3, scope: !4701)
!4710 = distinct !DISubprogram(name: "cgc_multiply", scope: !4348, file: !4348, line: 287, type: !4711, scopeLine: 287, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4711 = !DISubroutineType(types: !4712)
!4712 = !{!308, !61, !61}
!4713 = !DILocalVariable(name: "a", arg: 1, scope: !4710, file: !4348, line: 287, type: !61)
!4714 = !DILocation(line: 287, column: 29, scope: !4710)
!4715 = !DILocalVariable(name: "b", arg: 2, scope: !4710, file: !4348, line: 287, type: !61)
!4716 = !DILocation(line: 287, column: 39, scope: !4710)
!4717 = !DILocation(line: 288, column: 28, scope: !4710)
!4718 = !DILocation(line: 288, column: 41, scope: !4710)
!4719 = !DILocation(line: 288, column: 30, scope: !4710)
!4720 = !DILocation(line: 288, column: 10, scope: !4710)
!4721 = !DILocation(line: 288, column: 3, scope: !4710)
!4722 = distinct !DISubprogram(name: "cgc_divide", scope: !4348, file: !4348, line: 291, type: !4723, scopeLine: 291, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4723 = !DISubroutineType(types: !4724)
!4724 = !{!114, !61, !61}
!4725 = !DILocalVariable(name: "a", arg: 1, scope: !4722, file: !4348, line: 291, type: !61)
!4726 = !DILocation(line: 291, column: 27, scope: !4722)
!4727 = !DILocalVariable(name: "b", arg: 2, scope: !4722, file: !4348, line: 291, type: !61)
!4728 = !DILocation(line: 291, column: 37, scope: !4722)
!4729 = !DILocation(line: 292, column: 28, scope: !4722)
!4730 = !DILocation(line: 292, column: 41, scope: !4722)
!4731 = !DILocation(line: 292, column: 30, scope: !4722)
!4732 = !DILocation(line: 292, column: 10, scope: !4722)
!4733 = !DILocation(line: 292, column: 3, scope: !4722)
!4734 = distinct !DISubprogram(name: "cgc_RotateY", scope: !4348, file: !4348, line: 164, type: !4417, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4735 = !DILocalVariable(name: "px", arg: 1, scope: !4734, file: !4348, line: 164, type: !4352)
!4736 = !DILocation(line: 164, column: 29, scope: !4734)
!4737 = !DILocalVariable(name: "degree", arg: 2, scope: !4734, file: !4348, line: 164, type: !114)
!4738 = !DILocation(line: 164, column: 41, scope: !4734)
!4739 = !DILocalVariable(name: "a", scope: !4734, file: !4348, line: 166, type: !61)
!4740 = !DILocation(line: 166, column: 10, scope: !4734)
!4741 = !DILocation(line: 166, column: 35, scope: !4734)
!4742 = !DILocation(line: 166, column: 14, scope: !4734)
!4743 = !DILocation(line: 168, column: 33, scope: !4734)
!4744 = !DILocation(line: 168, column: 37, scope: !4734)
!4745 = !DILocation(line: 168, column: 48, scope: !4734)
!4746 = !DILocation(line: 168, column: 40, scope: !4734)
!4747 = !DILocation(line: 168, column: 20, scope: !4734)
!4748 = !DILocation(line: 168, column: 11, scope: !4734)
!4749 = !DILocation(line: 168, column: 67, scope: !4734)
!4750 = !DILocation(line: 168, column: 71, scope: !4734)
!4751 = !DILocation(line: 168, column: 82, scope: !4734)
!4752 = !DILocation(line: 168, column: 74, scope: !4734)
!4753 = !DILocation(line: 168, column: 54, scope: !4734)
!4754 = !DILocation(line: 168, column: 52, scope: !4734)
!4755 = !DILocation(line: 168, column: 3, scope: !4734)
!4756 = !DILocation(line: 168, column: 7, scope: !4734)
!4757 = !DILocation(line: 168, column: 9, scope: !4734)
!4758 = !DILocation(line: 169, column: 33, scope: !4734)
!4759 = !DILocation(line: 169, column: 37, scope: !4734)
!4760 = !DILocation(line: 169, column: 48, scope: !4734)
!4761 = !DILocation(line: 169, column: 40, scope: !4734)
!4762 = !DILocation(line: 169, column: 20, scope: !4734)
!4763 = !DILocation(line: 169, column: 11, scope: !4734)
!4764 = !DILocation(line: 169, column: 67, scope: !4734)
!4765 = !DILocation(line: 169, column: 71, scope: !4734)
!4766 = !DILocation(line: 169, column: 82, scope: !4734)
!4767 = !DILocation(line: 169, column: 74, scope: !4734)
!4768 = !DILocation(line: 169, column: 54, scope: !4734)
!4769 = !DILocation(line: 169, column: 52, scope: !4734)
!4770 = !DILocation(line: 169, column: 3, scope: !4734)
!4771 = !DILocation(line: 169, column: 7, scope: !4734)
!4772 = !DILocation(line: 169, column: 9, scope: !4734)
!4773 = !DILocation(line: 171, column: 1, scope: !4734)
!4774 = distinct !DISubprogram(name: "cgc_RotateZ", scope: !4348, file: !4348, line: 173, type: !4417, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4775 = !DILocalVariable(name: "px", arg: 1, scope: !4774, file: !4348, line: 173, type: !4352)
!4776 = !DILocation(line: 173, column: 29, scope: !4774)
!4777 = !DILocalVariable(name: "degree", arg: 2, scope: !4774, file: !4348, line: 173, type: !114)
!4778 = !DILocation(line: 173, column: 41, scope: !4774)
!4779 = !DILocalVariable(name: "a", scope: !4774, file: !4348, line: 175, type: !61)
!4780 = !DILocation(line: 175, column: 10, scope: !4774)
!4781 = !DILocation(line: 175, column: 35, scope: !4774)
!4782 = !DILocation(line: 175, column: 14, scope: !4774)
!4783 = !DILocation(line: 177, column: 33, scope: !4774)
!4784 = !DILocation(line: 177, column: 37, scope: !4774)
!4785 = !DILocation(line: 177, column: 48, scope: !4774)
!4786 = !DILocation(line: 177, column: 40, scope: !4774)
!4787 = !DILocation(line: 177, column: 20, scope: !4774)
!4788 = !DILocation(line: 177, column: 11, scope: !4774)
!4789 = !DILocation(line: 177, column: 67, scope: !4774)
!4790 = !DILocation(line: 177, column: 71, scope: !4774)
!4791 = !DILocation(line: 177, column: 82, scope: !4774)
!4792 = !DILocation(line: 177, column: 74, scope: !4774)
!4793 = !DILocation(line: 177, column: 54, scope: !4774)
!4794 = !DILocation(line: 177, column: 52, scope: !4774)
!4795 = !DILocation(line: 177, column: 3, scope: !4774)
!4796 = !DILocation(line: 177, column: 7, scope: !4774)
!4797 = !DILocation(line: 177, column: 9, scope: !4774)
!4798 = !DILocation(line: 178, column: 33, scope: !4774)
!4799 = !DILocation(line: 178, column: 37, scope: !4774)
!4800 = !DILocation(line: 178, column: 48, scope: !4774)
!4801 = !DILocation(line: 178, column: 40, scope: !4774)
!4802 = !DILocation(line: 178, column: 20, scope: !4774)
!4803 = !DILocation(line: 178, column: 11, scope: !4774)
!4804 = !DILocation(line: 178, column: 67, scope: !4774)
!4805 = !DILocation(line: 178, column: 71, scope: !4774)
!4806 = !DILocation(line: 178, column: 82, scope: !4774)
!4807 = !DILocation(line: 178, column: 74, scope: !4774)
!4808 = !DILocation(line: 178, column: 54, scope: !4774)
!4809 = !DILocation(line: 178, column: 52, scope: !4774)
!4810 = !DILocation(line: 178, column: 3, scope: !4774)
!4811 = !DILocation(line: 178, column: 7, scope: !4774)
!4812 = !DILocation(line: 178, column: 9, scope: !4774)
!4813 = !DILocation(line: 180, column: 1, scope: !4774)
!4814 = distinct !DISubprogram(name: "cgc_SkewX", scope: !4348, file: !4348, line: 183, type: !4417, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4815 = !DILocalVariable(name: "px", arg: 1, scope: !4814, file: !4348, line: 183, type: !4352)
!4816 = !DILocation(line: 183, column: 27, scope: !4814)
!4817 = !DILocalVariable(name: "skew_val", arg: 2, scope: !4814, file: !4348, line: 183, type: !114)
!4818 = !DILocation(line: 183, column: 39, scope: !4814)
!4819 = !DILocation(line: 184, column: 23, scope: !4814)
!4820 = !DILocation(line: 184, column: 34, scope: !4814)
!4821 = !DILocation(line: 184, column: 38, scope: !4814)
!4822 = !DILocation(line: 184, column: 32, scope: !4814)
!4823 = !DILocation(line: 184, column: 13, scope: !4814)
!4824 = !DILocation(line: 184, column: 5, scope: !4814)
!4825 = !DILocation(line: 184, column: 9, scope: !4814)
!4826 = !DILocation(line: 184, column: 11, scope: !4814)
!4827 = !DILocation(line: 185, column: 1, scope: !4814)
!4828 = distinct !DISubprogram(name: "cgc_SkewY", scope: !4348, file: !4348, line: 187, type: !4417, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4829 = !DILocalVariable(name: "px", arg: 1, scope: !4828, file: !4348, line: 187, type: !4352)
!4830 = !DILocation(line: 187, column: 27, scope: !4828)
!4831 = !DILocalVariable(name: "skew_val", arg: 2, scope: !4828, file: !4348, line: 187, type: !114)
!4832 = !DILocation(line: 187, column: 39, scope: !4828)
!4833 = !DILocation(line: 188, column: 14, scope: !4828)
!4834 = !DILocation(line: 188, column: 5, scope: !4828)
!4835 = !DILocation(line: 188, column: 9, scope: !4828)
!4836 = !DILocation(line: 188, column: 11, scope: !4828)
!4837 = !DILocation(line: 189, column: 1, scope: !4828)
!4838 = distinct !DISubprogram(name: "cgc_SkewZ", scope: !4348, file: !4348, line: 191, type: !4417, scopeLine: 191, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4839 = !DILocalVariable(name: "px", arg: 1, scope: !4838, file: !4348, line: 191, type: !4352)
!4840 = !DILocation(line: 191, column: 27, scope: !4838)
!4841 = !DILocalVariable(name: "skew_val", arg: 2, scope: !4838, file: !4348, line: 191, type: !114)
!4842 = !DILocation(line: 191, column: 39, scope: !4838)
!4843 = !DILocation(line: 192, column: 14, scope: !4838)
!4844 = !DILocation(line: 192, column: 5, scope: !4838)
!4845 = !DILocation(line: 192, column: 9, scope: !4838)
!4846 = !DILocation(line: 192, column: 11, scope: !4838)
!4847 = !DILocation(line: 193, column: 1, scope: !4838)
!4848 = distinct !DISubprogram(name: "cgc_Scale", scope: !4348, file: !4348, line: 195, type: !4417, scopeLine: 195, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4849 = !DILocalVariable(name: "px", arg: 1, scope: !4848, file: !4348, line: 195, type: !4352)
!4850 = !DILocation(line: 195, column: 27, scope: !4848)
!4851 = !DILocalVariable(name: "scale_val", arg: 2, scope: !4848, file: !4348, line: 195, type: !114)
!4852 = !DILocation(line: 195, column: 39, scope: !4848)
!4853 = !DILocation(line: 196, column: 7, scope: !4854)
!4854 = distinct !DILexicalBlock(scope: !4848, file: !4348, line: 196, column: 7)
!4855 = !DILocation(line: 196, column: 17, scope: !4854)
!4856 = !DILocation(line: 196, column: 21, scope: !4854)
!4857 = !DILocation(line: 196, column: 23, scope: !4854)
!4858 = !DILocation(line: 196, column: 33, scope: !4854)
!4859 = !DILocation(line: 196, column: 7, scope: !4848)
!4860 = !DILocation(line: 197, column: 5, scope: !4861)
!4861 = distinct !DILexicalBlock(scope: !4854, file: !4348, line: 196, column: 40)
!4862 = !DILocalVariable(name: "percent", scope: !4848, file: !4348, line: 200, type: !61)
!4863 = !DILocation(line: 200, column: 10, scope: !4848)
!4864 = !DILocation(line: 200, column: 31, scope: !4848)
!4865 = !DILocation(line: 200, column: 20, scope: !4848)
!4866 = !DILocalVariable(name: "tmp_x", scope: !4848, file: !4348, line: 202, type: !308)
!4867 = !DILocation(line: 202, column: 11, scope: !4848)
!4868 = !DILocalVariable(name: "tmp_y", scope: !4848, file: !4348, line: 202, type: !308)
!4869 = !DILocation(line: 202, column: 18, scope: !4848)
!4870 = !DILocalVariable(name: "tmp_z", scope: !4848, file: !4348, line: 202, type: !308)
!4871 = !DILocation(line: 202, column: 25, scope: !4848)
!4872 = !DILocation(line: 204, column: 24, scope: !4848)
!4873 = !DILocation(line: 204, column: 28, scope: !4848)
!4874 = !DILocation(line: 204, column: 31, scope: !4848)
!4875 = !DILocation(line: 204, column: 11, scope: !4848)
!4876 = !DILocation(line: 204, column: 9, scope: !4848)
!4877 = !DILocation(line: 205, column: 24, scope: !4848)
!4878 = !DILocation(line: 205, column: 28, scope: !4848)
!4879 = !DILocation(line: 205, column: 31, scope: !4848)
!4880 = !DILocation(line: 205, column: 11, scope: !4848)
!4881 = !DILocation(line: 205, column: 9, scope: !4848)
!4882 = !DILocation(line: 206, column: 24, scope: !4848)
!4883 = !DILocation(line: 206, column: 28, scope: !4848)
!4884 = !DILocation(line: 206, column: 31, scope: !4848)
!4885 = !DILocation(line: 206, column: 11, scope: !4848)
!4886 = !DILocation(line: 206, column: 9, scope: !4848)
!4887 = !DILocation(line: 208, column: 7, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4848, file: !4348, line: 208, column: 7)
!4889 = !DILocation(line: 208, column: 13, scope: !4888)
!4890 = !DILocation(line: 208, column: 7, scope: !4848)
!4891 = !DILocation(line: 209, column: 8, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4893, file: !4348, line: 209, column: 8)
!4893 = distinct !DILexicalBlock(scope: !4888, file: !4348, line: 208, column: 23)
!4894 = !DILocation(line: 209, column: 12, scope: !4892)
!4895 = !DILocation(line: 209, column: 14, scope: !4892)
!4896 = !DILocation(line: 209, column: 8, scope: !4893)
!4897 = !DILocation(line: 210, column: 7, scope: !4898)
!4898 = distinct !DILexicalBlock(scope: !4892, file: !4348, line: 209, column: 19)
!4899 = !DILocation(line: 210, column: 11, scope: !4898)
!4900 = !DILocation(line: 210, column: 13, scope: !4898)
!4901 = !DILocation(line: 211, column: 5, scope: !4898)
!4902 = !DILocation(line: 212, column: 7, scope: !4903)
!4903 = distinct !DILexicalBlock(scope: !4892, file: !4348, line: 211, column: 12)
!4904 = !DILocation(line: 212, column: 11, scope: !4903)
!4905 = !DILocation(line: 212, column: 13, scope: !4903)
!4906 = !DILocation(line: 214, column: 3, scope: !4893)
!4907 = !DILocation(line: 215, column: 22, scope: !4908)
!4908 = distinct !DILexicalBlock(scope: !4888, file: !4348, line: 214, column: 10)
!4909 = !DILocation(line: 215, column: 13, scope: !4908)
!4910 = !DILocation(line: 215, column: 5, scope: !4908)
!4911 = !DILocation(line: 215, column: 9, scope: !4908)
!4912 = !DILocation(line: 215, column: 11, scope: !4908)
!4913 = !DILocation(line: 218, column: 7, scope: !4914)
!4914 = distinct !DILexicalBlock(scope: !4848, file: !4348, line: 218, column: 7)
!4915 = !DILocation(line: 218, column: 13, scope: !4914)
!4916 = !DILocation(line: 218, column: 7, scope: !4848)
!4917 = !DILocation(line: 219, column: 8, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4919, file: !4348, line: 219, column: 8)
!4919 = distinct !DILexicalBlock(scope: !4914, file: !4348, line: 218, column: 23)
!4920 = !DILocation(line: 219, column: 12, scope: !4918)
!4921 = !DILocation(line: 219, column: 14, scope: !4918)
!4922 = !DILocation(line: 219, column: 8, scope: !4919)
!4923 = !DILocation(line: 220, column: 7, scope: !4924)
!4924 = distinct !DILexicalBlock(scope: !4918, file: !4348, line: 219, column: 19)
!4925 = !DILocation(line: 220, column: 11, scope: !4924)
!4926 = !DILocation(line: 220, column: 13, scope: !4924)
!4927 = !DILocation(line: 221, column: 5, scope: !4924)
!4928 = !DILocation(line: 222, column: 7, scope: !4929)
!4929 = distinct !DILexicalBlock(scope: !4918, file: !4348, line: 221, column: 12)
!4930 = !DILocation(line: 222, column: 11, scope: !4929)
!4931 = !DILocation(line: 222, column: 13, scope: !4929)
!4932 = !DILocation(line: 224, column: 3, scope: !4919)
!4933 = !DILocation(line: 225, column: 22, scope: !4934)
!4934 = distinct !DILexicalBlock(scope: !4914, file: !4348, line: 224, column: 10)
!4935 = !DILocation(line: 225, column: 13, scope: !4934)
!4936 = !DILocation(line: 225, column: 5, scope: !4934)
!4937 = !DILocation(line: 225, column: 9, scope: !4934)
!4938 = !DILocation(line: 225, column: 11, scope: !4934)
!4939 = !DILocation(line: 228, column: 7, scope: !4940)
!4940 = distinct !DILexicalBlock(scope: !4848, file: !4348, line: 228, column: 7)
!4941 = !DILocation(line: 228, column: 13, scope: !4940)
!4942 = !DILocation(line: 228, column: 7, scope: !4848)
!4943 = !DILocation(line: 229, column: 8, scope: !4944)
!4944 = distinct !DILexicalBlock(scope: !4945, file: !4348, line: 229, column: 8)
!4945 = distinct !DILexicalBlock(scope: !4940, file: !4348, line: 228, column: 23)
!4946 = !DILocation(line: 229, column: 12, scope: !4944)
!4947 = !DILocation(line: 229, column: 14, scope: !4944)
!4948 = !DILocation(line: 229, column: 8, scope: !4945)
!4949 = !DILocation(line: 230, column: 7, scope: !4950)
!4950 = distinct !DILexicalBlock(scope: !4944, file: !4348, line: 229, column: 19)
!4951 = !DILocation(line: 230, column: 11, scope: !4950)
!4952 = !DILocation(line: 230, column: 13, scope: !4950)
!4953 = !DILocation(line: 231, column: 5, scope: !4950)
!4954 = !DILocation(line: 232, column: 7, scope: !4955)
!4955 = distinct !DILexicalBlock(scope: !4944, file: !4348, line: 231, column: 12)
!4956 = !DILocation(line: 232, column: 11, scope: !4955)
!4957 = !DILocation(line: 232, column: 13, scope: !4955)
!4958 = !DILocation(line: 234, column: 3, scope: !4945)
!4959 = !DILocation(line: 235, column: 22, scope: !4960)
!4960 = distinct !DILexicalBlock(scope: !4940, file: !4348, line: 234, column: 10)
!4961 = !DILocation(line: 235, column: 13, scope: !4960)
!4962 = !DILocation(line: 235, column: 5, scope: !4960)
!4963 = !DILocation(line: 235, column: 9, scope: !4960)
!4964 = !DILocation(line: 235, column: 11, scope: !4960)
!4965 = !DILocation(line: 238, column: 1, scope: !4848)
!4966 = distinct !DISubprogram(name: "cgc_Brightness", scope: !4348, file: !4348, line: 241, type: !4417, scopeLine: 241, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4967 = !DILocalVariable(name: "px", arg: 1, scope: !4966, file: !4348, line: 241, type: !4352)
!4968 = !DILocation(line: 241, column: 32, scope: !4966)
!4969 = !DILocalVariable(name: "bright_val", arg: 2, scope: !4966, file: !4348, line: 241, type: !114)
!4970 = !DILocation(line: 241, column: 44, scope: !4966)
!4971 = !DILocation(line: 242, column: 7, scope: !4972)
!4972 = distinct !DILexicalBlock(scope: !4966, file: !4348, line: 242, column: 7)
!4973 = !DILocation(line: 242, column: 18, scope: !4972)
!4974 = !DILocation(line: 242, column: 26, scope: !4972)
!4975 = !DILocation(line: 242, column: 29, scope: !4972)
!4976 = !DILocation(line: 242, column: 40, scope: !4972)
!4977 = !DILocation(line: 242, column: 7, scope: !4966)
!4978 = !DILocation(line: 243, column: 5, scope: !4979)
!4979 = distinct !DILexicalBlock(scope: !4972, file: !4348, line: 242, column: 47)
!4980 = !DILocalVariable(name: "new_r", scope: !4966, file: !4348, line: 246, type: !114)
!4981 = !DILocation(line: 246, column: 11, scope: !4966)
!4982 = !DILocalVariable(name: "new_g", scope: !4966, file: !4348, line: 246, type: !114)
!4983 = !DILocation(line: 246, column: 18, scope: !4966)
!4984 = !DILocalVariable(name: "new_b", scope: !4966, file: !4348, line: 246, type: !114)
!4985 = !DILocation(line: 246, column: 25, scope: !4966)
!4986 = !DILocation(line: 248, column: 21, scope: !4966)
!4987 = !DILocation(line: 248, column: 25, scope: !4966)
!4988 = !DILocation(line: 248, column: 29, scope: !4966)
!4989 = !DILocation(line: 248, column: 27, scope: !4966)
!4990 = !DILocation(line: 248, column: 11, scope: !4966)
!4991 = !DILocation(line: 248, column: 9, scope: !4966)
!4992 = !DILocation(line: 249, column: 21, scope: !4966)
!4993 = !DILocation(line: 249, column: 25, scope: !4966)
!4994 = !DILocation(line: 249, column: 29, scope: !4966)
!4995 = !DILocation(line: 249, column: 27, scope: !4966)
!4996 = !DILocation(line: 249, column: 11, scope: !4966)
!4997 = !DILocation(line: 249, column: 9, scope: !4966)
!4998 = !DILocation(line: 250, column: 21, scope: !4966)
!4999 = !DILocation(line: 250, column: 25, scope: !4966)
!5000 = !DILocation(line: 250, column: 29, scope: !4966)
!5001 = !DILocation(line: 250, column: 27, scope: !4966)
!5002 = !DILocation(line: 250, column: 11, scope: !4966)
!5003 = !DILocation(line: 250, column: 9, scope: !4966)
!5004 = !DILocation(line: 252, column: 7, scope: !5005)
!5005 = distinct !DILexicalBlock(scope: !4966, file: !4348, line: 252, column: 7)
!5006 = !DILocation(line: 252, column: 13, scope: !5005)
!5007 = !DILocation(line: 252, column: 7, scope: !4966)
!5008 = !DILocation(line: 253, column: 5, scope: !5009)
!5009 = distinct !DILexicalBlock(scope: !5005, file: !4348, line: 252, column: 20)
!5010 = !DILocation(line: 253, column: 9, scope: !5009)
!5011 = !DILocation(line: 253, column: 11, scope: !5009)
!5012 = !DILocation(line: 254, column: 3, scope: !5009)
!5013 = !DILocation(line: 254, column: 14, scope: !5014)
!5014 = distinct !DILexicalBlock(scope: !5005, file: !4348, line: 254, column: 14)
!5015 = !DILocation(line: 254, column: 20, scope: !5014)
!5016 = !DILocation(line: 254, column: 14, scope: !5005)
!5017 = !DILocation(line: 255, column: 5, scope: !5018)
!5018 = distinct !DILexicalBlock(scope: !5014, file: !4348, line: 254, column: 25)
!5019 = !DILocation(line: 255, column: 9, scope: !5018)
!5020 = !DILocation(line: 255, column: 11, scope: !5018)
!5021 = !DILocation(line: 256, column: 3, scope: !5018)
!5022 = !DILocation(line: 257, column: 22, scope: !5023)
!5023 = distinct !DILexicalBlock(scope: !5014, file: !4348, line: 256, column: 10)
!5024 = !DILocation(line: 257, column: 13, scope: !5023)
!5025 = !DILocation(line: 257, column: 5, scope: !5023)
!5026 = !DILocation(line: 257, column: 9, scope: !5023)
!5027 = !DILocation(line: 257, column: 11, scope: !5023)
!5028 = !DILocation(line: 260, column: 7, scope: !5029)
!5029 = distinct !DILexicalBlock(scope: !4966, file: !4348, line: 260, column: 7)
!5030 = !DILocation(line: 260, column: 13, scope: !5029)
!5031 = !DILocation(line: 260, column: 7, scope: !4966)
!5032 = !DILocation(line: 261, column: 5, scope: !5033)
!5033 = distinct !DILexicalBlock(scope: !5029, file: !4348, line: 260, column: 20)
!5034 = !DILocation(line: 261, column: 9, scope: !5033)
!5035 = !DILocation(line: 261, column: 11, scope: !5033)
!5036 = !DILocation(line: 262, column: 3, scope: !5033)
!5037 = !DILocation(line: 262, column: 14, scope: !5038)
!5038 = distinct !DILexicalBlock(scope: !5029, file: !4348, line: 262, column: 14)
!5039 = !DILocation(line: 262, column: 20, scope: !5038)
!5040 = !DILocation(line: 262, column: 14, scope: !5029)
!5041 = !DILocation(line: 263, column: 5, scope: !5042)
!5042 = distinct !DILexicalBlock(scope: !5038, file: !4348, line: 262, column: 25)
!5043 = !DILocation(line: 263, column: 9, scope: !5042)
!5044 = !DILocation(line: 263, column: 11, scope: !5042)
!5045 = !DILocation(line: 264, column: 3, scope: !5042)
!5046 = !DILocation(line: 265, column: 22, scope: !5047)
!5047 = distinct !DILexicalBlock(scope: !5038, file: !4348, line: 264, column: 10)
!5048 = !DILocation(line: 265, column: 13, scope: !5047)
!5049 = !DILocation(line: 265, column: 5, scope: !5047)
!5050 = !DILocation(line: 265, column: 9, scope: !5047)
!5051 = !DILocation(line: 265, column: 11, scope: !5047)
!5052 = !DILocation(line: 268, column: 7, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !4966, file: !4348, line: 268, column: 7)
!5054 = !DILocation(line: 268, column: 13, scope: !5053)
!5055 = !DILocation(line: 268, column: 7, scope: !4966)
!5056 = !DILocation(line: 269, column: 5, scope: !5057)
!5057 = distinct !DILexicalBlock(scope: !5053, file: !4348, line: 268, column: 20)
!5058 = !DILocation(line: 269, column: 9, scope: !5057)
!5059 = !DILocation(line: 269, column: 11, scope: !5057)
!5060 = !DILocation(line: 270, column: 3, scope: !5057)
!5061 = !DILocation(line: 270, column: 14, scope: !5062)
!5062 = distinct !DILexicalBlock(scope: !5053, file: !4348, line: 270, column: 14)
!5063 = !DILocation(line: 270, column: 20, scope: !5062)
!5064 = !DILocation(line: 270, column: 14, scope: !5053)
!5065 = !DILocation(line: 271, column: 5, scope: !5066)
!5066 = distinct !DILexicalBlock(scope: !5062, file: !4348, line: 270, column: 25)
!5067 = !DILocation(line: 271, column: 9, scope: !5066)
!5068 = !DILocation(line: 271, column: 11, scope: !5066)
!5069 = !DILocation(line: 272, column: 3, scope: !5066)
!5070 = !DILocation(line: 273, column: 22, scope: !5071)
!5071 = distinct !DILexicalBlock(scope: !5062, file: !4348, line: 272, column: 10)
!5072 = !DILocation(line: 273, column: 13, scope: !5071)
!5073 = !DILocation(line: 273, column: 5, scope: !5071)
!5074 = !DILocation(line: 273, column: 9, scope: !5071)
!5075 = !DILocation(line: 273, column: 11, scope: !5071)
!5076 = !DILocation(line: 276, column: 3, scope: !4966)
!5077 = !DILocation(line: 277, column: 1, scope: !4966)
!5078 = distinct !DISubprogram(name: "cgc_Opacity", scope: !4348, file: !4348, line: 280, type: !4417, scopeLine: 280, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!5079 = !DILocalVariable(name: "px", arg: 1, scope: !5078, file: !4348, line: 280, type: !4352)
!5080 = !DILocation(line: 280, column: 29, scope: !5078)
!5081 = !DILocalVariable(name: "opacity_val", arg: 2, scope: !5078, file: !4348, line: 280, type: !114)
!5082 = !DILocation(line: 280, column: 41, scope: !5078)
!5083 = !DILocation(line: 282, column: 20, scope: !5078)
!5084 = !DILocation(line: 282, column: 11, scope: !5078)
!5085 = !DILocation(line: 282, column: 3, scope: !5078)
!5086 = !DILocation(line: 282, column: 7, scope: !5078)
!5087 = !DILocation(line: 282, column: 9, scope: !5078)
!5088 = !DILocation(line: 284, column: 1, scope: !5078)
!5089 = distinct !DISubprogram(name: "cgc_cosine", scope: !4348, file: !4348, line: 299, type: !5090, scopeLine: 299, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!5090 = !DISubroutineType(types: !5091)
!5091 = !{!61, !114}
!5092 = !DILocalVariable(name: "a", arg: 1, scope: !5089, file: !4348, line: 299, type: !114)
!5093 = !DILocation(line: 299, column: 27, scope: !5089)
!5094 = !DILocation(line: 300, column: 18, scope: !5089)
!5095 = !DILocation(line: 300, column: 10, scope: !5089)
!5096 = !DILocation(line: 300, column: 3, scope: !5089)
!5097 = distinct !DISubprogram(name: "cgc_sine", scope: !4348, file: !4348, line: 303, type: !5090, scopeLine: 303, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!5098 = !DILocalVariable(name: "a", arg: 1, scope: !5097, file: !4348, line: 303, type: !114)
!5099 = !DILocation(line: 303, column: 25, scope: !5097)
!5100 = !DILocation(line: 304, column: 18, scope: !5097)
!5101 = !DILocation(line: 304, column: 10, scope: !5097)
!5102 = !DILocation(line: 304, column: 3, scope: !5097)
!5103 = distinct !DISubprogram(name: "cgc_ClosestMatch", scope: !81, file: !81, line: 44, type: !5104, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !74, retainedNodes: !4)
!5104 = !DISubroutineType(types: !5105)
!5105 = !{!59, !59, !114}
!5106 = !DILocalVariable(name: "type", arg: 1, scope: !5103, file: !81, line: 44, type: !59)
!5107 = !DILocation(line: 44, column: 34, scope: !5103)
!5108 = !DILocalVariable(name: "val", arg: 2, scope: !5103, file: !81, line: 44, type: !114)
!5109 = !DILocation(line: 44, column: 48, scope: !5103)
!5110 = !DILocalVariable(name: "close_diff", scope: !5103, file: !81, line: 45, type: !59)
!5111 = !DILocation(line: 45, column: 11, scope: !5103)
!5112 = !DILocalVariable(name: "temp_diff", scope: !5103, file: !81, line: 46, type: !59)
!5113 = !DILocation(line: 46, column: 11, scope: !5103)
!5114 = !DILocalVariable(name: "max_idx", scope: !5103, file: !81, line: 47, type: !59)
!5115 = !DILocation(line: 47, column: 11, scope: !5103)
!5116 = !DILocation(line: 47, column: 23, scope: !5103)
!5117 = !DILocation(line: 47, column: 28, scope: !5103)
!5118 = !DILocation(line: 47, column: 33, scope: !5103)
!5119 = !DILocation(line: 47, column: 36, scope: !5103)
!5120 = !DILocation(line: 47, column: 41, scope: !5103)
!5121 = !DILocation(line: 47, column: 22, scope: !5103)
!5122 = !DILocation(line: 47, column: 21, scope: !5103)
!5123 = !DILocalVariable(name: "close_idx", scope: !5103, file: !81, line: 48, type: !59)
!5124 = !DILocation(line: 48, column: 11, scope: !5103)
!5125 = !DILocation(line: 48, column: 23, scope: !5103)
!5126 = !DILocalVariable(name: "i", scope: !5103, file: !81, line: 50, type: !77)
!5127 = !DILocation(line: 50, column: 7, scope: !5103)
!5128 = !DILocation(line: 52, column: 9, scope: !5129)
!5129 = distinct !DILexicalBlock(scope: !5103, file: !81, line: 52, column: 3)
!5130 = !DILocation(line: 52, column: 7, scope: !5129)
!5131 = !DILocation(line: 52, column: 14, scope: !5132)
!5132 = distinct !DILexicalBlock(scope: !5129, file: !81, line: 52, column: 3)
!5133 = !DILocation(line: 52, column: 18, scope: !5132)
!5134 = !DILocation(line: 52, column: 16, scope: !5132)
!5135 = !DILocation(line: 52, column: 3, scope: !5129)
!5136 = !DILocation(line: 53, column: 9, scope: !5137)
!5137 = distinct !DILexicalBlock(scope: !5138, file: !81, line: 53, column: 9)
!5138 = distinct !DILexicalBlock(scope: !5132, file: !81, line: 52, column: 32)
!5139 = !DILocation(line: 53, column: 14, scope: !5137)
!5140 = !DILocation(line: 53, column: 19, scope: !5137)
!5141 = !DILocation(line: 53, column: 22, scope: !5137)
!5142 = !DILocation(line: 53, column: 27, scope: !5137)
!5143 = !DILocation(line: 53, column: 9, scope: !5138)
!5144 = !DILocation(line: 54, column: 19, scope: !5137)
!5145 = !DILocation(line: 54, column: 17, scope: !5137)
!5146 = !DILocation(line: 54, column: 7, scope: !5137)
!5147 = !DILocation(line: 56, column: 19, scope: !5137)
!5148 = !DILocation(line: 56, column: 17, scope: !5137)
!5149 = !DILocation(line: 58, column: 9, scope: !5150)
!5150 = distinct !DILexicalBlock(scope: !5138, file: !81, line: 58, column: 9)
!5151 = !DILocation(line: 58, column: 21, scope: !5150)
!5152 = !DILocation(line: 58, column: 19, scope: !5150)
!5153 = !DILocation(line: 58, column: 9, scope: !5138)
!5154 = !DILocation(line: 59, column: 20, scope: !5155)
!5155 = distinct !DILexicalBlock(scope: !5150, file: !81, line: 58, column: 33)
!5156 = !DILocation(line: 59, column: 18, scope: !5155)
!5157 = !DILocation(line: 60, column: 19, scope: !5155)
!5158 = !DILocation(line: 60, column: 17, scope: !5155)
!5159 = !DILocation(line: 61, column: 5, scope: !5155)
!5160 = !DILocation(line: 62, column: 3, scope: !5138)
!5161 = !DILocation(line: 52, column: 28, scope: !5132)
!5162 = !DILocation(line: 52, column: 3, scope: !5132)
!5163 = distinct !{!5163, !5135, !5164}
!5164 = !DILocation(line: 62, column: 3, scope: !5129)
!5165 = !DILocation(line: 64, column: 10, scope: !5103)
!5166 = !DILocation(line: 64, column: 3, scope: !5103)
!5167 = distinct !DISubprogram(name: "cgc_Compress", scope: !81, file: !81, line: 68, type: !5168, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !74, retainedNodes: !4)
!5168 = !DISubroutineType(types: !5169)
!5169 = !{null, !5170, !69, !5182}
!5170 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5171, size: 64)
!5171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5172, size: 64)
!5172 = !DIDerivedType(tag: DW_TAG_typedef, name: "t3DCPixel", file: !4354, line: 57, baseType: !5173)
!5173 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !4354, line: 49, size: 80, elements: !5174)
!5174 = !{!5175, !5176, !5177, !5178, !5179, !5180, !5181}
!5175 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !5173, file: !4354, line: 50, baseType: !114, size: 16)
!5176 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !5173, file: !4354, line: 51, baseType: !114, size: 16, offset: 16)
!5177 = !DIDerivedType(tag: DW_TAG_member, name: "z", scope: !5173, file: !4354, line: 52, baseType: !114, size: 16, offset: 32)
!5178 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !5173, file: !4354, line: 53, baseType: !59, size: 8, offset: 48)
!5179 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !5173, file: !4354, line: 54, baseType: !59, size: 8, offset: 56)
!5180 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !5173, file: !4354, line: 55, baseType: !59, size: 8, offset: 64)
!5181 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !5173, file: !4354, line: 56, baseType: !59, size: 8, offset: 72)
!5182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !57, size: 64)
!5183 = !DILocalVariable(name: "px_list", arg: 1, scope: !5167, file: !81, line: 68, type: !5170)
!5184 = !DILocation(line: 68, column: 31, scope: !5167)
!5185 = !DILocalVariable(name: "compressed_data", arg: 2, scope: !5167, file: !81, line: 68, type: !69)
!5186 = !DILocation(line: 68, column: 49, scope: !5167)
!5187 = !DILocalVariable(name: "data_len", arg: 3, scope: !5167, file: !81, line: 68, type: !5182)
!5188 = !DILocation(line: 68, column: 76, scope: !5167)
!5189 = !DILocation(line: 69, column: 7, scope: !5190)
!5190 = distinct !DILexicalBlock(scope: !5167, file: !81, line: 69, column: 7)
!5191 = !DILocation(line: 69, column: 15, scope: !5190)
!5192 = !DILocation(line: 69, column: 7, scope: !5167)
!5193 = !DILocation(line: 70, column: 5, scope: !5194)
!5194 = distinct !DILexicalBlock(scope: !5190, file: !81, line: 69, column: 24)
!5195 = !DILocalVariable(name: "color", scope: !5167, file: !81, line: 73, type: !59)
!5196 = !DILocation(line: 73, column: 11, scope: !5167)
!5197 = !DILocalVariable(name: "coord", scope: !5167, file: !81, line: 74, type: !59)
!5198 = !DILocation(line: 74, column: 11, scope: !5167)
!5199 = !DILocalVariable(name: "px", scope: !5167, file: !81, line: 76, type: !5171)
!5200 = !DILocation(line: 76, column: 14, scope: !5167)
!5201 = !DILocalVariable(name: "count", scope: !5167, file: !81, line: 77, type: !57)
!5202 = !DILocation(line: 77, column: 12, scope: !5167)
!5203 = !DILocalVariable(name: "i", scope: !5167, file: !81, line: 78, type: !57)
!5204 = !DILocation(line: 78, column: 12, scope: !5167)
!5205 = !DILocalVariable(name: "p_idx", scope: !5167, file: !81, line: 79, type: !77)
!5206 = !DILocation(line: 79, column: 7, scope: !5167)
!5207 = !DILocation(line: 81, column: 3, scope: !5167)
!5208 = !DILocation(line: 81, column: 10, scope: !5167)
!5209 = !DILocation(line: 81, column: 14, scope: !5167)
!5210 = !DILocation(line: 81, column: 12, scope: !5167)
!5211 = !DILocation(line: 82, column: 11, scope: !5212)
!5212 = distinct !DILexicalBlock(scope: !5167, file: !81, line: 81, column: 21)
!5213 = !DILocation(line: 83, column: 10, scope: !5212)
!5214 = !DILocation(line: 83, column: 23, scope: !5212)
!5215 = !DILocation(line: 83, column: 8, scope: !5212)
!5216 = !DILocation(line: 85, column: 35, scope: !5212)
!5217 = !DILocation(line: 85, column: 39, scope: !5212)
!5218 = !DILocation(line: 85, column: 15, scope: !5212)
!5219 = !DILocation(line: 85, column: 42, scope: !5212)
!5220 = !DILocation(line: 85, column: 11, scope: !5212)
!5221 = !DILocation(line: 88, column: 35, scope: !5212)
!5222 = !DILocation(line: 88, column: 39, scope: !5212)
!5223 = !DILocation(line: 88, column: 15, scope: !5212)
!5224 = !DILocation(line: 88, column: 42, scope: !5212)
!5225 = !DILocation(line: 88, column: 11, scope: !5212)
!5226 = !DILocation(line: 91, column: 35, scope: !5212)
!5227 = !DILocation(line: 91, column: 39, scope: !5212)
!5228 = !DILocation(line: 91, column: 15, scope: !5212)
!5229 = !DILocation(line: 91, column: 42, scope: !5212)
!5230 = !DILocation(line: 91, column: 11, scope: !5212)
!5231 = !DILocation(line: 93, column: 16, scope: !5212)
!5232 = !DILocation(line: 93, column: 32, scope: !5212)
!5233 = !DILocation(line: 93, column: 31, scope: !5212)
!5234 = !DILocation(line: 93, column: 36, scope: !5212)
!5235 = !DILocation(line: 93, column: 40, scope: !5212)
!5236 = !DILocation(line: 93, column: 35, scope: !5212)
!5237 = !DILocation(line: 93, column: 5, scope: !5212)
!5238 = !DILocation(line: 94, column: 7, scope: !5212)
!5239 = !DILocation(line: 96, column: 16, scope: !5212)
!5240 = !DILocation(line: 96, column: 32, scope: !5212)
!5241 = !DILocation(line: 96, column: 31, scope: !5212)
!5242 = !DILocation(line: 96, column: 36, scope: !5212)
!5243 = !DILocation(line: 96, column: 40, scope: !5212)
!5244 = !DILocation(line: 96, column: 35, scope: !5212)
!5245 = !DILocation(line: 96, column: 5, scope: !5212)
!5246 = !DILocation(line: 97, column: 7, scope: !5212)
!5247 = !DILocation(line: 99, column: 16, scope: !5212)
!5248 = !DILocation(line: 99, column: 32, scope: !5212)
!5249 = !DILocation(line: 99, column: 31, scope: !5212)
!5250 = !DILocation(line: 99, column: 36, scope: !5212)
!5251 = !DILocation(line: 99, column: 40, scope: !5212)
!5252 = !DILocation(line: 99, column: 35, scope: !5212)
!5253 = !DILocation(line: 99, column: 5, scope: !5212)
!5254 = !DILocation(line: 100, column: 7, scope: !5212)
!5255 = !DILocation(line: 102, column: 16, scope: !5212)
!5256 = !DILocation(line: 102, column: 32, scope: !5212)
!5257 = !DILocation(line: 102, column: 31, scope: !5212)
!5258 = !DILocation(line: 102, column: 5, scope: !5212)
!5259 = !DILocation(line: 103, column: 6, scope: !5212)
!5260 = distinct !{!5260, !5207, !5261}
!5261 = !DILocation(line: 104, column: 3, scope: !5167)
!5262 = !DILocation(line: 106, column: 14, scope: !5167)
!5263 = !DILocation(line: 106, column: 24, scope: !5167)
!5264 = !DILocation(line: 106, column: 3, scope: !5167)
!5265 = !DILocation(line: 108, column: 3, scope: !5167)
!5266 = !DILocation(line: 109, column: 1, scope: !5167)
!5267 = distinct !DISubprogram(name: "cgc_Decompress", scope: !81, file: !81, line: 112, type: !5268, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !74, retainedNodes: !4)
!5268 = !DISubroutineType(types: !5269)
!5269 = !{null, !69, !69, !5182}
!5270 = !DILocalVariable(name: "in_data", arg: 1, scope: !5267, file: !81, line: 112, type: !69)
!5271 = !DILocation(line: 112, column: 30, scope: !5267)
!5272 = !DILocalVariable(name: "out_data", arg: 2, scope: !5267, file: !81, line: 112, type: !69)
!5273 = !DILocation(line: 112, column: 48, scope: !5267)
!5274 = !DILocalVariable(name: "data_len", arg: 3, scope: !5267, file: !81, line: 112, type: !5182)
!5275 = !DILocation(line: 112, column: 68, scope: !5267)
!5276 = !DILocalVariable(name: "in_offset", scope: !5267, file: !81, line: 113, type: !30)
!5277 = !DILocation(line: 113, column: 12, scope: !5267)
!5278 = !DILocalVariable(name: "out_offset", scope: !5267, file: !81, line: 114, type: !30)
!5279 = !DILocation(line: 114, column: 12, scope: !5267)
!5280 = !DILocalVariable(name: "p_idx", scope: !5267, file: !81, line: 116, type: !77)
!5281 = !DILocation(line: 116, column: 7, scope: !5267)
!5282 = !DILocalVariable(name: "color", scope: !5267, file: !81, line: 117, type: !59)
!5283 = !DILocation(line: 117, column: 11, scope: !5267)
!5284 = !DILocalVariable(name: "r", scope: !5267, file: !81, line: 118, type: !59)
!5285 = !DILocation(line: 118, column: 11, scope: !5267)
!5286 = !DILocalVariable(name: "g", scope: !5267, file: !81, line: 118, type: !59)
!5287 = !DILocation(line: 118, column: 13, scope: !5267)
!5288 = !DILocalVariable(name: "b", scope: !5267, file: !81, line: 118, type: !59)
!5289 = !DILocation(line: 118, column: 15, scope: !5267)
!5290 = !DILocation(line: 120, column: 3, scope: !5267)
!5291 = !DILocation(line: 120, column: 10, scope: !5267)
!5292 = !DILocation(line: 120, column: 23, scope: !5267)
!5293 = !DILocation(line: 120, column: 22, scope: !5267)
!5294 = !DILocation(line: 120, column: 20, scope: !5267)
!5295 = !DILocation(line: 121, column: 16, scope: !5296)
!5296 = distinct !DILexicalBlock(scope: !5267, file: !81, line: 120, column: 33)
!5297 = !DILocation(line: 121, column: 25, scope: !5296)
!5298 = !DILocation(line: 121, column: 24, scope: !5296)
!5299 = !DILocation(line: 121, column: 37, scope: !5296)
!5300 = !DILocation(line: 121, column: 45, scope: !5296)
!5301 = !DILocation(line: 121, column: 44, scope: !5296)
!5302 = !DILocation(line: 121, column: 5, scope: !5296)
!5303 = !DILocation(line: 122, column: 16, scope: !5296)
!5304 = !DILocation(line: 123, column: 15, scope: !5296)
!5305 = !DILocation(line: 125, column: 16, scope: !5296)
!5306 = !DILocation(line: 125, column: 25, scope: !5296)
!5307 = !DILocation(line: 125, column: 24, scope: !5296)
!5308 = !DILocation(line: 125, column: 37, scope: !5296)
!5309 = !DILocation(line: 125, column: 45, scope: !5296)
!5310 = !DILocation(line: 125, column: 44, scope: !5296)
!5311 = !DILocation(line: 125, column: 5, scope: !5296)
!5312 = !DILocation(line: 126, column: 16, scope: !5296)
!5313 = !DILocation(line: 127, column: 15, scope: !5296)
!5314 = !DILocation(line: 129, column: 16, scope: !5296)
!5315 = !DILocation(line: 129, column: 25, scope: !5296)
!5316 = !DILocation(line: 129, column: 24, scope: !5296)
!5317 = !DILocation(line: 129, column: 37, scope: !5296)
!5318 = !DILocation(line: 129, column: 45, scope: !5296)
!5319 = !DILocation(line: 129, column: 44, scope: !5296)
!5320 = !DILocation(line: 129, column: 5, scope: !5296)
!5321 = !DILocation(line: 130, column: 16, scope: !5296)
!5322 = !DILocation(line: 131, column: 15, scope: !5296)
!5323 = !DILocation(line: 133, column: 13, scope: !5296)
!5324 = !DILocation(line: 133, column: 30, scope: !5296)
!5325 = !DILocation(line: 133, column: 11, scope: !5296)
!5326 = !DILocation(line: 136, column: 19, scope: !5296)
!5327 = !DILocation(line: 136, column: 17, scope: !5296)
!5328 = !DILocation(line: 136, column: 26, scope: !5296)
!5329 = !DILocation(line: 136, column: 9, scope: !5296)
!5330 = !DILocation(line: 136, column: 7, scope: !5296)
!5331 = !DILocation(line: 139, column: 19, scope: !5296)
!5332 = !DILocation(line: 139, column: 17, scope: !5296)
!5333 = !DILocation(line: 139, column: 26, scope: !5296)
!5334 = !DILocation(line: 139, column: 9, scope: !5296)
!5335 = !DILocation(line: 139, column: 7, scope: !5296)
!5336 = !DILocation(line: 142, column: 18, scope: !5296)
!5337 = !DILocation(line: 142, column: 16, scope: !5296)
!5338 = !DILocation(line: 142, column: 25, scope: !5296)
!5339 = !DILocation(line: 142, column: 9, scope: !5296)
!5340 = !DILocation(line: 142, column: 7, scope: !5296)
!5341 = !DILocation(line: 144, column: 39, scope: !5296)
!5342 = !DILocation(line: 144, column: 30, scope: !5296)
!5343 = !DILocation(line: 144, column: 5, scope: !5296)
!5344 = !DILocation(line: 144, column: 24, scope: !5296)
!5345 = !DILocation(line: 144, column: 28, scope: !5296)
!5346 = !DILocation(line: 145, column: 36, scope: !5296)
!5347 = !DILocation(line: 145, column: 30, scope: !5296)
!5348 = !DILocation(line: 145, column: 5, scope: !5296)
!5349 = !DILocation(line: 145, column: 24, scope: !5296)
!5350 = !DILocation(line: 145, column: 28, scope: !5296)
!5351 = !DILocation(line: 146, column: 39, scope: !5296)
!5352 = !DILocation(line: 146, column: 30, scope: !5296)
!5353 = !DILocation(line: 146, column: 5, scope: !5296)
!5354 = !DILocation(line: 146, column: 24, scope: !5296)
!5355 = !DILocation(line: 146, column: 28, scope: !5296)
!5356 = !DILocation(line: 148, column: 5, scope: !5296)
!5357 = !DILocation(line: 148, column: 24, scope: !5296)
!5358 = !DILocation(line: 148, column: 28, scope: !5296)
!5359 = distinct !{!5359, !5290, !5360}
!5360 = !DILocation(line: 150, column: 3, scope: !5267)
!5361 = !DILocation(line: 152, column: 14, scope: !5267)
!5362 = !DILocation(line: 152, column: 24, scope: !5267)
!5363 = !DILocation(line: 152, column: 3, scope: !5267)
!5364 = !DILocation(line: 154, column: 3, scope: !5267)
!5365 = distinct !DISubprogram(name: "cgc_WriteOut", scope: !81, file: !81, line: 157, type: !5366, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !74, retainedNodes: !4)
!5366 = !DISubroutineType(types: !5367)
!5367 = !{null, !5170, !69, !57}
!5368 = !DILocalVariable(name: "px_list", arg: 1, scope: !5365, file: !81, line: 157, type: !5170)
!5369 = !DILocation(line: 157, column: 31, scope: !5365)
!5370 = !DILocalVariable(name: "data", arg: 2, scope: !5365, file: !81, line: 157, type: !69)
!5371 = !DILocation(line: 157, column: 49, scope: !5365)
!5372 = !DILocalVariable(name: "data_len", arg: 3, scope: !5365, file: !81, line: 157, type: !57)
!5373 = !DILocation(line: 157, column: 64, scope: !5365)
!5374 = !DILocation(line: 160, column: 7, scope: !5375)
!5375 = distinct !DILexicalBlock(scope: !5365, file: !81, line: 160, column: 7)
!5376 = !DILocation(line: 160, column: 15, scope: !5375)
!5377 = !DILocation(line: 160, column: 7, scope: !5365)
!5378 = !DILocation(line: 161, column: 5, scope: !5379)
!5379 = distinct !DILexicalBlock(scope: !5375, file: !81, line: 160, column: 24)
!5380 = !DILocalVariable(name: "offset", scope: !5365, file: !81, line: 164, type: !57)
!5381 = !DILocation(line: 164, column: 12, scope: !5365)
!5382 = !DILocalVariable(name: "i", scope: !5365, file: !81, line: 165, type: !57)
!5383 = !DILocation(line: 165, column: 12, scope: !5365)
!5384 = !DILocalVariable(name: "tmp", scope: !5365, file: !81, line: 166, type: !5171)
!5385 = !DILocation(line: 166, column: 14, scope: !5365)
!5386 = !DILocation(line: 168, column: 3, scope: !5365)
!5387 = !DILocation(line: 168, column: 10, scope: !5365)
!5388 = !DILocation(line: 168, column: 19, scope: !5365)
!5389 = !DILocation(line: 168, column: 17, scope: !5365)
!5390 = !DILocation(line: 169, column: 11, scope: !5391)
!5391 = distinct !DILexicalBlock(scope: !5365, file: !81, line: 168, column: 29)
!5392 = !DILocation(line: 169, column: 19, scope: !5391)
!5393 = !DILocation(line: 169, column: 9, scope: !5391)
!5394 = !DILocation(line: 171, column: 12, scope: !5391)
!5395 = !DILocation(line: 173, column: 17, scope: !5391)
!5396 = !DILocation(line: 173, column: 22, scope: !5391)
!5397 = !DILocation(line: 173, column: 25, scope: !5391)
!5398 = !DILocation(line: 173, column: 30, scope: !5391)
!5399 = !DILocation(line: 173, column: 29, scope: !5391)
!5400 = !DILocation(line: 173, column: 5, scope: !5391)
!5401 = !DILocation(line: 174, column: 11, scope: !5391)
!5402 = !DILocation(line: 175, column: 17, scope: !5391)
!5403 = !DILocation(line: 175, column: 22, scope: !5391)
!5404 = !DILocation(line: 175, column: 25, scope: !5391)
!5405 = !DILocation(line: 175, column: 30, scope: !5391)
!5406 = !DILocation(line: 175, column: 29, scope: !5391)
!5407 = !DILocation(line: 175, column: 5, scope: !5391)
!5408 = !DILocation(line: 176, column: 11, scope: !5391)
!5409 = !DILocation(line: 177, column: 17, scope: !5391)
!5410 = !DILocation(line: 177, column: 22, scope: !5391)
!5411 = !DILocation(line: 177, column: 25, scope: !5391)
!5412 = !DILocation(line: 177, column: 30, scope: !5391)
!5413 = !DILocation(line: 177, column: 29, scope: !5391)
!5414 = !DILocation(line: 177, column: 5, scope: !5391)
!5415 = !DILocation(line: 178, column: 11, scope: !5391)
!5416 = !DILocation(line: 179, column: 5, scope: !5391)
!5417 = !DILocation(line: 179, column: 10, scope: !5391)
!5418 = !DILocation(line: 179, column: 12, scope: !5391)
!5419 = !DILocation(line: 180, column: 11, scope: !5391)
!5420 = !DILocation(line: 182, column: 6, scope: !5391)
!5421 = distinct !{!5421, !5386, !5422}
!5422 = !DILocation(line: 184, column: 3, scope: !5365)
!5423 = !DILocation(line: 186, column: 1, scope: !5365)
!5424 = distinct !DISubprogram(name: "cgc_menu", scope: !94, file: !94, line: 55, type: !2917, scopeLine: 55, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !4)
!5425 = !DILocalVariable(name: "choice", scope: !5424, file: !94, line: 56, type: !20)
!5426 = !DILocation(line: 56, column: 8, scope: !5424)
!5427 = !DILocalVariable(name: "coord", scope: !5424, file: !94, line: 57, type: !20)
!5428 = !DILocation(line: 57, column: 8, scope: !5424)
!5429 = !DILocalVariable(name: "val", scope: !5424, file: !94, line: 58, type: !57)
!5430 = !DILocation(line: 58, column: 12, scope: !5424)
!5431 = !DILocalVariable(name: "new_init", scope: !5424, file: !94, line: 60, type: !5432)
!5432 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 32768, elements: !5433)
!5433 = !{!5434}
!5434 = !DISubrange(count: 4096)
!5435 = !DILocation(line: 60, column: 8, scope: !5424)
!5436 = !DILocalVariable(name: "last_shown", scope: !5424, file: !94, line: 61, type: !5437)
!5437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5438, size: 64)
!5438 = !DIDerivedType(tag: DW_TAG_typedef, name: "t3DCPixel", file: !4354, line: 57, baseType: !5439)
!5439 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !4354, line: 49, size: 80, elements: !5440)
!5440 = !{!5441, !5442, !5443, !5444, !5445, !5446, !5447}
!5441 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !5439, file: !4354, line: 50, baseType: !114, size: 16)
!5442 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !5439, file: !4354, line: 51, baseType: !114, size: 16, offset: 16)
!5443 = !DIDerivedType(tag: DW_TAG_member, name: "z", scope: !5439, file: !4354, line: 52, baseType: !114, size: 16, offset: 32)
!5444 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !5439, file: !4354, line: 53, baseType: !59, size: 8, offset: 48)
!5445 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !5439, file: !4354, line: 54, baseType: !59, size: 8, offset: 56)
!5446 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !5439, file: !4354, line: 55, baseType: !59, size: 8, offset: 64)
!5447 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !5439, file: !4354, line: 56, baseType: !59, size: 8, offset: 72)
!5448 = !DILocation(line: 61, column: 14, scope: !5424)
!5449 = !DILocalVariable(name: "out_data", scope: !5424, file: !94, line: 67, type: !5450)
!5450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !59, size: 24576, elements: !5451)
!5451 = !{!5452}
!5452 = !DISubrange(count: 3072)
!5453 = !DILocation(line: 67, column: 11, scope: !5424)
!5454 = !DILocalVariable(name: "in_data", scope: !5424, file: !94, line: 68, type: !5450)
!5455 = !DILocation(line: 68, column: 11, scope: !5424)
!5456 = !DILocalVariable(name: "compress_len", scope: !5424, file: !94, line: 71, type: !57)
!5457 = !DILocation(line: 71, column: 12, scope: !5424)
!5458 = !DILocalVariable(name: "decompress_flag", scope: !5424, file: !94, line: 72, type: !59)
!5459 = !DILocation(line: 72, column: 11, scope: !5424)
!5460 = !DILocalVariable(name: "pixelCount", scope: !5424, file: !94, line: 74, type: !57)
!5461 = !DILocation(line: 74, column: 12, scope: !5424)
!5462 = !DILocalVariable(name: "px_list", scope: !5424, file: !94, line: 76, type: !5463)
!5463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5437, size: 64)
!5464 = !DILocation(line: 76, column: 15, scope: !5424)
!5465 = !DILocation(line: 76, column: 36, scope: !5424)
!5466 = !DILocation(line: 76, column: 47, scope: !5424)
!5467 = !DILocation(line: 76, column: 25, scope: !5424)
!5468 = !DILocation(line: 77, column: 14, scope: !5424)
!5469 = !DILocation(line: 77, column: 26, scope: !5424)
!5470 = !DILocation(line: 77, column: 37, scope: !5424)
!5471 = !DILocation(line: 77, column: 3, scope: !5424)
!5472 = !DILocation(line: 79, column: 16, scope: !5424)
!5473 = !DILocation(line: 79, column: 3, scope: !5424)
!5474 = !DILocation(line: 81, column: 3, scope: !5424)
!5475 = !DILocation(line: 81, column: 9, scope: !5424)
!5476 = !DILocation(line: 82, column: 5, scope: !5477)
!5477 = distinct !DILexicalBlock(scope: !5424, file: !94, line: 81, column: 17)
!5478 = !DILocation(line: 84, column: 12, scope: !5477)
!5479 = !DILocation(line: 84, column: 5, scope: !5477)
!5480 = !DILocation(line: 87, column: 9, scope: !5481)
!5481 = distinct !DILexicalBlock(scope: !5482, file: !94, line: 86, column: 7)
!5482 = distinct !DILexicalBlock(scope: !5477, file: !94, line: 84, column: 20)
!5483 = !DILocation(line: 88, column: 20, scope: !5481)
!5484 = !DILocation(line: 88, column: 9, scope: !5481)
!5485 = !DILocation(line: 89, column: 21, scope: !5481)
!5486 = !DILocation(line: 89, column: 30, scope: !5481)
!5487 = !DILocation(line: 89, column: 9, scope: !5481)
!5488 = !DILocation(line: 90, column: 9, scope: !5481)
!5489 = !DILocation(line: 94, column: 9, scope: !5490)
!5490 = distinct !DILexicalBlock(scope: !5482, file: !94, line: 93, column: 7)
!5491 = !DILocation(line: 95, column: 23, scope: !5490)
!5492 = !DILocation(line: 95, column: 9, scope: !5490)
!5493 = !DILocation(line: 96, column: 9, scope: !5490)
!5494 = !DILocation(line: 100, column: 9, scope: !5495)
!5495 = distinct !DILexicalBlock(scope: !5482, file: !94, line: 99, column: 7)
!5496 = !DILocation(line: 101, column: 9, scope: !5495)
!5497 = !DILocation(line: 102, column: 27, scope: !5495)
!5498 = !DILocation(line: 102, column: 9, scope: !5495)
!5499 = !DILocation(line: 104, column: 16, scope: !5495)
!5500 = !DILocation(line: 104, column: 9, scope: !5495)
!5501 = !DILocation(line: 106, column: 25, scope: !5502)
!5502 = distinct !DILexicalBlock(scope: !5495, file: !94, line: 104, column: 23)
!5503 = !DILocation(line: 106, column: 45, scope: !5502)
!5504 = !DILocation(line: 106, column: 13, scope: !5502)
!5505 = !DILocation(line: 107, column: 13, scope: !5502)
!5506 = !DILocation(line: 109, column: 25, scope: !5502)
!5507 = !DILocation(line: 109, column: 45, scope: !5502)
!5508 = !DILocation(line: 109, column: 13, scope: !5502)
!5509 = !DILocation(line: 110, column: 13, scope: !5502)
!5510 = !DILocation(line: 112, column: 25, scope: !5502)
!5511 = !DILocation(line: 112, column: 45, scope: !5502)
!5512 = !DILocation(line: 112, column: 13, scope: !5502)
!5513 = !DILocation(line: 113, column: 13, scope: !5502)
!5514 = !DILocation(line: 115, column: 13, scope: !5502)
!5515 = !DILocation(line: 116, column: 13, scope: !5502)
!5516 = !DILocation(line: 118, column: 9, scope: !5495)
!5517 = !DILocation(line: 122, column: 9, scope: !5518)
!5518 = distinct !DILexicalBlock(scope: !5482, file: !94, line: 121, column: 7)
!5519 = !DILocation(line: 123, column: 9, scope: !5518)
!5520 = !DILocation(line: 124, column: 27, scope: !5518)
!5521 = !DILocation(line: 124, column: 9, scope: !5518)
!5522 = !DILocation(line: 125, column: 16, scope: !5518)
!5523 = !DILocation(line: 125, column: 9, scope: !5518)
!5524 = !DILocation(line: 127, column: 25, scope: !5525)
!5525 = distinct !DILexicalBlock(scope: !5518, file: !94, line: 125, column: 23)
!5526 = !DILocation(line: 127, column: 47, scope: !5525)
!5527 = !DILocation(line: 127, column: 13, scope: !5525)
!5528 = !DILocation(line: 128, column: 13, scope: !5525)
!5529 = !DILocation(line: 130, column: 25, scope: !5525)
!5530 = !DILocation(line: 130, column: 47, scope: !5525)
!5531 = !DILocation(line: 130, column: 13, scope: !5525)
!5532 = !DILocation(line: 131, column: 13, scope: !5525)
!5533 = !DILocation(line: 133, column: 25, scope: !5525)
!5534 = !DILocation(line: 133, column: 47, scope: !5525)
!5535 = !DILocation(line: 133, column: 13, scope: !5525)
!5536 = !DILocation(line: 134, column: 13, scope: !5525)
!5537 = !DILocation(line: 136, column: 13, scope: !5525)
!5538 = !DILocation(line: 137, column: 13, scope: !5525)
!5539 = !DILocation(line: 139, column: 9, scope: !5518)
!5540 = !DILocation(line: 143, column: 9, scope: !5541)
!5541 = distinct !DILexicalBlock(scope: !5482, file: !94, line: 142, column: 7)
!5542 = !DILocation(line: 144, column: 27, scope: !5541)
!5543 = !DILocation(line: 144, column: 9, scope: !5541)
!5544 = !DILocation(line: 145, column: 21, scope: !5541)
!5545 = !DILocation(line: 145, column: 50, scope: !5541)
!5546 = !DILocation(line: 145, column: 9, scope: !5541)
!5547 = !DILocation(line: 146, column: 9, scope: !5541)
!5548 = !DILocation(line: 150, column: 9, scope: !5549)
!5549 = distinct !DILexicalBlock(scope: !5482, file: !94, line: 149, column: 7)
!5550 = !DILocation(line: 151, column: 27, scope: !5549)
!5551 = !DILocation(line: 151, column: 9, scope: !5549)
!5552 = !DILocation(line: 152, column: 21, scope: !5549)
!5553 = !DILocation(line: 152, column: 55, scope: !5549)
!5554 = !DILocation(line: 152, column: 9, scope: !5549)
!5555 = !DILocation(line: 153, column: 9, scope: !5549)
!5556 = !DILocation(line: 157, column: 9, scope: !5557)
!5557 = distinct !DILexicalBlock(scope: !5482, file: !94, line: 156, column: 7)
!5558 = !DILocation(line: 158, column: 27, scope: !5557)
!5559 = !DILocation(line: 158, column: 9, scope: !5557)
!5560 = !DILocation(line: 159, column: 21, scope: !5557)
!5561 = !DILocation(line: 159, column: 43, scope: !5557)
!5562 = !DILocation(line: 159, column: 9, scope: !5557)
!5563 = !DILocation(line: 160, column: 9, scope: !5557)
!5564 = !DILocation(line: 164, column: 9, scope: !5565)
!5565 = distinct !DILexicalBlock(scope: !5482, file: !94, line: 163, column: 7)
!5566 = !DILocation(line: 165, column: 22, scope: !5565)
!5567 = !DILocation(line: 165, column: 31, scope: !5565)
!5568 = !DILocation(line: 165, column: 9, scope: !5565)
!5569 = !DILocation(line: 166, column: 25, scope: !5565)
!5570 = !DILocation(line: 167, column: 9, scope: !5565)
!5571 = !DILocation(line: 171, column: 9, scope: !5572)
!5572 = distinct !DILexicalBlock(scope: !5482, file: !94, line: 170, column: 7)
!5573 = !DILocation(line: 172, column: 12, scope: !5574)
!5574 = distinct !DILexicalBlock(scope: !5572, file: !94, line: 172, column: 12)
!5575 = !DILocation(line: 172, column: 25, scope: !5574)
!5576 = !DILocation(line: 172, column: 12, scope: !5572)
!5577 = !DILocation(line: 173, column: 11, scope: !5578)
!5578 = distinct !DILexicalBlock(scope: !5574, file: !94, line: 172, column: 31)
!5579 = !DILocation(line: 174, column: 11, scope: !5578)
!5580 = !DILocation(line: 175, column: 20, scope: !5581)
!5581 = distinct !DILexicalBlock(scope: !5574, file: !94, line: 175, column: 20)
!5582 = !DILocation(line: 175, column: 20, scope: !5574)
!5583 = !DILocation(line: 176, column: 11, scope: !5584)
!5584 = distinct !DILexicalBlock(scope: !5581, file: !94, line: 175, column: 37)
!5585 = !DILocation(line: 177, column: 11, scope: !5584)
!5586 = !DILocalVariable(name: "decompressed", scope: !5572, file: !94, line: 179, type: !69)
!5587 = !DILocation(line: 179, column: 18, scope: !5572)
!5588 = !DILocation(line: 179, column: 33, scope: !5572)
!5589 = !DILocation(line: 180, column: 24, scope: !5572)
!5590 = !DILocation(line: 180, column: 33, scope: !5572)
!5591 = !DILocation(line: 180, column: 9, scope: !5572)
!5592 = !DILocation(line: 181, column: 22, scope: !5572)
!5593 = !DILocation(line: 181, column: 31, scope: !5572)
!5594 = !DILocation(line: 181, column: 45, scope: !5572)
!5595 = !DILocation(line: 181, column: 9, scope: !5572)
!5596 = !DILocation(line: 182, column: 20, scope: !5572)
!5597 = !DILocation(line: 182, column: 30, scope: !5572)
!5598 = !DILocation(line: 182, column: 44, scope: !5572)
!5599 = !DILocation(line: 182, column: 9, scope: !5572)
!5600 = !DILocation(line: 184, column: 18, scope: !5572)
!5601 = !DILocation(line: 184, column: 9, scope: !5572)
!5602 = !DILocation(line: 185, column: 25, scope: !5572)
!5603 = !DILocation(line: 186, column: 9, scope: !5572)
!5604 = !DILocation(line: 190, column: 9, scope: !5605)
!5605 = distinct !DILexicalBlock(scope: !5482, file: !94, line: 189, column: 7)
!5606 = !DILocation(line: 191, column: 9, scope: !5605)
!5607 = !DILocation(line: 192, column: 27, scope: !5605)
!5608 = !DILocation(line: 192, column: 9, scope: !5605)
!5609 = !DILocation(line: 194, column: 13, scope: !5610)
!5610 = distinct !DILexicalBlock(scope: !5605, file: !94, line: 194, column: 13)
!5611 = !DILocation(line: 194, column: 19, scope: !5610)
!5612 = !DILocation(line: 194, column: 17, scope: !5610)
!5613 = !DILocation(line: 194, column: 30, scope: !5610)
!5614 = !DILocation(line: 194, column: 33, scope: !5610)
!5615 = !DILocation(line: 194, column: 37, scope: !5610)
!5616 = !DILocation(line: 194, column: 13, scope: !5605)
!5617 = !DILocalVariable(name: "tmp", scope: !5618, file: !94, line: 196, type: !5437)
!5618 = distinct !DILexicalBlock(scope: !5610, file: !94, line: 194, column: 43)
!5619 = !DILocation(line: 196, column: 22, scope: !5618)
!5620 = !DILocation(line: 196, column: 28, scope: !5618)
!5621 = !DILocation(line: 197, column: 22, scope: !5618)
!5622 = !DILocation(line: 197, column: 27, scope: !5618)
!5623 = !DILocation(line: 197, column: 35, scope: !5618)
!5624 = !DILocation(line: 197, column: 11, scope: !5618)
!5625 = !DILocation(line: 198, column: 25, scope: !5618)
!5626 = !DILocation(line: 198, column: 11, scope: !5618)
!5627 = !DILocation(line: 199, column: 24, scope: !5618)
!5628 = !DILocation(line: 199, column: 32, scope: !5618)
!5629 = !DILocation(line: 199, column: 22, scope: !5618)
!5630 = !DILocation(line: 200, column: 20, scope: !5618)
!5631 = !DILocation(line: 200, column: 11, scope: !5618)
!5632 = !DILocation(line: 202, column: 9, scope: !5618)
!5633 = !DILocation(line: 202, column: 20, scope: !5634)
!5634 = distinct !DILexicalBlock(scope: !5610, file: !94, line: 202, column: 20)
!5635 = !DILocation(line: 202, column: 31, scope: !5634)
!5636 = !DILocation(line: 202, column: 20, scope: !5610)
!5637 = !DILocation(line: 204, column: 11, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5634, file: !94, line: 202, column: 40)
!5639 = !DILocation(line: 205, column: 25, scope: !5638)
!5640 = !DILocation(line: 205, column: 11, scope: !5638)
!5641 = !DILocation(line: 207, column: 9, scope: !5638)
!5642 = !DILocation(line: 208, column: 11, scope: !5643)
!5643 = distinct !DILexicalBlock(scope: !5634, file: !94, line: 207, column: 16)
!5644 = !DILocation(line: 211, column: 9, scope: !5605)
!5645 = !DILocation(line: 215, column: 9, scope: !5646)
!5646 = distinct !DILexicalBlock(scope: !5482, file: !94, line: 214, column: 7)
!5647 = !DILocation(line: 216, column: 16, scope: !5646)
!5648 = !DILocation(line: 217, column: 18, scope: !5646)
!5649 = !DILocation(line: 217, column: 9, scope: !5646)
!5650 = !DILocation(line: 218, column: 9, scope: !5646)
!5651 = !DILocation(line: 222, column: 9, scope: !5652)
!5652 = distinct !DILexicalBlock(scope: !5482, file: !94, line: 221, column: 7)
!5653 = !DILocation(line: 223, column: 16, scope: !5652)
!5654 = !DILocation(line: 224, column: 18, scope: !5652)
!5655 = !DILocation(line: 224, column: 9, scope: !5652)
!5656 = !DILocation(line: 225, column: 9, scope: !5652)
!5657 = distinct !{!5657, !5474, !5658}
!5658 = !DILocation(line: 228, column: 3, scope: !5424)
!5659 = !DILocation(line: 229, column: 12, scope: !5424)
!5660 = !DILocation(line: 229, column: 3, scope: !5424)
!5661 = !DILocation(line: 230, column: 1, scope: !5424)
!5662 = distinct !DISubprogram(name: "main", scope: !94, file: !94, line: 232, type: !5663, scopeLine: 232, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !4)
!5663 = !DISubroutineType(types: !5664)
!5664 = !{!77, !77, !293}
!5665 = !DILocalVariable(name: "cgc_argc", arg: 1, scope: !5662, file: !94, line: 232, type: !77)
!5666 = !DILocation(line: 232, column: 14, scope: !5662)
!5667 = !DILocalVariable(name: "cgc_argv", arg: 2, scope: !5662, file: !94, line: 232, type: !293)
!5668 = !DILocation(line: 232, column: 30, scope: !5662)
!5669 = !DILocation(line: 234, column: 5, scope: !5662)
!5670 = !DILocation(line: 236, column: 5, scope: !5662)
!5671 = !DILocation(line: 238, column: 5, scope: !5662)
!5672 = distinct !DISubprogram(name: "klee_init_fds", scope: !126, file: !126, line: 110, type: !5673, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !121, retainedNodes: !4)
!5673 = !DISubroutineType(types: !5674)
!5674 = !{null, !32, !32, !32, !77, !77, !32}
!5675 = !DILocalVariable(name: "n_files", arg: 1, scope: !5672, file: !126, line: 110, type: !32)
!5676 = !DILocation(line: 110, column: 29, scope: !5672)
!5677 = !DILocalVariable(name: "file_length", arg: 2, scope: !5672, file: !126, line: 110, type: !32)
!5678 = !DILocation(line: 110, column: 47, scope: !5672)
!5679 = !DILocalVariable(name: "stdin_length", arg: 3, scope: !5672, file: !126, line: 111, type: !32)
!5680 = !DILocation(line: 111, column: 29, scope: !5672)
!5681 = !DILocalVariable(name: "sym_stdout_flag", arg: 4, scope: !5672, file: !126, line: 111, type: !77)
!5682 = !DILocation(line: 111, column: 47, scope: !5672)
!5683 = !DILocalVariable(name: "save_all_writes_flag", arg: 5, scope: !5672, file: !126, line: 112, type: !77)
!5684 = !DILocation(line: 112, column: 24, scope: !5672)
!5685 = !DILocalVariable(name: "max_failures", arg: 6, scope: !5672, file: !126, line: 112, type: !32)
!5686 = !DILocation(line: 112, column: 55, scope: !5672)
!5687 = !DILocalVariable(name: "k", scope: !5672, file: !126, line: 113, type: !32)
!5688 = !DILocation(line: 113, column: 12, scope: !5672)
!5689 = !DILocalVariable(name: "name", scope: !5672, file: !126, line: 114, type: !5690)
!5690 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 56, elements: !5691)
!5691 = !{!5692}
!5692 = !DISubrange(count: 7)
!5693 = !DILocation(line: 114, column: 8, scope: !5672)
!5694 = !DILocalVariable(name: "s", scope: !5672, file: !126, line: 115, type: !141)
!5695 = !DILocation(line: 115, column: 17, scope: !5672)
!5696 = !DILocation(line: 117, column: 3, scope: !5672)
!5697 = !DILocation(line: 119, column: 26, scope: !5672)
!5698 = !DILocation(line: 119, column: 24, scope: !5672)
!5699 = !DILocation(line: 120, column: 61, scope: !5672)
!5700 = !DILocation(line: 120, column: 59, scope: !5672)
!5701 = !DILocation(line: 120, column: 24, scope: !5672)
!5702 = !DILocation(line: 120, column: 22, scope: !5672)
!5703 = !DILocation(line: 121, column: 9, scope: !5704)
!5704 = distinct !DILexicalBlock(scope: !5672, file: !126, line: 121, column: 3)
!5705 = !DILocation(line: 121, column: 8, scope: !5704)
!5706 = !DILocation(line: 121, column: 13, scope: !5707)
!5707 = distinct !DILexicalBlock(scope: !5704, file: !126, line: 121, column: 3)
!5708 = !DILocation(line: 121, column: 17, scope: !5707)
!5709 = !DILocation(line: 121, column: 15, scope: !5707)
!5710 = !DILocation(line: 121, column: 3, scope: !5704)
!5711 = !DILocation(line: 122, column: 21, scope: !5712)
!5712 = distinct !DILexicalBlock(scope: !5707, file: !126, line: 121, column: 31)
!5713 = !DILocation(line: 122, column: 19, scope: !5712)
!5714 = !DILocation(line: 122, column: 15, scope: !5712)
!5715 = !DILocation(line: 122, column: 5, scope: !5712)
!5716 = !DILocation(line: 122, column: 13, scope: !5712)
!5717 = !DILocation(line: 123, column: 34, scope: !5712)
!5718 = !DILocation(line: 123, column: 44, scope: !5712)
!5719 = !DILocation(line: 123, column: 25, scope: !5712)
!5720 = !DILocation(line: 123, column: 48, scope: !5712)
!5721 = !DILocation(line: 123, column: 61, scope: !5712)
!5722 = !DILocation(line: 123, column: 5, scope: !5712)
!5723 = !DILocation(line: 121, column: 27, scope: !5707)
!5724 = !DILocation(line: 121, column: 3, scope: !5707)
!5725 = distinct !{!5725, !5710, !5726}
!5726 = !DILocation(line: 124, column: 3, scope: !5704)
!5727 = !DILocation(line: 127, column: 7, scope: !5728)
!5728 = distinct !DILexicalBlock(scope: !5672, file: !126, line: 127, column: 7)
!5729 = !DILocation(line: 127, column: 7, scope: !5672)
!5730 = !DILocation(line: 128, column: 26, scope: !5731)
!5731 = distinct !DILexicalBlock(scope: !5728, file: !126, line: 127, column: 21)
!5732 = !DILocation(line: 128, column: 24, scope: !5731)
!5733 = !DILocation(line: 129, column: 33, scope: !5731)
!5734 = !DILocation(line: 129, column: 44, scope: !5731)
!5735 = !DILocation(line: 129, column: 5, scope: !5731)
!5736 = !DILocation(line: 130, column: 39, scope: !5731)
!5737 = !DILocation(line: 130, column: 28, scope: !5731)
!5738 = !DILocation(line: 131, column: 3, scope: !5731)
!5739 = !DILocation(line: 132, column: 27, scope: !5728)
!5740 = !DILocation(line: 134, column: 27, scope: !5672)
!5741 = !DILocation(line: 134, column: 25, scope: !5672)
!5742 = !DILocation(line: 135, column: 16, scope: !5743)
!5743 = distinct !DILexicalBlock(scope: !5672, file: !126, line: 135, column: 7)
!5744 = !DILocation(line: 135, column: 7, scope: !5743)
!5745 = !DILocation(line: 135, column: 7, scope: !5672)
!5746 = !DILocation(line: 136, column: 26, scope: !5747)
!5747 = distinct !DILexicalBlock(scope: !5743, file: !126, line: 135, column: 30)
!5748 = !DILocation(line: 136, column: 24, scope: !5747)
!5749 = !DILocation(line: 137, column: 27, scope: !5747)
!5750 = !DILocation(line: 137, column: 25, scope: !5747)
!5751 = !DILocation(line: 138, column: 27, scope: !5747)
!5752 = !DILocation(line: 138, column: 25, scope: !5747)
!5753 = !DILocation(line: 139, column: 31, scope: !5747)
!5754 = !DILocation(line: 139, column: 29, scope: !5747)
!5755 = !DILocation(line: 140, column: 28, scope: !5747)
!5756 = !DILocation(line: 140, column: 26, scope: !5747)
!5757 = !DILocation(line: 142, column: 33, scope: !5747)
!5758 = !DILocation(line: 142, column: 24, scope: !5747)
!5759 = !DILocation(line: 142, column: 5, scope: !5747)
!5760 = !DILocation(line: 143, column: 33, scope: !5747)
!5761 = !DILocation(line: 143, column: 24, scope: !5747)
!5762 = !DILocation(line: 143, column: 5, scope: !5747)
!5763 = !DILocation(line: 144, column: 33, scope: !5747)
!5764 = !DILocation(line: 144, column: 24, scope: !5747)
!5765 = !DILocation(line: 144, column: 5, scope: !5747)
!5766 = !DILocation(line: 145, column: 33, scope: !5747)
!5767 = !DILocation(line: 145, column: 24, scope: !5747)
!5768 = !DILocation(line: 145, column: 5, scope: !5747)
!5769 = !DILocation(line: 146, column: 33, scope: !5747)
!5770 = !DILocation(line: 146, column: 24, scope: !5747)
!5771 = !DILocation(line: 146, column: 5, scope: !5747)
!5772 = !DILocation(line: 147, column: 3, scope: !5747)
!5773 = !DILocation(line: 150, column: 7, scope: !5774)
!5774 = distinct !DILexicalBlock(scope: !5672, file: !126, line: 150, column: 7)
!5775 = !DILocation(line: 150, column: 7, scope: !5672)
!5776 = !DILocation(line: 151, column: 27, scope: !5777)
!5777 = distinct !DILexicalBlock(scope: !5774, file: !126, line: 150, column: 24)
!5778 = !DILocation(line: 151, column: 25, scope: !5777)
!5779 = !DILocation(line: 152, column: 33, scope: !5777)
!5780 = !DILocation(line: 152, column: 5, scope: !5777)
!5781 = !DILocation(line: 153, column: 39, scope: !5777)
!5782 = !DILocation(line: 153, column: 28, scope: !5777)
!5783 = !DILocation(line: 154, column: 28, scope: !5777)
!5784 = !DILocation(line: 155, column: 3, scope: !5777)
!5785 = !DILocation(line: 156, column: 28, scope: !5774)
!5786 = !DILocation(line: 158, column: 31, scope: !5672)
!5787 = !DILocation(line: 158, column: 29, scope: !5672)
!5788 = !DILocation(line: 159, column: 23, scope: !5672)
!5789 = !DILocation(line: 159, column: 21, scope: !5672)
!5790 = !DILocation(line: 160, column: 25, scope: !5672)
!5791 = !DILocation(line: 160, column: 33, scope: !5672)
!5792 = !DILocation(line: 160, column: 15, scope: !5672)
!5793 = !DILocation(line: 160, column: 3, scope: !5672)
!5794 = !DILocation(line: 161, column: 1, scope: !5672)
!5795 = distinct !DISubprogram(name: "__create_new_dfile", scope: !126, file: !126, line: 46, type: !5796, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !121, retainedNodes: !4)
!5796 = !DISubroutineType(types: !5797)
!5797 = !{null, !133, !32, !273, !140}
!5798 = !DILocalVariable(name: "dfile", arg: 1, scope: !5795, file: !126, line: 46, type: !133)
!5799 = !DILocation(line: 46, column: 49, scope: !5795)
!5800 = !DILocalVariable(name: "size", arg: 2, scope: !5795, file: !126, line: 46, type: !32)
!5801 = !DILocation(line: 46, column: 65, scope: !5795)
!5802 = !DILocalVariable(name: "name", arg: 3, scope: !5795, file: !126, line: 47, type: !273)
!5803 = !DILocation(line: 47, column: 44, scope: !5795)
!5804 = !DILocalVariable(name: "defaults", arg: 4, scope: !5795, file: !126, line: 47, type: !140)
!5805 = !DILocation(line: 47, column: 65, scope: !5795)
!5806 = !DILocalVariable(name: "s", scope: !5795, file: !126, line: 48, type: !140)
!5807 = !DILocation(line: 48, column: 18, scope: !5795)
!5808 = !DILocation(line: 48, column: 22, scope: !5795)
!5809 = !DILocalVariable(name: "sp", scope: !5795, file: !126, line: 49, type: !273)
!5810 = !DILocation(line: 49, column: 15, scope: !5795)
!5811 = !DILocalVariable(name: "sname", scope: !5795, file: !126, line: 50, type: !5812)
!5812 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 512, elements: !5813)
!5813 = !{!5814}
!5814 = !DISubrange(count: 64)
!5815 = !DILocation(line: 50, column: 8, scope: !5795)
!5816 = !DILocation(line: 51, column: 11, scope: !5817)
!5817 = distinct !DILexicalBlock(scope: !5795, file: !126, line: 51, column: 3)
!5818 = !DILocation(line: 51, column: 10, scope: !5817)
!5819 = !DILocation(line: 51, column: 8, scope: !5817)
!5820 = !DILocation(line: 51, column: 18, scope: !5821)
!5821 = distinct !DILexicalBlock(scope: !5817, file: !126, line: 51, column: 3)
!5822 = !DILocation(line: 51, column: 17, scope: !5821)
!5823 = !DILocation(line: 51, column: 3, scope: !5817)
!5824 = !DILocation(line: 0, scope: !5795)
!5825 = !DILocation(line: 52, column: 22, scope: !5821)
!5826 = !DILocation(line: 52, column: 11, scope: !5821)
!5827 = !DILocation(line: 52, column: 14, scope: !5821)
!5828 = !DILocation(line: 52, column: 13, scope: !5821)
!5829 = !DILocation(line: 52, column: 5, scope: !5821)
!5830 = !DILocation(line: 52, column: 20, scope: !5821)
!5831 = !DILocation(line: 51, column: 22, scope: !5821)
!5832 = !DILocation(line: 51, column: 3, scope: !5821)
!5833 = distinct !{!5833, !5823, !5834}
!5834 = !DILocation(line: 52, column: 23, scope: !5817)
!5835 = !DILocation(line: 53, column: 20, scope: !5795)
!5836 = !DILocation(line: 53, column: 19, scope: !5795)
!5837 = !DILocation(line: 53, column: 11, scope: !5795)
!5838 = !DILocation(line: 53, column: 3, scope: !5795)
!5839 = !DILocation(line: 55, column: 3, scope: !5840)
!5840 = distinct !DILexicalBlock(scope: !5841, file: !126, line: 55, column: 3)
!5841 = distinct !DILexicalBlock(scope: !5795, file: !126, line: 55, column: 3)
!5842 = !DILocation(line: 55, column: 3, scope: !5841)
!5843 = !DILocation(line: 57, column: 17, scope: !5795)
!5844 = !DILocation(line: 57, column: 3, scope: !5795)
!5845 = !DILocation(line: 57, column: 10, scope: !5795)
!5846 = !DILocation(line: 57, column: 15, scope: !5795)
!5847 = !DILocation(line: 58, column: 28, scope: !5795)
!5848 = !DILocation(line: 58, column: 35, scope: !5795)
!5849 = !DILocation(line: 58, column: 21, scope: !5795)
!5850 = !DILocation(line: 58, column: 3, scope: !5795)
!5851 = !DILocation(line: 58, column: 10, scope: !5795)
!5852 = !DILocation(line: 58, column: 19, scope: !5795)
!5853 = !DILocation(line: 59, column: 22, scope: !5795)
!5854 = !DILocation(line: 59, column: 29, scope: !5795)
!5855 = !DILocation(line: 59, column: 39, scope: !5795)
!5856 = !DILocation(line: 59, column: 46, scope: !5795)
!5857 = !DILocation(line: 59, column: 52, scope: !5795)
!5858 = !DILocation(line: 59, column: 3, scope: !5795)
!5859 = !DILocation(line: 61, column: 22, scope: !5795)
!5860 = !DILocation(line: 61, column: 37, scope: !5795)
!5861 = !DILocation(line: 61, column: 3, scope: !5795)
!5862 = !DILocation(line: 64, column: 25, scope: !5863)
!5863 = distinct !DILexicalBlock(scope: !5795, file: !126, line: 64, column: 7)
!5864 = !DILocation(line: 64, column: 28, scope: !5863)
!5865 = !DILocation(line: 64, column: 8, scope: !5863)
!5866 = !DILocation(line: 64, column: 36, scope: !5863)
!5867 = !DILocation(line: 65, column: 8, scope: !5863)
!5868 = !DILocation(line: 65, column: 11, scope: !5863)
!5869 = !DILocation(line: 65, column: 18, scope: !5863)
!5870 = !DILocation(line: 65, column: 32, scope: !5863)
!5871 = !DILocation(line: 64, column: 7, scope: !5795)
!5872 = !DILocation(line: 66, column: 17, scope: !5863)
!5873 = !DILocation(line: 66, column: 27, scope: !5863)
!5874 = !DILocation(line: 66, column: 5, scope: !5863)
!5875 = !DILocation(line: 66, column: 8, scope: !5863)
!5876 = !DILocation(line: 66, column: 15, scope: !5863)
!5877 = !DILocation(line: 71, column: 16, scope: !5795)
!5878 = !DILocation(line: 71, column: 19, scope: !5795)
!5879 = !DILocation(line: 71, column: 26, scope: !5795)
!5880 = !DILocation(line: 71, column: 40, scope: !5795)
!5881 = !DILocation(line: 71, column: 15, scope: !5795)
!5882 = !DILocation(line: 71, column: 3, scope: !5795)
!5883 = !DILocation(line: 75, column: 16, scope: !5795)
!5884 = !DILocation(line: 75, column: 19, scope: !5795)
!5885 = !DILocation(line: 75, column: 30, scope: !5795)
!5886 = !DILocation(line: 75, column: 41, scope: !5795)
!5887 = !DILocation(line: 75, column: 15, scope: !5795)
!5888 = !DILocation(line: 75, column: 3, scope: !5795)
!5889 = !DILocation(line: 77, column: 19, scope: !5795)
!5890 = !DILocation(line: 77, column: 24, scope: !5795)
!5891 = !DILocation(line: 77, column: 27, scope: !5795)
!5892 = !DILocation(line: 77, column: 35, scope: !5795)
!5893 = !DILocation(line: 77, column: 22, scope: !5795)
!5894 = !DILocation(line: 77, column: 3, scope: !5795)
!5895 = !DILocation(line: 78, column: 19, scope: !5795)
!5896 = !DILocation(line: 78, column: 22, scope: !5795)
!5897 = !DILocation(line: 78, column: 25, scope: !5795)
!5898 = !DILocation(line: 78, column: 35, scope: !5795)
!5899 = !DILocation(line: 78, column: 45, scope: !5795)
!5900 = !DILocation(line: 78, column: 32, scope: !5795)
!5901 = !DILocation(line: 78, column: 3, scope: !5795)
!5902 = !DILocation(line: 79, column: 19, scope: !5795)
!5903 = !DILocation(line: 79, column: 22, scope: !5795)
!5904 = !DILocation(line: 79, column: 25, scope: !5795)
!5905 = !DILocation(line: 79, column: 36, scope: !5795)
!5906 = !DILocation(line: 79, column: 46, scope: !5795)
!5907 = !DILocation(line: 79, column: 33, scope: !5795)
!5908 = !DILocation(line: 79, column: 3, scope: !5795)
!5909 = !DILocation(line: 80, column: 19, scope: !5795)
!5910 = !DILocation(line: 80, column: 23, scope: !5795)
!5911 = !DILocation(line: 80, column: 26, scope: !5795)
!5912 = !DILocation(line: 80, column: 33, scope: !5795)
!5913 = !DILocation(line: 80, column: 40, scope: !5795)
!5914 = !DILocation(line: 80, column: 22, scope: !5795)
!5915 = !DILocation(line: 80, column: 3, scope: !5795)
!5916 = !DILocation(line: 81, column: 19, scope: !5795)
!5917 = !DILocation(line: 81, column: 23, scope: !5795)
!5918 = !DILocation(line: 81, column: 26, scope: !5795)
!5919 = !DILocation(line: 81, column: 33, scope: !5795)
!5920 = !DILocation(line: 81, column: 40, scope: !5795)
!5921 = !DILocation(line: 81, column: 22, scope: !5795)
!5922 = !DILocation(line: 81, column: 3, scope: !5795)
!5923 = !DILocation(line: 82, column: 19, scope: !5795)
!5924 = !DILocation(line: 82, column: 23, scope: !5795)
!5925 = !DILocation(line: 82, column: 26, scope: !5795)
!5926 = !DILocation(line: 82, column: 33, scope: !5795)
!5927 = !DILocation(line: 82, column: 40, scope: !5795)
!5928 = !DILocation(line: 82, column: 22, scope: !5795)
!5929 = !DILocation(line: 82, column: 3, scope: !5795)
!5930 = !DILocation(line: 83, column: 19, scope: !5795)
!5931 = !DILocation(line: 83, column: 23, scope: !5795)
!5932 = !DILocation(line: 83, column: 26, scope: !5795)
!5933 = !DILocation(line: 83, column: 33, scope: !5795)
!5934 = !DILocation(line: 83, column: 42, scope: !5795)
!5935 = !DILocation(line: 83, column: 22, scope: !5795)
!5936 = !DILocation(line: 83, column: 3, scope: !5795)
!5937 = !DILocation(line: 84, column: 19, scope: !5795)
!5938 = !DILocation(line: 84, column: 22, scope: !5795)
!5939 = !DILocation(line: 84, column: 25, scope: !5795)
!5940 = !DILocation(line: 84, column: 34, scope: !5795)
!5941 = !DILocation(line: 84, column: 3, scope: !5795)
!5942 = !DILocation(line: 85, column: 19, scope: !5795)
!5943 = !DILocation(line: 85, column: 22, scope: !5795)
!5944 = !DILocation(line: 85, column: 25, scope: !5795)
!5945 = !DILocation(line: 85, column: 35, scope: !5795)
!5946 = !DILocation(line: 85, column: 45, scope: !5795)
!5947 = !DILocation(line: 85, column: 32, scope: !5795)
!5948 = !DILocation(line: 85, column: 3, scope: !5795)
!5949 = !DILocation(line: 86, column: 19, scope: !5795)
!5950 = !DILocation(line: 86, column: 22, scope: !5795)
!5951 = !DILocation(line: 86, column: 25, scope: !5795)
!5952 = !DILocation(line: 86, column: 35, scope: !5795)
!5953 = !DILocation(line: 86, column: 45, scope: !5795)
!5954 = !DILocation(line: 86, column: 32, scope: !5795)
!5955 = !DILocation(line: 86, column: 3, scope: !5795)
!5956 = !DILocation(line: 87, column: 19, scope: !5795)
!5957 = !DILocation(line: 87, column: 22, scope: !5795)
!5958 = !DILocation(line: 87, column: 25, scope: !5795)
!5959 = !DILocation(line: 87, column: 36, scope: !5795)
!5960 = !DILocation(line: 87, column: 3, scope: !5795)
!5961 = !DILocation(line: 88, column: 19, scope: !5795)
!5962 = !DILocation(line: 88, column: 22, scope: !5795)
!5963 = !DILocation(line: 88, column: 25, scope: !5795)
!5964 = !DILocation(line: 88, column: 37, scope: !5795)
!5965 = !DILocation(line: 88, column: 47, scope: !5795)
!5966 = !DILocation(line: 88, column: 34, scope: !5795)
!5967 = !DILocation(line: 88, column: 3, scope: !5795)
!5968 = !DILocation(line: 89, column: 19, scope: !5795)
!5969 = !DILocation(line: 89, column: 22, scope: !5795)
!5970 = !DILocation(line: 89, column: 25, scope: !5795)
!5971 = !DILocation(line: 89, column: 37, scope: !5795)
!5972 = !DILocation(line: 89, column: 47, scope: !5795)
!5973 = !DILocation(line: 89, column: 34, scope: !5795)
!5974 = !DILocation(line: 89, column: 3, scope: !5795)
!5975 = !DILocation(line: 90, column: 19, scope: !5795)
!5976 = !DILocation(line: 90, column: 22, scope: !5795)
!5977 = !DILocation(line: 90, column: 25, scope: !5795)
!5978 = !DILocation(line: 90, column: 37, scope: !5795)
!5979 = !DILocation(line: 90, column: 47, scope: !5795)
!5980 = !DILocation(line: 90, column: 34, scope: !5795)
!5981 = !DILocation(line: 90, column: 3, scope: !5795)
!5982 = !DILocation(line: 92, column: 16, scope: !5795)
!5983 = !DILocation(line: 92, column: 23, scope: !5795)
!5984 = !DILocation(line: 92, column: 3, scope: !5795)
!5985 = !DILocation(line: 92, column: 6, scope: !5795)
!5986 = !DILocation(line: 92, column: 14, scope: !5795)
!5987 = !DILocation(line: 93, column: 3, scope: !5795)
!5988 = !DILocation(line: 93, column: 6, scope: !5795)
!5989 = !DILocation(line: 93, column: 16, scope: !5795)
!5990 = !DILocation(line: 94, column: 17, scope: !5795)
!5991 = !DILocation(line: 94, column: 3, scope: !5795)
!5992 = !DILocation(line: 94, column: 10, scope: !5795)
!5993 = !DILocation(line: 94, column: 15, scope: !5795)
!5994 = !DILocation(line: 95, column: 1, scope: !5795)
!5995 = distinct !DISubprogram(name: "__sym_uint32", scope: !126, file: !126, line: 97, type: !5996, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !121, retainedNodes: !4)
!5996 = !DISubroutineType(types: !5997)
!5997 = !{!32, !273}
!5998 = !DILocalVariable(name: "name", arg: 1, scope: !5995, file: !126, line: 97, type: !273)
!5999 = !DILocation(line: 97, column: 42, scope: !5995)
!6000 = !DILocalVariable(name: "x", scope: !5995, file: !126, line: 98, type: !32)
!6001 = !DILocation(line: 98, column: 12, scope: !5995)
!6002 = !DILocation(line: 99, column: 22, scope: !5995)
!6003 = !DILocation(line: 99, column: 36, scope: !5995)
!6004 = !DILocation(line: 99, column: 3, scope: !5995)
!6005 = !DILocation(line: 100, column: 10, scope: !5995)
!6006 = !DILocation(line: 100, column: 3, scope: !5995)
!6007 = distinct !DISubprogram(name: "klee_range", scope: !6008, file: !6008, line: 14, type: !6009, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !309, retainedNodes: !4)
!6008 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/Intrinsic/klee_range.c", directory: "")
!6009 = !DISubroutineType(types: !6010)
!6010 = !{!77, !77, !77, !273}
!6011 = !DILocalVariable(name: "start", arg: 1, scope: !6007, file: !6008, line: 14, type: !77)
!6012 = !DILocation(line: 14, column: 20, scope: !6007)
!6013 = !DILocalVariable(name: "end", arg: 2, scope: !6007, file: !6008, line: 14, type: !77)
!6014 = !DILocation(line: 14, column: 31, scope: !6007)
!6015 = !DILocalVariable(name: "name", arg: 3, scope: !6007, file: !6008, line: 14, type: !273)
!6016 = !DILocation(line: 14, column: 48, scope: !6007)
!6017 = !DILocalVariable(name: "x", scope: !6007, file: !6008, line: 15, type: !77)
!6018 = !DILocation(line: 15, column: 7, scope: !6007)
!6019 = !DILocation(line: 17, column: 7, scope: !6020)
!6020 = distinct !DILexicalBlock(scope: !6007, file: !6008, line: 17, column: 7)
!6021 = !DILocation(line: 17, column: 16, scope: !6020)
!6022 = !DILocation(line: 17, column: 13, scope: !6020)
!6023 = !DILocation(line: 17, column: 7, scope: !6007)
!6024 = !DILocation(line: 18, column: 5, scope: !6020)
!6025 = !DILocation(line: 20, column: 7, scope: !6026)
!6026 = distinct !DILexicalBlock(scope: !6007, file: !6008, line: 20, column: 7)
!6027 = !DILocation(line: 20, column: 12, scope: !6026)
!6028 = !DILocation(line: 20, column: 16, scope: !6026)
!6029 = !DILocation(line: 20, column: 14, scope: !6026)
!6030 = !DILocation(line: 20, column: 7, scope: !6007)
!6031 = !DILocation(line: 21, column: 12, scope: !6032)
!6032 = distinct !DILexicalBlock(scope: !6026, file: !6008, line: 20, column: 21)
!6033 = !DILocation(line: 21, column: 5, scope: !6032)
!6034 = !DILocation(line: 23, column: 24, scope: !6035)
!6035 = distinct !DILexicalBlock(scope: !6026, file: !6008, line: 22, column: 10)
!6036 = !DILocation(line: 23, column: 38, scope: !6035)
!6037 = !DILocation(line: 23, column: 5, scope: !6035)
!6038 = !DILocation(line: 26, column: 9, scope: !6039)
!6039 = distinct !DILexicalBlock(scope: !6035, file: !6008, line: 26, column: 9)
!6040 = !DILocation(line: 26, column: 14, scope: !6039)
!6041 = !DILocation(line: 26, column: 9, scope: !6035)
!6042 = !DILocation(line: 27, column: 30, scope: !6043)
!6043 = distinct !DILexicalBlock(scope: !6039, file: !6008, line: 26, column: 19)
!6044 = !DILocation(line: 27, column: 45, scope: !6043)
!6045 = !DILocation(line: 27, column: 32, scope: !6043)
!6046 = !DILocation(line: 27, column: 19, scope: !6043)
!6047 = !DILocation(line: 27, column: 7, scope: !6043)
!6048 = !DILocation(line: 28, column: 5, scope: !6043)
!6049 = !DILocation(line: 29, column: 19, scope: !6050)
!6050 = distinct !DILexicalBlock(scope: !6039, file: !6008, line: 28, column: 12)
!6051 = !DILocation(line: 29, column: 28, scope: !6050)
!6052 = !DILocation(line: 29, column: 25, scope: !6050)
!6053 = !DILocation(line: 29, column: 7, scope: !6050)
!6054 = !DILocation(line: 30, column: 19, scope: !6050)
!6055 = !DILocation(line: 30, column: 23, scope: !6050)
!6056 = !DILocation(line: 30, column: 21, scope: !6050)
!6057 = !DILocation(line: 30, column: 7, scope: !6050)
!6058 = !DILocation(line: 33, column: 12, scope: !6035)
!6059 = !DILocation(line: 33, column: 5, scope: !6035)
!6060 = !DILocation(line: 35, column: 1, scope: !6007)
!6061 = distinct !DISubprogram(name: "open", linkageName: "open64", scope: !6062, file: !6062, line: 48, type: !6063, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!6062 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/POSIX/fd_64.c", directory: "")
!6063 = !DISubroutineType(types: !6064)
!6064 = !{!77, !273, !77, null}
!6065 = !DILocalVariable(name: "pathname", arg: 1, scope: !6061, file: !6062, line: 48, type: !273)
!6066 = !DILocation(line: 48, column: 22, scope: !6061)
!6067 = !DILocalVariable(name: "flags", arg: 2, scope: !6061, file: !6062, line: 48, type: !77)
!6068 = !DILocation(line: 48, column: 36, scope: !6061)
!6069 = !DILocalVariable(name: "mode", scope: !6061, file: !6062, line: 49, type: !208)
!6070 = !DILocation(line: 49, column: 10, scope: !6061)
!6071 = !DILocation(line: 51, column: 7, scope: !6072)
!6072 = distinct !DILexicalBlock(scope: !6061, file: !6062, line: 51, column: 7)
!6073 = !DILocation(line: 51, column: 13, scope: !6072)
!6074 = !DILocation(line: 51, column: 7, scope: !6061)
!6075 = !DILocalVariable(name: "ap", scope: !6076, file: !6062, line: 53, type: !6077)
!6076 = distinct !DILexicalBlock(scope: !6072, file: !6062, line: 51, column: 24)
!6077 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !6078, line: 46, baseType: !6079)
!6078 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!6079 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !6080, line: 32, baseType: !6081)
!6080 = !DIFile(filename: "dut-research/compilers/llvm-9.0/llvm-src/build/lib/clang/9.0.0/include/stdarg.h", directory: "/media/haoxin/SeagateData/haoxin-data")
!6081 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !313, line: 53, baseType: !6082)
!6082 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6083, size: 192, elements: !1353)
!6083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !313, line: 53, size: 192, elements: !6084)
!6084 = !{!6085, !6086, !6087, !6088}
!6085 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !6083, file: !313, line: 53, baseType: !32, size: 32)
!6086 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !6083, file: !313, line: 53, baseType: !32, size: 32, offset: 32)
!6087 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !6083, file: !313, line: 53, baseType: !7, size: 64, offset: 64)
!6088 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !6083, file: !313, line: 53, baseType: !7, size: 64, offset: 128)
!6089 = !DILocation(line: 53, column: 13, scope: !6076)
!6090 = !DILocation(line: 54, column: 5, scope: !6076)
!6091 = !DILocation(line: 55, column: 12, scope: !6076)
!6092 = !DILocation(line: 55, column: 10, scope: !6076)
!6093 = !DILocation(line: 56, column: 5, scope: !6076)
!6094 = !DILocation(line: 57, column: 3, scope: !6076)
!6095 = !DILocation(line: 59, column: 20, scope: !6061)
!6096 = !DILocation(line: 59, column: 30, scope: !6061)
!6097 = !DILocation(line: 59, column: 37, scope: !6061)
!6098 = !DILocation(line: 59, column: 10, scope: !6061)
!6099 = !DILocation(line: 59, column: 3, scope: !6061)
!6100 = distinct !DISubprogram(name: "openat", linkageName: "openat64", scope: !6062, file: !6062, line: 62, type: !6101, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!6101 = !DISubroutineType(types: !6102)
!6102 = !{!77, !77, !273, !77, null}
!6103 = !DILocalVariable(name: "fd", arg: 1, scope: !6100, file: !6062, line: 62, type: !77)
!6104 = !DILocation(line: 62, column: 16, scope: !6100)
!6105 = !DILocalVariable(name: "pathname", arg: 2, scope: !6100, file: !6062, line: 62, type: !273)
!6106 = !DILocation(line: 62, column: 32, scope: !6100)
!6107 = !DILocalVariable(name: "flags", arg: 3, scope: !6100, file: !6062, line: 62, type: !77)
!6108 = !DILocation(line: 62, column: 46, scope: !6100)
!6109 = !DILocalVariable(name: "mode", scope: !6100, file: !6062, line: 63, type: !208)
!6110 = !DILocation(line: 63, column: 10, scope: !6100)
!6111 = !DILocation(line: 65, column: 7, scope: !6112)
!6112 = distinct !DILexicalBlock(scope: !6100, file: !6062, line: 65, column: 7)
!6113 = !DILocation(line: 65, column: 13, scope: !6112)
!6114 = !DILocation(line: 65, column: 7, scope: !6100)
!6115 = !DILocalVariable(name: "ap", scope: !6116, file: !6062, line: 67, type: !6077)
!6116 = distinct !DILexicalBlock(scope: !6112, file: !6062, line: 65, column: 24)
!6117 = !DILocation(line: 67, column: 13, scope: !6116)
!6118 = !DILocation(line: 68, column: 5, scope: !6116)
!6119 = !DILocation(line: 69, column: 12, scope: !6116)
!6120 = !DILocation(line: 69, column: 10, scope: !6116)
!6121 = !DILocation(line: 70, column: 5, scope: !6116)
!6122 = !DILocation(line: 71, column: 3, scope: !6116)
!6123 = !DILocation(line: 73, column: 22, scope: !6100)
!6124 = !DILocation(line: 73, column: 26, scope: !6100)
!6125 = !DILocation(line: 73, column: 36, scope: !6100)
!6126 = !DILocation(line: 73, column: 43, scope: !6100)
!6127 = !DILocation(line: 73, column: 10, scope: !6100)
!6128 = !DILocation(line: 73, column: 3, scope: !6100)
!6129 = distinct !DISubprogram(name: "lseek", linkageName: "lseek64", scope: !6062, file: !6062, line: 76, type: !6130, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!6130 = !DISubroutineType(types: !6131)
!6131 = !{!205, !77, !203, !77}
!6132 = !DILocalVariable(name: "fd", arg: 1, scope: !6129, file: !6062, line: 76, type: !77)
!6133 = !DILocation(line: 76, column: 19, scope: !6129)
!6134 = !DILocalVariable(name: "offset", arg: 2, scope: !6129, file: !6062, line: 76, type: !203)
!6135 = !DILocation(line: 76, column: 31, scope: !6129)
!6136 = !DILocalVariable(name: "whence", arg: 3, scope: !6129, file: !6062, line: 76, type: !77)
!6137 = !DILocation(line: 76, column: 43, scope: !6129)
!6138 = !DILocation(line: 77, column: 21, scope: !6129)
!6139 = !DILocation(line: 77, column: 25, scope: !6129)
!6140 = !DILocation(line: 77, column: 33, scope: !6129)
!6141 = !DILocation(line: 77, column: 10, scope: !6129)
!6142 = !DILocation(line: 77, column: 3, scope: !6129)
!6143 = distinct !DISubprogram(name: "__xstat", linkageName: "__xstat64", scope: !6062, file: !6062, line: 80, type: !6144, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!6144 = !DISubroutineType(types: !6145)
!6145 = !{!77, !77, !273, !6146}
!6146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6147, size: 64)
!6147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !142, line: 46, size: 1152, elements: !6148)
!6148 = !{!6149, !6150, !6151, !6152, !6153, !6154, !6155, !6156, !6157, !6158, !6159, !6160, !6161, !6162, !6163}
!6149 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !6147, file: !142, line: 48, baseType: !145, size: 64)
!6150 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !6147, file: !142, line: 53, baseType: !234, size: 64, offset: 64)
!6151 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !6147, file: !142, line: 61, baseType: !150, size: 64, offset: 128)
!6152 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !6147, file: !142, line: 62, baseType: !152, size: 32, offset: 192)
!6153 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !6147, file: !142, line: 64, baseType: !154, size: 32, offset: 224)
!6154 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !6147, file: !142, line: 65, baseType: !156, size: 32, offset: 256)
!6155 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !6147, file: !142, line: 67, baseType: !77, size: 32, offset: 288)
!6156 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !6147, file: !142, line: 69, baseType: !145, size: 64, offset: 320)
!6157 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !6147, file: !142, line: 74, baseType: !160, size: 64, offset: 384)
!6158 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !6147, file: !142, line: 78, baseType: !163, size: 64, offset: 448)
!6159 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !6147, file: !142, line: 80, baseType: !244, size: 64, offset: 512)
!6160 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !6147, file: !142, line: 91, baseType: !330, size: 128, offset: 576)
!6161 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !6147, file: !142, line: 92, baseType: !330, size: 128, offset: 704)
!6162 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !6147, file: !142, line: 93, baseType: !330, size: 128, offset: 832)
!6163 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !6147, file: !142, line: 106, baseType: !177, size: 192, offset: 960)
!6164 = !DILocalVariable(name: "vers", arg: 1, scope: !6143, file: !6062, line: 80, type: !77)
!6165 = !DILocation(line: 80, column: 17, scope: !6143)
!6166 = !DILocalVariable(name: "path", arg: 2, scope: !6143, file: !6062, line: 80, type: !273)
!6167 = !DILocation(line: 80, column: 35, scope: !6143)
!6168 = !DILocalVariable(name: "buf", arg: 3, scope: !6143, file: !6062, line: 80, type: !6146)
!6169 = !DILocation(line: 80, column: 54, scope: !6143)
!6170 = !DILocation(line: 81, column: 20, scope: !6143)
!6171 = !DILocation(line: 81, column: 43, scope: !6143)
!6172 = !DILocation(line: 81, column: 26, scope: !6143)
!6173 = !DILocation(line: 81, column: 10, scope: !6143)
!6174 = !DILocation(line: 81, column: 3, scope: !6143)
!6175 = distinct !DISubprogram(name: "stat", linkageName: "stat64", scope: !6062, file: !6062, line: 84, type: !6176, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!6176 = !DISubroutineType(types: !6177)
!6177 = !{!77, !273, !6146}
!6178 = !DILocalVariable(name: "path", arg: 1, scope: !6175, file: !6062, line: 84, type: !273)
!6179 = !DILocation(line: 84, column: 22, scope: !6175)
!6180 = !DILocalVariable(name: "buf", arg: 2, scope: !6175, file: !6062, line: 84, type: !6146)
!6181 = !DILocation(line: 84, column: 41, scope: !6175)
!6182 = !DILocation(line: 85, column: 20, scope: !6175)
!6183 = !DILocation(line: 85, column: 43, scope: !6175)
!6184 = !DILocation(line: 85, column: 26, scope: !6175)
!6185 = !DILocation(line: 85, column: 10, scope: !6175)
!6186 = !DILocation(line: 85, column: 3, scope: !6175)
!6187 = distinct !DISubprogram(name: "__lxstat", linkageName: "__lxstat64", scope: !6062, file: !6062, line: 88, type: !6144, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!6188 = !DILocalVariable(name: "vers", arg: 1, scope: !6187, file: !6062, line: 88, type: !77)
!6189 = !DILocation(line: 88, column: 18, scope: !6187)
!6190 = !DILocalVariable(name: "path", arg: 2, scope: !6187, file: !6062, line: 88, type: !273)
!6191 = !DILocation(line: 88, column: 36, scope: !6187)
!6192 = !DILocalVariable(name: "buf", arg: 3, scope: !6187, file: !6062, line: 88, type: !6146)
!6193 = !DILocation(line: 88, column: 55, scope: !6187)
!6194 = !DILocation(line: 89, column: 21, scope: !6187)
!6195 = !DILocation(line: 89, column: 44, scope: !6187)
!6196 = !DILocation(line: 89, column: 27, scope: !6187)
!6197 = !DILocation(line: 89, column: 10, scope: !6187)
!6198 = !DILocation(line: 89, column: 3, scope: !6187)
!6199 = distinct !DISubprogram(name: "lstat", linkageName: "lstat64", scope: !6062, file: !6062, line: 92, type: !6176, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!6200 = !DILocalVariable(name: "path", arg: 1, scope: !6199, file: !6062, line: 92, type: !273)
!6201 = !DILocation(line: 92, column: 23, scope: !6199)
!6202 = !DILocalVariable(name: "buf", arg: 2, scope: !6199, file: !6062, line: 92, type: !6146)
!6203 = !DILocation(line: 92, column: 42, scope: !6199)
!6204 = !DILocation(line: 93, column: 21, scope: !6199)
!6205 = !DILocation(line: 93, column: 44, scope: !6199)
!6206 = !DILocation(line: 93, column: 27, scope: !6199)
!6207 = !DILocation(line: 93, column: 10, scope: !6199)
!6208 = !DILocation(line: 93, column: 3, scope: !6199)
!6209 = distinct !DISubprogram(name: "__fxstat", linkageName: "__fxstat64", scope: !6062, file: !6062, line: 96, type: !6210, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!6210 = !DISubroutineType(types: !6211)
!6211 = !{!77, !77, !77, !6146}
!6212 = !DILocalVariable(name: "vers", arg: 1, scope: !6209, file: !6062, line: 96, type: !77)
!6213 = !DILocation(line: 96, column: 18, scope: !6209)
!6214 = !DILocalVariable(name: "fd", arg: 2, scope: !6209, file: !6062, line: 96, type: !77)
!6215 = !DILocation(line: 96, column: 28, scope: !6209)
!6216 = !DILocalVariable(name: "buf", arg: 3, scope: !6209, file: !6062, line: 96, type: !6146)
!6217 = !DILocation(line: 96, column: 45, scope: !6209)
!6218 = !DILocation(line: 97, column: 21, scope: !6209)
!6219 = !DILocation(line: 97, column: 42, scope: !6209)
!6220 = !DILocation(line: 97, column: 25, scope: !6209)
!6221 = !DILocation(line: 97, column: 10, scope: !6209)
!6222 = !DILocation(line: 97, column: 3, scope: !6209)
!6223 = distinct !DISubprogram(name: "fstat", linkageName: "fstat64", scope: !6062, file: !6062, line: 100, type: !6224, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!6224 = !DISubroutineType(types: !6225)
!6225 = !{!77, !77, !6146}
!6226 = !DILocalVariable(name: "fd", arg: 1, scope: !6223, file: !6062, line: 100, type: !77)
!6227 = !DILocation(line: 100, column: 15, scope: !6223)
!6228 = !DILocalVariable(name: "buf", arg: 2, scope: !6223, file: !6062, line: 100, type: !6146)
!6229 = !DILocation(line: 100, column: 32, scope: !6223)
!6230 = !DILocation(line: 101, column: 21, scope: !6223)
!6231 = !DILocation(line: 101, column: 42, scope: !6223)
!6232 = !DILocation(line: 101, column: 25, scope: !6223)
!6233 = !DILocation(line: 101, column: 10, scope: !6223)
!6234 = !DILocation(line: 101, column: 3, scope: !6223)
!6235 = distinct !DISubprogram(name: "ftruncate64", scope: !6062, file: !6062, line: 104, type: !283, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!6236 = !DILocalVariable(name: "fd", arg: 1, scope: !6235, file: !6062, line: 104, type: !77)
!6237 = !DILocation(line: 104, column: 21, scope: !6235)
!6238 = !DILocalVariable(name: "length", arg: 2, scope: !6235, file: !6062, line: 104, type: !203)
!6239 = !DILocation(line: 104, column: 33, scope: !6235)
!6240 = !DILocation(line: 105, column: 25, scope: !6235)
!6241 = !DILocation(line: 105, column: 29, scope: !6235)
!6242 = !DILocation(line: 105, column: 10, scope: !6235)
!6243 = !DILocation(line: 105, column: 3, scope: !6235)
!6244 = distinct !DISubprogram(name: "statfs", linkageName: "statfs64", scope: !6062, file: !6062, line: 109, type: !6245, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!6245 = !DISubroutineType(types: !6246)
!6246 = !{!77, !273, !6247}
!6247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6248, size: 64)
!6248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "statfs", file: !6249, line: 24, size: 960, elements: !6250)
!6249 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/statfs.h", directory: "")
!6250 = !{!6251, !6253, !6254, !6256, !6257, !6258, !6260, !6261, !6267, !6268, !6269, !6270}
!6251 = !DIDerivedType(tag: DW_TAG_member, name: "f_type", scope: !6248, file: !6249, line: 26, baseType: !6252, size: 64)
!6252 = !DIDerivedType(tag: DW_TAG_typedef, name: "__fsword_t", file: !146, line: 179, baseType: !161)
!6253 = !DIDerivedType(tag: DW_TAG_member, name: "f_bsize", scope: !6248, file: !6249, line: 27, baseType: !6252, size: 64, offset: 64)
!6254 = !DIDerivedType(tag: DW_TAG_member, name: "f_blocks", scope: !6248, file: !6249, line: 35, baseType: !6255, size: 64, offset: 128)
!6255 = !DIDerivedType(tag: DW_TAG_typedef, name: "__fsblkcnt64_t", file: !146, line: 172, baseType: !16)
!6256 = !DIDerivedType(tag: DW_TAG_member, name: "f_bfree", scope: !6248, file: !6249, line: 36, baseType: !6255, size: 64, offset: 192)
!6257 = !DIDerivedType(tag: DW_TAG_member, name: "f_bavail", scope: !6248, file: !6249, line: 37, baseType: !6255, size: 64, offset: 256)
!6258 = !DIDerivedType(tag: DW_TAG_member, name: "f_files", scope: !6248, file: !6249, line: 38, baseType: !6259, size: 64, offset: 320)
!6259 = !DIDerivedType(tag: DW_TAG_typedef, name: "__fsfilcnt64_t", file: !146, line: 176, baseType: !16)
!6260 = !DIDerivedType(tag: DW_TAG_member, name: "f_ffree", scope: !6248, file: !6249, line: 39, baseType: !6259, size: 64, offset: 384)
!6261 = !DIDerivedType(tag: DW_TAG_member, name: "f_fsid", scope: !6248, file: !6249, line: 41, baseType: !6262, size: 64, offset: 448)
!6262 = !DIDerivedType(tag: DW_TAG_typedef, name: "__fsid_t", file: !146, line: 143, baseType: !6263)
!6263 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !146, line: 143, size: 64, elements: !6264)
!6264 = !{!6265}
!6265 = !DIDerivedType(tag: DW_TAG_member, name: "__val", scope: !6263, file: !146, line: 143, baseType: !6266, size: 64)
!6266 = !DICompositeType(tag: DW_TAG_array_type, baseType: !77, size: 64, elements: !1759)
!6267 = !DIDerivedType(tag: DW_TAG_member, name: "f_namelen", scope: !6248, file: !6249, line: 42, baseType: !6252, size: 64, offset: 512)
!6268 = !DIDerivedType(tag: DW_TAG_member, name: "f_frsize", scope: !6248, file: !6249, line: 43, baseType: !6252, size: 64, offset: 576)
!6269 = !DIDerivedType(tag: DW_TAG_member, name: "f_flags", scope: !6248, file: !6249, line: 44, baseType: !6252, size: 64, offset: 640)
!6270 = !DIDerivedType(tag: DW_TAG_member, name: "f_spare", scope: !6248, file: !6249, line: 45, baseType: !6271, size: 256, offset: 704)
!6271 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6252, size: 256, elements: !83)
!6272 = !DILocalVariable(name: "path", arg: 1, scope: !6244, file: !6062, line: 109, type: !273)
!6273 = !DILocation(line: 109, column: 24, scope: !6244)
!6274 = !DILocalVariable(name: "buf", arg: 2, scope: !6244, file: !6062, line: 109, type: !6247)
!6275 = !DILocation(line: 109, column: 45, scope: !6244)
!6276 = !DILocation(line: 110, column: 22, scope: !6244)
!6277 = !DILocation(line: 110, column: 28, scope: !6244)
!6278 = !DILocation(line: 110, column: 10, scope: !6244)
!6279 = !DILocation(line: 110, column: 3, scope: !6244)
!6280 = distinct !DISubprogram(name: "getdents64", scope: !6062, file: !6062, line: 113, type: !257, scopeLine: 113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!6281 = !DILocalVariable(name: "fd", arg: 1, scope: !6280, file: !6062, line: 113, type: !77)
!6282 = !DILocation(line: 113, column: 24, scope: !6280)
!6283 = !DILocalVariable(name: "dirp", arg: 2, scope: !6280, file: !6062, line: 113, type: !7)
!6284 = !DILocation(line: 113, column: 34, scope: !6280)
!6285 = !DILocalVariable(name: "count", arg: 3, scope: !6280, file: !6062, line: 113, type: !261)
!6286 = !DILocation(line: 113, column: 47, scope: !6280)
!6287 = !DILocation(line: 114, column: 24, scope: !6280)
!6288 = !DILocation(line: 114, column: 47, scope: !6280)
!6289 = !DILocation(line: 114, column: 28, scope: !6280)
!6290 = !DILocation(line: 114, column: 53, scope: !6280)
!6291 = !DILocation(line: 114, column: 10, scope: !6280)
!6292 = !DILocation(line: 114, column: 3, scope: !6280)
!6293 = !{i32 -2146908278}
!6294 = !{i32 -2146907866}
!6295 = distinct !DISubprogram(name: "access", scope: !214, file: !214, line: 74, type: !6296, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!6296 = !DISubroutineType(types: !6297)
!6297 = !{!77, !273, !77}
!6298 = !DILocalVariable(name: "pathname", arg: 1, scope: !6295, file: !214, line: 74, type: !273)
!6299 = !DILocation(line: 74, column: 24, scope: !6295)
!6300 = !DILocalVariable(name: "mode", arg: 2, scope: !6295, file: !214, line: 74, type: !77)
!6301 = !DILocation(line: 74, column: 38, scope: !6295)
!6302 = !DILocalVariable(name: "dfile", scope: !6295, file: !214, line: 75, type: !6303)
!6303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6304, size: 64)
!6304 = !DIDerivedType(tag: DW_TAG_typedef, name: "exe_disk_file_t", file: !128, line: 44, baseType: !6305)
!6305 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !128, line: 40, size: 192, elements: !6306)
!6306 = !{!6307, !6308, !6309}
!6307 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !6305, file: !128, line: 41, baseType: !32, size: 32)
!6308 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !6305, file: !128, line: 42, baseType: !19, size: 64, offset: 64)
!6309 = !DIDerivedType(tag: DW_TAG_member, name: "stat", scope: !6305, file: !128, line: 43, baseType: !6310, size: 64, offset: 128)
!6310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6311, size: 64)
!6311 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat64", file: !142, line: 119, size: 1152, elements: !6312)
!6312 = !{!6313, !6314, !6315, !6316, !6317, !6318, !6319, !6320, !6321, !6322, !6323, !6324, !6325, !6326, !6327}
!6313 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !6311, file: !142, line: 121, baseType: !145, size: 64)
!6314 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !6311, file: !142, line: 123, baseType: !148, size: 64, offset: 64)
!6315 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !6311, file: !142, line: 124, baseType: !150, size: 64, offset: 128)
!6316 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !6311, file: !142, line: 125, baseType: !152, size: 32, offset: 192)
!6317 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !6311, file: !142, line: 132, baseType: !154, size: 32, offset: 224)
!6318 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !6311, file: !142, line: 133, baseType: !156, size: 32, offset: 256)
!6319 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !6311, file: !142, line: 135, baseType: !77, size: 32, offset: 288)
!6320 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !6311, file: !142, line: 136, baseType: !145, size: 64, offset: 320)
!6321 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !6311, file: !142, line: 137, baseType: !160, size: 64, offset: 384)
!6322 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !6311, file: !142, line: 143, baseType: !163, size: 64, offset: 448)
!6323 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !6311, file: !142, line: 144, baseType: !165, size: 64, offset: 512)
!6324 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !6311, file: !142, line: 152, baseType: !246, size: 128, offset: 576)
!6325 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !6311, file: !142, line: 153, baseType: !246, size: 128, offset: 704)
!6326 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !6311, file: !142, line: 154, baseType: !246, size: 128, offset: 832)
!6327 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !6311, file: !142, line: 164, baseType: !177, size: 192, offset: 960)
!6328 = !DILocation(line: 75, column: 20, scope: !6295)
!6329 = !DILocation(line: 75, column: 43, scope: !6295)
!6330 = !DILocation(line: 75, column: 28, scope: !6295)
!6331 = !DILocation(line: 77, column: 7, scope: !6332)
!6332 = distinct !DILexicalBlock(scope: !6295, file: !214, line: 77, column: 7)
!6333 = !DILocation(line: 77, column: 7, scope: !6295)
!6334 = !DILocation(line: 80, column: 5, scope: !6335)
!6335 = distinct !DILexicalBlock(scope: !6332, file: !214, line: 77, column: 14)
!6336 = !DILocation(line: 82, column: 51, scope: !6295)
!6337 = !DILocation(line: 82, column: 31, scope: !6295)
!6338 = !DILocation(line: 82, column: 62, scope: !6295)
!6339 = !DILocation(line: 82, column: 10, scope: !6295)
!6340 = !DILocation(line: 82, column: 3, scope: !6295)
!6341 = !DILocation(line: 83, column: 1, scope: !6295)
!6342 = distinct !DISubprogram(name: "__get_sym_file", scope: !214, file: !214, line: 37, type: !6343, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !217, retainedNodes: !4)
!6343 = !DISubroutineType(types: !6344)
!6344 = !{!6303, !273}
!6345 = !DILocalVariable(name: "pathname", arg: 1, scope: !6342, file: !214, line: 37, type: !273)
!6346 = !DILocation(line: 37, column: 52, scope: !6342)
!6347 = !DILocation(line: 38, column: 8, scope: !6348)
!6348 = distinct !DILexicalBlock(scope: !6342, file: !214, line: 38, column: 7)
!6349 = !DILocation(line: 38, column: 7, scope: !6342)
!6350 = !DILocation(line: 39, column: 5, scope: !6348)
!6351 = !DILocalVariable(name: "c", scope: !6342, file: !214, line: 41, type: !20)
!6352 = !DILocation(line: 41, column: 8, scope: !6342)
!6353 = !DILocation(line: 41, column: 12, scope: !6342)
!6354 = !DILocalVariable(name: "i", scope: !6342, file: !214, line: 42, type: !32)
!6355 = !DILocation(line: 42, column: 12, scope: !6342)
!6356 = !DILocation(line: 44, column: 7, scope: !6357)
!6357 = distinct !DILexicalBlock(scope: !6342, file: !214, line: 44, column: 7)
!6358 = !DILocation(line: 44, column: 9, scope: !6357)
!6359 = !DILocation(line: 44, column: 14, scope: !6357)
!6360 = !DILocation(line: 44, column: 17, scope: !6357)
!6361 = !DILocation(line: 44, column: 29, scope: !6357)
!6362 = !DILocation(line: 44, column: 7, scope: !6342)
!6363 = !DILocation(line: 45, column: 5, scope: !6357)
!6364 = !DILocation(line: 47, column: 9, scope: !6365)
!6365 = distinct !DILexicalBlock(scope: !6342, file: !214, line: 47, column: 3)
!6366 = !DILocation(line: 47, column: 8, scope: !6365)
!6367 = !DILocation(line: 47, column: 13, scope: !6368)
!6368 = distinct !DILexicalBlock(scope: !6365, file: !214, line: 47, column: 3)
!6369 = !DILocation(line: 47, column: 24, scope: !6368)
!6370 = !DILocation(line: 47, column: 14, scope: !6368)
!6371 = !DILocation(line: 47, column: 3, scope: !6365)
!6372 = !DILocation(line: 48, column: 9, scope: !6373)
!6373 = distinct !DILexicalBlock(scope: !6374, file: !214, line: 48, column: 9)
!6374 = distinct !DILexicalBlock(scope: !6368, file: !214, line: 47, column: 42)
!6375 = !DILocation(line: 48, column: 27, scope: !6373)
!6376 = !DILocation(line: 48, column: 20, scope: !6373)
!6377 = !DILocation(line: 48, column: 18, scope: !6373)
!6378 = !DILocation(line: 48, column: 11, scope: !6373)
!6379 = !DILocation(line: 48, column: 9, scope: !6374)
!6380 = !DILocalVariable(name: "df", scope: !6381, file: !214, line: 49, type: !6303)
!6381 = distinct !DILexicalBlock(scope: !6373, file: !214, line: 48, column: 30)
!6382 = !DILocation(line: 49, column: 24, scope: !6381)
!6383 = !DILocation(line: 49, column: 39, scope: !6381)
!6384 = !DILocation(line: 49, column: 49, scope: !6381)
!6385 = !DILocation(line: 49, column: 30, scope: !6381)
!6386 = !DILocation(line: 50, column: 11, scope: !6387)
!6387 = distinct !DILexicalBlock(scope: !6381, file: !214, line: 50, column: 11)
!6388 = !DILocation(line: 50, column: 15, scope: !6387)
!6389 = !DILocation(line: 50, column: 21, scope: !6387)
!6390 = !DILocation(line: 50, column: 28, scope: !6387)
!6391 = !DILocation(line: 50, column: 11, scope: !6381)
!6392 = !DILocation(line: 51, column: 9, scope: !6387)
!6393 = !DILocation(line: 52, column: 14, scope: !6381)
!6394 = !DILocation(line: 52, column: 7, scope: !6381)
!6395 = !DILocation(line: 47, column: 37, scope: !6368)
!6396 = !DILocation(line: 47, column: 3, scope: !6368)
!6397 = distinct !{!6397, !6371, !6398}
!6398 = !DILocation(line: 54, column: 3, scope: !6365)
!6399 = !DILocation(line: 56, column: 3, scope: !6342)
!6400 = !DILocation(line: 57, column: 1, scope: !6342)
!6401 = distinct !DISubprogram(name: "__concretize_string", scope: !214, file: !214, line: 1351, type: !6402, scopeLine: 1351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !217, retainedNodes: !4)
!6402 = !DISubroutineType(types: !6403)
!6403 = !{!273, !273}
!6404 = !DILocalVariable(name: "s", arg: 1, scope: !6401, file: !214, line: 1351, type: !273)
!6405 = !DILocation(line: 1351, column: 52, scope: !6401)
!6406 = !DILocalVariable(name: "sc", scope: !6401, file: !214, line: 1352, type: !19)
!6407 = !DILocation(line: 1352, column: 9, scope: !6401)
!6408 = !DILocation(line: 1352, column: 31, scope: !6401)
!6409 = !DILocation(line: 1352, column: 14, scope: !6401)
!6410 = !DILocalVariable(name: "i", scope: !6401, file: !214, line: 1353, type: !32)
!6411 = !DILocation(line: 1353, column: 12, scope: !6401)
!6412 = !DILocation(line: 1355, column: 10, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6401, file: !214, line: 1355, column: 3)
!6414 = !DILocation(line: 1355, column: 8, scope: !6413)
!6415 = !DILocalVariable(name: "c", scope: !6416, file: !214, line: 1356, type: !20)
!6416 = distinct !DILexicalBlock(scope: !6417, file: !214, line: 1355, column: 27)
!6417 = distinct !DILexicalBlock(scope: !6413, file: !214, line: 1355, column: 3)
!6418 = !DILocation(line: 1356, column: 10, scope: !6416)
!6419 = !DILocation(line: 1356, column: 15, scope: !6416)
!6420 = !DILocation(line: 1356, column: 14, scope: !6416)
!6421 = !DILocation(line: 1358, column: 27, scope: !6422)
!6422 = distinct !DILexicalBlock(scope: !6416, file: !214, line: 1358, column: 9)
!6423 = !DILocation(line: 1358, column: 10, scope: !6422)
!6424 = !DILocation(line: 1358, column: 9, scope: !6416)
!6425 = !DILocation(line: 1359, column: 12, scope: !6426)
!6426 = distinct !DILexicalBlock(scope: !6427, file: !214, line: 1359, column: 11)
!6427 = distinct !DILexicalBlock(scope: !6422, file: !214, line: 1358, column: 31)
!6428 = !DILocation(line: 1359, column: 11, scope: !6427)
!6429 = !DILocation(line: 1363, column: 11, scope: !6430)
!6430 = distinct !DILexicalBlock(scope: !6416, file: !214, line: 1363, column: 9)
!6431 = !DILocation(line: 1363, column: 14, scope: !6430)
!6432 = !DILocation(line: 1363, column: 15, scope: !6430)
!6433 = !DILocation(line: 1363, column: 12, scope: !6430)
!6434 = !DILocation(line: 0, scope: !6430)
!6435 = !DILocation(line: 1363, column: 9, scope: !6416)
!6436 = !DILocation(line: 1364, column: 12, scope: !6437)
!6437 = distinct !DILexicalBlock(scope: !6438, file: !214, line: 1364, column: 11)
!6438 = distinct !DILexicalBlock(scope: !6430, file: !214, line: 1363, column: 21)
!6439 = !DILocation(line: 1364, column: 11, scope: !6438)
!6440 = !DILocation(line: 1365, column: 10, scope: !6441)
!6441 = distinct !DILexicalBlock(scope: !6437, file: !214, line: 1364, column: 15)
!6442 = !DILocation(line: 1365, column: 13, scope: !6441)
!6443 = !DILocation(line: 1366, column: 9, scope: !6441)
!6444 = !DILocation(line: 1367, column: 18, scope: !6445)
!6445 = distinct !DILexicalBlock(scope: !6437, file: !214, line: 1367, column: 18)
!6446 = !DILocation(line: 1367, column: 19, scope: !6445)
!6447 = !DILocation(line: 1367, column: 18, scope: !6437)
!6448 = !DILocation(line: 1368, column: 10, scope: !6449)
!6449 = distinct !DILexicalBlock(scope: !6445, file: !214, line: 1367, column: 26)
!6450 = !DILocation(line: 1368, column: 13, scope: !6449)
!6451 = !DILocation(line: 1369, column: 7, scope: !6449)
!6452 = !DILocalVariable(name: "cc", scope: !6453, file: !214, line: 1371, type: !20)
!6453 = distinct !DILexicalBlock(scope: !6430, file: !214, line: 1370, column: 12)
!6454 = !DILocation(line: 1371, column: 12, scope: !6453)
!6455 = !DILocation(line: 1371, column: 40, scope: !6453)
!6456 = !DILocation(line: 1371, column: 24, scope: !6453)
!6457 = !DILocation(line: 1371, column: 17, scope: !6453)
!6458 = !DILocation(line: 1372, column: 19, scope: !6453)
!6459 = !DILocation(line: 1372, column: 25, scope: !6453)
!6460 = !DILocation(line: 1372, column: 22, scope: !6453)
!6461 = !DILocation(line: 1372, column: 7, scope: !6453)
!6462 = !DILocation(line: 1373, column: 13, scope: !6453)
!6463 = !DILocation(line: 1373, column: 8, scope: !6453)
!6464 = !DILocation(line: 1373, column: 11, scope: !6453)
!6465 = !DILocation(line: 1374, column: 12, scope: !6466)
!6466 = distinct !DILexicalBlock(scope: !6453, file: !214, line: 1374, column: 11)
!6467 = !DILocation(line: 1374, column: 11, scope: !6453)
!6468 = !DILocation(line: 1355, column: 16, scope: !6417)
!6469 = !DILocation(line: 1355, column: 21, scope: !6417)
!6470 = !DILocation(line: 1355, column: 3, scope: !6417)
!6471 = distinct !{!6471, !6472, !6473}
!6472 = !DILocation(line: 1355, column: 3, scope: !6413)
!6473 = !DILocation(line: 1376, column: 3, scope: !6413)
!6474 = !DILocation(line: 1378, column: 10, scope: !6401)
!6475 = !DILocation(line: 1378, column: 3, scope: !6401)
!6476 = distinct !DISubprogram(name: "__concretize_ptr", scope: !214, file: !214, line: 1338, type: !6477, scopeLine: 1338, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !217, retainedNodes: !4)
!6477 = !DISubroutineType(types: !6478)
!6478 = !{!7, !45}
!6479 = !DILocalVariable(name: "p", arg: 1, scope: !6476, file: !214, line: 1338, type: !45)
!6480 = !DILocation(line: 1338, column: 43, scope: !6476)
!6481 = !DILocalVariable(name: "pc", scope: !6476, file: !214, line: 1340, type: !19)
!6482 = !DILocation(line: 1340, column: 9, scope: !6476)
!6483 = !DILocation(line: 1340, column: 45, scope: !6476)
!6484 = !DILocation(line: 1340, column: 38, scope: !6476)
!6485 = !DILocation(line: 1340, column: 22, scope: !6476)
!6486 = !DILocation(line: 1340, column: 14, scope: !6476)
!6487 = !DILocation(line: 1341, column: 15, scope: !6476)
!6488 = !DILocation(line: 1341, column: 21, scope: !6476)
!6489 = !DILocation(line: 1341, column: 18, scope: !6476)
!6490 = !DILocation(line: 1341, column: 3, scope: !6476)
!6491 = !DILocation(line: 1342, column: 10, scope: !6476)
!6492 = !DILocation(line: 1342, column: 3, scope: !6476)
!6493 = distinct !DISubprogram(name: "umask", scope: !214, file: !214, line: 85, type: !6494, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!6494 = !DISubroutineType(types: !6495)
!6495 = !{!152, !208}
!6496 = !DILocalVariable(name: "mask", arg: 1, scope: !6493, file: !214, line: 85, type: !208)
!6497 = !DILocation(line: 85, column: 21, scope: !6493)
!6498 = !DILocalVariable(name: "r", scope: !6493, file: !214, line: 86, type: !208)
!6499 = !DILocation(line: 86, column: 10, scope: !6493)
!6500 = !DILocation(line: 86, column: 24, scope: !6493)
!6501 = !DILocation(line: 87, column: 21, scope: !6493)
!6502 = !DILocation(line: 87, column: 26, scope: !6493)
!6503 = !DILocation(line: 87, column: 19, scope: !6493)
!6504 = !DILocation(line: 88, column: 10, scope: !6493)
!6505 = !DILocation(line: 88, column: 3, scope: !6493)
!6506 = distinct !DISubprogram(name: "__fd_open", scope: !214, file: !214, line: 125, type: !6507, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!6507 = !DISubroutineType(types: !6508)
!6508 = !{!77, !273, !77, !208}
!6509 = !DILocalVariable(name: "pathname", arg: 1, scope: !6506, file: !214, line: 125, type: !273)
!6510 = !DILocation(line: 125, column: 27, scope: !6506)
!6511 = !DILocalVariable(name: "flags", arg: 2, scope: !6506, file: !214, line: 125, type: !77)
!6512 = !DILocation(line: 125, column: 41, scope: !6506)
!6513 = !DILocalVariable(name: "mode", arg: 3, scope: !6506, file: !214, line: 125, type: !208)
!6514 = !DILocation(line: 125, column: 55, scope: !6506)
!6515 = !DILocalVariable(name: "df", scope: !6506, file: !214, line: 126, type: !6303)
!6516 = !DILocation(line: 126, column: 20, scope: !6506)
!6517 = !DILocalVariable(name: "f", scope: !6506, file: !214, line: 127, type: !6518)
!6518 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6519, size: 64)
!6519 = !DIDerivedType(tag: DW_TAG_typedef, name: "exe_file_t", file: !128, line: 60, baseType: !6520)
!6520 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !128, line: 53, size: 192, elements: !6521)
!6521 = !{!6522, !6523, !6524, !6525}
!6522 = !DIDerivedType(tag: DW_TAG_member, name: "fd", scope: !6520, file: !128, line: 54, baseType: !77, size: 32)
!6523 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !6520, file: !128, line: 55, baseType: !32, size: 32, offset: 32)
!6524 = !DIDerivedType(tag: DW_TAG_member, name: "off", scope: !6520, file: !128, line: 58, baseType: !203, size: 64, offset: 64)
!6525 = !DIDerivedType(tag: DW_TAG_member, name: "dfile", scope: !6520, file: !128, line: 59, baseType: !6303, size: 64, offset: 128)
!6526 = !DILocation(line: 127, column: 15, scope: !6506)
!6527 = !DILocalVariable(name: "fd", scope: !6506, file: !214, line: 128, type: !77)
!6528 = !DILocation(line: 128, column: 7, scope: !6506)
!6529 = !DILocation(line: 130, column: 11, scope: !6530)
!6530 = distinct !DILexicalBlock(scope: !6506, file: !214, line: 130, column: 3)
!6531 = !DILocation(line: 130, column: 8, scope: !6530)
!6532 = !DILocation(line: 130, column: 16, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6530, file: !214, line: 130, column: 3)
!6534 = !DILocation(line: 130, column: 19, scope: !6533)
!6535 = !DILocation(line: 130, column: 3, scope: !6530)
!6536 = !DILocation(line: 131, column: 25, scope: !6537)
!6537 = distinct !DILexicalBlock(scope: !6533, file: !214, line: 131, column: 9)
!6538 = !DILocation(line: 131, column: 11, scope: !6537)
!6539 = !DILocation(line: 131, column: 29, scope: !6537)
!6540 = !DILocation(line: 131, column: 35, scope: !6537)
!6541 = !DILocation(line: 131, column: 9, scope: !6533)
!6542 = !DILocation(line: 130, column: 30, scope: !6533)
!6543 = !DILocation(line: 130, column: 3, scope: !6533)
!6544 = distinct !{!6544, !6535, !6545}
!6545 = !DILocation(line: 132, column: 7, scope: !6530)
!6546 = !DILocation(line: 133, column: 7, scope: !6547)
!6547 = distinct !DILexicalBlock(scope: !6506, file: !214, line: 133, column: 7)
!6548 = !DILocation(line: 133, column: 10, scope: !6547)
!6549 = !DILocation(line: 133, column: 7, scope: !6506)
!6550 = !DILocation(line: 134, column: 5, scope: !6551)
!6551 = distinct !DILexicalBlock(scope: !6547, file: !214, line: 133, column: 22)
!6552 = !DILocation(line: 134, column: 11, scope: !6551)
!6553 = !DILocation(line: 135, column: 5, scope: !6551)
!6554 = !DILocation(line: 138, column: 22, scope: !6506)
!6555 = !DILocation(line: 138, column: 8, scope: !6506)
!6556 = !DILocation(line: 138, column: 5, scope: !6506)
!6557 = !DILocation(line: 141, column: 10, scope: !6506)
!6558 = !DILocation(line: 141, column: 3, scope: !6506)
!6559 = !DILocation(line: 143, column: 23, scope: !6506)
!6560 = !DILocation(line: 143, column: 8, scope: !6506)
!6561 = !DILocation(line: 143, column: 6, scope: !6506)
!6562 = !DILocation(line: 144, column: 7, scope: !6563)
!6563 = distinct !DILexicalBlock(scope: !6506, file: !214, line: 144, column: 7)
!6564 = !DILocation(line: 144, column: 7, scope: !6506)
!6565 = !DILocation(line: 147, column: 16, scope: !6566)
!6566 = distinct !DILexicalBlock(scope: !6563, file: !214, line: 144, column: 11)
!6567 = !DILocation(line: 147, column: 5, scope: !6566)
!6568 = !DILocation(line: 147, column: 8, scope: !6566)
!6569 = !DILocation(line: 147, column: 14, scope: !6566)
!6570 = !DILocation(line: 149, column: 10, scope: !6571)
!6571 = distinct !DILexicalBlock(scope: !6566, file: !214, line: 149, column: 9)
!6572 = !DILocation(line: 149, column: 16, scope: !6571)
!6573 = !DILocation(line: 149, column: 27, scope: !6571)
!6574 = !DILocation(line: 149, column: 31, scope: !6571)
!6575 = !DILocation(line: 149, column: 37, scope: !6571)
!6576 = !DILocation(line: 149, column: 9, scope: !6566)
!6577 = !DILocation(line: 150, column: 7, scope: !6578)
!6578 = distinct !DILexicalBlock(scope: !6571, file: !214, line: 149, column: 48)
!6579 = !DILocation(line: 150, column: 13, scope: !6578)
!6580 = !DILocation(line: 151, column: 7, scope: !6578)
!6581 = !DILocation(line: 154, column: 10, scope: !6582)
!6582 = distinct !DILexicalBlock(scope: !6566, file: !214, line: 154, column: 9)
!6583 = !DILocation(line: 154, column: 16, scope: !6582)
!6584 = !DILocation(line: 154, column: 27, scope: !6582)
!6585 = !DILocation(line: 154, column: 31, scope: !6582)
!6586 = !DILocation(line: 154, column: 37, scope: !6582)
!6587 = !DILocation(line: 154, column: 9, scope: !6566)
!6588 = !DILocation(line: 157, column: 7, scope: !6589)
!6589 = distinct !DILexicalBlock(scope: !6582, file: !214, line: 154, column: 50)
!6590 = !DILocation(line: 158, column: 7, scope: !6589)
!6591 = !DILocation(line: 158, column: 13, scope: !6589)
!6592 = !DILocation(line: 159, column: 7, scope: !6589)
!6593 = !DILocation(line: 162, column: 10, scope: !6594)
!6594 = distinct !DILexicalBlock(scope: !6566, file: !214, line: 162, column: 9)
!6595 = !DILocation(line: 162, column: 16, scope: !6594)
!6596 = !DILocation(line: 162, column: 26, scope: !6594)
!6597 = !DILocation(line: 162, column: 31, scope: !6594)
!6598 = !DILocation(line: 162, column: 37, scope: !6594)
!6599 = !DILocation(line: 162, column: 9, scope: !6566)
!6600 = !DILocation(line: 165, column: 7, scope: !6601)
!6601 = distinct !DILexicalBlock(scope: !6594, file: !214, line: 162, column: 49)
!6602 = !DILocation(line: 166, column: 7, scope: !6601)
!6603 = !DILocation(line: 166, column: 13, scope: !6601)
!6604 = !DILocation(line: 167, column: 7, scope: !6601)
!6605 = !DILocation(line: 170, column: 25, scope: !6606)
!6606 = distinct !DILexicalBlock(scope: !6566, file: !214, line: 170, column: 9)
!6607 = !DILocation(line: 170, column: 32, scope: !6606)
!6608 = !DILocation(line: 170, column: 36, scope: !6606)
!6609 = !DILocation(line: 170, column: 10, scope: !6606)
!6610 = !DILocation(line: 170, column: 9, scope: !6566)
!6611 = !DILocation(line: 171, column: 2, scope: !6612)
!6612 = distinct !DILexicalBlock(scope: !6606, file: !214, line: 170, column: 43)
!6613 = !DILocation(line: 171, column: 8, scope: !6612)
!6614 = !DILocation(line: 172, column: 2, scope: !6612)
!6615 = !DILocation(line: 175, column: 35, scope: !6606)
!6616 = !DILocation(line: 175, column: 38, scope: !6606)
!6617 = !DILocation(line: 175, column: 45, scope: !6606)
!6618 = !DILocation(line: 175, column: 51, scope: !6606)
!6619 = !DILocation(line: 175, column: 59, scope: !6606)
!6620 = !DILocation(line: 176, column: 7, scope: !6606)
!6621 = !DILocation(line: 176, column: 25, scope: !6606)
!6622 = !DILocation(line: 176, column: 14, scope: !6606)
!6623 = !DILocation(line: 176, column: 12, scope: !6606)
!6624 = !DILocation(line: 175, column: 68, scope: !6606)
!6625 = !DILocation(line: 175, column: 7, scope: !6606)
!6626 = !DILocation(line: 175, column: 10, scope: !6606)
!6627 = !DILocation(line: 175, column: 17, scope: !6606)
!6628 = !DILocation(line: 175, column: 23, scope: !6606)
!6629 = !DILocation(line: 175, column: 31, scope: !6606)
!6630 = !DILocation(line: 177, column: 3, scope: !6566)
!6631 = !DILocalVariable(name: "os_fd", scope: !6632, file: !214, line: 178, type: !77)
!6632 = distinct !DILexicalBlock(scope: !6563, file: !214, line: 177, column: 10)
!6633 = !DILocation(line: 178, column: 9, scope: !6632)
!6634 = !DILocation(line: 178, column: 56, scope: !6632)
!6635 = !DILocation(line: 178, column: 36, scope: !6632)
!6636 = !DILocation(line: 178, column: 67, scope: !6632)
!6637 = !DILocation(line: 178, column: 74, scope: !6632)
!6638 = !DILocation(line: 178, column: 17, scope: !6632)
!6639 = !DILocation(line: 179, column: 9, scope: !6640)
!6640 = distinct !DILexicalBlock(scope: !6632, file: !214, line: 179, column: 9)
!6641 = !DILocation(line: 179, column: 15, scope: !6640)
!6642 = !DILocation(line: 179, column: 9, scope: !6632)
!6643 = !DILocation(line: 180, column: 7, scope: !6640)
!6644 = !DILocation(line: 181, column: 13, scope: !6632)
!6645 = !DILocation(line: 181, column: 5, scope: !6632)
!6646 = !DILocation(line: 181, column: 8, scope: !6632)
!6647 = !DILocation(line: 181, column: 11, scope: !6632)
!6648 = !DILocation(line: 184, column: 3, scope: !6506)
!6649 = !DILocation(line: 184, column: 6, scope: !6506)
!6650 = !DILocation(line: 184, column: 12, scope: !6506)
!6651 = !DILocation(line: 185, column: 8, scope: !6652)
!6652 = distinct !DILexicalBlock(scope: !6506, file: !214, line: 185, column: 7)
!6653 = !DILocation(line: 185, column: 14, scope: !6652)
!6654 = !DILocation(line: 185, column: 27, scope: !6652)
!6655 = !DILocation(line: 185, column: 7, scope: !6506)
!6656 = !DILocation(line: 186, column: 5, scope: !6657)
!6657 = distinct !DILexicalBlock(scope: !6652, file: !214, line: 185, column: 40)
!6658 = !DILocation(line: 186, column: 8, scope: !6657)
!6659 = !DILocation(line: 186, column: 14, scope: !6657)
!6660 = !DILocation(line: 187, column: 3, scope: !6657)
!6661 = !DILocation(line: 187, column: 15, scope: !6662)
!6662 = distinct !DILexicalBlock(scope: !6652, file: !214, line: 187, column: 14)
!6663 = !DILocation(line: 187, column: 21, scope: !6662)
!6664 = !DILocation(line: 187, column: 34, scope: !6662)
!6665 = !DILocation(line: 0, scope: !6662)
!6666 = !DILocation(line: 187, column: 14, scope: !6652)
!6667 = !DILocation(line: 188, column: 14, scope: !6668)
!6668 = distinct !DILexicalBlock(scope: !6662, file: !214, line: 187, column: 47)
!6669 = !DILocation(line: 189, column: 3, scope: !6668)
!6670 = !DILocation(line: 190, column: 14, scope: !6671)
!6671 = distinct !DILexicalBlock(scope: !6662, file: !214, line: 189, column: 10)
!6672 = !DILocation(line: 193, column: 10, scope: !6506)
!6673 = !DILocation(line: 193, column: 3, scope: !6506)
!6674 = !DILocation(line: 194, column: 1, scope: !6506)
!6675 = distinct !DISubprogram(name: "has_permission", scope: !214, file: !214, line: 94, type: !6676, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !217, retainedNodes: !4)
!6676 = !DISubroutineType(types: !6677)
!6677 = !{!77, !77, !6310}
!6678 = !DILocalVariable(name: "flags", arg: 1, scope: !6675, file: !214, line: 94, type: !77)
!6679 = !DILocation(line: 94, column: 31, scope: !6675)
!6680 = !DILocalVariable(name: "s", arg: 2, scope: !6675, file: !214, line: 94, type: !6310)
!6681 = !DILocation(line: 94, column: 53, scope: !6675)
!6682 = !DILocalVariable(name: "write_access", scope: !6675, file: !214, line: 95, type: !77)
!6683 = !DILocation(line: 95, column: 7, scope: !6675)
!6684 = !DILocalVariable(name: "read_access", scope: !6675, file: !214, line: 95, type: !77)
!6685 = !DILocation(line: 95, column: 21, scope: !6675)
!6686 = !DILocalVariable(name: "mode", scope: !6675, file: !214, line: 96, type: !208)
!6687 = !DILocation(line: 96, column: 10, scope: !6675)
!6688 = !DILocation(line: 96, column: 17, scope: !6675)
!6689 = !DILocation(line: 96, column: 20, scope: !6675)
!6690 = !DILocation(line: 98, column: 7, scope: !6691)
!6691 = distinct !DILexicalBlock(scope: !6675, file: !214, line: 98, column: 7)
!6692 = !DILocation(line: 98, column: 13, scope: !6691)
!6693 = !DILocation(line: 98, column: 24, scope: !6691)
!6694 = !DILocation(line: 98, column: 27, scope: !6691)
!6695 = !DILocation(line: 98, column: 33, scope: !6691)
!6696 = !DILocation(line: 98, column: 7, scope: !6675)
!6697 = !DILocation(line: 99, column: 17, scope: !6691)
!6698 = !DILocation(line: 99, column: 5, scope: !6691)
!6699 = !DILocation(line: 100, column: 20, scope: !6691)
!6700 = !DILocation(line: 102, column: 7, scope: !6701)
!6701 = distinct !DILexicalBlock(scope: !6675, file: !214, line: 102, column: 7)
!6702 = !DILocation(line: 102, column: 13, scope: !6701)
!6703 = !DILocation(line: 102, column: 24, scope: !6701)
!6704 = !DILocation(line: 102, column: 27, scope: !6701)
!6705 = !DILocation(line: 102, column: 33, scope: !6701)
!6706 = !DILocation(line: 102, column: 7, scope: !6675)
!6707 = !DILocation(line: 103, column: 18, scope: !6701)
!6708 = !DILocation(line: 103, column: 5, scope: !6701)
!6709 = !DILocation(line: 104, column: 21, scope: !6701)
!6710 = !DILocation(line: 115, column: 7, scope: !6711)
!6711 = distinct !DILexicalBlock(scope: !6675, file: !214, line: 115, column: 7)
!6712 = !DILocation(line: 115, column: 19, scope: !6711)
!6713 = !DILocation(line: 115, column: 24, scope: !6711)
!6714 = !DILocation(line: 115, column: 29, scope: !6711)
!6715 = !DILocation(line: 115, column: 43, scope: !6711)
!6716 = !DILocation(line: 115, column: 48, scope: !6711)
!6717 = !DILocation(line: 115, column: 40, scope: !6711)
!6718 = !DILocation(line: 115, column: 62, scope: !6711)
!6719 = !DILocation(line: 115, column: 67, scope: !6711)
!6720 = !DILocation(line: 115, column: 59, scope: !6711)
!6721 = !DILocation(line: 115, column: 7, scope: !6675)
!6722 = !DILocation(line: 116, column: 5, scope: !6711)
!6723 = !DILocation(line: 118, column: 7, scope: !6724)
!6724 = distinct !DILexicalBlock(scope: !6675, file: !214, line: 118, column: 7)
!6725 = !DILocation(line: 118, column: 20, scope: !6724)
!6726 = !DILocation(line: 118, column: 26, scope: !6724)
!6727 = !DILocation(line: 118, column: 31, scope: !6724)
!6728 = !DILocation(line: 118, column: 45, scope: !6724)
!6729 = !DILocation(line: 118, column: 50, scope: !6724)
!6730 = !DILocation(line: 118, column: 42, scope: !6724)
!6731 = !DILocation(line: 118, column: 64, scope: !6724)
!6732 = !DILocation(line: 118, column: 69, scope: !6724)
!6733 = !DILocation(line: 118, column: 61, scope: !6724)
!6734 = !DILocation(line: 118, column: 7, scope: !6675)
!6735 = !DILocation(line: 119, column: 5, scope: !6724)
!6736 = !DILocation(line: 121, column: 3, scope: !6675)
!6737 = !DILocation(line: 122, column: 1, scope: !6675)
!6738 = distinct !DISubprogram(name: "__fd_openat", scope: !214, file: !214, line: 196, type: !6739, scopeLine: 196, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!6739 = !DISubroutineType(types: !6740)
!6740 = !{!77, !77, !273, !77, !208}
!6741 = !DILocalVariable(name: "basefd", arg: 1, scope: !6738, file: !214, line: 196, type: !77)
!6742 = !DILocation(line: 196, column: 21, scope: !6738)
!6743 = !DILocalVariable(name: "pathname", arg: 2, scope: !6738, file: !214, line: 196, type: !273)
!6744 = !DILocation(line: 196, column: 41, scope: !6738)
!6745 = !DILocalVariable(name: "flags", arg: 3, scope: !6738, file: !214, line: 196, type: !77)
!6746 = !DILocation(line: 196, column: 55, scope: !6738)
!6747 = !DILocalVariable(name: "mode", arg: 4, scope: !6738, file: !214, line: 196, type: !208)
!6748 = !DILocation(line: 196, column: 69, scope: !6738)
!6749 = !DILocalVariable(name: "f", scope: !6738, file: !214, line: 197, type: !6518)
!6750 = !DILocation(line: 197, column: 15, scope: !6738)
!6751 = !DILocalVariable(name: "fd", scope: !6738, file: !214, line: 198, type: !77)
!6752 = !DILocation(line: 198, column: 7, scope: !6738)
!6753 = !DILocation(line: 199, column: 7, scope: !6754)
!6754 = distinct !DILexicalBlock(scope: !6738, file: !214, line: 199, column: 7)
!6755 = !DILocation(line: 199, column: 14, scope: !6754)
!6756 = !DILocation(line: 199, column: 7, scope: !6738)
!6757 = !DILocalVariable(name: "bf", scope: !6758, file: !214, line: 200, type: !6518)
!6758 = distinct !DILexicalBlock(scope: !6754, file: !214, line: 199, column: 27)
!6759 = !DILocation(line: 200, column: 17, scope: !6758)
!6760 = !DILocation(line: 200, column: 33, scope: !6758)
!6761 = !DILocation(line: 200, column: 22, scope: !6758)
!6762 = !DILocation(line: 202, column: 10, scope: !6763)
!6763 = distinct !DILexicalBlock(scope: !6758, file: !214, line: 202, column: 9)
!6764 = !DILocation(line: 202, column: 9, scope: !6758)
!6765 = !DILocation(line: 203, column: 7, scope: !6766)
!6766 = distinct !DILexicalBlock(scope: !6763, file: !214, line: 202, column: 14)
!6767 = !DILocation(line: 203, column: 13, scope: !6766)
!6768 = !DILocation(line: 204, column: 7, scope: !6766)
!6769 = !DILocation(line: 205, column: 16, scope: !6770)
!6770 = distinct !DILexicalBlock(scope: !6763, file: !214, line: 205, column: 16)
!6771 = !DILocation(line: 205, column: 20, scope: !6770)
!6772 = !DILocation(line: 205, column: 16, scope: !6763)
!6773 = !DILocation(line: 206, column: 7, scope: !6774)
!6774 = distinct !DILexicalBlock(scope: !6770, file: !214, line: 205, column: 27)
!6775 = !DILocation(line: 207, column: 7, scope: !6774)
!6776 = !DILocation(line: 207, column: 13, scope: !6774)
!6777 = !DILocation(line: 208, column: 7, scope: !6774)
!6778 = !DILocation(line: 210, column: 14, scope: !6758)
!6779 = !DILocation(line: 210, column: 18, scope: !6758)
!6780 = !DILocation(line: 210, column: 12, scope: !6758)
!6781 = !DILocation(line: 211, column: 3, scope: !6758)
!6782 = !DILocation(line: 213, column: 22, scope: !6783)
!6783 = distinct !DILexicalBlock(scope: !6738, file: !214, line: 213, column: 7)
!6784 = !DILocation(line: 213, column: 7, scope: !6783)
!6785 = !DILocation(line: 213, column: 7, scope: !6738)
!6786 = !DILocation(line: 215, column: 22, scope: !6787)
!6787 = distinct !DILexicalBlock(scope: !6783, file: !214, line: 213, column: 33)
!6788 = !DILocation(line: 215, column: 32, scope: !6787)
!6789 = !DILocation(line: 215, column: 39, scope: !6787)
!6790 = !DILocation(line: 215, column: 12, scope: !6787)
!6791 = !DILocation(line: 215, column: 5, scope: !6787)
!6792 = !DILocation(line: 218, column: 11, scope: !6793)
!6793 = distinct !DILexicalBlock(scope: !6738, file: !214, line: 218, column: 3)
!6794 = !DILocation(line: 218, column: 8, scope: !6793)
!6795 = !DILocation(line: 218, column: 16, scope: !6796)
!6796 = distinct !DILexicalBlock(scope: !6793, file: !214, line: 218, column: 3)
!6797 = !DILocation(line: 218, column: 19, scope: !6796)
!6798 = !DILocation(line: 218, column: 3, scope: !6793)
!6799 = !DILocation(line: 219, column: 25, scope: !6800)
!6800 = distinct !DILexicalBlock(scope: !6796, file: !214, line: 219, column: 9)
!6801 = !DILocation(line: 219, column: 11, scope: !6800)
!6802 = !DILocation(line: 219, column: 29, scope: !6800)
!6803 = !DILocation(line: 219, column: 35, scope: !6800)
!6804 = !DILocation(line: 219, column: 9, scope: !6796)
!6805 = !DILocation(line: 218, column: 30, scope: !6796)
!6806 = !DILocation(line: 218, column: 3, scope: !6796)
!6807 = distinct !{!6807, !6798, !6808}
!6808 = !DILocation(line: 220, column: 7, scope: !6793)
!6809 = !DILocation(line: 221, column: 7, scope: !6810)
!6810 = distinct !DILexicalBlock(scope: !6738, file: !214, line: 221, column: 7)
!6811 = !DILocation(line: 221, column: 10, scope: !6810)
!6812 = !DILocation(line: 221, column: 7, scope: !6738)
!6813 = !DILocation(line: 222, column: 5, scope: !6814)
!6814 = distinct !DILexicalBlock(scope: !6810, file: !214, line: 221, column: 22)
!6815 = !DILocation(line: 222, column: 11, scope: !6814)
!6816 = !DILocation(line: 223, column: 5, scope: !6814)
!6817 = !DILocation(line: 226, column: 22, scope: !6738)
!6818 = !DILocation(line: 226, column: 8, scope: !6738)
!6819 = !DILocation(line: 226, column: 5, scope: !6738)
!6820 = !DILocation(line: 229, column: 10, scope: !6738)
!6821 = !DILocation(line: 229, column: 3, scope: !6738)
!6822 = !DILocalVariable(name: "os_fd", scope: !6738, file: !214, line: 231, type: !77)
!6823 = !DILocation(line: 231, column: 7, scope: !6738)
!6824 = !DILocation(line: 231, column: 42, scope: !6738)
!6825 = !DILocation(line: 231, column: 36, scope: !6738)
!6826 = !DILocation(line: 231, column: 70, scope: !6738)
!6827 = !DILocation(line: 231, column: 50, scope: !6738)
!6828 = !DILocation(line: 231, column: 87, scope: !6738)
!6829 = !DILocation(line: 231, column: 81, scope: !6738)
!6830 = !DILocation(line: 231, column: 94, scope: !6738)
!6831 = !DILocation(line: 231, column: 15, scope: !6738)
!6832 = !DILocation(line: 232, column: 7, scope: !6833)
!6833 = distinct !DILexicalBlock(scope: !6738, file: !214, line: 232, column: 7)
!6834 = !DILocation(line: 232, column: 13, scope: !6833)
!6835 = !DILocation(line: 232, column: 7, scope: !6738)
!6836 = !DILocation(line: 233, column: 5, scope: !6833)
!6837 = !DILocation(line: 235, column: 11, scope: !6738)
!6838 = !DILocation(line: 235, column: 3, scope: !6738)
!6839 = !DILocation(line: 235, column: 6, scope: !6738)
!6840 = !DILocation(line: 235, column: 9, scope: !6738)
!6841 = !DILocation(line: 236, column: 3, scope: !6738)
!6842 = !DILocation(line: 236, column: 6, scope: !6738)
!6843 = !DILocation(line: 236, column: 12, scope: !6738)
!6844 = !DILocation(line: 237, column: 8, scope: !6845)
!6845 = distinct !DILexicalBlock(scope: !6738, file: !214, line: 237, column: 7)
!6846 = !DILocation(line: 237, column: 14, scope: !6845)
!6847 = !DILocation(line: 237, column: 27, scope: !6845)
!6848 = !DILocation(line: 237, column: 7, scope: !6738)
!6849 = !DILocation(line: 238, column: 5, scope: !6850)
!6850 = distinct !DILexicalBlock(scope: !6845, file: !214, line: 237, column: 40)
!6851 = !DILocation(line: 238, column: 8, scope: !6850)
!6852 = !DILocation(line: 238, column: 14, scope: !6850)
!6853 = !DILocation(line: 239, column: 3, scope: !6850)
!6854 = !DILocation(line: 239, column: 15, scope: !6855)
!6855 = distinct !DILexicalBlock(scope: !6845, file: !214, line: 239, column: 14)
!6856 = !DILocation(line: 239, column: 21, scope: !6855)
!6857 = !DILocation(line: 239, column: 34, scope: !6855)
!6858 = !DILocation(line: 0, scope: !6855)
!6859 = !DILocation(line: 239, column: 14, scope: !6845)
!6860 = !DILocation(line: 240, column: 14, scope: !6861)
!6861 = distinct !DILexicalBlock(scope: !6855, file: !214, line: 239, column: 47)
!6862 = !DILocation(line: 241, column: 3, scope: !6861)
!6863 = !DILocation(line: 242, column: 14, scope: !6864)
!6864 = distinct !DILexicalBlock(scope: !6855, file: !214, line: 241, column: 10)
!6865 = !DILocation(line: 245, column: 10, scope: !6738)
!6866 = !DILocation(line: 245, column: 3, scope: !6738)
!6867 = !DILocation(line: 246, column: 1, scope: !6738)
!6868 = distinct !DISubprogram(name: "__get_file", scope: !214, file: !214, line: 64, type: !6869, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !217, retainedNodes: !4)
!6869 = !DISubroutineType(types: !6870)
!6870 = !{!6518, !77}
!6871 = !DILocalVariable(name: "fd", arg: 1, scope: !6868, file: !214, line: 64, type: !77)
!6872 = !DILocation(line: 64, column: 35, scope: !6868)
!6873 = !DILocation(line: 65, column: 7, scope: !6874)
!6874 = distinct !DILexicalBlock(scope: !6868, file: !214, line: 65, column: 7)
!6875 = !DILocation(line: 65, column: 9, scope: !6874)
!6876 = !DILocation(line: 65, column: 16, scope: !6874)
!6877 = !DILocation(line: 65, column: 18, scope: !6874)
!6878 = !DILocation(line: 65, column: 13, scope: !6874)
!6879 = !DILocalVariable(name: "f", scope: !6880, file: !214, line: 66, type: !6518)
!6880 = distinct !DILexicalBlock(scope: !6874, file: !214, line: 65, column: 28)
!6881 = !DILocation(line: 66, column: 17, scope: !6880)
!6882 = !DILocation(line: 66, column: 36, scope: !6880)
!6883 = !DILocation(line: 66, column: 22, scope: !6880)
!6884 = !DILocation(line: 67, column: 9, scope: !6885)
!6885 = distinct !DILexicalBlock(scope: !6880, file: !214, line: 67, column: 9)
!6886 = !DILocation(line: 67, column: 12, scope: !6885)
!6887 = !DILocation(line: 67, column: 18, scope: !6885)
!6888 = !DILocation(line: 67, column: 9, scope: !6880)
!6889 = !DILocation(line: 68, column: 14, scope: !6885)
!6890 = !DILocation(line: 68, column: 7, scope: !6885)
!6891 = !DILocation(line: 71, column: 3, scope: !6868)
!6892 = !DILocation(line: 72, column: 1, scope: !6868)
!6893 = distinct !DISubprogram(name: "utimes", scope: !214, file: !214, line: 249, type: !6894, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!6894 = !DISubroutineType(types: !6895)
!6895 = !{!77, !273, !6896}
!6896 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6897, size: 64)
!6897 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6898)
!6898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !6899, line: 8, size: 128, elements: !6900)
!6899 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h", directory: "")
!6900 = !{!6901, !6902}
!6901 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !6898, file: !6899, line: 10, baseType: !171, size: 64)
!6902 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !6898, file: !6899, line: 11, baseType: !6903, size: 64, offset: 64)
!6903 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !146, line: 150, baseType: !161)
!6904 = !DILocalVariable(name: "path", arg: 1, scope: !6893, file: !214, line: 249, type: !273)
!6905 = !DILocation(line: 249, column: 24, scope: !6893)
!6906 = !DILocalVariable(name: "times", arg: 2, scope: !6893, file: !214, line: 249, type: !6896)
!6907 = !DILocation(line: 249, column: 51, scope: !6893)
!6908 = !DILocalVariable(name: "dfile", scope: !6893, file: !214, line: 250, type: !6303)
!6909 = !DILocation(line: 250, column: 20, scope: !6893)
!6910 = !DILocation(line: 250, column: 43, scope: !6893)
!6911 = !DILocation(line: 250, column: 28, scope: !6893)
!6912 = !DILocation(line: 252, column: 7, scope: !6913)
!6913 = distinct !DILexicalBlock(scope: !6893, file: !214, line: 252, column: 7)
!6914 = !DILocation(line: 252, column: 7, scope: !6893)
!6915 = !DILocation(line: 254, column: 10, scope: !6916)
!6916 = distinct !DILexicalBlock(scope: !6917, file: !214, line: 254, column: 9)
!6917 = distinct !DILexicalBlock(scope: !6913, file: !214, line: 252, column: 14)
!6918 = !DILocation(line: 254, column: 9, scope: !6917)
!6919 = !DILocalVariable(name: "newTimes", scope: !6920, file: !214, line: 255, type: !6921)
!6920 = distinct !DILexicalBlock(scope: !6916, file: !214, line: 254, column: 17)
!6921 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6898, size: 256, elements: !1759)
!6922 = !DILocation(line: 255, column: 22, scope: !6920)
!6923 = !DILocation(line: 256, column: 22, scope: !6920)
!6924 = !DILocation(line: 256, column: 7, scope: !6920)
!6925 = !DILocation(line: 257, column: 7, scope: !6920)
!6926 = !DILocation(line: 257, column: 21, scope: !6920)
!6927 = !DILocation(line: 258, column: 15, scope: !6920)
!6928 = !DILocation(line: 258, column: 13, scope: !6920)
!6929 = !DILocation(line: 259, column: 5, scope: !6920)
!6930 = !DILocation(line: 262, column: 29, scope: !6917)
!6931 = !DILocation(line: 262, column: 38, scope: !6917)
!6932 = !DILocation(line: 262, column: 5, scope: !6917)
!6933 = !DILocation(line: 262, column: 12, scope: !6917)
!6934 = !DILocation(line: 262, column: 18, scope: !6917)
!6935 = !DILocation(line: 262, column: 27, scope: !6917)
!6936 = !DILocation(line: 263, column: 29, scope: !6917)
!6937 = !DILocation(line: 263, column: 38, scope: !6917)
!6938 = !DILocation(line: 263, column: 5, scope: !6917)
!6939 = !DILocation(line: 263, column: 12, scope: !6917)
!6940 = !DILocation(line: 263, column: 18, scope: !6917)
!6941 = !DILocation(line: 263, column: 27, scope: !6917)
!6942 = !DILocation(line: 268, column: 5, scope: !6917)
!6943 = !DILocation(line: 270, column: 51, scope: !6893)
!6944 = !DILocation(line: 270, column: 31, scope: !6893)
!6945 = !DILocation(line: 270, column: 58, scope: !6893)
!6946 = !DILocation(line: 270, column: 10, scope: !6893)
!6947 = !DILocation(line: 270, column: 3, scope: !6893)
!6948 = !DILocation(line: 271, column: 1, scope: !6893)
!6949 = distinct !DISubprogram(name: "futimesat", scope: !214, file: !214, line: 274, type: !6950, scopeLine: 274, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!6950 = !DISubroutineType(types: !6951)
!6951 = !{!77, !77, !273, !6896}
!6952 = !DILocalVariable(name: "fd", arg: 1, scope: !6949, file: !214, line: 274, type: !77)
!6953 = !DILocation(line: 274, column: 19, scope: !6949)
!6954 = !DILocalVariable(name: "path", arg: 2, scope: !6949, file: !214, line: 274, type: !273)
!6955 = !DILocation(line: 274, column: 35, scope: !6949)
!6956 = !DILocalVariable(name: "times", arg: 3, scope: !6949, file: !214, line: 274, type: !6896)
!6957 = !DILocation(line: 274, column: 62, scope: !6949)
!6958 = !DILocation(line: 275, column: 7, scope: !6959)
!6959 = distinct !DILexicalBlock(scope: !6949, file: !214, line: 275, column: 7)
!6960 = !DILocation(line: 275, column: 10, scope: !6959)
!6961 = !DILocation(line: 275, column: 7, scope: !6949)
!6962 = !DILocalVariable(name: "f", scope: !6963, file: !214, line: 276, type: !6518)
!6963 = distinct !DILexicalBlock(scope: !6959, file: !214, line: 275, column: 23)
!6964 = !DILocation(line: 276, column: 17, scope: !6963)
!6965 = !DILocation(line: 276, column: 32, scope: !6963)
!6966 = !DILocation(line: 276, column: 21, scope: !6963)
!6967 = !DILocation(line: 278, column: 10, scope: !6968)
!6968 = distinct !DILexicalBlock(scope: !6963, file: !214, line: 278, column: 9)
!6969 = !DILocation(line: 278, column: 9, scope: !6963)
!6970 = !DILocation(line: 279, column: 7, scope: !6971)
!6971 = distinct !DILexicalBlock(scope: !6968, file: !214, line: 278, column: 13)
!6972 = !DILocation(line: 279, column: 13, scope: !6971)
!6973 = !DILocation(line: 280, column: 7, scope: !6971)
!6974 = !DILocation(line: 281, column: 16, scope: !6975)
!6975 = distinct !DILexicalBlock(scope: !6968, file: !214, line: 281, column: 16)
!6976 = !DILocation(line: 281, column: 19, scope: !6975)
!6977 = !DILocation(line: 281, column: 16, scope: !6968)
!6978 = !DILocation(line: 282, column: 7, scope: !6979)
!6979 = distinct !DILexicalBlock(scope: !6975, file: !214, line: 281, column: 26)
!6980 = !DILocation(line: 283, column: 7, scope: !6979)
!6981 = !DILocation(line: 283, column: 13, scope: !6979)
!6982 = !DILocation(line: 284, column: 7, scope: !6979)
!6983 = !DILocation(line: 286, column: 10, scope: !6963)
!6984 = !DILocation(line: 286, column: 13, scope: !6963)
!6985 = !DILocation(line: 286, column: 8, scope: !6963)
!6986 = !DILocation(line: 287, column: 3, scope: !6963)
!6987 = !DILocation(line: 288, column: 22, scope: !6988)
!6988 = distinct !DILexicalBlock(scope: !6949, file: !214, line: 288, column: 7)
!6989 = !DILocation(line: 288, column: 7, scope: !6988)
!6990 = !DILocation(line: 288, column: 7, scope: !6949)
!6991 = !DILocation(line: 289, column: 19, scope: !6992)
!6992 = distinct !DILexicalBlock(scope: !6988, file: !214, line: 288, column: 29)
!6993 = !DILocation(line: 289, column: 25, scope: !6992)
!6994 = !DILocation(line: 289, column: 12, scope: !6992)
!6995 = !DILocation(line: 289, column: 5, scope: !6992)
!6996 = !DILocation(line: 292, column: 40, scope: !6949)
!6997 = !DILocation(line: 292, column: 34, scope: !6949)
!6998 = !DILocation(line: 293, column: 19, scope: !6949)
!6999 = !DILocation(line: 293, column: 46, scope: !6949)
!7000 = !DILocation(line: 293, column: 26, scope: !6949)
!7001 = !DILocation(line: 293, column: 61, scope: !6949)
!7002 = !DILocation(line: 292, column: 10, scope: !6949)
!7003 = !DILocation(line: 292, column: 3, scope: !6949)
!7004 = !DILocation(line: 294, column: 1, scope: !6949)
!7005 = !DILocalVariable(name: "fd", arg: 1, scope: !213, file: !214, line: 296, type: !77)
!7006 = !DILocation(line: 296, column: 15, scope: !213)
!7007 = !DILocalVariable(name: "f", scope: !213, file: !214, line: 298, type: !6518)
!7008 = !DILocation(line: 298, column: 15, scope: !213)
!7009 = !DILocalVariable(name: "r", scope: !213, file: !214, line: 299, type: !77)
!7010 = !DILocation(line: 299, column: 7, scope: !213)
!7011 = !DILocation(line: 301, column: 10, scope: !213)
!7012 = !DILocation(line: 303, column: 18, scope: !213)
!7013 = !DILocation(line: 303, column: 7, scope: !213)
!7014 = !DILocation(line: 303, column: 5, scope: !213)
!7015 = !DILocation(line: 304, column: 8, scope: !7016)
!7016 = distinct !DILexicalBlock(scope: !213, file: !214, line: 304, column: 7)
!7017 = !DILocation(line: 304, column: 7, scope: !213)
!7018 = !DILocation(line: 305, column: 5, scope: !7019)
!7019 = distinct !DILexicalBlock(scope: !7016, file: !214, line: 304, column: 11)
!7020 = !DILocation(line: 305, column: 11, scope: !7019)
!7021 = !DILocation(line: 306, column: 5, scope: !7019)
!7022 = !DILocation(line: 309, column: 16, scope: !7023)
!7023 = distinct !DILexicalBlock(scope: !213, file: !214, line: 309, column: 7)
!7024 = !DILocation(line: 309, column: 7, scope: !7023)
!7025 = !DILocation(line: 309, column: 29, scope: !7023)
!7026 = !DILocation(line: 309, column: 42, scope: !7023)
!7027 = !DILocation(line: 309, column: 32, scope: !7023)
!7028 = !DILocation(line: 309, column: 56, scope: !7023)
!7029 = !DILocation(line: 309, column: 53, scope: !7023)
!7030 = !DILocation(line: 309, column: 7, scope: !213)
!7031 = !DILocation(line: 310, column: 26, scope: !7032)
!7032 = distinct !DILexicalBlock(scope: !7023, file: !214, line: 309, column: 65)
!7033 = !DILocation(line: 311, column: 5, scope: !7032)
!7034 = !DILocation(line: 311, column: 11, scope: !7032)
!7035 = !DILocation(line: 312, column: 5, scope: !7032)
!7036 = !DILocation(line: 323, column: 10, scope: !213)
!7037 = !DILocation(line: 323, column: 3, scope: !213)
!7038 = !DILocation(line: 325, column: 10, scope: !213)
!7039 = !DILocation(line: 325, column: 3, scope: !213)
!7040 = !DILocation(line: 326, column: 1, scope: !213)
!7041 = !DILocalVariable(name: "fd", arg: 1, scope: !256, file: !214, line: 328, type: !77)
!7042 = !DILocation(line: 328, column: 18, scope: !256)
!7043 = !DILocalVariable(name: "buf", arg: 2, scope: !256, file: !214, line: 328, type: !7)
!7044 = !DILocation(line: 328, column: 28, scope: !256)
!7045 = !DILocalVariable(name: "count", arg: 3, scope: !256, file: !214, line: 328, type: !261)
!7046 = !DILocation(line: 328, column: 40, scope: !256)
!7047 = !DILocalVariable(name: "f", scope: !256, file: !214, line: 330, type: !6518)
!7048 = !DILocation(line: 330, column: 15, scope: !256)
!7049 = !DILocation(line: 332, column: 10, scope: !256)
!7050 = !DILocation(line: 334, column: 7, scope: !7051)
!7051 = distinct !DILexicalBlock(scope: !256, file: !214, line: 334, column: 7)
!7052 = !DILocation(line: 334, column: 13, scope: !7051)
!7053 = !DILocation(line: 334, column: 7, scope: !256)
!7054 = !DILocation(line: 335, column: 5, scope: !7051)
!7055 = !DILocation(line: 337, column: 7, scope: !7056)
!7056 = distinct !DILexicalBlock(scope: !256, file: !214, line: 337, column: 7)
!7057 = !DILocation(line: 337, column: 11, scope: !7056)
!7058 = !DILocation(line: 337, column: 7, scope: !256)
!7059 = !DILocation(line: 338, column: 5, scope: !7060)
!7060 = distinct !DILexicalBlock(scope: !7056, file: !214, line: 337, column: 20)
!7061 = !DILocation(line: 338, column: 11, scope: !7060)
!7062 = !DILocation(line: 339, column: 5, scope: !7060)
!7063 = !DILocation(line: 342, column: 18, scope: !256)
!7064 = !DILocation(line: 342, column: 7, scope: !256)
!7065 = !DILocation(line: 342, column: 5, scope: !256)
!7066 = !DILocation(line: 344, column: 8, scope: !7067)
!7067 = distinct !DILexicalBlock(scope: !256, file: !214, line: 344, column: 7)
!7068 = !DILocation(line: 344, column: 7, scope: !256)
!7069 = !DILocation(line: 345, column: 5, scope: !7070)
!7070 = distinct !DILexicalBlock(scope: !7067, file: !214, line: 344, column: 11)
!7071 = !DILocation(line: 345, column: 11, scope: !7070)
!7072 = !DILocation(line: 346, column: 5, scope: !7070)
!7073 = !DILocation(line: 349, column: 16, scope: !7074)
!7074 = distinct !DILexicalBlock(scope: !256, file: !214, line: 349, column: 7)
!7075 = !DILocation(line: 349, column: 7, scope: !7074)
!7076 = !DILocation(line: 349, column: 29, scope: !7074)
!7077 = !DILocation(line: 349, column: 42, scope: !7074)
!7078 = !DILocation(line: 349, column: 32, scope: !7074)
!7079 = !DILocation(line: 349, column: 55, scope: !7074)
!7080 = !DILocation(line: 349, column: 52, scope: !7074)
!7081 = !DILocation(line: 349, column: 7, scope: !256)
!7082 = !DILocation(line: 350, column: 26, scope: !7083)
!7083 = distinct !DILexicalBlock(scope: !7074, file: !214, line: 349, column: 64)
!7084 = !DILocation(line: 351, column: 5, scope: !7083)
!7085 = !DILocation(line: 351, column: 11, scope: !7083)
!7086 = !DILocation(line: 352, column: 5, scope: !7083)
!7087 = !DILocation(line: 355, column: 8, scope: !7088)
!7088 = distinct !DILexicalBlock(scope: !256, file: !214, line: 355, column: 7)
!7089 = !DILocation(line: 355, column: 11, scope: !7088)
!7090 = !DILocation(line: 355, column: 7, scope: !256)
!7091 = !DILocalVariable(name: "r", scope: !7092, file: !214, line: 357, type: !77)
!7092 = distinct !DILexicalBlock(scope: !7088, file: !214, line: 355, column: 18)
!7093 = !DILocation(line: 357, column: 9, scope: !7092)
!7094 = !DILocation(line: 358, column: 28, scope: !7092)
!7095 = !DILocation(line: 358, column: 11, scope: !7092)
!7096 = !DILocation(line: 358, column: 9, scope: !7092)
!7097 = !DILocation(line: 359, column: 31, scope: !7092)
!7098 = !DILocation(line: 359, column: 13, scope: !7092)
!7099 = !DILocation(line: 359, column: 11, scope: !7092)
!7100 = !DILocation(line: 363, column: 30, scope: !7092)
!7101 = !DILocation(line: 363, column: 35, scope: !7092)
!7102 = !DILocation(line: 363, column: 5, scope: !7092)
!7103 = !DILocation(line: 364, column: 9, scope: !7104)
!7104 = distinct !DILexicalBlock(scope: !7092, file: !214, line: 364, column: 9)
!7105 = !DILocation(line: 364, column: 12, scope: !7104)
!7106 = !DILocation(line: 364, column: 15, scope: !7104)
!7107 = !DILocation(line: 0, scope: !7104)
!7108 = !DILocation(line: 364, column: 9, scope: !7092)
!7109 = !DILocation(line: 365, column: 11, scope: !7104)
!7110 = !DILocation(line: 365, column: 9, scope: !7104)
!7111 = !DILocation(line: 365, column: 7, scope: !7104)
!7112 = !DILocation(line: 367, column: 62, scope: !7104)
!7113 = !DILocation(line: 367, column: 65, scope: !7104)
!7114 = !DILocation(line: 367, column: 11, scope: !7104)
!7115 = !DILocation(line: 367, column: 9, scope: !7104)
!7116 = !DILocation(line: 369, column: 9, scope: !7117)
!7117 = distinct !DILexicalBlock(scope: !7092, file: !214, line: 369, column: 9)
!7118 = !DILocation(line: 369, column: 11, scope: !7117)
!7119 = !DILocation(line: 369, column: 9, scope: !7092)
!7120 = !DILocation(line: 370, column: 7, scope: !7117)
!7121 = !DILocation(line: 372, column: 9, scope: !7122)
!7122 = distinct !DILexicalBlock(scope: !7092, file: !214, line: 372, column: 9)
!7123 = !DILocation(line: 372, column: 12, scope: !7122)
!7124 = !DILocation(line: 372, column: 15, scope: !7122)
!7125 = !DILocation(line: 372, column: 9, scope: !7092)
!7126 = !DILocation(line: 373, column: 17, scope: !7122)
!7127 = !DILocation(line: 373, column: 7, scope: !7122)
!7128 = !DILocation(line: 373, column: 10, scope: !7122)
!7129 = !DILocation(line: 373, column: 14, scope: !7122)
!7130 = !DILocation(line: 374, column: 12, scope: !7092)
!7131 = !DILocation(line: 374, column: 5, scope: !7092)
!7132 = !DILocation(line: 377, column: 5, scope: !7133)
!7133 = distinct !DILexicalBlock(scope: !7134, file: !214, line: 377, column: 5)
!7134 = distinct !DILexicalBlock(scope: !7135, file: !214, line: 377, column: 5)
!7135 = distinct !DILexicalBlock(scope: !7088, file: !214, line: 376, column: 8)
!7136 = !DILocation(line: 377, column: 5, scope: !7134)
!7137 = !DILocation(line: 378, column: 19, scope: !7138)
!7138 = distinct !DILexicalBlock(scope: !7135, file: !214, line: 378, column: 9)
!7139 = !DILocation(line: 378, column: 22, scope: !7138)
!7140 = !DILocation(line: 378, column: 29, scope: !7138)
!7141 = !DILocation(line: 378, column: 10, scope: !7138)
!7142 = !DILocation(line: 378, column: 37, scope: !7138)
!7143 = !DILocation(line: 378, column: 40, scope: !7138)
!7144 = !DILocation(line: 378, column: 35, scope: !7138)
!7145 = !DILocation(line: 378, column: 9, scope: !7135)
!7146 = !DILocation(line: 379, column: 7, scope: !7138)
!7147 = !DILocation(line: 382, column: 9, scope: !7148)
!7148 = distinct !DILexicalBlock(scope: !7135, file: !214, line: 382, column: 9)
!7149 = !DILocation(line: 382, column: 12, scope: !7148)
!7150 = !DILocation(line: 382, column: 18, scope: !7148)
!7151 = !DILocation(line: 382, column: 16, scope: !7148)
!7152 = !DILocation(line: 382, column: 26, scope: !7148)
!7153 = !DILocation(line: 382, column: 29, scope: !7148)
!7154 = !DILocation(line: 382, column: 36, scope: !7148)
!7155 = !DILocation(line: 382, column: 24, scope: !7148)
!7156 = !DILocation(line: 382, column: 9, scope: !7135)
!7157 = !DILocation(line: 383, column: 15, scope: !7158)
!7158 = distinct !DILexicalBlock(scope: !7148, file: !214, line: 382, column: 42)
!7159 = !DILocation(line: 383, column: 18, scope: !7158)
!7160 = !DILocation(line: 383, column: 25, scope: !7158)
!7161 = !DILocation(line: 383, column: 32, scope: !7158)
!7162 = !DILocation(line: 383, column: 35, scope: !7158)
!7163 = !DILocation(line: 383, column: 30, scope: !7158)
!7164 = !DILocation(line: 383, column: 13, scope: !7158)
!7165 = !DILocation(line: 384, column: 5, scope: !7158)
!7166 = !DILocation(line: 386, column: 12, scope: !7135)
!7167 = !DILocation(line: 386, column: 17, scope: !7135)
!7168 = !DILocation(line: 386, column: 20, scope: !7135)
!7169 = !DILocation(line: 386, column: 27, scope: !7135)
!7170 = !DILocation(line: 386, column: 38, scope: !7135)
!7171 = !DILocation(line: 386, column: 41, scope: !7135)
!7172 = !DILocation(line: 386, column: 36, scope: !7135)
!7173 = !DILocation(line: 386, column: 46, scope: !7135)
!7174 = !DILocation(line: 386, column: 5, scope: !7135)
!7175 = !DILocation(line: 387, column: 15, scope: !7135)
!7176 = !DILocation(line: 387, column: 5, scope: !7135)
!7177 = !DILocation(line: 387, column: 8, scope: !7135)
!7178 = !DILocation(line: 387, column: 12, scope: !7135)
!7179 = !DILocation(line: 389, column: 12, scope: !7135)
!7180 = !DILocation(line: 389, column: 5, scope: !7135)
!7181 = !DILocation(line: 391, column: 1, scope: !256)
!7182 = distinct !DISubprogram(name: "__concretize_size", scope: !214, file: !214, line: 1345, type: !7183, scopeLine: 1345, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7183 = !DISubroutineType(types: !7184)
!7184 = !{!261, !261}
!7185 = !DILocalVariable(name: "s", arg: 1, scope: !7182, file: !214, line: 1345, type: !261)
!7186 = !DILocation(line: 1345, column: 40, scope: !7182)
!7187 = !DILocalVariable(name: "sc", scope: !7182, file: !214, line: 1346, type: !261)
!7188 = !DILocation(line: 1346, column: 10, scope: !7182)
!7189 = !DILocation(line: 1346, column: 37, scope: !7182)
!7190 = !DILocation(line: 1346, column: 15, scope: !7182)
!7191 = !DILocation(line: 1347, column: 15, scope: !7182)
!7192 = !DILocation(line: 1347, column: 21, scope: !7182)
!7193 = !DILocation(line: 1347, column: 18, scope: !7182)
!7194 = !DILocation(line: 1347, column: 3, scope: !7182)
!7195 = !DILocation(line: 1348, column: 10, scope: !7182)
!7196 = !DILocation(line: 1348, column: 3, scope: !7182)
!7197 = !DILocalVariable(name: "fd", arg: 1, scope: !265, file: !214, line: 394, type: !77)
!7198 = !DILocation(line: 394, column: 19, scope: !265)
!7199 = !DILocalVariable(name: "buf", arg: 2, scope: !265, file: !214, line: 394, type: !45)
!7200 = !DILocation(line: 394, column: 35, scope: !265)
!7201 = !DILocalVariable(name: "count", arg: 3, scope: !265, file: !214, line: 394, type: !261)
!7202 = !DILocation(line: 394, column: 47, scope: !265)
!7203 = !DILocalVariable(name: "f", scope: !265, file: !214, line: 396, type: !6518)
!7204 = !DILocation(line: 396, column: 15, scope: !265)
!7205 = !DILocation(line: 398, column: 10, scope: !265)
!7206 = !DILocation(line: 400, column: 18, scope: !265)
!7207 = !DILocation(line: 400, column: 7, scope: !265)
!7208 = !DILocation(line: 400, column: 5, scope: !265)
!7209 = !DILocation(line: 402, column: 8, scope: !7210)
!7210 = distinct !DILexicalBlock(scope: !265, file: !214, line: 402, column: 7)
!7211 = !DILocation(line: 402, column: 7, scope: !265)
!7212 = !DILocation(line: 403, column: 5, scope: !7213)
!7213 = distinct !DILexicalBlock(scope: !7210, file: !214, line: 402, column: 11)
!7214 = !DILocation(line: 403, column: 11, scope: !7213)
!7215 = !DILocation(line: 404, column: 5, scope: !7213)
!7216 = !DILocation(line: 407, column: 16, scope: !7217)
!7217 = distinct !DILexicalBlock(scope: !265, file: !214, line: 407, column: 7)
!7218 = !DILocation(line: 407, column: 7, scope: !7217)
!7219 = !DILocation(line: 407, column: 29, scope: !7217)
!7220 = !DILocation(line: 407, column: 42, scope: !7217)
!7221 = !DILocation(line: 407, column: 32, scope: !7217)
!7222 = !DILocation(line: 407, column: 56, scope: !7217)
!7223 = !DILocation(line: 407, column: 53, scope: !7217)
!7224 = !DILocation(line: 407, column: 7, scope: !265)
!7225 = !DILocation(line: 408, column: 26, scope: !7226)
!7226 = distinct !DILexicalBlock(scope: !7217, file: !214, line: 407, column: 65)
!7227 = !DILocation(line: 409, column: 5, scope: !7226)
!7228 = !DILocation(line: 409, column: 11, scope: !7226)
!7229 = !DILocation(line: 410, column: 5, scope: !7226)
!7230 = !DILocation(line: 413, column: 8, scope: !7231)
!7231 = distinct !DILexicalBlock(scope: !265, file: !214, line: 413, column: 7)
!7232 = !DILocation(line: 413, column: 11, scope: !7231)
!7233 = !DILocation(line: 413, column: 7, scope: !265)
!7234 = !DILocalVariable(name: "r", scope: !7235, file: !214, line: 414, type: !77)
!7235 = distinct !DILexicalBlock(scope: !7231, file: !214, line: 413, column: 18)
!7236 = !DILocation(line: 414, column: 9, scope: !7235)
!7237 = !DILocation(line: 416, column: 28, scope: !7235)
!7238 = !DILocation(line: 416, column: 11, scope: !7235)
!7239 = !DILocation(line: 416, column: 9, scope: !7235)
!7240 = !DILocation(line: 417, column: 31, scope: !7235)
!7241 = !DILocation(line: 417, column: 13, scope: !7235)
!7242 = !DILocation(line: 417, column: 11, scope: !7235)
!7243 = !DILocation(line: 421, column: 30, scope: !7235)
!7244 = !DILocation(line: 421, column: 35, scope: !7235)
!7245 = !DILocation(line: 421, column: 5, scope: !7235)
!7246 = !DILocation(line: 422, column: 9, scope: !7247)
!7247 = distinct !DILexicalBlock(scope: !7235, file: !214, line: 422, column: 9)
!7248 = !DILocation(line: 422, column: 12, scope: !7247)
!7249 = !DILocation(line: 422, column: 15, scope: !7247)
!7250 = !DILocation(line: 422, column: 20, scope: !7247)
!7251 = !DILocation(line: 422, column: 23, scope: !7247)
!7252 = !DILocation(line: 422, column: 26, scope: !7247)
!7253 = !DILocation(line: 422, column: 29, scope: !7247)
!7254 = !DILocation(line: 422, column: 9, scope: !7235)
!7255 = !DILocation(line: 423, column: 31, scope: !7247)
!7256 = !DILocation(line: 423, column: 34, scope: !7247)
!7257 = !DILocation(line: 423, column: 38, scope: !7247)
!7258 = !DILocation(line: 423, column: 43, scope: !7247)
!7259 = !DILocation(line: 423, column: 11, scope: !7247)
!7260 = !DILocation(line: 423, column: 9, scope: !7247)
!7261 = !DILocation(line: 423, column: 7, scope: !7247)
!7262 = !DILocation(line: 424, column: 37, scope: !7247)
!7263 = !DILocation(line: 424, column: 40, scope: !7247)
!7264 = !DILocation(line: 424, column: 44, scope: !7247)
!7265 = !DILocation(line: 424, column: 49, scope: !7247)
!7266 = !DILocation(line: 424, column: 66, scope: !7247)
!7267 = !DILocation(line: 424, column: 69, scope: !7247)
!7268 = !DILocation(line: 424, column: 14, scope: !7247)
!7269 = !DILocation(line: 424, column: 12, scope: !7247)
!7270 = !DILocation(line: 426, column: 9, scope: !7271)
!7271 = distinct !DILexicalBlock(scope: !7235, file: !214, line: 426, column: 9)
!7272 = !DILocation(line: 426, column: 11, scope: !7271)
!7273 = !DILocation(line: 426, column: 9, scope: !7235)
!7274 = !DILocation(line: 427, column: 7, scope: !7271)
!7275 = !DILocation(line: 429, column: 5, scope: !7276)
!7276 = distinct !DILexicalBlock(scope: !7277, file: !214, line: 429, column: 5)
!7277 = distinct !DILexicalBlock(scope: !7235, file: !214, line: 429, column: 5)
!7278 = !DILocation(line: 429, column: 5, scope: !7277)
!7279 = !DILocation(line: 430, column: 9, scope: !7280)
!7280 = distinct !DILexicalBlock(scope: !7235, file: !214, line: 430, column: 9)
!7281 = !DILocation(line: 430, column: 12, scope: !7280)
!7282 = !DILocation(line: 430, column: 15, scope: !7280)
!7283 = !DILocation(line: 430, column: 20, scope: !7280)
!7284 = !DILocation(line: 430, column: 23, scope: !7280)
!7285 = !DILocation(line: 430, column: 26, scope: !7280)
!7286 = !DILocation(line: 430, column: 29, scope: !7280)
!7287 = !DILocation(line: 430, column: 9, scope: !7235)
!7288 = !DILocation(line: 431, column: 17, scope: !7280)
!7289 = !DILocation(line: 431, column: 7, scope: !7280)
!7290 = !DILocation(line: 431, column: 10, scope: !7280)
!7291 = !DILocation(line: 431, column: 14, scope: !7280)
!7292 = !DILocation(line: 433, column: 12, scope: !7235)
!7293 = !DILocation(line: 433, column: 5, scope: !7235)
!7294 = !DILocalVariable(name: "actual_count", scope: !7295, file: !214, line: 437, type: !261)
!7295 = distinct !DILexicalBlock(scope: !7231, file: !214, line: 435, column: 8)
!7296 = !DILocation(line: 437, column: 12, scope: !7295)
!7297 = !DILocation(line: 438, column: 9, scope: !7298)
!7298 = distinct !DILexicalBlock(scope: !7295, file: !214, line: 438, column: 9)
!7299 = !DILocation(line: 438, column: 12, scope: !7298)
!7300 = !DILocation(line: 438, column: 18, scope: !7298)
!7301 = !DILocation(line: 438, column: 16, scope: !7298)
!7302 = !DILocation(line: 438, column: 27, scope: !7298)
!7303 = !DILocation(line: 438, column: 30, scope: !7298)
!7304 = !DILocation(line: 438, column: 37, scope: !7298)
!7305 = !DILocation(line: 438, column: 24, scope: !7298)
!7306 = !DILocation(line: 438, column: 9, scope: !7295)
!7307 = !DILocation(line: 439, column: 22, scope: !7298)
!7308 = !DILocation(line: 439, column: 20, scope: !7298)
!7309 = !DILocation(line: 439, column: 7, scope: !7298)
!7310 = !DILocation(line: 441, column: 21, scope: !7311)
!7311 = distinct !DILexicalBlock(scope: !7312, file: !214, line: 441, column: 11)
!7312 = distinct !DILexicalBlock(scope: !7298, file: !214, line: 440, column: 10)
!7313 = !DILocation(line: 441, column: 11, scope: !7311)
!7314 = !DILocation(line: 441, column: 11, scope: !7312)
!7315 = !DILocation(line: 442, column: 2, scope: !7316)
!7316 = distinct !DILexicalBlock(scope: !7317, file: !214, line: 442, column: 2)
!7317 = distinct !DILexicalBlock(scope: !7311, file: !214, line: 442, column: 2)
!7318 = !DILocation(line: 444, column: 6, scope: !7319)
!7319 = distinct !DILexicalBlock(scope: !7320, file: !214, line: 444, column: 6)
!7320 = distinct !DILexicalBlock(scope: !7311, file: !214, line: 443, column: 12)
!7321 = !DILocation(line: 444, column: 9, scope: !7319)
!7322 = !DILocation(line: 444, column: 25, scope: !7319)
!7323 = !DILocation(line: 444, column: 28, scope: !7319)
!7324 = !DILocation(line: 444, column: 35, scope: !7319)
!7325 = !DILocation(line: 444, column: 15, scope: !7319)
!7326 = !DILocation(line: 444, column: 13, scope: !7319)
!7327 = !DILocation(line: 444, column: 6, scope: !7320)
!7328 = !DILocation(line: 445, column: 19, scope: !7319)
!7329 = !DILocation(line: 445, column: 22, scope: !7319)
!7330 = !DILocation(line: 445, column: 29, scope: !7319)
!7331 = !DILocation(line: 445, column: 36, scope: !7319)
!7332 = !DILocation(line: 445, column: 39, scope: !7319)
!7333 = !DILocation(line: 445, column: 34, scope: !7319)
!7334 = !DILocation(line: 445, column: 17, scope: !7319)
!7335 = !DILocation(line: 445, column: 4, scope: !7319)
!7336 = !DILocation(line: 449, column: 9, scope: !7337)
!7337 = distinct !DILexicalBlock(scope: !7295, file: !214, line: 449, column: 9)
!7338 = !DILocation(line: 449, column: 9, scope: !7295)
!7339 = !DILocation(line: 450, column: 14, scope: !7337)
!7340 = !DILocation(line: 450, column: 17, scope: !7337)
!7341 = !DILocation(line: 450, column: 24, scope: !7337)
!7342 = !DILocation(line: 450, column: 35, scope: !7337)
!7343 = !DILocation(line: 450, column: 38, scope: !7337)
!7344 = !DILocation(line: 450, column: 33, scope: !7337)
!7345 = !DILocation(line: 450, column: 43, scope: !7337)
!7346 = !DILocation(line: 450, column: 48, scope: !7337)
!7347 = !DILocation(line: 450, column: 7, scope: !7337)
!7348 = !DILocation(line: 452, column: 9, scope: !7349)
!7349 = distinct !DILexicalBlock(scope: !7295, file: !214, line: 452, column: 9)
!7350 = !DILocation(line: 452, column: 18, scope: !7349)
!7351 = !DILocation(line: 452, column: 15, scope: !7349)
!7352 = !DILocation(line: 452, column: 9, scope: !7295)
!7353 = !DILocation(line: 453, column: 7, scope: !7349)
!7354 = !DILocation(line: 455, column: 9, scope: !7355)
!7355 = distinct !DILexicalBlock(scope: !7295, file: !214, line: 455, column: 9)
!7356 = !DILocation(line: 455, column: 12, scope: !7355)
!7357 = !DILocation(line: 455, column: 30, scope: !7355)
!7358 = !DILocation(line: 455, column: 18, scope: !7355)
!7359 = !DILocation(line: 455, column: 9, scope: !7295)
!7360 = !DILocation(line: 456, column: 33, scope: !7355)
!7361 = !DILocation(line: 456, column: 30, scope: !7355)
!7362 = !DILocation(line: 456, column: 7, scope: !7355)
!7363 = !DILocation(line: 458, column: 15, scope: !7295)
!7364 = !DILocation(line: 458, column: 5, scope: !7295)
!7365 = !DILocation(line: 458, column: 8, scope: !7295)
!7366 = !DILocation(line: 458, column: 12, scope: !7295)
!7367 = !DILocation(line: 459, column: 12, scope: !7295)
!7368 = !DILocation(line: 459, column: 5, scope: !7295)
!7369 = !DILocation(line: 461, column: 1, scope: !265)
!7370 = distinct !DISubprogram(name: "__fd_lseek", scope: !214, file: !214, line: 464, type: !7371, scopeLine: 464, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7371 = !DISubroutineType(types: !7372)
!7372 = !{!203, !77, !203, !77}
!7373 = !DILocalVariable(name: "fd", arg: 1, scope: !7370, file: !214, line: 464, type: !77)
!7374 = !DILocation(line: 464, column: 24, scope: !7370)
!7375 = !DILocalVariable(name: "offset", arg: 2, scope: !7370, file: !214, line: 464, type: !203)
!7376 = !DILocation(line: 464, column: 36, scope: !7370)
!7377 = !DILocalVariable(name: "whence", arg: 3, scope: !7370, file: !214, line: 464, type: !77)
!7378 = !DILocation(line: 464, column: 48, scope: !7370)
!7379 = !DILocalVariable(name: "new_off", scope: !7370, file: !214, line: 465, type: !203)
!7380 = !DILocation(line: 465, column: 11, scope: !7370)
!7381 = !DILocalVariable(name: "f", scope: !7370, file: !214, line: 466, type: !6518)
!7382 = !DILocation(line: 466, column: 15, scope: !7370)
!7383 = !DILocation(line: 466, column: 30, scope: !7370)
!7384 = !DILocation(line: 466, column: 19, scope: !7370)
!7385 = !DILocation(line: 468, column: 8, scope: !7386)
!7386 = distinct !DILexicalBlock(scope: !7370, file: !214, line: 468, column: 7)
!7387 = !DILocation(line: 468, column: 7, scope: !7370)
!7388 = !DILocation(line: 469, column: 5, scope: !7389)
!7389 = distinct !DILexicalBlock(scope: !7386, file: !214, line: 468, column: 11)
!7390 = !DILocation(line: 469, column: 11, scope: !7389)
!7391 = !DILocation(line: 470, column: 5, scope: !7389)
!7392 = !DILocation(line: 473, column: 8, scope: !7393)
!7393 = distinct !DILexicalBlock(scope: !7370, file: !214, line: 473, column: 7)
!7394 = !DILocation(line: 473, column: 11, scope: !7393)
!7395 = !DILocation(line: 0, scope: !7370)
!7396 = !DILocation(line: 473, column: 7, scope: !7370)
!7397 = !DILocation(line: 480, column: 16, scope: !7398)
!7398 = distinct !DILexicalBlock(scope: !7399, file: !214, line: 480, column: 9)
!7399 = distinct !DILexicalBlock(scope: !7393, file: !214, line: 473, column: 18)
!7400 = !DILocation(line: 0, scope: !7398)
!7401 = !DILocation(line: 480, column: 9, scope: !7399)
!7402 = !DILocation(line: 481, column: 44, scope: !7403)
!7403 = distinct !DILexicalBlock(scope: !7398, file: !214, line: 480, column: 29)
!7404 = !DILocation(line: 481, column: 17, scope: !7403)
!7405 = !DILocation(line: 481, column: 15, scope: !7403)
!7406 = !DILocation(line: 482, column: 5, scope: !7403)
!7407 = !DILocation(line: 483, column: 44, scope: !7408)
!7408 = distinct !DILexicalBlock(scope: !7398, file: !214, line: 482, column: 12)
!7409 = !DILocation(line: 483, column: 47, scope: !7408)
!7410 = !DILocation(line: 483, column: 17, scope: !7408)
!7411 = !DILocation(line: 483, column: 15, scope: !7408)
!7412 = !DILocation(line: 487, column: 11, scope: !7413)
!7413 = distinct !DILexicalBlock(scope: !7408, file: !214, line: 487, column: 11)
!7414 = !DILocation(line: 487, column: 19, scope: !7413)
!7415 = !DILocation(line: 487, column: 11, scope: !7408)
!7416 = !DILocation(line: 488, column: 9, scope: !7417)
!7417 = distinct !DILexicalBlock(scope: !7418, file: !214, line: 488, column: 9)
!7418 = distinct !DILexicalBlock(scope: !7419, file: !214, line: 488, column: 9)
!7419 = distinct !DILexicalBlock(scope: !7413, file: !214, line: 487, column: 26)
!7420 = !DILocation(line: 488, column: 9, scope: !7418)
!7421 = !DILocation(line: 489, column: 39, scope: !7419)
!7422 = !DILocation(line: 489, column: 42, scope: !7419)
!7423 = !DILocation(line: 489, column: 46, scope: !7419)
!7424 = !DILocation(line: 489, column: 54, scope: !7419)
!7425 = !DILocation(line: 489, column: 19, scope: !7419)
!7426 = !DILocation(line: 489, column: 17, scope: !7419)
!7427 = !DILocation(line: 490, column: 7, scope: !7419)
!7428 = !DILocation(line: 493, column: 9, scope: !7429)
!7429 = distinct !DILexicalBlock(scope: !7399, file: !214, line: 493, column: 9)
!7430 = !DILocation(line: 493, column: 17, scope: !7429)
!7431 = !DILocation(line: 493, column: 9, scope: !7399)
!7432 = !DILocation(line: 494, column: 7, scope: !7429)
!7433 = !DILocation(line: 496, column: 14, scope: !7399)
!7434 = !DILocation(line: 496, column: 5, scope: !7399)
!7435 = !DILocation(line: 496, column: 8, scope: !7399)
!7436 = !DILocation(line: 496, column: 12, scope: !7399)
!7437 = !DILocation(line: 497, column: 12, scope: !7399)
!7438 = !DILocation(line: 497, column: 5, scope: !7399)
!7439 = !DILocation(line: 500, column: 3, scope: !7370)
!7440 = !DILocation(line: 501, column: 28, scope: !7441)
!7441 = distinct !DILexicalBlock(scope: !7370, file: !214, line: 500, column: 19)
!7442 = !DILocation(line: 501, column: 26, scope: !7441)
!7443 = !DILocation(line: 501, column: 36, scope: !7441)
!7444 = !DILocation(line: 502, column: 28, scope: !7441)
!7445 = !DILocation(line: 502, column: 31, scope: !7441)
!7446 = !DILocation(line: 502, column: 37, scope: !7441)
!7447 = !DILocation(line: 502, column: 35, scope: !7441)
!7448 = !DILocation(line: 502, column: 26, scope: !7441)
!7449 = !DILocation(line: 502, column: 45, scope: !7441)
!7450 = !DILocation(line: 503, column: 28, scope: !7441)
!7451 = !DILocation(line: 503, column: 31, scope: !7441)
!7452 = !DILocation(line: 503, column: 38, scope: !7441)
!7453 = !DILocation(line: 503, column: 45, scope: !7441)
!7454 = !DILocation(line: 503, column: 43, scope: !7441)
!7455 = !DILocation(line: 503, column: 26, scope: !7441)
!7456 = !DILocation(line: 503, column: 53, scope: !7441)
!7457 = !DILocation(line: 505, column: 5, scope: !7458)
!7458 = distinct !DILexicalBlock(scope: !7441, file: !214, line: 504, column: 12)
!7459 = !DILocation(line: 505, column: 11, scope: !7458)
!7460 = !DILocation(line: 506, column: 5, scope: !7458)
!7461 = !DILocation(line: 510, column: 7, scope: !7462)
!7462 = distinct !DILexicalBlock(scope: !7370, file: !214, line: 510, column: 7)
!7463 = !DILocation(line: 510, column: 15, scope: !7462)
!7464 = !DILocation(line: 510, column: 7, scope: !7370)
!7465 = !DILocation(line: 511, column: 5, scope: !7466)
!7466 = distinct !DILexicalBlock(scope: !7462, file: !214, line: 510, column: 20)
!7467 = !DILocation(line: 511, column: 11, scope: !7466)
!7468 = !DILocation(line: 512, column: 5, scope: !7466)
!7469 = !DILocation(line: 515, column: 12, scope: !7370)
!7470 = !DILocation(line: 515, column: 3, scope: !7370)
!7471 = !DILocation(line: 515, column: 6, scope: !7370)
!7472 = !DILocation(line: 515, column: 10, scope: !7370)
!7473 = !DILocation(line: 516, column: 10, scope: !7370)
!7474 = !DILocation(line: 516, column: 13, scope: !7370)
!7475 = !DILocation(line: 516, column: 3, scope: !7370)
!7476 = !DILocation(line: 517, column: 1, scope: !7370)
!7477 = distinct !DISubprogram(name: "__fd_stat", scope: !214, file: !214, line: 519, type: !7478, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7478 = !DISubroutineType(types: !7479)
!7479 = !{!77, !273, !6310}
!7480 = !DILocalVariable(name: "path", arg: 1, scope: !7477, file: !214, line: 519, type: !273)
!7481 = !DILocation(line: 519, column: 27, scope: !7477)
!7482 = !DILocalVariable(name: "buf", arg: 2, scope: !7477, file: !214, line: 519, type: !6310)
!7483 = !DILocation(line: 519, column: 48, scope: !7477)
!7484 = !DILocalVariable(name: "dfile", scope: !7477, file: !214, line: 520, type: !6303)
!7485 = !DILocation(line: 520, column: 20, scope: !7477)
!7486 = !DILocation(line: 520, column: 43, scope: !7477)
!7487 = !DILocation(line: 520, column: 28, scope: !7477)
!7488 = !DILocation(line: 521, column: 7, scope: !7489)
!7489 = distinct !DILexicalBlock(scope: !7477, file: !214, line: 521, column: 7)
!7490 = !DILocation(line: 521, column: 7, scope: !7477)
!7491 = !DILocation(line: 522, column: 12, scope: !7492)
!7492 = distinct !DILexicalBlock(scope: !7489, file: !214, line: 521, column: 14)
!7493 = !DILocation(line: 522, column: 5, scope: !7492)
!7494 = !DILocation(line: 522, column: 17, scope: !7492)
!7495 = !DILocation(line: 522, column: 24, scope: !7492)
!7496 = !DILocation(line: 523, column: 5, scope: !7492)
!7497 = !DILocation(line: 528, column: 51, scope: !7498)
!7498 = distinct !DILexicalBlock(scope: !7477, file: !214, line: 526, column: 3)
!7499 = !DILocation(line: 528, column: 31, scope: !7498)
!7500 = !DILocation(line: 528, column: 58, scope: !7498)
!7501 = !DILocation(line: 528, column: 12, scope: !7498)
!7502 = !DILocation(line: 528, column: 5, scope: !7498)
!7503 = !DILocation(line: 533, column: 1, scope: !7477)
!7504 = distinct !DISubprogram(name: "fstatat", scope: !214, file: !214, line: 535, type: !7505, scopeLine: 535, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7505 = !DISubroutineType(types: !7506)
!7506 = !{!77, !77, !273, !229, !77}
!7507 = !DILocalVariable(name: "fd", arg: 1, scope: !7504, file: !214, line: 535, type: !77)
!7508 = !DILocation(line: 535, column: 17, scope: !7504)
!7509 = !DILocalVariable(name: "path", arg: 2, scope: !7504, file: !214, line: 535, type: !273)
!7510 = !DILocation(line: 535, column: 33, scope: !7504)
!7511 = !DILocalVariable(name: "buf", arg: 3, scope: !7504, file: !214, line: 535, type: !229)
!7512 = !DILocation(line: 535, column: 52, scope: !7504)
!7513 = !DILocalVariable(name: "flags", arg: 4, scope: !7504, file: !214, line: 535, type: !77)
!7514 = !DILocation(line: 535, column: 61, scope: !7504)
!7515 = !DILocation(line: 536, column: 7, scope: !7516)
!7516 = distinct !DILexicalBlock(scope: !7504, file: !214, line: 536, column: 7)
!7517 = !DILocation(line: 536, column: 10, scope: !7516)
!7518 = !DILocation(line: 536, column: 7, scope: !7504)
!7519 = !DILocalVariable(name: "f", scope: !7520, file: !214, line: 537, type: !6518)
!7520 = distinct !DILexicalBlock(scope: !7516, file: !214, line: 536, column: 23)
!7521 = !DILocation(line: 537, column: 17, scope: !7520)
!7522 = !DILocation(line: 537, column: 32, scope: !7520)
!7523 = !DILocation(line: 537, column: 21, scope: !7520)
!7524 = !DILocation(line: 539, column: 10, scope: !7525)
!7525 = distinct !DILexicalBlock(scope: !7520, file: !214, line: 539, column: 9)
!7526 = !DILocation(line: 539, column: 9, scope: !7520)
!7527 = !DILocation(line: 540, column: 7, scope: !7528)
!7528 = distinct !DILexicalBlock(scope: !7525, file: !214, line: 539, column: 13)
!7529 = !DILocation(line: 540, column: 13, scope: !7528)
!7530 = !DILocation(line: 541, column: 7, scope: !7528)
!7531 = !DILocation(line: 542, column: 16, scope: !7532)
!7532 = distinct !DILexicalBlock(scope: !7525, file: !214, line: 542, column: 16)
!7533 = !DILocation(line: 542, column: 19, scope: !7532)
!7534 = !DILocation(line: 542, column: 16, scope: !7525)
!7535 = !DILocation(line: 543, column: 7, scope: !7536)
!7536 = distinct !DILexicalBlock(scope: !7532, file: !214, line: 542, column: 26)
!7537 = !DILocation(line: 544, column: 7, scope: !7536)
!7538 = !DILocation(line: 544, column: 13, scope: !7536)
!7539 = !DILocation(line: 545, column: 7, scope: !7536)
!7540 = !DILocation(line: 547, column: 10, scope: !7520)
!7541 = !DILocation(line: 547, column: 13, scope: !7520)
!7542 = !DILocation(line: 547, column: 8, scope: !7520)
!7543 = !DILocation(line: 548, column: 3, scope: !7520)
!7544 = !DILocalVariable(name: "dfile", scope: !7504, file: !214, line: 549, type: !6303)
!7545 = !DILocation(line: 549, column: 20, scope: !7504)
!7546 = !DILocation(line: 549, column: 43, scope: !7504)
!7547 = !DILocation(line: 549, column: 28, scope: !7504)
!7548 = !DILocation(line: 550, column: 7, scope: !7549)
!7549 = distinct !DILexicalBlock(scope: !7504, file: !214, line: 550, column: 7)
!7550 = !DILocation(line: 550, column: 7, scope: !7504)
!7551 = !DILocation(line: 551, column: 12, scope: !7552)
!7552 = distinct !DILexicalBlock(scope: !7549, file: !214, line: 550, column: 14)
!7553 = !DILocation(line: 551, column: 5, scope: !7552)
!7554 = !DILocation(line: 551, column: 17, scope: !7552)
!7555 = !DILocation(line: 551, column: 24, scope: !7552)
!7556 = !DILocation(line: 552, column: 5, scope: !7552)
!7557 = !DILocation(line: 556, column: 41, scope: !7504)
!7558 = !DILocation(line: 556, column: 35, scope: !7504)
!7559 = !DILocation(line: 557, column: 19, scope: !7504)
!7560 = !DILocation(line: 557, column: 46, scope: !7504)
!7561 = !DILocation(line: 557, column: 26, scope: !7504)
!7562 = !DILocation(line: 557, column: 61, scope: !7504)
!7563 = !DILocation(line: 557, column: 72, scope: !7504)
!7564 = !DILocation(line: 557, column: 66, scope: !7504)
!7565 = !DILocation(line: 556, column: 10, scope: !7504)
!7566 = !DILocation(line: 556, column: 3, scope: !7504)
!7567 = !DILocation(line: 562, column: 1, scope: !7504)
!7568 = distinct !DISubprogram(name: "__fd_lstat", scope: !214, file: !214, line: 565, type: !7478, scopeLine: 565, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7569 = !DILocalVariable(name: "path", arg: 1, scope: !7568, file: !214, line: 565, type: !273)
!7570 = !DILocation(line: 565, column: 28, scope: !7568)
!7571 = !DILocalVariable(name: "buf", arg: 2, scope: !7568, file: !214, line: 565, type: !6310)
!7572 = !DILocation(line: 565, column: 49, scope: !7568)
!7573 = !DILocalVariable(name: "dfile", scope: !7568, file: !214, line: 566, type: !6303)
!7574 = !DILocation(line: 566, column: 20, scope: !7568)
!7575 = !DILocation(line: 566, column: 43, scope: !7568)
!7576 = !DILocation(line: 566, column: 28, scope: !7568)
!7577 = !DILocation(line: 567, column: 7, scope: !7578)
!7578 = distinct !DILexicalBlock(scope: !7568, file: !214, line: 567, column: 7)
!7579 = !DILocation(line: 567, column: 7, scope: !7568)
!7580 = !DILocation(line: 568, column: 12, scope: !7581)
!7581 = distinct !DILexicalBlock(scope: !7578, file: !214, line: 567, column: 14)
!7582 = !DILocation(line: 568, column: 5, scope: !7581)
!7583 = !DILocation(line: 568, column: 17, scope: !7581)
!7584 = !DILocation(line: 568, column: 24, scope: !7581)
!7585 = !DILocation(line: 569, column: 5, scope: !7581)
!7586 = !DILocation(line: 574, column: 52, scope: !7587)
!7587 = distinct !DILexicalBlock(scope: !7568, file: !214, line: 572, column: 3)
!7588 = !DILocation(line: 574, column: 32, scope: !7587)
!7589 = !DILocation(line: 574, column: 59, scope: !7587)
!7590 = !DILocation(line: 574, column: 12, scope: !7587)
!7591 = !DILocation(line: 574, column: 5, scope: !7587)
!7592 = !DILocation(line: 579, column: 1, scope: !7568)
!7593 = distinct !DISubprogram(name: "chdir", scope: !214, file: !214, line: 581, type: !1790, scopeLine: 581, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7594 = !DILocalVariable(name: "path", arg: 1, scope: !7593, file: !214, line: 581, type: !273)
!7595 = !DILocation(line: 581, column: 23, scope: !7593)
!7596 = !DILocalVariable(name: "dfile", scope: !7593, file: !214, line: 582, type: !6303)
!7597 = !DILocation(line: 582, column: 20, scope: !7593)
!7598 = !DILocation(line: 582, column: 43, scope: !7593)
!7599 = !DILocation(line: 582, column: 28, scope: !7593)
!7600 = !DILocation(line: 584, column: 7, scope: !7601)
!7601 = distinct !DILexicalBlock(scope: !7593, file: !214, line: 584, column: 7)
!7602 = !DILocation(line: 584, column: 7, scope: !7593)
!7603 = !DILocation(line: 586, column: 5, scope: !7604)
!7604 = distinct !DILexicalBlock(scope: !7601, file: !214, line: 584, column: 14)
!7605 = !DILocation(line: 587, column: 5, scope: !7604)
!7606 = !DILocation(line: 587, column: 11, scope: !7604)
!7607 = !DILocation(line: 588, column: 5, scope: !7604)
!7608 = !DILocation(line: 591, column: 50, scope: !7593)
!7609 = !DILocation(line: 591, column: 30, scope: !7593)
!7610 = !DILocation(line: 591, column: 10, scope: !7593)
!7611 = !DILocation(line: 591, column: 3, scope: !7593)
!7612 = !DILocation(line: 592, column: 1, scope: !7593)
!7613 = distinct !DISubprogram(name: "fchdir", scope: !214, file: !214, line: 594, type: !215, scopeLine: 594, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7614 = !DILocalVariable(name: "fd", arg: 1, scope: !7613, file: !214, line: 594, type: !77)
!7615 = !DILocation(line: 594, column: 16, scope: !7613)
!7616 = !DILocalVariable(name: "f", scope: !7613, file: !214, line: 595, type: !6518)
!7617 = !DILocation(line: 595, column: 15, scope: !7613)
!7618 = !DILocation(line: 595, column: 30, scope: !7613)
!7619 = !DILocation(line: 595, column: 19, scope: !7613)
!7620 = !DILocation(line: 597, column: 8, scope: !7621)
!7621 = distinct !DILexicalBlock(scope: !7613, file: !214, line: 597, column: 7)
!7622 = !DILocation(line: 597, column: 7, scope: !7613)
!7623 = !DILocation(line: 598, column: 5, scope: !7624)
!7624 = distinct !DILexicalBlock(scope: !7621, file: !214, line: 597, column: 11)
!7625 = !DILocation(line: 598, column: 11, scope: !7624)
!7626 = !DILocation(line: 599, column: 5, scope: !7624)
!7627 = !DILocation(line: 602, column: 7, scope: !7628)
!7628 = distinct !DILexicalBlock(scope: !7613, file: !214, line: 602, column: 7)
!7629 = !DILocation(line: 602, column: 10, scope: !7628)
!7630 = !DILocation(line: 602, column: 7, scope: !7613)
!7631 = !DILocation(line: 603, column: 5, scope: !7632)
!7632 = distinct !DILexicalBlock(scope: !7628, file: !214, line: 602, column: 17)
!7633 = !DILocation(line: 604, column: 5, scope: !7632)
!7634 = !DILocation(line: 604, column: 11, scope: !7632)
!7635 = !DILocation(line: 605, column: 5, scope: !7632)
!7636 = !DILocation(line: 608, column: 31, scope: !7613)
!7637 = !DILocation(line: 608, column: 34, scope: !7613)
!7638 = !DILocation(line: 608, column: 10, scope: !7613)
!7639 = !DILocation(line: 608, column: 3, scope: !7613)
!7640 = !DILocation(line: 609, column: 1, scope: !7613)
!7641 = !DILocalVariable(name: "path", arg: 1, scope: !270, file: !214, line: 625, type: !273)
!7642 = !DILocation(line: 625, column: 23, scope: !270)
!7643 = !DILocalVariable(name: "mode", arg: 2, scope: !270, file: !214, line: 625, type: !208)
!7644 = !DILocation(line: 625, column: 36, scope: !270)
!7645 = !DILocalVariable(name: "dfile", scope: !270, file: !214, line: 628, type: !6303)
!7646 = !DILocation(line: 628, column: 20, scope: !270)
!7647 = !DILocation(line: 628, column: 43, scope: !270)
!7648 = !DILocation(line: 628, column: 28, scope: !270)
!7649 = !DILocation(line: 630, column: 10, scope: !270)
!7650 = !DILocation(line: 631, column: 16, scope: !7651)
!7651 = distinct !DILexicalBlock(scope: !270, file: !214, line: 631, column: 7)
!7652 = !DILocation(line: 631, column: 7, scope: !7651)
!7653 = !DILocation(line: 631, column: 29, scope: !7651)
!7654 = !DILocation(line: 631, column: 42, scope: !7651)
!7655 = !DILocation(line: 631, column: 32, scope: !7651)
!7656 = !DILocation(line: 631, column: 56, scope: !7651)
!7657 = !DILocation(line: 631, column: 53, scope: !7651)
!7658 = !DILocation(line: 631, column: 7, scope: !270)
!7659 = !DILocation(line: 632, column: 26, scope: !7660)
!7660 = distinct !DILexicalBlock(scope: !7651, file: !214, line: 631, column: 65)
!7661 = !DILocation(line: 633, column: 5, scope: !7660)
!7662 = !DILocation(line: 633, column: 11, scope: !7660)
!7663 = !DILocation(line: 634, column: 5, scope: !7660)
!7664 = !DILocation(line: 637, column: 7, scope: !7665)
!7665 = distinct !DILexicalBlock(scope: !270, file: !214, line: 637, column: 7)
!7666 = !DILocation(line: 637, column: 7, scope: !270)
!7667 = !DILocation(line: 638, column: 23, scope: !7668)
!7668 = distinct !DILexicalBlock(scope: !7665, file: !214, line: 637, column: 14)
!7669 = !DILocation(line: 638, column: 30, scope: !7668)
!7670 = !DILocation(line: 638, column: 12, scope: !7668)
!7671 = !DILocation(line: 638, column: 5, scope: !7668)
!7672 = !DILocation(line: 641, column: 50, scope: !270)
!7673 = !DILocation(line: 641, column: 30, scope: !270)
!7674 = !DILocation(line: 641, column: 57, scope: !270)
!7675 = !DILocation(line: 641, column: 10, scope: !270)
!7676 = !DILocation(line: 641, column: 3, scope: !270)
!7677 = !DILocation(line: 642, column: 1, scope: !270)
!7678 = distinct !DISubprogram(name: "__df_chmod", scope: !214, file: !214, line: 612, type: !7679, scopeLine: 612, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7679 = !DISubroutineType(types: !7680)
!7680 = !{!77, !6303, !208}
!7681 = !DILocalVariable(name: "df", arg: 1, scope: !7678, file: !214, line: 612, type: !6303)
!7682 = !DILocation(line: 612, column: 40, scope: !7678)
!7683 = !DILocalVariable(name: "mode", arg: 2, scope: !7678, file: !214, line: 612, type: !208)
!7684 = !DILocation(line: 612, column: 51, scope: !7678)
!7685 = !DILocation(line: 613, column: 7, scope: !7686)
!7686 = distinct !DILexicalBlock(scope: !7678, file: !214, line: 613, column: 7)
!7687 = !DILocation(line: 613, column: 20, scope: !7686)
!7688 = !DILocation(line: 613, column: 24, scope: !7686)
!7689 = !DILocation(line: 613, column: 30, scope: !7686)
!7690 = !DILocation(line: 613, column: 17, scope: !7686)
!7691 = !DILocation(line: 613, column: 7, scope: !7678)
!7692 = !DILocation(line: 614, column: 9, scope: !7693)
!7693 = distinct !DILexicalBlock(scope: !7694, file: !214, line: 614, column: 9)
!7694 = distinct !DILexicalBlock(scope: !7686, file: !214, line: 613, column: 38)
!7695 = !DILocation(line: 614, column: 21, scope: !7693)
!7696 = !DILocation(line: 614, column: 25, scope: !7693)
!7697 = !DILocation(line: 614, column: 31, scope: !7693)
!7698 = !DILocation(line: 614, column: 18, scope: !7693)
!7699 = !DILocation(line: 614, column: 9, scope: !7694)
!7700 = !DILocation(line: 615, column: 12, scope: !7693)
!7701 = !DILocation(line: 615, column: 7, scope: !7693)
!7702 = !DILocation(line: 616, column: 27, scope: !7694)
!7703 = !DILocation(line: 616, column: 31, scope: !7694)
!7704 = !DILocation(line: 616, column: 37, scope: !7694)
!7705 = !DILocation(line: 616, column: 45, scope: !7694)
!7706 = !DILocation(line: 617, column: 27, scope: !7694)
!7707 = !DILocation(line: 617, column: 32, scope: !7694)
!7708 = !DILocation(line: 616, column: 55, scope: !7694)
!7709 = !DILocation(line: 616, column: 5, scope: !7694)
!7710 = !DILocation(line: 616, column: 9, scope: !7694)
!7711 = !DILocation(line: 616, column: 15, scope: !7694)
!7712 = !DILocation(line: 616, column: 23, scope: !7694)
!7713 = !DILocation(line: 618, column: 5, scope: !7694)
!7714 = !DILocation(line: 620, column: 5, scope: !7715)
!7715 = distinct !DILexicalBlock(scope: !7686, file: !214, line: 619, column: 10)
!7716 = !DILocation(line: 620, column: 11, scope: !7715)
!7717 = !DILocation(line: 621, column: 5, scope: !7715)
!7718 = !DILocation(line: 623, column: 1, scope: !7678)
!7719 = !DILocalVariable(name: "fd", arg: 1, scope: !277, file: !214, line: 644, type: !77)
!7720 = !DILocation(line: 644, column: 16, scope: !277)
!7721 = !DILocalVariable(name: "mode", arg: 2, scope: !277, file: !214, line: 644, type: !208)
!7722 = !DILocation(line: 644, column: 27, scope: !277)
!7723 = !DILocalVariable(name: "f", scope: !277, file: !214, line: 647, type: !6518)
!7724 = !DILocation(line: 647, column: 15, scope: !277)
!7725 = !DILocation(line: 647, column: 30, scope: !277)
!7726 = !DILocation(line: 647, column: 19, scope: !277)
!7727 = !DILocation(line: 649, column: 8, scope: !7728)
!7728 = distinct !DILexicalBlock(scope: !277, file: !214, line: 649, column: 7)
!7729 = !DILocation(line: 649, column: 7, scope: !277)
!7730 = !DILocation(line: 650, column: 5, scope: !7731)
!7731 = distinct !DILexicalBlock(scope: !7728, file: !214, line: 649, column: 11)
!7732 = !DILocation(line: 650, column: 11, scope: !7731)
!7733 = !DILocation(line: 651, column: 5, scope: !7731)
!7734 = !DILocation(line: 654, column: 10, scope: !277)
!7735 = !DILocation(line: 655, column: 16, scope: !7736)
!7736 = distinct !DILexicalBlock(scope: !277, file: !214, line: 655, column: 7)
!7737 = !DILocation(line: 655, column: 7, scope: !7736)
!7738 = !DILocation(line: 655, column: 29, scope: !7736)
!7739 = !DILocation(line: 655, column: 42, scope: !7736)
!7740 = !DILocation(line: 655, column: 32, scope: !7736)
!7741 = !DILocation(line: 655, column: 57, scope: !7736)
!7742 = !DILocation(line: 655, column: 54, scope: !7736)
!7743 = !DILocation(line: 655, column: 7, scope: !277)
!7744 = !DILocation(line: 656, column: 26, scope: !7745)
!7745 = distinct !DILexicalBlock(scope: !7736, file: !214, line: 655, column: 66)
!7746 = !DILocation(line: 657, column: 5, scope: !7745)
!7747 = !DILocation(line: 657, column: 11, scope: !7745)
!7748 = !DILocation(line: 658, column: 5, scope: !7745)
!7749 = !DILocation(line: 661, column: 7, scope: !7750)
!7750 = distinct !DILexicalBlock(scope: !277, file: !214, line: 661, column: 7)
!7751 = !DILocation(line: 661, column: 10, scope: !7750)
!7752 = !DILocation(line: 0, scope: !277)
!7753 = !DILocation(line: 661, column: 7, scope: !277)
!7754 = !DILocation(line: 662, column: 26, scope: !7755)
!7755 = distinct !DILexicalBlock(scope: !7750, file: !214, line: 661, column: 17)
!7756 = !DILocation(line: 662, column: 33, scope: !7755)
!7757 = !DILocation(line: 662, column: 12, scope: !7755)
!7758 = !DILocation(line: 662, column: 5, scope: !7755)
!7759 = !DILocation(line: 665, column: 34, scope: !277)
!7760 = !DILocation(line: 665, column: 38, scope: !277)
!7761 = !DILocation(line: 665, column: 10, scope: !277)
!7762 = !DILocation(line: 665, column: 3, scope: !277)
!7763 = !DILocation(line: 666, column: 1, scope: !277)
!7764 = distinct !DISubprogram(name: "chown", scope: !214, file: !214, line: 674, type: !7765, scopeLine: 674, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7765 = !DISubroutineType(types: !7766)
!7766 = !{!77, !273, !7767, !7768}
!7767 = !DIDerivedType(tag: DW_TAG_typedef, name: "uid_t", file: !204, line: 80, baseType: !154)
!7768 = !DIDerivedType(tag: DW_TAG_typedef, name: "gid_t", file: !204, line: 65, baseType: !156)
!7769 = !DILocalVariable(name: "path", arg: 1, scope: !7764, file: !214, line: 674, type: !273)
!7770 = !DILocation(line: 674, column: 23, scope: !7764)
!7771 = !DILocalVariable(name: "owner", arg: 2, scope: !7764, file: !214, line: 674, type: !7767)
!7772 = !DILocation(line: 674, column: 35, scope: !7764)
!7773 = !DILocalVariable(name: "group", arg: 3, scope: !7764, file: !214, line: 674, type: !7768)
!7774 = !DILocation(line: 674, column: 48, scope: !7764)
!7775 = !DILocalVariable(name: "df", scope: !7764, file: !214, line: 675, type: !6303)
!7776 = !DILocation(line: 675, column: 20, scope: !7764)
!7777 = !DILocation(line: 675, column: 40, scope: !7764)
!7778 = !DILocation(line: 675, column: 25, scope: !7764)
!7779 = !DILocation(line: 677, column: 7, scope: !7780)
!7780 = distinct !DILexicalBlock(scope: !7764, file: !214, line: 677, column: 7)
!7781 = !DILocation(line: 677, column: 7, scope: !7764)
!7782 = !DILocation(line: 678, column: 23, scope: !7783)
!7783 = distinct !DILexicalBlock(scope: !7780, file: !214, line: 677, column: 11)
!7784 = !DILocation(line: 678, column: 27, scope: !7783)
!7785 = !DILocation(line: 678, column: 34, scope: !7783)
!7786 = !DILocation(line: 678, column: 12, scope: !7783)
!7787 = !DILocation(line: 678, column: 5, scope: !7783)
!7788 = !DILocation(line: 681, column: 50, scope: !7764)
!7789 = !DILocation(line: 681, column: 30, scope: !7764)
!7790 = !DILocation(line: 681, column: 57, scope: !7764)
!7791 = !DILocation(line: 681, column: 64, scope: !7764)
!7792 = !DILocation(line: 681, column: 10, scope: !7764)
!7793 = !DILocation(line: 681, column: 3, scope: !7764)
!7794 = !DILocation(line: 682, column: 1, scope: !7764)
!7795 = distinct !DISubprogram(name: "__df_chown", scope: !214, file: !214, line: 668, type: !7796, scopeLine: 668, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7796 = !DISubroutineType(types: !7797)
!7797 = !{!77, !6303, !7767, !7768}
!7798 = !DILocalVariable(name: "df", arg: 1, scope: !7795, file: !214, line: 668, type: !6303)
!7799 = !DILocation(line: 668, column: 40, scope: !7795)
!7800 = !DILocalVariable(name: "owner", arg: 2, scope: !7795, file: !214, line: 668, type: !7767)
!7801 = !DILocation(line: 668, column: 50, scope: !7795)
!7802 = !DILocalVariable(name: "group", arg: 3, scope: !7795, file: !214, line: 668, type: !7768)
!7803 = !DILocation(line: 668, column: 63, scope: !7795)
!7804 = !DILocation(line: 669, column: 3, scope: !7795)
!7805 = !DILocation(line: 670, column: 3, scope: !7795)
!7806 = !DILocation(line: 670, column: 9, scope: !7795)
!7807 = !DILocation(line: 671, column: 3, scope: !7795)
!7808 = distinct !DISubprogram(name: "fchown", scope: !214, file: !214, line: 684, type: !7809, scopeLine: 684, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7809 = !DISubroutineType(types: !7810)
!7810 = !{!77, !77, !7767, !7768}
!7811 = !DILocalVariable(name: "fd", arg: 1, scope: !7808, file: !214, line: 684, type: !77)
!7812 = !DILocation(line: 684, column: 16, scope: !7808)
!7813 = !DILocalVariable(name: "owner", arg: 2, scope: !7808, file: !214, line: 684, type: !7767)
!7814 = !DILocation(line: 684, column: 26, scope: !7808)
!7815 = !DILocalVariable(name: "group", arg: 3, scope: !7808, file: !214, line: 684, type: !7768)
!7816 = !DILocation(line: 684, column: 39, scope: !7808)
!7817 = !DILocalVariable(name: "f", scope: !7808, file: !214, line: 685, type: !6518)
!7818 = !DILocation(line: 685, column: 15, scope: !7808)
!7819 = !DILocation(line: 685, column: 30, scope: !7808)
!7820 = !DILocation(line: 685, column: 19, scope: !7808)
!7821 = !DILocation(line: 687, column: 8, scope: !7822)
!7822 = distinct !DILexicalBlock(scope: !7808, file: !214, line: 687, column: 7)
!7823 = !DILocation(line: 687, column: 7, scope: !7808)
!7824 = !DILocation(line: 688, column: 5, scope: !7825)
!7825 = distinct !DILexicalBlock(scope: !7822, file: !214, line: 687, column: 11)
!7826 = !DILocation(line: 688, column: 11, scope: !7825)
!7827 = !DILocation(line: 689, column: 5, scope: !7825)
!7828 = !DILocation(line: 692, column: 7, scope: !7829)
!7829 = distinct !DILexicalBlock(scope: !7808, file: !214, line: 692, column: 7)
!7830 = !DILocation(line: 692, column: 10, scope: !7829)
!7831 = !DILocation(line: 692, column: 7, scope: !7808)
!7832 = !DILocation(line: 693, column: 23, scope: !7833)
!7833 = distinct !DILexicalBlock(scope: !7829, file: !214, line: 692, column: 17)
!7834 = !DILocation(line: 693, column: 26, scope: !7833)
!7835 = !DILocation(line: 693, column: 33, scope: !7833)
!7836 = !DILocation(line: 693, column: 40, scope: !7833)
!7837 = !DILocation(line: 693, column: 12, scope: !7833)
!7838 = !DILocation(line: 693, column: 5, scope: !7833)
!7839 = !DILocation(line: 696, column: 31, scope: !7808)
!7840 = !DILocation(line: 696, column: 35, scope: !7808)
!7841 = !DILocation(line: 696, column: 42, scope: !7808)
!7842 = !DILocation(line: 696, column: 10, scope: !7808)
!7843 = !DILocation(line: 696, column: 3, scope: !7808)
!7844 = !DILocation(line: 697, column: 1, scope: !7808)
!7845 = distinct !DISubprogram(name: "lchown", scope: !214, file: !214, line: 699, type: !7765, scopeLine: 699, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7846 = !DILocalVariable(name: "path", arg: 1, scope: !7845, file: !214, line: 699, type: !273)
!7847 = !DILocation(line: 699, column: 24, scope: !7845)
!7848 = !DILocalVariable(name: "owner", arg: 2, scope: !7845, file: !214, line: 699, type: !7767)
!7849 = !DILocation(line: 699, column: 36, scope: !7845)
!7850 = !DILocalVariable(name: "group", arg: 3, scope: !7845, file: !214, line: 699, type: !7768)
!7851 = !DILocation(line: 699, column: 49, scope: !7845)
!7852 = !DILocalVariable(name: "df", scope: !7845, file: !214, line: 701, type: !6303)
!7853 = !DILocation(line: 701, column: 20, scope: !7845)
!7854 = !DILocation(line: 701, column: 40, scope: !7845)
!7855 = !DILocation(line: 701, column: 25, scope: !7845)
!7856 = !DILocation(line: 703, column: 7, scope: !7857)
!7857 = distinct !DILexicalBlock(scope: !7845, file: !214, line: 703, column: 7)
!7858 = !DILocation(line: 703, column: 7, scope: !7845)
!7859 = !DILocation(line: 704, column: 23, scope: !7860)
!7860 = distinct !DILexicalBlock(scope: !7857, file: !214, line: 703, column: 11)
!7861 = !DILocation(line: 704, column: 27, scope: !7860)
!7862 = !DILocation(line: 704, column: 34, scope: !7860)
!7863 = !DILocation(line: 704, column: 12, scope: !7860)
!7864 = !DILocation(line: 704, column: 5, scope: !7860)
!7865 = !DILocation(line: 707, column: 50, scope: !7845)
!7866 = !DILocation(line: 707, column: 30, scope: !7845)
!7867 = !DILocation(line: 707, column: 57, scope: !7845)
!7868 = !DILocation(line: 707, column: 64, scope: !7845)
!7869 = !DILocation(line: 707, column: 10, scope: !7845)
!7870 = !DILocation(line: 707, column: 3, scope: !7845)
!7871 = !DILocation(line: 708, column: 1, scope: !7845)
!7872 = distinct !DISubprogram(name: "__fd_fstat", scope: !214, file: !214, line: 710, type: !6676, scopeLine: 710, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7873 = !DILocalVariable(name: "fd", arg: 1, scope: !7872, file: !214, line: 710, type: !77)
!7874 = !DILocation(line: 710, column: 20, scope: !7872)
!7875 = !DILocalVariable(name: "buf", arg: 2, scope: !7872, file: !214, line: 710, type: !6310)
!7876 = !DILocation(line: 710, column: 39, scope: !7872)
!7877 = !DILocalVariable(name: "f", scope: !7872, file: !214, line: 711, type: !6518)
!7878 = !DILocation(line: 711, column: 15, scope: !7872)
!7879 = !DILocation(line: 711, column: 30, scope: !7872)
!7880 = !DILocation(line: 711, column: 19, scope: !7872)
!7881 = !DILocation(line: 713, column: 8, scope: !7882)
!7882 = distinct !DILexicalBlock(scope: !7872, file: !214, line: 713, column: 7)
!7883 = !DILocation(line: 713, column: 7, scope: !7872)
!7884 = !DILocation(line: 714, column: 5, scope: !7885)
!7885 = distinct !DILexicalBlock(scope: !7882, file: !214, line: 713, column: 11)
!7886 = !DILocation(line: 714, column: 11, scope: !7885)
!7887 = !DILocation(line: 715, column: 5, scope: !7885)
!7888 = !DILocation(line: 718, column: 8, scope: !7889)
!7889 = distinct !DILexicalBlock(scope: !7872, file: !214, line: 718, column: 7)
!7890 = !DILocation(line: 718, column: 11, scope: !7889)
!7891 = !DILocation(line: 718, column: 7, scope: !7872)
!7892 = !DILocation(line: 720, column: 32, scope: !7893)
!7893 = distinct !DILexicalBlock(scope: !7889, file: !214, line: 718, column: 18)
!7894 = !DILocation(line: 720, column: 35, scope: !7893)
!7895 = !DILocation(line: 720, column: 39, scope: !7893)
!7896 = !DILocation(line: 720, column: 12, scope: !7893)
!7897 = !DILocation(line: 720, column: 5, scope: !7893)
!7898 = !DILocation(line: 726, column: 10, scope: !7872)
!7899 = !DILocation(line: 726, column: 3, scope: !7872)
!7900 = !DILocation(line: 726, column: 15, scope: !7872)
!7901 = !DILocation(line: 726, column: 18, scope: !7872)
!7902 = !DILocation(line: 726, column: 25, scope: !7872)
!7903 = !DILocation(line: 727, column: 3, scope: !7872)
!7904 = !DILocation(line: 728, column: 1, scope: !7872)
!7905 = !DILocalVariable(name: "fd", arg: 1, scope: !282, file: !214, line: 730, type: !77)
!7906 = !DILocation(line: 730, column: 24, scope: !282)
!7907 = !DILocalVariable(name: "length", arg: 2, scope: !282, file: !214, line: 730, type: !203)
!7908 = !DILocation(line: 730, column: 36, scope: !282)
!7909 = !DILocalVariable(name: "f", scope: !282, file: !214, line: 732, type: !6518)
!7910 = !DILocation(line: 732, column: 15, scope: !282)
!7911 = !DILocation(line: 732, column: 30, scope: !282)
!7912 = !DILocation(line: 732, column: 19, scope: !282)
!7913 = !DILocation(line: 734, column: 10, scope: !282)
!7914 = !DILocation(line: 736, column: 8, scope: !7915)
!7915 = distinct !DILexicalBlock(scope: !282, file: !214, line: 736, column: 7)
!7916 = !DILocation(line: 736, column: 7, scope: !282)
!7917 = !DILocation(line: 737, column: 5, scope: !7918)
!7918 = distinct !DILexicalBlock(scope: !7915, file: !214, line: 736, column: 11)
!7919 = !DILocation(line: 737, column: 11, scope: !7918)
!7920 = !DILocation(line: 738, column: 5, scope: !7918)
!7921 = !DILocation(line: 741, column: 16, scope: !7922)
!7922 = distinct !DILexicalBlock(scope: !282, file: !214, line: 741, column: 7)
!7923 = !DILocation(line: 741, column: 7, scope: !7922)
!7924 = !DILocation(line: 741, column: 29, scope: !7922)
!7925 = !DILocation(line: 741, column: 42, scope: !7922)
!7926 = !DILocation(line: 741, column: 32, scope: !7922)
!7927 = !DILocation(line: 741, column: 60, scope: !7922)
!7928 = !DILocation(line: 741, column: 57, scope: !7922)
!7929 = !DILocation(line: 741, column: 7, scope: !282)
!7930 = !DILocation(line: 742, column: 26, scope: !7931)
!7931 = distinct !DILexicalBlock(scope: !7922, file: !214, line: 741, column: 69)
!7932 = !DILocation(line: 743, column: 5, scope: !7931)
!7933 = !DILocation(line: 743, column: 11, scope: !7931)
!7934 = !DILocation(line: 744, column: 5, scope: !7931)
!7935 = !DILocation(line: 747, column: 7, scope: !7936)
!7936 = distinct !DILexicalBlock(scope: !282, file: !214, line: 747, column: 7)
!7937 = !DILocation(line: 747, column: 10, scope: !7936)
!7938 = !DILocation(line: 747, column: 7, scope: !282)
!7939 = !DILocation(line: 748, column: 5, scope: !7940)
!7940 = distinct !DILexicalBlock(scope: !7936, file: !214, line: 747, column: 17)
!7941 = !DILocation(line: 749, column: 5, scope: !7940)
!7942 = !DILocation(line: 749, column: 11, scope: !7940)
!7943 = !DILocation(line: 750, column: 5, scope: !7940)
!7944 = !DILocation(line: 753, column: 34, scope: !282)
!7945 = !DILocation(line: 753, column: 37, scope: !282)
!7946 = !DILocation(line: 753, column: 41, scope: !282)
!7947 = !DILocation(line: 753, column: 10, scope: !282)
!7948 = !DILocation(line: 753, column: 3, scope: !282)
!7949 = !DILocation(line: 757, column: 1, scope: !282)
!7950 = distinct !DISubprogram(name: "__fd_getdents", scope: !214, file: !214, line: 759, type: !7951, scopeLine: 759, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!7951 = !DISubroutineType(types: !7952)
!7952 = !{!77, !32, !220, !32}
!7953 = !DILocalVariable(name: "fd", arg: 1, scope: !7950, file: !214, line: 759, type: !32)
!7954 = !DILocation(line: 759, column: 32, scope: !7950)
!7955 = !DILocalVariable(name: "dirp", arg: 2, scope: !7950, file: !214, line: 759, type: !220)
!7956 = !DILocation(line: 759, column: 53, scope: !7950)
!7957 = !DILocalVariable(name: "count", arg: 3, scope: !7950, file: !214, line: 759, type: !32)
!7958 = !DILocation(line: 759, column: 72, scope: !7950)
!7959 = !DILocalVariable(name: "f", scope: !7950, file: !214, line: 760, type: !6518)
!7960 = !DILocation(line: 760, column: 15, scope: !7950)
!7961 = !DILocation(line: 760, column: 30, scope: !7950)
!7962 = !DILocation(line: 760, column: 19, scope: !7950)
!7963 = !DILocation(line: 762, column: 8, scope: !7964)
!7964 = distinct !DILexicalBlock(scope: !7950, file: !214, line: 762, column: 7)
!7965 = !DILocation(line: 762, column: 7, scope: !7950)
!7966 = !DILocation(line: 763, column: 5, scope: !7967)
!7967 = distinct !DILexicalBlock(scope: !7964, file: !214, line: 762, column: 11)
!7968 = !DILocation(line: 763, column: 11, scope: !7967)
!7969 = !DILocation(line: 764, column: 5, scope: !7967)
!7970 = !DILocation(line: 767, column: 7, scope: !7971)
!7971 = distinct !DILexicalBlock(scope: !7950, file: !214, line: 767, column: 7)
!7972 = !DILocation(line: 767, column: 10, scope: !7971)
!7973 = !DILocation(line: 767, column: 7, scope: !7950)
!7974 = !DILocation(line: 768, column: 5, scope: !7975)
!7975 = distinct !DILexicalBlock(scope: !7971, file: !214, line: 767, column: 17)
!7976 = !DILocation(line: 769, column: 5, scope: !7975)
!7977 = !DILocation(line: 769, column: 11, scope: !7975)
!7978 = !DILocation(line: 770, column: 5, scope: !7975)
!7979 = !DILocation(line: 772, column: 25, scope: !7980)
!7980 = distinct !DILexicalBlock(scope: !7981, file: !214, line: 772, column: 9)
!7981 = distinct !DILexicalBlock(scope: !7971, file: !214, line: 771, column: 10)
!7982 = !DILocation(line: 772, column: 28, scope: !7980)
!7983 = !DILocation(line: 772, column: 32, scope: !7980)
!7984 = !DILocation(line: 772, column: 9, scope: !7981)
!7985 = !DILocalVariable(name: "i", scope: !7986, file: !214, line: 774, type: !203)
!7986 = distinct !DILexicalBlock(scope: !7980, file: !214, line: 772, column: 41)
!7987 = !DILocation(line: 774, column: 15, scope: !7986)
!7988 = !DILocalVariable(name: "pad", scope: !7986, file: !214, line: 774, type: !203)
!7989 = !DILocation(line: 774, column: 18, scope: !7986)
!7990 = !DILocalVariable(name: "bytes", scope: !7986, file: !214, line: 774, type: !203)
!7991 = !DILocation(line: 774, column: 23, scope: !7986)
!7992 = !DILocation(line: 777, column: 11, scope: !7986)
!7993 = !DILocation(line: 777, column: 14, scope: !7986)
!7994 = !DILocation(line: 777, column: 18, scope: !7986)
!7995 = !DILocation(line: 777, column: 9, scope: !7986)
!7996 = !DILocation(line: 778, column: 23, scope: !7997)
!7997 = distinct !DILexicalBlock(scope: !7986, file: !214, line: 778, column: 11)
!7998 = !DILocation(line: 778, column: 25, scope: !7997)
!7999 = !DILocation(line: 778, column: 45, scope: !7997)
!8000 = !DILocation(line: 778, column: 48, scope: !7997)
!8001 = !DILocation(line: 778, column: 42, scope: !7997)
!8002 = !DILocation(line: 778, column: 53, scope: !7997)
!8003 = !DILocation(line: 779, column: 11, scope: !7997)
!8004 = !DILocation(line: 779, column: 24, scope: !7997)
!8005 = !DILocation(line: 779, column: 15, scope: !7997)
!8006 = !DILocation(line: 779, column: 13, scope: !7997)
!8007 = !DILocation(line: 778, column: 11, scope: !7986)
!8008 = !DILocation(line: 780, column: 9, scope: !8009)
!8009 = distinct !DILexicalBlock(scope: !7997, file: !214, line: 779, column: 37)
!8010 = !DILocation(line: 780, column: 15, scope: !8009)
!8011 = !DILocation(line: 781, column: 9, scope: !8009)
!8012 = !DILocation(line: 783, column: 14, scope: !8013)
!8013 = distinct !DILexicalBlock(scope: !8014, file: !214, line: 783, column: 7)
!8014 = distinct !DILexicalBlock(scope: !7986, file: !214, line: 783, column: 7)
!8015 = !DILocation(line: 783, column: 25, scope: !8013)
!8016 = !DILocation(line: 783, column: 16, scope: !8013)
!8017 = !DILocation(line: 783, column: 15, scope: !8013)
!8018 = !DILocation(line: 783, column: 7, scope: !8014)
!8019 = !DILocalVariable(name: "df", scope: !8020, file: !214, line: 784, type: !6303)
!8020 = distinct !DILexicalBlock(scope: !8013, file: !214, line: 783, column: 43)
!8021 = !DILocation(line: 784, column: 26, scope: !8020)
!8022 = !DILocation(line: 784, column: 41, scope: !8020)
!8023 = !DILocation(line: 784, column: 51, scope: !8020)
!8024 = !DILocation(line: 784, column: 32, scope: !8020)
!8025 = !DILocation(line: 785, column: 23, scope: !8020)
!8026 = !DILocation(line: 785, column: 27, scope: !8020)
!8027 = !DILocation(line: 785, column: 33, scope: !8020)
!8028 = !DILocation(line: 785, column: 9, scope: !8020)
!8029 = !DILocation(line: 785, column: 15, scope: !8020)
!8030 = !DILocation(line: 785, column: 21, scope: !8020)
!8031 = !DILocation(line: 786, column: 9, scope: !8020)
!8032 = !DILocation(line: 786, column: 15, scope: !8020)
!8033 = !DILocation(line: 786, column: 24, scope: !8020)
!8034 = !DILocation(line: 787, column: 24, scope: !8020)
!8035 = !DILocation(line: 787, column: 9, scope: !8020)
!8036 = !DILocation(line: 787, column: 15, scope: !8020)
!8037 = !DILocation(line: 787, column: 22, scope: !8020)
!8038 = !DILocation(line: 788, column: 33, scope: !8020)
!8039 = !DILocation(line: 788, column: 31, scope: !8020)
!8040 = !DILocation(line: 788, column: 27, scope: !8020)
!8041 = !DILocation(line: 788, column: 9, scope: !8020)
!8042 = !DILocation(line: 788, column: 15, scope: !8020)
!8043 = !DILocation(line: 788, column: 25, scope: !8020)
!8044 = !DILocation(line: 789, column: 9, scope: !8020)
!8045 = !DILocation(line: 789, column: 15, scope: !8020)
!8046 = !DILocation(line: 789, column: 25, scope: !8020)
!8047 = !DILocation(line: 791, column: 24, scope: !8020)
!8048 = !DILocation(line: 791, column: 25, scope: !8020)
!8049 = !DILocation(line: 791, column: 29, scope: !8020)
!8050 = !DILocation(line: 791, column: 9, scope: !8020)
!8051 = !DILocation(line: 791, column: 15, scope: !8020)
!8052 = !DILocation(line: 791, column: 21, scope: !8020)
!8053 = !DILocation(line: 793, column: 18, scope: !8020)
!8054 = !DILocation(line: 793, column: 24, scope: !8020)
!8055 = !DILocation(line: 793, column: 15, scope: !8020)
!8056 = !DILocation(line: 794, column: 9, scope: !8020)
!8057 = !DILocation(line: 783, column: 38, scope: !8013)
!8058 = !DILocation(line: 783, column: 7, scope: !8013)
!8059 = distinct !{!8059, !8018, !8060}
!8060 = !DILocation(line: 795, column: 7, scope: !8014)
!8061 = !DILocation(line: 798, column: 13, scope: !7986)
!8062 = !DILocation(line: 798, column: 18, scope: !7986)
!8063 = !DILocation(line: 798, column: 11, scope: !7986)
!8064 = !DILocation(line: 799, column: 7, scope: !7986)
!8065 = !DILocation(line: 799, column: 13, scope: !7986)
!8066 = !DILocation(line: 799, column: 19, scope: !7986)
!8067 = !DILocation(line: 800, column: 24, scope: !7986)
!8068 = !DILocation(line: 800, column: 30, scope: !7986)
!8069 = !DILocation(line: 800, column: 28, scope: !7986)
!8070 = !DILocation(line: 800, column: 7, scope: !7986)
!8071 = !DILocation(line: 800, column: 13, scope: !7986)
!8072 = !DILocation(line: 800, column: 22, scope: !7986)
!8073 = !DILocation(line: 801, column: 7, scope: !7986)
!8074 = !DILocation(line: 801, column: 13, scope: !7986)
!8075 = !DILocation(line: 801, column: 20, scope: !7986)
!8076 = !DILocation(line: 802, column: 7, scope: !7986)
!8077 = !DILocation(line: 802, column: 13, scope: !7986)
!8078 = !DILocation(line: 802, column: 23, scope: !7986)
!8079 = !DILocation(line: 804, column: 7, scope: !7986)
!8080 = !DILocation(line: 804, column: 13, scope: !7986)
!8081 = !DILocation(line: 804, column: 19, scope: !7986)
!8082 = !DILocation(line: 806, column: 16, scope: !7986)
!8083 = !DILocation(line: 806, column: 22, scope: !7986)
!8084 = !DILocation(line: 806, column: 13, scope: !7986)
!8085 = !DILocation(line: 807, column: 16, scope: !7986)
!8086 = !DILocation(line: 807, column: 7, scope: !7986)
!8087 = !DILocation(line: 807, column: 10, scope: !7986)
!8088 = !DILocation(line: 807, column: 14, scope: !7986)
!8089 = !DILocation(line: 809, column: 14, scope: !7986)
!8090 = !DILocation(line: 809, column: 7, scope: !7986)
!8091 = !DILocalVariable(name: "os_pos", scope: !8092, file: !214, line: 811, type: !203)
!8092 = distinct !DILexicalBlock(scope: !7980, file: !214, line: 810, column: 12)
!8093 = !DILocation(line: 811, column: 15, scope: !8092)
!8094 = !DILocation(line: 811, column: 24, scope: !8092)
!8095 = !DILocation(line: 811, column: 27, scope: !8092)
!8096 = !DILocation(line: 811, column: 31, scope: !8092)
!8097 = !DILocalVariable(name: "res", scope: !8092, file: !214, line: 812, type: !77)
!8098 = !DILocation(line: 812, column: 11, scope: !8092)
!8099 = !DILocalVariable(name: "s", scope: !8092, file: !214, line: 813, type: !203)
!8100 = !DILocation(line: 813, column: 15, scope: !8092)
!8101 = !DILocation(line: 822, column: 14, scope: !8092)
!8102 = !DILocation(line: 822, column: 7, scope: !8092)
!8103 = !DILocation(line: 822, column: 23, scope: !8092)
!8104 = !DILocation(line: 823, column: 31, scope: !8092)
!8105 = !DILocation(line: 823, column: 34, scope: !8092)
!8106 = !DILocation(line: 823, column: 38, scope: !8092)
!8107 = !DILocation(line: 823, column: 11, scope: !8092)
!8108 = !DILocation(line: 823, column: 9, scope: !8092)
!8109 = !DILocation(line: 824, column: 7, scope: !8110)
!8110 = distinct !DILexicalBlock(scope: !8111, file: !214, line: 824, column: 7)
!8111 = distinct !DILexicalBlock(scope: !8092, file: !214, line: 824, column: 7)
!8112 = !DILocation(line: 824, column: 7, scope: !8111)
!8113 = !DILocation(line: 825, column: 38, scope: !8092)
!8114 = !DILocation(line: 825, column: 41, scope: !8092)
!8115 = !DILocation(line: 825, column: 45, scope: !8092)
!8116 = !DILocation(line: 825, column: 51, scope: !8092)
!8117 = !DILocation(line: 825, column: 13, scope: !8092)
!8118 = !DILocation(line: 825, column: 11, scope: !8092)
!8119 = !DILocation(line: 826, column: 11, scope: !8120)
!8120 = distinct !DILexicalBlock(scope: !8092, file: !214, line: 826, column: 11)
!8121 = !DILocation(line: 826, column: 15, scope: !8120)
!8122 = !DILocation(line: 826, column: 11, scope: !8092)
!8123 = !DILocalVariable(name: "pos", scope: !8124, file: !214, line: 827, type: !77)
!8124 = distinct !DILexicalBlock(scope: !8120, file: !214, line: 826, column: 21)
!8125 = !DILocation(line: 827, column: 13, scope: !8124)
!8126 = !DILocation(line: 828, column: 38, scope: !8124)
!8127 = !DILocation(line: 828, column: 41, scope: !8124)
!8128 = !DILocation(line: 828, column: 18, scope: !8124)
!8129 = !DILocation(line: 828, column: 9, scope: !8124)
!8130 = !DILocation(line: 828, column: 12, scope: !8124)
!8131 = !DILocation(line: 828, column: 16, scope: !8124)
!8132 = !DILocation(line: 829, column: 9, scope: !8133)
!8133 = distinct !DILexicalBlock(scope: !8134, file: !214, line: 829, column: 9)
!8134 = distinct !DILexicalBlock(scope: !8124, file: !214, line: 829, column: 9)
!8135 = !DILocation(line: 829, column: 9, scope: !8134)
!8136 = !DILocation(line: 830, column: 9, scope: !8124)
!8137 = !DILocation(line: 830, column: 12, scope: !8124)
!8138 = !DILocation(line: 830, column: 16, scope: !8124)
!8139 = !DILocation(line: 833, column: 9, scope: !8124)
!8140 = !DILocation(line: 833, column: 16, scope: !8124)
!8141 = !DILocation(line: 833, column: 22, scope: !8124)
!8142 = !DILocation(line: 833, column: 20, scope: !8124)
!8143 = !DILocalVariable(name: "dp", scope: !8144, file: !214, line: 834, type: !220)
!8144 = distinct !DILexicalBlock(scope: !8124, file: !214, line: 833, column: 27)
!8145 = !DILocation(line: 834, column: 28, scope: !8144)
!8146 = !DILocation(line: 834, column: 61, scope: !8144)
!8147 = !DILocation(line: 834, column: 53, scope: !8144)
!8148 = !DILocation(line: 834, column: 68, scope: !8144)
!8149 = !DILocation(line: 834, column: 66, scope: !8144)
!8150 = !DILocation(line: 834, column: 33, scope: !8144)
!8151 = !DILocation(line: 836, column: 11, scope: !8144)
!8152 = !DILocation(line: 836, column: 15, scope: !8144)
!8153 = !DILocation(line: 836, column: 21, scope: !8144)
!8154 = !DILocation(line: 838, column: 18, scope: !8144)
!8155 = !DILocation(line: 838, column: 22, scope: !8144)
!8156 = !DILocation(line: 838, column: 15, scope: !8144)
!8157 = distinct !{!8157, !8139, !8158}
!8158 = !DILocation(line: 839, column: 9, scope: !8124)
!8159 = !DILocation(line: 841, column: 14, scope: !8092)
!8160 = !DILocation(line: 841, column: 7, scope: !8092)
!8161 = !DILocation(line: 844, column: 1, scope: !7950)
!8162 = distinct !DISubprogram(name: "ioctl", scope: !214, file: !214, line: 847, type: !8163, scopeLine: 847, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!8163 = !DISubroutineType(types: !8164)
!8164 = !{!77, !77, !16, null}
!8165 = !DILocalVariable(name: "fd", arg: 1, scope: !8162, file: !214, line: 847, type: !77)
!8166 = !DILocation(line: 847, column: 15, scope: !8162)
!8167 = !DILocalVariable(name: "request", arg: 2, scope: !8162, file: !214, line: 847, type: !16)
!8168 = !DILocation(line: 847, column: 37, scope: !8162)
!8169 = !DILocalVariable(name: "f", scope: !8162, file: !214, line: 851, type: !6518)
!8170 = !DILocation(line: 851, column: 15, scope: !8162)
!8171 = !DILocation(line: 851, column: 30, scope: !8162)
!8172 = !DILocation(line: 851, column: 19, scope: !8162)
!8173 = !DILocalVariable(name: "ap", scope: !8162, file: !214, line: 852, type: !8174)
!8174 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !6078, line: 46, baseType: !8175)
!8175 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !6080, line: 32, baseType: !8176)
!8176 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !218, line: 852, baseType: !8177)
!8177 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8178, size: 192, elements: !1353)
!8178 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !218, line: 852, size: 192, elements: !8179)
!8179 = !{!8180, !8181, !8182, !8183}
!8180 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !8178, file: !218, line: 852, baseType: !32, size: 32)
!8181 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !8178, file: !218, line: 852, baseType: !32, size: 32, offset: 32)
!8182 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !8178, file: !218, line: 852, baseType: !7, size: 64, offset: 64)
!8183 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !8178, file: !218, line: 852, baseType: !7, size: 64, offset: 128)
!8184 = !DILocation(line: 852, column: 11, scope: !8162)
!8185 = !DILocalVariable(name: "buf", scope: !8162, file: !214, line: 853, type: !7)
!8186 = !DILocation(line: 853, column: 9, scope: !8162)
!8187 = !DILocation(line: 859, column: 8, scope: !8188)
!8188 = distinct !DILexicalBlock(scope: !8162, file: !214, line: 859, column: 7)
!8189 = !DILocation(line: 859, column: 7, scope: !8162)
!8190 = !DILocation(line: 860, column: 5, scope: !8191)
!8191 = distinct !DILexicalBlock(scope: !8188, file: !214, line: 859, column: 11)
!8192 = !DILocation(line: 860, column: 11, scope: !8191)
!8193 = !DILocation(line: 861, column: 5, scope: !8191)
!8194 = !DILocation(line: 864, column: 3, scope: !8162)
!8195 = !DILocation(line: 865, column: 9, scope: !8162)
!8196 = !DILocation(line: 865, column: 7, scope: !8162)
!8197 = !DILocation(line: 866, column: 3, scope: !8162)
!8198 = !DILocation(line: 867, column: 7, scope: !8199)
!8199 = distinct !DILexicalBlock(scope: !8162, file: !214, line: 867, column: 7)
!8200 = !DILocation(line: 867, column: 10, scope: !8199)
!8201 = !DILocation(line: 0, scope: !8162)
!8202 = !DILocation(line: 867, column: 7, scope: !8162)
!8203 = !DILocalVariable(name: "stat", scope: !8204, file: !214, line: 868, type: !229)
!8204 = distinct !DILexicalBlock(scope: !8199, file: !214, line: 867, column: 17)
!8205 = !DILocation(line: 868, column: 18, scope: !8204)
!8206 = !DILocation(line: 868, column: 43, scope: !8204)
!8207 = !DILocation(line: 868, column: 50, scope: !8204)
!8208 = !DILocation(line: 868, column: 25, scope: !8204)
!8209 = !DILocation(line: 870, column: 13, scope: !8204)
!8210 = !DILocation(line: 870, column: 5, scope: !8204)
!8211 = !DILocalVariable(name: "ts", scope: !8212, file: !214, line: 872, type: !8214)
!8212 = distinct !DILexicalBlock(scope: !8213, file: !214, line: 871, column: 18)
!8213 = distinct !DILexicalBlock(scope: !8204, file: !214, line: 870, column: 22)
!8214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8215, size: 64)
!8215 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "termios", file: !8216, line: 28, size: 480, elements: !8217)
!8216 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/termios.h", directory: "")
!8217 = !{!8218, !8220, !8221, !8222, !8223, !8225, !8227, !8229}
!8218 = !DIDerivedType(tag: DW_TAG_member, name: "c_iflag", scope: !8215, file: !8216, line: 30, baseType: !8219, size: 32)
!8219 = !DIDerivedType(tag: DW_TAG_typedef, name: "tcflag_t", file: !8216, line: 25, baseType: !32)
!8220 = !DIDerivedType(tag: DW_TAG_member, name: "c_oflag", scope: !8215, file: !8216, line: 31, baseType: !8219, size: 32, offset: 32)
!8221 = !DIDerivedType(tag: DW_TAG_member, name: "c_cflag", scope: !8215, file: !8216, line: 32, baseType: !8219, size: 32, offset: 64)
!8222 = !DIDerivedType(tag: DW_TAG_member, name: "c_lflag", scope: !8215, file: !8216, line: 33, baseType: !8219, size: 32, offset: 96)
!8223 = !DIDerivedType(tag: DW_TAG_member, name: "c_line", scope: !8215, file: !8216, line: 34, baseType: !8224, size: 8, offset: 128)
!8224 = !DIDerivedType(tag: DW_TAG_typedef, name: "cc_t", file: !8216, line: 23, baseType: !60)
!8225 = !DIDerivedType(tag: DW_TAG_member, name: "c_cc", scope: !8215, file: !8216, line: 35, baseType: !8226, size: 256, offset: 136)
!8226 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8224, size: 256, elements: !38)
!8227 = !DIDerivedType(tag: DW_TAG_member, name: "c_ispeed", scope: !8215, file: !8216, line: 36, baseType: !8228, size: 32, offset: 416)
!8228 = !DIDerivedType(tag: DW_TAG_typedef, name: "speed_t", file: !8216, line: 24, baseType: !32)
!8229 = !DIDerivedType(tag: DW_TAG_member, name: "c_ospeed", scope: !8215, file: !8216, line: 37, baseType: !8228, size: 32, offset: 448)
!8230 = !DILocation(line: 872, column: 23, scope: !8212)
!8231 = !DILocation(line: 872, column: 28, scope: !8212)
!8232 = !DILocation(line: 874, column: 7, scope: !8212)
!8233 = !DILocation(line: 877, column: 11, scope: !8234)
!8234 = distinct !DILexicalBlock(scope: !8212, file: !214, line: 877, column: 11)
!8235 = !DILocation(line: 877, column: 11, scope: !8212)
!8236 = !DILocation(line: 880, column: 9, scope: !8237)
!8237 = distinct !DILexicalBlock(scope: !8234, file: !214, line: 877, column: 35)
!8238 = !DILocation(line: 880, column: 13, scope: !8237)
!8239 = !DILocation(line: 880, column: 21, scope: !8237)
!8240 = !DILocation(line: 881, column: 9, scope: !8237)
!8241 = !DILocation(line: 881, column: 13, scope: !8237)
!8242 = !DILocation(line: 881, column: 21, scope: !8237)
!8243 = !DILocation(line: 882, column: 9, scope: !8237)
!8244 = !DILocation(line: 882, column: 13, scope: !8237)
!8245 = !DILocation(line: 882, column: 21, scope: !8237)
!8246 = !DILocation(line: 883, column: 9, scope: !8237)
!8247 = !DILocation(line: 883, column: 13, scope: !8237)
!8248 = !DILocation(line: 883, column: 21, scope: !8237)
!8249 = !DILocation(line: 885, column: 9, scope: !8237)
!8250 = !DILocation(line: 885, column: 13, scope: !8237)
!8251 = !DILocation(line: 885, column: 20, scope: !8237)
!8252 = !DILocation(line: 887, column: 9, scope: !8237)
!8253 = !DILocation(line: 887, column: 13, scope: !8237)
!8254 = !DILocation(line: 887, column: 21, scope: !8237)
!8255 = !DILocation(line: 888, column: 9, scope: !8237)
!8256 = !DILocation(line: 888, column: 13, scope: !8237)
!8257 = !DILocation(line: 888, column: 21, scope: !8237)
!8258 = !DILocation(line: 889, column: 9, scope: !8237)
!8259 = !DILocation(line: 889, column: 13, scope: !8237)
!8260 = !DILocation(line: 889, column: 21, scope: !8237)
!8261 = !DILocation(line: 890, column: 9, scope: !8237)
!8262 = !DILocation(line: 890, column: 13, scope: !8237)
!8263 = !DILocation(line: 890, column: 21, scope: !8237)
!8264 = !DILocation(line: 891, column: 9, scope: !8237)
!8265 = !DILocation(line: 891, column: 13, scope: !8237)
!8266 = !DILocation(line: 891, column: 21, scope: !8237)
!8267 = !DILocation(line: 892, column: 9, scope: !8237)
!8268 = !DILocation(line: 892, column: 13, scope: !8237)
!8269 = !DILocation(line: 892, column: 21, scope: !8237)
!8270 = !DILocation(line: 893, column: 9, scope: !8237)
!8271 = !DILocation(line: 893, column: 13, scope: !8237)
!8272 = !DILocation(line: 893, column: 21, scope: !8237)
!8273 = !DILocation(line: 894, column: 9, scope: !8237)
!8274 = !DILocation(line: 894, column: 13, scope: !8237)
!8275 = !DILocation(line: 894, column: 21, scope: !8237)
!8276 = !DILocation(line: 895, column: 9, scope: !8237)
!8277 = !DILocation(line: 895, column: 13, scope: !8237)
!8278 = !DILocation(line: 895, column: 21, scope: !8237)
!8279 = !DILocation(line: 896, column: 9, scope: !8237)
!8280 = !DILocation(line: 896, column: 13, scope: !8237)
!8281 = !DILocation(line: 896, column: 21, scope: !8237)
!8282 = !DILocation(line: 897, column: 9, scope: !8237)
!8283 = !DILocation(line: 897, column: 13, scope: !8237)
!8284 = !DILocation(line: 897, column: 22, scope: !8237)
!8285 = !DILocation(line: 898, column: 9, scope: !8237)
!8286 = !DILocation(line: 898, column: 13, scope: !8237)
!8287 = !DILocation(line: 898, column: 22, scope: !8237)
!8288 = !DILocation(line: 899, column: 9, scope: !8237)
!8289 = !DILocation(line: 899, column: 13, scope: !8237)
!8290 = !DILocation(line: 899, column: 22, scope: !8237)
!8291 = !DILocation(line: 900, column: 9, scope: !8237)
!8292 = !DILocation(line: 900, column: 13, scope: !8237)
!8293 = !DILocation(line: 900, column: 22, scope: !8237)
!8294 = !DILocation(line: 901, column: 9, scope: !8237)
!8295 = !DILocation(line: 901, column: 13, scope: !8237)
!8296 = !DILocation(line: 901, column: 22, scope: !8237)
!8297 = !DILocation(line: 902, column: 9, scope: !8237)
!8298 = !DILocation(line: 902, column: 13, scope: !8237)
!8299 = !DILocation(line: 902, column: 22, scope: !8237)
!8300 = !DILocation(line: 903, column: 9, scope: !8237)
!8301 = !DILocation(line: 903, column: 13, scope: !8237)
!8302 = !DILocation(line: 903, column: 22, scope: !8237)
!8303 = !DILocation(line: 904, column: 9, scope: !8237)
!8304 = !DILocation(line: 904, column: 13, scope: !8237)
!8305 = !DILocation(line: 904, column: 22, scope: !8237)
!8306 = !DILocation(line: 905, column: 9, scope: !8237)
!8307 = !DILocation(line: 905, column: 13, scope: !8237)
!8308 = !DILocation(line: 905, column: 22, scope: !8237)
!8309 = !DILocation(line: 906, column: 9, scope: !8237)
!8310 = !DILocation(line: 908, column: 9, scope: !8311)
!8311 = distinct !DILexicalBlock(scope: !8234, file: !214, line: 907, column: 14)
!8312 = !DILocation(line: 908, column: 15, scope: !8311)
!8313 = !DILocation(line: 909, column: 9, scope: !8311)
!8314 = !DILocation(line: 914, column: 7, scope: !8315)
!8315 = distinct !DILexicalBlock(scope: !8213, file: !214, line: 912, column: 18)
!8316 = !DILocation(line: 915, column: 11, scope: !8317)
!8317 = distinct !DILexicalBlock(scope: !8315, file: !214, line: 915, column: 11)
!8318 = !DILocation(line: 915, column: 11, scope: !8315)
!8319 = !DILocation(line: 916, column: 9, scope: !8320)
!8320 = distinct !DILexicalBlock(scope: !8317, file: !214, line: 915, column: 35)
!8321 = !DILocation(line: 918, column: 9, scope: !8322)
!8322 = distinct !DILexicalBlock(scope: !8317, file: !214, line: 917, column: 14)
!8323 = !DILocation(line: 918, column: 15, scope: !8322)
!8324 = !DILocation(line: 919, column: 9, scope: !8322)
!8325 = !DILocation(line: 924, column: 7, scope: !8326)
!8326 = distinct !DILexicalBlock(scope: !8213, file: !214, line: 922, column: 19)
!8327 = !DILocation(line: 925, column: 11, scope: !8328)
!8328 = distinct !DILexicalBlock(scope: !8326, file: !214, line: 925, column: 11)
!8329 = !DILocation(line: 925, column: 13, scope: !8328)
!8330 = !DILocation(line: 925, column: 11, scope: !8326)
!8331 = !DILocation(line: 926, column: 9, scope: !8332)
!8332 = distinct !DILexicalBlock(scope: !8328, file: !214, line: 925, column: 18)
!8333 = !DILocation(line: 928, column: 9, scope: !8334)
!8334 = distinct !DILexicalBlock(scope: !8328, file: !214, line: 927, column: 14)
!8335 = !DILocation(line: 928, column: 15, scope: !8334)
!8336 = !DILocation(line: 929, column: 9, scope: !8334)
!8337 = !DILocation(line: 934, column: 7, scope: !8338)
!8338 = distinct !DILexicalBlock(scope: !8213, file: !214, line: 932, column: 19)
!8339 = !DILocation(line: 935, column: 11, scope: !8340)
!8340 = distinct !DILexicalBlock(scope: !8338, file: !214, line: 935, column: 11)
!8341 = !DILocation(line: 935, column: 11, scope: !8338)
!8342 = !DILocation(line: 936, column: 9, scope: !8343)
!8343 = distinct !DILexicalBlock(scope: !8340, file: !214, line: 935, column: 35)
!8344 = !DILocation(line: 938, column: 9, scope: !8345)
!8345 = distinct !DILexicalBlock(scope: !8340, file: !214, line: 937, column: 14)
!8346 = !DILocation(line: 938, column: 15, scope: !8345)
!8347 = !DILocation(line: 939, column: 9, scope: !8345)
!8348 = !DILocalVariable(name: "ws", scope: !8349, file: !214, line: 943, type: !8350)
!8349 = distinct !DILexicalBlock(scope: !8213, file: !214, line: 942, column: 22)
!8350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8351, size: 64)
!8351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "winsize", file: !8352, line: 27, size: 64, elements: !8353)
!8352 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h", directory: "")
!8353 = !{!8354, !8355, !8356, !8357}
!8354 = !DIDerivedType(tag: DW_TAG_member, name: "ws_row", scope: !8351, file: !8352, line: 29, baseType: !58, size: 16)
!8355 = !DIDerivedType(tag: DW_TAG_member, name: "ws_col", scope: !8351, file: !8352, line: 30, baseType: !58, size: 16, offset: 16)
!8356 = !DIDerivedType(tag: DW_TAG_member, name: "ws_xpixel", scope: !8351, file: !8352, line: 31, baseType: !58, size: 16, offset: 32)
!8357 = !DIDerivedType(tag: DW_TAG_member, name: "ws_ypixel", scope: !8351, file: !8352, line: 32, baseType: !58, size: 16, offset: 48)
!8358 = !DILocation(line: 943, column: 23, scope: !8349)
!8359 = !DILocation(line: 943, column: 28, scope: !8349)
!8360 = !DILocation(line: 944, column: 7, scope: !8349)
!8361 = !DILocation(line: 944, column: 11, scope: !8349)
!8362 = !DILocation(line: 944, column: 18, scope: !8349)
!8363 = !DILocation(line: 945, column: 7, scope: !8349)
!8364 = !DILocation(line: 945, column: 11, scope: !8349)
!8365 = !DILocation(line: 945, column: 18, scope: !8349)
!8366 = !DILocation(line: 946, column: 7, scope: !8349)
!8367 = !DILocation(line: 947, column: 11, scope: !8368)
!8368 = distinct !DILexicalBlock(scope: !8349, file: !214, line: 947, column: 11)
!8369 = !DILocation(line: 947, column: 11, scope: !8349)
!8370 = !DILocation(line: 948, column: 9, scope: !8371)
!8371 = distinct !DILexicalBlock(scope: !8368, file: !214, line: 947, column: 35)
!8372 = !DILocation(line: 950, column: 9, scope: !8373)
!8373 = distinct !DILexicalBlock(scope: !8368, file: !214, line: 949, column: 14)
!8374 = !DILocation(line: 950, column: 15, scope: !8373)
!8375 = !DILocation(line: 951, column: 9, scope: !8373)
!8376 = !DILocation(line: 956, column: 7, scope: !8377)
!8377 = distinct !DILexicalBlock(scope: !8213, file: !214, line: 954, column: 22)
!8378 = !DILocation(line: 957, column: 11, scope: !8379)
!8379 = distinct !DILexicalBlock(scope: !8377, file: !214, line: 957, column: 11)
!8380 = !DILocation(line: 0, scope: !8379)
!8381 = !DILocation(line: 957, column: 11, scope: !8377)
!8382 = !DILocation(line: 958, column: 15, scope: !8383)
!8383 = distinct !DILexicalBlock(scope: !8379, file: !214, line: 957, column: 35)
!8384 = !DILocation(line: 959, column: 9, scope: !8383)
!8385 = !DILocation(line: 961, column: 15, scope: !8386)
!8386 = distinct !DILexicalBlock(scope: !8379, file: !214, line: 960, column: 14)
!8387 = !DILocation(line: 962, column: 9, scope: !8386)
!8388 = !DILocalVariable(name: "res", scope: !8389, file: !214, line: 966, type: !185)
!8389 = distinct !DILexicalBlock(scope: !8213, file: !214, line: 965, column: 20)
!8390 = !DILocation(line: 966, column: 12, scope: !8389)
!8391 = !DILocation(line: 966, column: 18, scope: !8389)
!8392 = !DILocation(line: 967, column: 7, scope: !8389)
!8393 = !DILocation(line: 968, column: 11, scope: !8394)
!8394 = distinct !DILexicalBlock(scope: !8389, file: !214, line: 968, column: 11)
!8395 = !DILocation(line: 968, column: 11, scope: !8389)
!8396 = !DILocation(line: 969, column: 13, scope: !8397)
!8397 = distinct !DILexicalBlock(scope: !8398, file: !214, line: 969, column: 13)
!8398 = distinct !DILexicalBlock(scope: !8394, file: !214, line: 968, column: 35)
!8399 = !DILocation(line: 969, column: 16, scope: !8397)
!8400 = !DILocation(line: 969, column: 32, scope: !8397)
!8401 = !DILocation(line: 969, column: 35, scope: !8397)
!8402 = !DILocation(line: 969, column: 42, scope: !8397)
!8403 = !DILocation(line: 969, column: 22, scope: !8397)
!8404 = !DILocation(line: 969, column: 20, scope: !8397)
!8405 = !DILocation(line: 969, column: 13, scope: !8398)
!8406 = !DILocation(line: 970, column: 18, scope: !8407)
!8407 = distinct !DILexicalBlock(scope: !8397, file: !214, line: 969, column: 48)
!8408 = !DILocation(line: 970, column: 21, scope: !8407)
!8409 = !DILocation(line: 970, column: 28, scope: !8407)
!8410 = !DILocation(line: 970, column: 35, scope: !8407)
!8411 = !DILocation(line: 970, column: 38, scope: !8407)
!8412 = !DILocation(line: 970, column: 33, scope: !8407)
!8413 = !DILocation(line: 970, column: 12, scope: !8407)
!8414 = !DILocation(line: 970, column: 16, scope: !8407)
!8415 = !DILocation(line: 971, column: 9, scope: !8407)
!8416 = !DILocation(line: 972, column: 12, scope: !8417)
!8417 = distinct !DILexicalBlock(scope: !8397, file: !214, line: 971, column: 16)
!8418 = !DILocation(line: 972, column: 16, scope: !8417)
!8419 = !DILocation(line: 974, column: 9, scope: !8398)
!8420 = !DILocation(line: 976, column: 9, scope: !8421)
!8421 = distinct !DILexicalBlock(scope: !8394, file: !214, line: 975, column: 14)
!8422 = !DILocation(line: 976, column: 15, scope: !8421)
!8423 = !DILocation(line: 977, column: 9, scope: !8421)
!8424 = !DILocation(line: 981, column: 7, scope: !8425)
!8425 = distinct !DILexicalBlock(scope: !8213, file: !214, line: 980, column: 20)
!8426 = !DILocation(line: 982, column: 7, scope: !8425)
!8427 = !DILocation(line: 982, column: 13, scope: !8425)
!8428 = !DILocation(line: 983, column: 7, scope: !8425)
!8429 = !DILocation(line: 986, column: 7, scope: !8213)
!8430 = !DILocation(line: 987, column: 7, scope: !8213)
!8431 = !DILocation(line: 987, column: 13, scope: !8213)
!8432 = !DILocation(line: 988, column: 7, scope: !8213)
!8433 = !DILocation(line: 991, column: 33, scope: !8162)
!8434 = !DILocation(line: 991, column: 37, scope: !8162)
!8435 = !DILocation(line: 991, column: 46, scope: !8162)
!8436 = !DILocation(line: 991, column: 10, scope: !8162)
!8437 = !DILocation(line: 991, column: 3, scope: !8162)
!8438 = !DILocation(line: 992, column: 1, scope: !8162)
!8439 = distinct !DISubprogram(name: "fcntl", scope: !214, file: !214, line: 994, type: !8440, scopeLine: 994, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!8440 = !DISubroutineType(types: !8441)
!8441 = !{!77, !77, !77, null}
!8442 = !DILocalVariable(name: "fd", arg: 1, scope: !8439, file: !214, line: 994, type: !77)
!8443 = !DILocation(line: 994, column: 15, scope: !8439)
!8444 = !DILocalVariable(name: "cmd", arg: 2, scope: !8439, file: !214, line: 994, type: !77)
!8445 = !DILocation(line: 994, column: 23, scope: !8439)
!8446 = !DILocalVariable(name: "f", scope: !8439, file: !214, line: 995, type: !6518)
!8447 = !DILocation(line: 995, column: 15, scope: !8439)
!8448 = !DILocation(line: 995, column: 30, scope: !8439)
!8449 = !DILocation(line: 995, column: 19, scope: !8439)
!8450 = !DILocalVariable(name: "ap", scope: !8439, file: !214, line: 996, type: !8174)
!8451 = !DILocation(line: 996, column: 11, scope: !8439)
!8452 = !DILocalVariable(name: "arg", scope: !8439, file: !214, line: 997, type: !32)
!8453 = !DILocation(line: 997, column: 12, scope: !8439)
!8454 = !DILocation(line: 999, column: 8, scope: !8455)
!8455 = distinct !DILexicalBlock(scope: !8439, file: !214, line: 999, column: 7)
!8456 = !DILocation(line: 999, column: 7, scope: !8439)
!8457 = !DILocation(line: 1000, column: 5, scope: !8458)
!8458 = distinct !DILexicalBlock(scope: !8455, file: !214, line: 999, column: 11)
!8459 = !DILocation(line: 1000, column: 11, scope: !8458)
!8460 = !DILocation(line: 1001, column: 5, scope: !8458)
!8461 = !DILocation(line: 1004, column: 7, scope: !8462)
!8462 = distinct !DILexicalBlock(scope: !8439, file: !214, line: 1004, column: 7)
!8463 = !DILocation(line: 1004, column: 10, scope: !8462)
!8464 = !DILocation(line: 1004, column: 23, scope: !8462)
!8465 = !DILocation(line: 1004, column: 26, scope: !8462)
!8466 = !DILocation(line: 1004, column: 20, scope: !8462)
!8467 = !DILocation(line: 1004, column: 39, scope: !8462)
!8468 = !DILocation(line: 1004, column: 42, scope: !8462)
!8469 = !DILocation(line: 1004, column: 56, scope: !8462)
!8470 = !DILocation(line: 1004, column: 59, scope: !8462)
!8471 = !DILocation(line: 1005, column: 7, scope: !8462)
!8472 = !DILocation(line: 1005, column: 10, scope: !8462)
!8473 = !DILocation(line: 1005, column: 26, scope: !8462)
!8474 = !DILocation(line: 1005, column: 29, scope: !8462)
!8475 = !DILocation(line: 1009, column: 9, scope: !8476)
!8476 = distinct !DILexicalBlock(scope: !8462, file: !214, line: 1005, column: 41)
!8477 = !DILocation(line: 1010, column: 3, scope: !8476)
!8478 = !DILocation(line: 1011, column: 5, scope: !8479)
!8479 = distinct !DILexicalBlock(scope: !8462, file: !214, line: 1010, column: 10)
!8480 = !DILocation(line: 1012, column: 11, scope: !8479)
!8481 = !DILocation(line: 1012, column: 9, scope: !8479)
!8482 = !DILocation(line: 1013, column: 5, scope: !8479)
!8483 = !DILocation(line: 1016, column: 7, scope: !8484)
!8484 = distinct !DILexicalBlock(scope: !8439, file: !214, line: 1016, column: 7)
!8485 = !DILocation(line: 1016, column: 10, scope: !8484)
!8486 = !DILocation(line: 1016, column: 7, scope: !8439)
!8487 = !DILocation(line: 1017, column: 12, scope: !8488)
!8488 = distinct !DILexicalBlock(scope: !8484, file: !214, line: 1016, column: 17)
!8489 = !DILocation(line: 1017, column: 5, scope: !8488)
!8490 = !DILocalVariable(name: "flags", scope: !8491, file: !214, line: 1019, type: !77)
!8491 = distinct !DILexicalBlock(scope: !8492, file: !214, line: 1018, column: 19)
!8492 = distinct !DILexicalBlock(scope: !8488, file: !214, line: 1017, column: 17)
!8493 = !DILocation(line: 1019, column: 11, scope: !8491)
!8494 = !DILocation(line: 1020, column: 11, scope: !8495)
!8495 = distinct !DILexicalBlock(scope: !8491, file: !214, line: 1020, column: 11)
!8496 = !DILocation(line: 1020, column: 14, scope: !8495)
!8497 = !DILocation(line: 1020, column: 20, scope: !8495)
!8498 = !DILocation(line: 1020, column: 11, scope: !8491)
!8499 = !DILocation(line: 1021, column: 15, scope: !8495)
!8500 = !DILocation(line: 1021, column: 9, scope: !8495)
!8501 = !DILocation(line: 1022, column: 14, scope: !8491)
!8502 = !DILocation(line: 1022, column: 7, scope: !8491)
!8503 = !DILocation(line: 1025, column: 7, scope: !8504)
!8504 = distinct !DILexicalBlock(scope: !8492, file: !214, line: 1024, column: 19)
!8505 = !DILocation(line: 1025, column: 10, scope: !8504)
!8506 = !DILocation(line: 1025, column: 16, scope: !8504)
!8507 = !DILocation(line: 1026, column: 11, scope: !8508)
!8508 = distinct !DILexicalBlock(scope: !8504, file: !214, line: 1026, column: 11)
!8509 = !DILocation(line: 1026, column: 15, scope: !8508)
!8510 = !DILocation(line: 1026, column: 11, scope: !8504)
!8511 = !DILocation(line: 1027, column: 9, scope: !8508)
!8512 = !DILocation(line: 1027, column: 12, scope: !8508)
!8513 = !DILocation(line: 1027, column: 18, scope: !8508)
!8514 = !DILocation(line: 1028, column: 7, scope: !8504)
!8515 = !DILocation(line: 1037, column: 7, scope: !8516)
!8516 = distinct !DILexicalBlock(scope: !8492, file: !214, line: 1030, column: 19)
!8517 = !DILocation(line: 1040, column: 7, scope: !8492)
!8518 = !DILocation(line: 1041, column: 7, scope: !8492)
!8519 = !DILocation(line: 1041, column: 13, scope: !8492)
!8520 = !DILocation(line: 1042, column: 7, scope: !8492)
!8521 = !DILocation(line: 1045, column: 30, scope: !8439)
!8522 = !DILocation(line: 1045, column: 33, scope: !8439)
!8523 = !DILocation(line: 1045, column: 37, scope: !8439)
!8524 = !DILocation(line: 1045, column: 42, scope: !8439)
!8525 = !DILocation(line: 1045, column: 10, scope: !8439)
!8526 = !DILocation(line: 1045, column: 3, scope: !8439)
!8527 = !DILocation(line: 1046, column: 1, scope: !8439)
!8528 = distinct !DISubprogram(name: "__fd_statfs", scope: !214, file: !214, line: 1048, type: !8529, scopeLine: 1048, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!8529 = !DISubroutineType(types: !8530)
!8530 = !{!77, !273, !8531}
!8531 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8532, size: 64)
!8532 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "statfs", file: !6249, line: 24, size: 960, elements: !8533)
!8533 = !{!8534, !8535, !8536, !8538, !8539, !8540, !8542, !8543, !8548, !8549, !8550, !8551}
!8534 = !DIDerivedType(tag: DW_TAG_member, name: "f_type", scope: !8532, file: !6249, line: 26, baseType: !6252, size: 64)
!8535 = !DIDerivedType(tag: DW_TAG_member, name: "f_bsize", scope: !8532, file: !6249, line: 27, baseType: !6252, size: 64, offset: 64)
!8536 = !DIDerivedType(tag: DW_TAG_member, name: "f_blocks", scope: !8532, file: !6249, line: 29, baseType: !8537, size: 64, offset: 128)
!8537 = !DIDerivedType(tag: DW_TAG_typedef, name: "__fsblkcnt_t", file: !146, line: 171, baseType: !16)
!8538 = !DIDerivedType(tag: DW_TAG_member, name: "f_bfree", scope: !8532, file: !6249, line: 30, baseType: !8537, size: 64, offset: 192)
!8539 = !DIDerivedType(tag: DW_TAG_member, name: "f_bavail", scope: !8532, file: !6249, line: 31, baseType: !8537, size: 64, offset: 256)
!8540 = !DIDerivedType(tag: DW_TAG_member, name: "f_files", scope: !8532, file: !6249, line: 32, baseType: !8541, size: 64, offset: 320)
!8541 = !DIDerivedType(tag: DW_TAG_typedef, name: "__fsfilcnt_t", file: !146, line: 175, baseType: !16)
!8542 = !DIDerivedType(tag: DW_TAG_member, name: "f_ffree", scope: !8532, file: !6249, line: 33, baseType: !8541, size: 64, offset: 384)
!8543 = !DIDerivedType(tag: DW_TAG_member, name: "f_fsid", scope: !8532, file: !6249, line: 41, baseType: !8544, size: 64, offset: 448)
!8544 = !DIDerivedType(tag: DW_TAG_typedef, name: "__fsid_t", file: !146, line: 143, baseType: !8545)
!8545 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !146, line: 143, size: 64, elements: !8546)
!8546 = !{!8547}
!8547 = !DIDerivedType(tag: DW_TAG_member, name: "__val", scope: !8545, file: !146, line: 143, baseType: !6266, size: 64)
!8548 = !DIDerivedType(tag: DW_TAG_member, name: "f_namelen", scope: !8532, file: !6249, line: 42, baseType: !6252, size: 64, offset: 512)
!8549 = !DIDerivedType(tag: DW_TAG_member, name: "f_frsize", scope: !8532, file: !6249, line: 43, baseType: !6252, size: 64, offset: 576)
!8550 = !DIDerivedType(tag: DW_TAG_member, name: "f_flags", scope: !8532, file: !6249, line: 44, baseType: !6252, size: 64, offset: 640)
!8551 = !DIDerivedType(tag: DW_TAG_member, name: "f_spare", scope: !8532, file: !6249, line: 45, baseType: !6271, size: 256, offset: 704)
!8552 = !DILocalVariable(name: "path", arg: 1, scope: !8528, file: !214, line: 1048, type: !273)
!8553 = !DILocation(line: 1048, column: 29, scope: !8528)
!8554 = !DILocalVariable(name: "buf", arg: 2, scope: !8528, file: !214, line: 1048, type: !8531)
!8555 = !DILocation(line: 1048, column: 50, scope: !8528)
!8556 = !DILocalVariable(name: "dfile", scope: !8528, file: !214, line: 1049, type: !6303)
!8557 = !DILocation(line: 1049, column: 20, scope: !8528)
!8558 = !DILocation(line: 1049, column: 43, scope: !8528)
!8559 = !DILocation(line: 1049, column: 28, scope: !8528)
!8560 = !DILocation(line: 1050, column: 7, scope: !8561)
!8561 = distinct !DILexicalBlock(scope: !8528, file: !214, line: 1050, column: 7)
!8562 = !DILocation(line: 1050, column: 7, scope: !8528)
!8563 = !DILocation(line: 1052, column: 5, scope: !8564)
!8564 = distinct !DILexicalBlock(scope: !8561, file: !214, line: 1050, column: 14)
!8565 = !DILocation(line: 1053, column: 5, scope: !8564)
!8566 = !DILocation(line: 1053, column: 11, scope: !8564)
!8567 = !DILocation(line: 1054, column: 5, scope: !8564)
!8568 = !DILocation(line: 1057, column: 51, scope: !8528)
!8569 = !DILocation(line: 1057, column: 31, scope: !8528)
!8570 = !DILocation(line: 1057, column: 58, scope: !8528)
!8571 = !DILocation(line: 1057, column: 10, scope: !8528)
!8572 = !DILocation(line: 1057, column: 3, scope: !8528)
!8573 = !DILocation(line: 1058, column: 1, scope: !8528)
!8574 = distinct !DISubprogram(name: "fstatfs", scope: !214, file: !214, line: 1060, type: !8575, scopeLine: 1060, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!8575 = !DISubroutineType(types: !8576)
!8576 = !{!77, !77, !8531}
!8577 = !DILocalVariable(name: "fd", arg: 1, scope: !8574, file: !214, line: 1060, type: !77)
!8578 = !DILocation(line: 1060, column: 17, scope: !8574)
!8579 = !DILocalVariable(name: "buf", arg: 2, scope: !8574, file: !214, line: 1060, type: !8531)
!8580 = !DILocation(line: 1060, column: 36, scope: !8574)
!8581 = !DILocalVariable(name: "f", scope: !8574, file: !214, line: 1061, type: !6518)
!8582 = !DILocation(line: 1061, column: 15, scope: !8574)
!8583 = !DILocation(line: 1061, column: 30, scope: !8574)
!8584 = !DILocation(line: 1061, column: 19, scope: !8574)
!8585 = !DILocation(line: 1063, column: 8, scope: !8586)
!8586 = distinct !DILexicalBlock(scope: !8574, file: !214, line: 1063, column: 7)
!8587 = !DILocation(line: 1063, column: 7, scope: !8574)
!8588 = !DILocation(line: 1064, column: 5, scope: !8589)
!8589 = distinct !DILexicalBlock(scope: !8586, file: !214, line: 1063, column: 11)
!8590 = !DILocation(line: 1064, column: 11, scope: !8589)
!8591 = !DILocation(line: 1065, column: 5, scope: !8589)
!8592 = !DILocation(line: 1068, column: 7, scope: !8593)
!8593 = distinct !DILexicalBlock(scope: !8574, file: !214, line: 1068, column: 7)
!8594 = !DILocation(line: 1068, column: 10, scope: !8593)
!8595 = !DILocation(line: 1068, column: 7, scope: !8574)
!8596 = !DILocation(line: 1069, column: 5, scope: !8597)
!8597 = distinct !DILexicalBlock(scope: !8593, file: !214, line: 1068, column: 17)
!8598 = !DILocation(line: 1070, column: 5, scope: !8597)
!8599 = !DILocation(line: 1070, column: 11, scope: !8597)
!8600 = !DILocation(line: 1071, column: 5, scope: !8597)
!8601 = !DILocation(line: 1073, column: 32, scope: !8574)
!8602 = !DILocation(line: 1073, column: 35, scope: !8574)
!8603 = !DILocation(line: 1073, column: 39, scope: !8574)
!8604 = !DILocation(line: 1073, column: 10, scope: !8574)
!8605 = !DILocation(line: 1073, column: 3, scope: !8574)
!8606 = !DILocation(line: 1074, column: 1, scope: !8574)
!8607 = distinct !DISubprogram(name: "fsync", scope: !214, file: !214, line: 1076, type: !215, scopeLine: 1076, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!8608 = !DILocalVariable(name: "fd", arg: 1, scope: !8607, file: !214, line: 1076, type: !77)
!8609 = !DILocation(line: 1076, column: 15, scope: !8607)
!8610 = !DILocalVariable(name: "f", scope: !8607, file: !214, line: 1077, type: !6518)
!8611 = !DILocation(line: 1077, column: 15, scope: !8607)
!8612 = !DILocation(line: 1077, column: 30, scope: !8607)
!8613 = !DILocation(line: 1077, column: 19, scope: !8607)
!8614 = !DILocation(line: 1079, column: 8, scope: !8615)
!8615 = distinct !DILexicalBlock(scope: !8607, file: !214, line: 1079, column: 7)
!8616 = !DILocation(line: 1079, column: 7, scope: !8607)
!8617 = !DILocation(line: 1080, column: 5, scope: !8618)
!8618 = distinct !DILexicalBlock(scope: !8615, file: !214, line: 1079, column: 11)
!8619 = !DILocation(line: 1080, column: 11, scope: !8618)
!8620 = !DILocation(line: 1081, column: 5, scope: !8618)
!8621 = !DILocation(line: 1082, column: 14, scope: !8622)
!8622 = distinct !DILexicalBlock(scope: !8615, file: !214, line: 1082, column: 14)
!8623 = !DILocation(line: 1082, column: 17, scope: !8622)
!8624 = !DILocation(line: 1082, column: 14, scope: !8615)
!8625 = !DILocation(line: 1083, column: 5, scope: !8626)
!8626 = distinct !DILexicalBlock(scope: !8622, file: !214, line: 1082, column: 24)
!8627 = !DILocation(line: 1085, column: 30, scope: !8607)
!8628 = !DILocation(line: 1085, column: 33, scope: !8607)
!8629 = !DILocation(line: 1085, column: 10, scope: !8607)
!8630 = !DILocation(line: 1085, column: 3, scope: !8607)
!8631 = !DILocation(line: 1086, column: 1, scope: !8607)
!8632 = distinct !DISubprogram(name: "dup2", scope: !214, file: !214, line: 1088, type: !8633, scopeLine: 1088, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!8633 = !DISubroutineType(types: !8634)
!8634 = !{!77, !77, !77}
!8635 = !DILocalVariable(name: "oldfd", arg: 1, scope: !8632, file: !214, line: 1088, type: !77)
!8636 = !DILocation(line: 1088, column: 14, scope: !8632)
!8637 = !DILocalVariable(name: "newfd", arg: 2, scope: !8632, file: !214, line: 1088, type: !77)
!8638 = !DILocation(line: 1088, column: 25, scope: !8632)
!8639 = !DILocalVariable(name: "f", scope: !8632, file: !214, line: 1089, type: !6518)
!8640 = !DILocation(line: 1089, column: 15, scope: !8632)
!8641 = !DILocation(line: 1089, column: 30, scope: !8632)
!8642 = !DILocation(line: 1089, column: 19, scope: !8632)
!8643 = !DILocation(line: 1091, column: 8, scope: !8644)
!8644 = distinct !DILexicalBlock(scope: !8632, file: !214, line: 1091, column: 7)
!8645 = !DILocation(line: 1091, column: 15, scope: !8644)
!8646 = !DILocation(line: 1091, column: 20, scope: !8644)
!8647 = !DILocation(line: 1091, column: 10, scope: !8644)
!8648 = !DILocation(line: 1091, column: 27, scope: !8644)
!8649 = !DILocation(line: 1091, column: 32, scope: !8644)
!8650 = !DILocation(line: 1092, column: 5, scope: !8651)
!8651 = distinct !DILexicalBlock(scope: !8644, file: !214, line: 1091, column: 43)
!8652 = !DILocation(line: 1092, column: 11, scope: !8651)
!8653 = !DILocation(line: 1093, column: 5, scope: !8651)
!8654 = !DILocalVariable(name: "f2", scope: !8655, file: !214, line: 1095, type: !6518)
!8655 = distinct !DILexicalBlock(scope: !8644, file: !214, line: 1094, column: 10)
!8656 = !DILocation(line: 1095, column: 17, scope: !8655)
!8657 = !DILocation(line: 1095, column: 37, scope: !8655)
!8658 = !DILocation(line: 1095, column: 23, scope: !8655)
!8659 = !DILocation(line: 1096, column: 9, scope: !8660)
!8660 = distinct !DILexicalBlock(scope: !8655, file: !214, line: 1096, column: 9)
!8661 = !DILocation(line: 1096, column: 13, scope: !8660)
!8662 = !DILocation(line: 1096, column: 19, scope: !8660)
!8663 = !DILocation(line: 1096, column: 9, scope: !8655)
!8664 = !DILocation(line: 1096, column: 34, scope: !8660)
!8665 = !DILocation(line: 1096, column: 28, scope: !8660)
!8666 = !DILocation(line: 1100, column: 6, scope: !8655)
!8667 = !DILocation(line: 1100, column: 12, scope: !8655)
!8668 = !DILocation(line: 1100, column: 11, scope: !8655)
!8669 = !DILocation(line: 1102, column: 5, scope: !8655)
!8670 = !DILocation(line: 1102, column: 9, scope: !8655)
!8671 = !DILocation(line: 1102, column: 15, scope: !8655)
!8672 = !DILocation(line: 1109, column: 12, scope: !8655)
!8673 = !DILocation(line: 1109, column: 5, scope: !8655)
!8674 = !DILocation(line: 1111, column: 1, scope: !8632)
!8675 = distinct !DISubprogram(name: "dup", scope: !214, file: !214, line: 1113, type: !215, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!8676 = !DILocalVariable(name: "oldfd", arg: 1, scope: !8675, file: !214, line: 1113, type: !77)
!8677 = !DILocation(line: 1113, column: 13, scope: !8675)
!8678 = !DILocalVariable(name: "f", scope: !8675, file: !214, line: 1114, type: !6518)
!8679 = !DILocation(line: 1114, column: 15, scope: !8675)
!8680 = !DILocation(line: 1114, column: 30, scope: !8675)
!8681 = !DILocation(line: 1114, column: 19, scope: !8675)
!8682 = !DILocation(line: 1115, column: 8, scope: !8683)
!8683 = distinct !DILexicalBlock(scope: !8675, file: !214, line: 1115, column: 7)
!8684 = !DILocation(line: 1115, column: 7, scope: !8675)
!8685 = !DILocation(line: 1116, column: 5, scope: !8686)
!8686 = distinct !DILexicalBlock(scope: !8683, file: !214, line: 1115, column: 11)
!8687 = !DILocation(line: 1116, column: 11, scope: !8686)
!8688 = !DILocation(line: 1117, column: 5, scope: !8686)
!8689 = !DILocalVariable(name: "fd", scope: !8690, file: !214, line: 1119, type: !77)
!8690 = distinct !DILexicalBlock(scope: !8683, file: !214, line: 1118, column: 10)
!8691 = !DILocation(line: 1119, column: 9, scope: !8690)
!8692 = !DILocation(line: 1120, column: 13, scope: !8693)
!8693 = distinct !DILexicalBlock(scope: !8690, file: !214, line: 1120, column: 5)
!8694 = !DILocation(line: 1120, column: 10, scope: !8693)
!8695 = !DILocation(line: 1120, column: 18, scope: !8696)
!8696 = distinct !DILexicalBlock(scope: !8693, file: !214, line: 1120, column: 5)
!8697 = !DILocation(line: 1120, column: 21, scope: !8696)
!8698 = !DILocation(line: 1120, column: 5, scope: !8693)
!8699 = !DILocation(line: 1121, column: 27, scope: !8700)
!8700 = distinct !DILexicalBlock(scope: !8696, file: !214, line: 1121, column: 11)
!8701 = !DILocation(line: 1121, column: 13, scope: !8700)
!8702 = !DILocation(line: 1121, column: 31, scope: !8700)
!8703 = !DILocation(line: 1121, column: 37, scope: !8700)
!8704 = !DILocation(line: 1121, column: 11, scope: !8696)
!8705 = !DILocation(line: 1120, column: 32, scope: !8696)
!8706 = !DILocation(line: 1120, column: 5, scope: !8696)
!8707 = distinct !{!8707, !8698, !8708}
!8708 = !DILocation(line: 1122, column: 9, scope: !8693)
!8709 = !DILocation(line: 1123, column: 9, scope: !8710)
!8710 = distinct !DILexicalBlock(scope: !8690, file: !214, line: 1123, column: 9)
!8711 = !DILocation(line: 1123, column: 12, scope: !8710)
!8712 = !DILocation(line: 1123, column: 9, scope: !8690)
!8713 = !DILocation(line: 1124, column: 7, scope: !8714)
!8714 = distinct !DILexicalBlock(scope: !8710, file: !214, line: 1123, column: 24)
!8715 = !DILocation(line: 1124, column: 13, scope: !8714)
!8716 = !DILocation(line: 1125, column: 7, scope: !8714)
!8717 = !DILocation(line: 1127, column: 19, scope: !8718)
!8718 = distinct !DILexicalBlock(scope: !8710, file: !214, line: 1126, column: 12)
!8719 = !DILocation(line: 1127, column: 26, scope: !8718)
!8720 = !DILocation(line: 1127, column: 14, scope: !8718)
!8721 = !DILocation(line: 1127, column: 7, scope: !8718)
!8722 = !DILocation(line: 1130, column: 1, scope: !8675)
!8723 = distinct !DISubprogram(name: "rmdir", scope: !214, file: !214, line: 1132, type: !1790, scopeLine: 1132, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!8724 = !DILocalVariable(name: "pathname", arg: 1, scope: !8723, file: !214, line: 1132, type: !273)
!8725 = !DILocation(line: 1132, column: 23, scope: !8723)
!8726 = !DILocalVariable(name: "dfile", scope: !8723, file: !214, line: 1133, type: !6303)
!8727 = !DILocation(line: 1133, column: 20, scope: !8723)
!8728 = !DILocation(line: 1133, column: 43, scope: !8723)
!8729 = !DILocation(line: 1133, column: 28, scope: !8723)
!8730 = !DILocation(line: 1134, column: 7, scope: !8731)
!8731 = distinct !DILexicalBlock(scope: !8723, file: !214, line: 1134, column: 7)
!8732 = !DILocation(line: 1134, column: 7, scope: !8723)
!8733 = !DILocation(line: 1136, column: 9, scope: !8734)
!8734 = distinct !DILexicalBlock(scope: !8735, file: !214, line: 1136, column: 9)
!8735 = distinct !DILexicalBlock(scope: !8731, file: !214, line: 1134, column: 14)
!8736 = !DILocation(line: 1136, column: 9, scope: !8735)
!8737 = !DILocation(line: 1137, column: 7, scope: !8738)
!8738 = distinct !DILexicalBlock(scope: !8734, file: !214, line: 1136, column: 40)
!8739 = !DILocation(line: 1137, column: 14, scope: !8738)
!8740 = !DILocation(line: 1137, column: 20, scope: !8738)
!8741 = !DILocation(line: 1137, column: 27, scope: !8738)
!8742 = !DILocation(line: 1138, column: 7, scope: !8738)
!8743 = !DILocation(line: 1140, column: 7, scope: !8744)
!8744 = distinct !DILexicalBlock(scope: !8734, file: !214, line: 1139, column: 12)
!8745 = !DILocation(line: 1140, column: 13, scope: !8744)
!8746 = !DILocation(line: 1141, column: 7, scope: !8744)
!8747 = !DILocation(line: 1145, column: 3, scope: !8723)
!8748 = !DILocation(line: 1146, column: 3, scope: !8723)
!8749 = !DILocation(line: 1146, column: 9, scope: !8723)
!8750 = !DILocation(line: 1147, column: 3, scope: !8723)
!8751 = !DILocation(line: 1148, column: 1, scope: !8723)
!8752 = distinct !DISubprogram(name: "unlink", scope: !214, file: !214, line: 1150, type: !1790, scopeLine: 1150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!8753 = !DILocalVariable(name: "pathname", arg: 1, scope: !8752, file: !214, line: 1150, type: !273)
!8754 = !DILocation(line: 1150, column: 24, scope: !8752)
!8755 = !DILocalVariable(name: "dfile", scope: !8752, file: !214, line: 1151, type: !6303)
!8756 = !DILocation(line: 1151, column: 20, scope: !8752)
!8757 = !DILocation(line: 1151, column: 43, scope: !8752)
!8758 = !DILocation(line: 1151, column: 28, scope: !8752)
!8759 = !DILocation(line: 1152, column: 7, scope: !8760)
!8760 = distinct !DILexicalBlock(scope: !8752, file: !214, line: 1152, column: 7)
!8761 = !DILocation(line: 1152, column: 7, scope: !8752)
!8762 = !DILocation(line: 1154, column: 9, scope: !8763)
!8763 = distinct !DILexicalBlock(scope: !8764, file: !214, line: 1154, column: 9)
!8764 = distinct !DILexicalBlock(scope: !8760, file: !214, line: 1152, column: 14)
!8765 = !DILocation(line: 0, scope: !8763)
!8766 = !DILocation(line: 1154, column: 9, scope: !8764)
!8767 = !DILocation(line: 1155, column: 20, scope: !8768)
!8768 = distinct !DILexicalBlock(scope: !8763, file: !214, line: 1154, column: 40)
!8769 = !DILocation(line: 1155, column: 27, scope: !8768)
!8770 = !DILocation(line: 1156, column: 7, scope: !8768)
!8771 = !DILocation(line: 1157, column: 16, scope: !8772)
!8772 = distinct !DILexicalBlock(scope: !8763, file: !214, line: 1157, column: 16)
!8773 = !DILocation(line: 0, scope: !8772)
!8774 = !DILocation(line: 1157, column: 16, scope: !8763)
!8775 = !DILocation(line: 1158, column: 13, scope: !8776)
!8776 = distinct !DILexicalBlock(scope: !8772, file: !214, line: 1157, column: 47)
!8777 = !DILocation(line: 1159, column: 7, scope: !8776)
!8778 = !DILocation(line: 1161, column: 13, scope: !8779)
!8779 = distinct !DILexicalBlock(scope: !8772, file: !214, line: 1160, column: 12)
!8780 = !DILocation(line: 1162, column: 7, scope: !8779)
!8781 = !DILocation(line: 1166, column: 3, scope: !8752)
!8782 = !DILocation(line: 1167, column: 3, scope: !8752)
!8783 = !DILocation(line: 1167, column: 9, scope: !8752)
!8784 = !DILocation(line: 1168, column: 3, scope: !8752)
!8785 = !DILocation(line: 1169, column: 1, scope: !8752)
!8786 = distinct !DISubprogram(name: "unlinkat", scope: !214, file: !214, line: 1171, type: !8787, scopeLine: 1171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!8787 = !DISubroutineType(types: !8788)
!8788 = !{!77, !77, !273, !77}
!8789 = !DILocalVariable(name: "dirfd", arg: 1, scope: !8786, file: !214, line: 1171, type: !77)
!8790 = !DILocation(line: 1171, column: 18, scope: !8786)
!8791 = !DILocalVariable(name: "pathname", arg: 2, scope: !8786, file: !214, line: 1171, type: !273)
!8792 = !DILocation(line: 1171, column: 37, scope: !8786)
!8793 = !DILocalVariable(name: "flags", arg: 3, scope: !8786, file: !214, line: 1171, type: !77)
!8794 = !DILocation(line: 1171, column: 51, scope: !8786)
!8795 = !DILocalVariable(name: "dfile", scope: !8786, file: !214, line: 1174, type: !6303)
!8796 = !DILocation(line: 1174, column: 20, scope: !8786)
!8797 = !DILocation(line: 1174, column: 43, scope: !8786)
!8798 = !DILocation(line: 1174, column: 28, scope: !8786)
!8799 = !DILocation(line: 1175, column: 7, scope: !8800)
!8800 = distinct !DILexicalBlock(scope: !8786, file: !214, line: 1175, column: 7)
!8801 = !DILocation(line: 1175, column: 7, scope: !8786)
!8802 = !DILocation(line: 1177, column: 9, scope: !8803)
!8803 = distinct !DILexicalBlock(scope: !8804, file: !214, line: 1177, column: 9)
!8804 = distinct !DILexicalBlock(scope: !8800, file: !214, line: 1175, column: 14)
!8805 = !DILocation(line: 0, scope: !8803)
!8806 = !DILocation(line: 1177, column: 9, scope: !8804)
!8807 = !DILocation(line: 1178, column: 20, scope: !8808)
!8808 = distinct !DILexicalBlock(scope: !8803, file: !214, line: 1177, column: 40)
!8809 = !DILocation(line: 1178, column: 27, scope: !8808)
!8810 = !DILocation(line: 1179, column: 7, scope: !8808)
!8811 = !DILocation(line: 1180, column: 16, scope: !8812)
!8812 = distinct !DILexicalBlock(scope: !8803, file: !214, line: 1180, column: 16)
!8813 = !DILocation(line: 0, scope: !8812)
!8814 = !DILocation(line: 1180, column: 16, scope: !8803)
!8815 = !DILocation(line: 1181, column: 13, scope: !8816)
!8816 = distinct !DILexicalBlock(scope: !8812, file: !214, line: 1180, column: 47)
!8817 = !DILocation(line: 1182, column: 7, scope: !8816)
!8818 = !DILocation(line: 1184, column: 13, scope: !8819)
!8819 = distinct !DILexicalBlock(scope: !8812, file: !214, line: 1183, column: 12)
!8820 = !DILocation(line: 1185, column: 7, scope: !8819)
!8821 = !DILocation(line: 1189, column: 3, scope: !8786)
!8822 = !DILocation(line: 1190, column: 3, scope: !8786)
!8823 = !DILocation(line: 1190, column: 9, scope: !8786)
!8824 = !DILocation(line: 1191, column: 3, scope: !8786)
!8825 = !DILocation(line: 1192, column: 1, scope: !8786)
!8826 = distinct !DISubprogram(name: "readlink", scope: !214, file: !214, line: 1194, type: !8827, scopeLine: 1194, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!8827 = !DISubroutineType(types: !8828)
!8828 = !{!259, !273, !19, !261}
!8829 = !DILocalVariable(name: "path", arg: 1, scope: !8826, file: !214, line: 1194, type: !273)
!8830 = !DILocation(line: 1194, column: 30, scope: !8826)
!8831 = !DILocalVariable(name: "buf", arg: 2, scope: !8826, file: !214, line: 1194, type: !19)
!8832 = !DILocation(line: 1194, column: 42, scope: !8826)
!8833 = !DILocalVariable(name: "bufsize", arg: 3, scope: !8826, file: !214, line: 1194, type: !261)
!8834 = !DILocation(line: 1194, column: 54, scope: !8826)
!8835 = !DILocalVariable(name: "dfile", scope: !8826, file: !214, line: 1195, type: !6303)
!8836 = !DILocation(line: 1195, column: 20, scope: !8826)
!8837 = !DILocation(line: 1195, column: 43, scope: !8826)
!8838 = !DILocation(line: 1195, column: 28, scope: !8826)
!8839 = !DILocation(line: 1196, column: 7, scope: !8840)
!8840 = distinct !DILexicalBlock(scope: !8826, file: !214, line: 1196, column: 7)
!8841 = !DILocation(line: 1196, column: 7, scope: !8826)
!8842 = !DILocation(line: 1199, column: 9, scope: !8843)
!8843 = distinct !DILexicalBlock(scope: !8844, file: !214, line: 1199, column: 9)
!8844 = distinct !DILexicalBlock(scope: !8840, file: !214, line: 1196, column: 14)
!8845 = !DILocation(line: 1199, column: 9, scope: !8844)
!8846 = !DILocation(line: 1200, column: 16, scope: !8847)
!8847 = distinct !DILexicalBlock(scope: !8843, file: !214, line: 1199, column: 40)
!8848 = !DILocation(line: 1200, column: 7, scope: !8847)
!8849 = !DILocation(line: 1200, column: 14, scope: !8847)
!8850 = !DILocation(line: 1201, column: 11, scope: !8851)
!8851 = distinct !DILexicalBlock(scope: !8847, file: !214, line: 1201, column: 11)
!8852 = !DILocation(line: 1201, column: 18, scope: !8851)
!8853 = !DILocation(line: 1201, column: 11, scope: !8847)
!8854 = !DILocation(line: 1201, column: 22, scope: !8851)
!8855 = !DILocation(line: 1201, column: 29, scope: !8851)
!8856 = !DILocation(line: 1202, column: 11, scope: !8857)
!8857 = distinct !DILexicalBlock(scope: !8847, file: !214, line: 1202, column: 11)
!8858 = !DILocation(line: 1202, column: 18, scope: !8857)
!8859 = !DILocation(line: 1202, column: 11, scope: !8847)
!8860 = !DILocation(line: 1202, column: 22, scope: !8857)
!8861 = !DILocation(line: 1202, column: 29, scope: !8857)
!8862 = !DILocation(line: 1203, column: 11, scope: !8863)
!8863 = distinct !DILexicalBlock(scope: !8847, file: !214, line: 1203, column: 11)
!8864 = !DILocation(line: 1203, column: 18, scope: !8863)
!8865 = !DILocation(line: 1203, column: 11, scope: !8847)
!8866 = !DILocation(line: 1203, column: 22, scope: !8863)
!8867 = !DILocation(line: 1203, column: 29, scope: !8863)
!8868 = !DILocation(line: 1204, column: 11, scope: !8869)
!8869 = distinct !DILexicalBlock(scope: !8847, file: !214, line: 1204, column: 11)
!8870 = !DILocation(line: 1204, column: 18, scope: !8869)
!8871 = !DILocation(line: 1204, column: 11, scope: !8847)
!8872 = !DILocation(line: 1204, column: 22, scope: !8869)
!8873 = !DILocation(line: 1204, column: 29, scope: !8869)
!8874 = !DILocation(line: 1205, column: 15, scope: !8847)
!8875 = !DILocation(line: 1205, column: 22, scope: !8847)
!8876 = !DILocation(line: 1205, column: 14, scope: !8847)
!8877 = !DILocation(line: 1205, column: 7, scope: !8847)
!8878 = !DILocation(line: 1207, column: 7, scope: !8879)
!8879 = distinct !DILexicalBlock(scope: !8843, file: !214, line: 1206, column: 12)
!8880 = !DILocation(line: 1207, column: 13, scope: !8879)
!8881 = !DILocation(line: 1208, column: 7, scope: !8879)
!8882 = !DILocation(line: 1211, column: 33, scope: !8826)
!8883 = !DILocation(line: 1211, column: 39, scope: !8826)
!8884 = !DILocation(line: 1211, column: 44, scope: !8826)
!8885 = !DILocation(line: 1211, column: 10, scope: !8826)
!8886 = !DILocation(line: 1211, column: 3, scope: !8826)
!8887 = !DILocation(line: 1212, column: 1, scope: !8826)
!8888 = distinct !DISubprogram(name: "select", scope: !214, file: !214, line: 1222, type: !8889, scopeLine: 1223, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!8889 = !DISubroutineType(types: !8890)
!8890 = !{!77, !77, !8891, !8891, !8891, !8901}
!8891 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8892, size: 64)
!8892 = !DIDerivedType(tag: DW_TAG_typedef, name: "fd_set", file: !8893, line: 70, baseType: !8894)
!8893 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/select.h", directory: "")
!8894 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !8893, line: 59, size: 1024, elements: !8895)
!8895 = !{!8896}
!8896 = !DIDerivedType(tag: DW_TAG_member, name: "fds_bits", scope: !8894, file: !8893, line: 64, baseType: !8897, size: 1024)
!8897 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8898, size: 1024, elements: !8899)
!8898 = !DIDerivedType(tag: DW_TAG_typedef, name: "__fd_mask", file: !8893, line: 49, baseType: !161)
!8899 = !{!8900}
!8900 = !DISubrange(count: 16)
!8901 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6898, size: 64)
!8902 = !DILocalVariable(name: "nfds", arg: 1, scope: !8888, file: !214, line: 1222, type: !77)
!8903 = !DILocation(line: 1222, column: 16, scope: !8888)
!8904 = !DILocalVariable(name: "read", arg: 2, scope: !8888, file: !214, line: 1222, type: !8891)
!8905 = !DILocation(line: 1222, column: 30, scope: !8888)
!8906 = !DILocalVariable(name: "write", arg: 3, scope: !8888, file: !214, line: 1222, type: !8891)
!8907 = !DILocation(line: 1222, column: 44, scope: !8888)
!8908 = !DILocalVariable(name: "except", arg: 4, scope: !8888, file: !214, line: 1223, type: !8891)
!8909 = !DILocation(line: 1223, column: 20, scope: !8888)
!8910 = !DILocalVariable(name: "timeout", arg: 5, scope: !8888, file: !214, line: 1223, type: !8901)
!8911 = !DILocation(line: 1223, column: 44, scope: !8888)
!8912 = !DILocalVariable(name: "in_read", scope: !8888, file: !214, line: 1224, type: !8892)
!8913 = !DILocation(line: 1224, column: 10, scope: !8888)
!8914 = !DILocalVariable(name: "in_write", scope: !8888, file: !214, line: 1224, type: !8892)
!8915 = !DILocation(line: 1224, column: 19, scope: !8888)
!8916 = !DILocalVariable(name: "in_except", scope: !8888, file: !214, line: 1224, type: !8892)
!8917 = !DILocation(line: 1224, column: 29, scope: !8888)
!8918 = !DILocalVariable(name: "os_read", scope: !8888, file: !214, line: 1224, type: !8892)
!8919 = !DILocation(line: 1224, column: 40, scope: !8888)
!8920 = !DILocalVariable(name: "os_write", scope: !8888, file: !214, line: 1224, type: !8892)
!8921 = !DILocation(line: 1224, column: 49, scope: !8888)
!8922 = !DILocalVariable(name: "os_except", scope: !8888, file: !214, line: 1224, type: !8892)
!8923 = !DILocation(line: 1224, column: 59, scope: !8888)
!8924 = !DILocalVariable(name: "i", scope: !8888, file: !214, line: 1225, type: !77)
!8925 = !DILocation(line: 1225, column: 7, scope: !8888)
!8926 = !DILocalVariable(name: "count", scope: !8888, file: !214, line: 1225, type: !77)
!8927 = !DILocation(line: 1225, column: 10, scope: !8888)
!8928 = !DILocalVariable(name: "os_nfds", scope: !8888, file: !214, line: 1225, type: !77)
!8929 = !DILocation(line: 1225, column: 21, scope: !8888)
!8930 = !DILocation(line: 1227, column: 7, scope: !8931)
!8931 = distinct !DILexicalBlock(scope: !8888, file: !214, line: 1227, column: 7)
!8932 = !DILocation(line: 1227, column: 7, scope: !8888)
!8933 = !DILocation(line: 1228, column: 16, scope: !8934)
!8934 = distinct !DILexicalBlock(scope: !8931, file: !214, line: 1227, column: 13)
!8935 = !DILocation(line: 1228, column: 15, scope: !8934)
!8936 = !DILocation(line: 1229, column: 5, scope: !8934)
!8937 = !DILocation(line: 1230, column: 3, scope: !8934)
!8938 = !DILocation(line: 1231, column: 5, scope: !8939)
!8939 = distinct !DILexicalBlock(scope: !8931, file: !214, line: 1230, column: 10)
!8940 = !DILocation(line: 1234, column: 7, scope: !8941)
!8941 = distinct !DILexicalBlock(scope: !8888, file: !214, line: 1234, column: 7)
!8942 = !DILocation(line: 1234, column: 7, scope: !8888)
!8943 = !DILocation(line: 1235, column: 17, scope: !8944)
!8944 = distinct !DILexicalBlock(scope: !8941, file: !214, line: 1234, column: 14)
!8945 = !DILocation(line: 1235, column: 16, scope: !8944)
!8946 = !DILocation(line: 1236, column: 5, scope: !8944)
!8947 = !DILocation(line: 1237, column: 3, scope: !8944)
!8948 = !DILocation(line: 1238, column: 5, scope: !8949)
!8949 = distinct !DILexicalBlock(scope: !8941, file: !214, line: 1237, column: 10)
!8950 = !DILocation(line: 1241, column: 7, scope: !8951)
!8951 = distinct !DILexicalBlock(scope: !8888, file: !214, line: 1241, column: 7)
!8952 = !DILocation(line: 1241, column: 7, scope: !8888)
!8953 = !DILocation(line: 1242, column: 18, scope: !8954)
!8954 = distinct !DILexicalBlock(scope: !8951, file: !214, line: 1241, column: 15)
!8955 = !DILocation(line: 1242, column: 17, scope: !8954)
!8956 = !DILocation(line: 1243, column: 5, scope: !8954)
!8957 = !DILocation(line: 1244, column: 3, scope: !8954)
!8958 = !DILocation(line: 1245, column: 5, scope: !8959)
!8959 = distinct !DILexicalBlock(scope: !8951, file: !214, line: 1244, column: 10)
!8960 = !DILocation(line: 1248, column: 3, scope: !8888)
!8961 = !DILocation(line: 1249, column: 3, scope: !8888)
!8962 = !DILocation(line: 1250, column: 3, scope: !8888)
!8963 = !DILocation(line: 1253, column: 9, scope: !8964)
!8964 = distinct !DILexicalBlock(scope: !8888, file: !214, line: 1253, column: 3)
!8965 = !DILocation(line: 1253, column: 8, scope: !8964)
!8966 = !DILocation(line: 1253, column: 13, scope: !8967)
!8967 = distinct !DILexicalBlock(scope: !8964, file: !214, line: 1253, column: 3)
!8968 = !DILocation(line: 1253, column: 15, scope: !8967)
!8969 = !DILocation(line: 1253, column: 14, scope: !8967)
!8970 = !DILocation(line: 1253, column: 3, scope: !8964)
!8971 = !DILocation(line: 1254, column: 9, scope: !8972)
!8972 = distinct !DILexicalBlock(scope: !8973, file: !214, line: 1254, column: 9)
!8973 = distinct !DILexicalBlock(scope: !8967, file: !214, line: 1253, column: 26)
!8974 = !DILocation(line: 1254, column: 31, scope: !8972)
!8975 = !DILocation(line: 1254, column: 34, scope: !8972)
!8976 = !DILocation(line: 1254, column: 57, scope: !8972)
!8977 = !DILocation(line: 1254, column: 60, scope: !8972)
!8978 = !DILocation(line: 1254, column: 9, scope: !8973)
!8979 = !DILocalVariable(name: "f", scope: !8980, file: !214, line: 1255, type: !6518)
!8980 = distinct !DILexicalBlock(scope: !8972, file: !214, line: 1254, column: 85)
!8981 = !DILocation(line: 1255, column: 19, scope: !8980)
!8982 = !DILocation(line: 1255, column: 34, scope: !8980)
!8983 = !DILocation(line: 1255, column: 23, scope: !8980)
!8984 = !DILocation(line: 1256, column: 12, scope: !8985)
!8985 = distinct !DILexicalBlock(scope: !8980, file: !214, line: 1256, column: 11)
!8986 = !DILocation(line: 1256, column: 11, scope: !8980)
!8987 = !DILocation(line: 1257, column: 9, scope: !8988)
!8988 = distinct !DILexicalBlock(scope: !8985, file: !214, line: 1256, column: 15)
!8989 = !DILocation(line: 1257, column: 15, scope: !8988)
!8990 = !DILocation(line: 1258, column: 9, scope: !8988)
!8991 = !DILocation(line: 1259, column: 18, scope: !8992)
!8992 = distinct !DILexicalBlock(scope: !8985, file: !214, line: 1259, column: 18)
!8993 = !DILocation(line: 1259, column: 21, scope: !8992)
!8994 = !DILocation(line: 0, scope: !8992)
!8995 = !DILocation(line: 1259, column: 18, scope: !8985)
!8996 = !DILocation(line: 1261, column: 13, scope: !8997)
!8997 = distinct !DILexicalBlock(scope: !8992, file: !214, line: 1259, column: 28)
!8998 = !DILocation(line: 1261, column: 36, scope: !8999)
!8999 = distinct !DILexicalBlock(scope: !8997, file: !214, line: 1261, column: 13)
!9000 = !DILocation(line: 1262, column: 13, scope: !9001)
!9001 = distinct !DILexicalBlock(scope: !8997, file: !214, line: 1262, column: 13)
!9002 = !DILocation(line: 1262, column: 13, scope: !8997)
!9003 = !DILocation(line: 1262, column: 37, scope: !9001)
!9004 = !DILocation(line: 1263, column: 13, scope: !9005)
!9005 = distinct !DILexicalBlock(scope: !8997, file: !214, line: 1263, column: 13)
!9006 = !DILocation(line: 1263, column: 13, scope: !8997)
!9007 = !DILocation(line: 1263, column: 38, scope: !9005)
!9008 = !DILocation(line: 1264, column: 9, scope: !8997)
!9009 = !DILocation(line: 1265, column: 7, scope: !8997)
!9010 = !DILocation(line: 1266, column: 13, scope: !9011)
!9011 = distinct !DILexicalBlock(scope: !8992, file: !214, line: 1265, column: 14)
!9012 = !DILocation(line: 1266, column: 36, scope: !9013)
!9013 = distinct !DILexicalBlock(scope: !9011, file: !214, line: 1266, column: 13)
!9014 = !DILocation(line: 1267, column: 13, scope: !9015)
!9015 = distinct !DILexicalBlock(scope: !9011, file: !214, line: 1267, column: 13)
!9016 = !DILocation(line: 1267, column: 13, scope: !9011)
!9017 = !DILocation(line: 1267, column: 37, scope: !9015)
!9018 = !DILocation(line: 1268, column: 13, scope: !9019)
!9019 = distinct !DILexicalBlock(scope: !9011, file: !214, line: 1268, column: 13)
!9020 = !DILocation(line: 1268, column: 13, scope: !9011)
!9021 = !DILocation(line: 1268, column: 38, scope: !9019)
!9022 = !DILocation(line: 1269, column: 13, scope: !9023)
!9023 = distinct !DILexicalBlock(scope: !9011, file: !214, line: 1269, column: 13)
!9024 = !DILocation(line: 1269, column: 16, scope: !9023)
!9025 = !DILocation(line: 1269, column: 22, scope: !9023)
!9026 = !DILocation(line: 1269, column: 19, scope: !9023)
!9027 = !DILocation(line: 1269, column: 13, scope: !9011)
!9028 = !DILocation(line: 1269, column: 41, scope: !9023)
!9029 = !DILocation(line: 1269, column: 44, scope: !9023)
!9030 = !DILocation(line: 1269, column: 47, scope: !9023)
!9031 = !DILocation(line: 1269, column: 39, scope: !9023)
!9032 = !DILocation(line: 1269, column: 31, scope: !9023)
!9033 = !DILocation(line: 1253, column: 22, scope: !8967)
!9034 = !DILocation(line: 1253, column: 3, scope: !8967)
!9035 = distinct !{!9035, !8970, !9036}
!9036 = !DILocation(line: 1272, column: 3, scope: !8964)
!9037 = !DILocation(line: 1274, column: 7, scope: !9038)
!9038 = distinct !DILexicalBlock(scope: !8888, file: !214, line: 1274, column: 7)
!9039 = !DILocation(line: 1274, column: 15, scope: !9038)
!9040 = !DILocation(line: 1274, column: 7, scope: !8888)
!9041 = !DILocalVariable(name: "tv", scope: !9042, file: !214, line: 1277, type: !6898)
!9042 = distinct !DILexicalBlock(scope: !9038, file: !214, line: 1274, column: 20)
!9043 = !DILocation(line: 1277, column: 20, scope: !9042)
!9044 = !DILocalVariable(name: "r", scope: !9042, file: !214, line: 1278, type: !77)
!9045 = !DILocation(line: 1278, column: 9, scope: !9042)
!9046 = !DILocation(line: 1278, column: 34, scope: !9042)
!9047 = !DILocation(line: 1278, column: 13, scope: !9042)
!9048 = !DILocation(line: 1281, column: 9, scope: !9049)
!9049 = distinct !DILexicalBlock(scope: !9042, file: !214, line: 1281, column: 9)
!9050 = !DILocation(line: 1281, column: 11, scope: !9049)
!9051 = !DILocation(line: 1281, column: 9, scope: !9042)
!9052 = !DILocation(line: 1284, column: 12, scope: !9053)
!9053 = distinct !DILexicalBlock(scope: !9054, file: !214, line: 1284, column: 11)
!9054 = distinct !DILexicalBlock(scope: !9049, file: !214, line: 1281, column: 18)
!9055 = !DILocation(line: 1284, column: 11, scope: !9054)
!9056 = !DILocation(line: 1285, column: 9, scope: !9053)
!9057 = !DILocation(line: 1287, column: 16, scope: !9058)
!9058 = distinct !DILexicalBlock(scope: !9049, file: !214, line: 1286, column: 12)
!9059 = !DILocation(line: 1287, column: 13, scope: !9058)
!9060 = !DILocation(line: 1290, column: 13, scope: !9061)
!9061 = distinct !DILexicalBlock(scope: !9058, file: !214, line: 1290, column: 7)
!9062 = !DILocation(line: 1290, column: 12, scope: !9061)
!9063 = !DILocation(line: 1290, column: 17, scope: !9064)
!9064 = distinct !DILexicalBlock(scope: !9061, file: !214, line: 1290, column: 7)
!9065 = !DILocation(line: 1290, column: 19, scope: !9064)
!9066 = !DILocation(line: 1290, column: 18, scope: !9064)
!9067 = !DILocation(line: 1290, column: 7, scope: !9061)
!9068 = !DILocalVariable(name: "f", scope: !9069, file: !214, line: 1291, type: !6518)
!9069 = distinct !DILexicalBlock(scope: !9064, file: !214, line: 1290, column: 30)
!9070 = !DILocation(line: 1291, column: 21, scope: !9069)
!9071 = !DILocation(line: 1291, column: 36, scope: !9069)
!9072 = !DILocation(line: 1291, column: 25, scope: !9069)
!9073 = !DILocation(line: 1292, column: 13, scope: !9074)
!9074 = distinct !DILexicalBlock(scope: !9069, file: !214, line: 1292, column: 13)
!9075 = !DILocation(line: 1292, column: 15, scope: !9074)
!9076 = !DILocation(line: 1292, column: 19, scope: !9074)
!9077 = !DILocation(line: 1292, column: 22, scope: !9074)
!9078 = !DILocation(line: 1292, column: 13, scope: !9069)
!9079 = !DILocation(line: 1293, column: 15, scope: !9080)
!9080 = distinct !DILexicalBlock(scope: !9081, file: !214, line: 1293, column: 15)
!9081 = distinct !DILexicalBlock(scope: !9074, file: !214, line: 1292, column: 29)
!9082 = !DILocation(line: 1293, column: 20, scope: !9080)
!9083 = !DILocation(line: 1293, column: 23, scope: !9080)
!9084 = !DILocation(line: 1293, column: 15, scope: !9081)
!9085 = !DILocation(line: 1293, column: 50, scope: !9080)
!9086 = !DILocation(line: 1294, column: 15, scope: !9087)
!9087 = distinct !DILexicalBlock(scope: !9081, file: !214, line: 1294, column: 15)
!9088 = !DILocation(line: 1294, column: 21, scope: !9087)
!9089 = !DILocation(line: 1294, column: 24, scope: !9087)
!9090 = !DILocation(line: 1294, column: 15, scope: !9081)
!9091 = !DILocation(line: 1294, column: 52, scope: !9087)
!9092 = !DILocation(line: 1295, column: 15, scope: !9093)
!9093 = distinct !DILexicalBlock(scope: !9081, file: !214, line: 1295, column: 15)
!9094 = !DILocation(line: 1295, column: 22, scope: !9093)
!9095 = !DILocation(line: 1295, column: 25, scope: !9093)
!9096 = !DILocation(line: 1295, column: 15, scope: !9081)
!9097 = !DILocation(line: 1295, column: 54, scope: !9093)
!9098 = !DILocation(line: 1290, column: 26, scope: !9064)
!9099 = !DILocation(line: 1290, column: 7, scope: !9064)
!9100 = distinct !{!9100, !9067, !9101}
!9101 = !DILocation(line: 1297, column: 7, scope: !9061)
!9102 = !DILocation(line: 1301, column: 10, scope: !8888)
!9103 = !DILocation(line: 1301, column: 3, scope: !8888)
!9104 = !DILocation(line: 1302, column: 1, scope: !8888)
!9105 = !DILocalVariable(name: "buf", arg: 1, scope: !287, file: !214, line: 1306, type: !19)
!9106 = !DILocation(line: 1306, column: 20, scope: !287)
!9107 = !DILocalVariable(name: "size", arg: 2, scope: !287, file: !214, line: 1306, type: !261)
!9108 = !DILocation(line: 1306, column: 32, scope: !287)
!9109 = !DILocalVariable(name: "r", scope: !287, file: !214, line: 1308, type: !77)
!9110 = !DILocation(line: 1308, column: 7, scope: !287)
!9111 = !DILocation(line: 1310, column: 10, scope: !287)
!9112 = !DILocation(line: 1312, column: 16, scope: !9113)
!9113 = distinct !DILexicalBlock(scope: !287, file: !214, line: 1312, column: 7)
!9114 = !DILocation(line: 1312, column: 7, scope: !9113)
!9115 = !DILocation(line: 1312, column: 29, scope: !9113)
!9116 = !DILocation(line: 1312, column: 42, scope: !9113)
!9117 = !DILocation(line: 1312, column: 32, scope: !9113)
!9118 = !DILocation(line: 1312, column: 57, scope: !9113)
!9119 = !DILocation(line: 1312, column: 54, scope: !9113)
!9120 = !DILocation(line: 1312, column: 7, scope: !287)
!9121 = !DILocation(line: 1313, column: 26, scope: !9122)
!9122 = distinct !DILexicalBlock(scope: !9113, file: !214, line: 1312, column: 66)
!9123 = !DILocation(line: 1314, column: 5, scope: !9122)
!9124 = !DILocation(line: 1314, column: 11, scope: !9122)
!9125 = !DILocation(line: 1315, column: 5, scope: !9122)
!9126 = !DILocation(line: 1318, column: 8, scope: !9127)
!9127 = distinct !DILexicalBlock(scope: !287, file: !214, line: 1318, column: 7)
!9128 = !DILocation(line: 1318, column: 7, scope: !287)
!9129 = !DILocation(line: 1319, column: 10, scope: !9130)
!9130 = distinct !DILexicalBlock(scope: !9131, file: !214, line: 1319, column: 9)
!9131 = distinct !DILexicalBlock(scope: !9127, file: !214, line: 1318, column: 13)
!9132 = !DILocation(line: 1319, column: 9, scope: !9131)
!9133 = !DILocation(line: 1320, column: 12, scope: !9130)
!9134 = !DILocation(line: 1320, column: 7, scope: !9130)
!9135 = !DILocation(line: 1321, column: 18, scope: !9131)
!9136 = !DILocation(line: 1321, column: 11, scope: !9131)
!9137 = !DILocation(line: 1321, column: 9, scope: !9131)
!9138 = !DILocation(line: 1322, column: 3, scope: !9131)
!9139 = !DILocation(line: 1324, column: 26, scope: !287)
!9140 = !DILocation(line: 1324, column: 9, scope: !287)
!9141 = !DILocation(line: 1324, column: 7, scope: !287)
!9142 = !DILocation(line: 1325, column: 28, scope: !287)
!9143 = !DILocation(line: 1325, column: 10, scope: !287)
!9144 = !DILocation(line: 1325, column: 8, scope: !287)
!9145 = !DILocation(line: 1329, column: 28, scope: !287)
!9146 = !DILocation(line: 1329, column: 33, scope: !287)
!9147 = !DILocation(line: 1329, column: 3, scope: !287)
!9148 = !DILocation(line: 1330, column: 28, scope: !287)
!9149 = !DILocation(line: 1330, column: 33, scope: !287)
!9150 = !DILocation(line: 1330, column: 7, scope: !287)
!9151 = !DILocation(line: 1330, column: 5, scope: !287)
!9152 = !DILocation(line: 1331, column: 7, scope: !9153)
!9153 = distinct !DILexicalBlock(scope: !287, file: !214, line: 1331, column: 7)
!9154 = !DILocation(line: 1331, column: 9, scope: !9153)
!9155 = !DILocation(line: 1331, column: 7, scope: !287)
!9156 = !DILocation(line: 1332, column: 5, scope: !9153)
!9157 = !DILocation(line: 1333, column: 10, scope: !287)
!9158 = !DILocation(line: 1333, column: 3, scope: !287)
!9159 = !DILocation(line: 1334, column: 1, scope: !287)
!9160 = distinct !DISubprogram(name: "chroot", scope: !214, file: !214, line: 1386, type: !1790, scopeLine: 1386, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !217, retainedNodes: !4)
!9161 = !DILocalVariable(name: "path", arg: 1, scope: !9160, file: !214, line: 1386, type: !273)
!9162 = !DILocation(line: 1386, column: 24, scope: !9160)
!9163 = !DILocation(line: 1387, column: 7, scope: !9164)
!9164 = distinct !DILexicalBlock(scope: !9160, file: !214, line: 1387, column: 7)
!9165 = !DILocation(line: 1387, column: 15, scope: !9164)
!9166 = !DILocation(line: 1387, column: 7, scope: !9160)
!9167 = !DILocation(line: 1388, column: 5, scope: !9168)
!9168 = distinct !DILexicalBlock(scope: !9164, file: !214, line: 1387, column: 24)
!9169 = !DILocation(line: 1388, column: 11, scope: !9168)
!9170 = !DILocation(line: 1389, column: 5, scope: !9168)
!9171 = !DILocation(line: 1392, column: 7, scope: !9172)
!9172 = distinct !DILexicalBlock(scope: !9160, file: !214, line: 1392, column: 7)
!9173 = !DILocation(line: 1392, column: 15, scope: !9172)
!9174 = !DILocation(line: 1392, column: 22, scope: !9172)
!9175 = !DILocation(line: 1392, column: 25, scope: !9172)
!9176 = !DILocation(line: 1392, column: 33, scope: !9172)
!9177 = !DILocation(line: 1392, column: 7, scope: !9160)
!9178 = !DILocation(line: 1393, column: 5, scope: !9179)
!9179 = distinct !DILexicalBlock(scope: !9172, file: !214, line: 1392, column: 42)
!9180 = !DILocation(line: 1396, column: 3, scope: !9160)
!9181 = !DILocation(line: 1397, column: 3, scope: !9160)
!9182 = !DILocation(line: 1397, column: 9, scope: !9160)
!9183 = !DILocation(line: 1398, column: 3, scope: !9160)
!9184 = !DILocation(line: 1399, column: 1, scope: !9160)
!9185 = distinct !DISubprogram(name: "__syscall_rt_sigaction", scope: !384, file: !384, line: 44, type: !9186, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9186 = !DISubroutineType(types: !9187)
!9187 = !{!77, !77, !9188, !9291, !261}
!9188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9189, size: 64)
!9189 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9190)
!9190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sigaction", file: !9191, line: 24, size: 1216, elements: !9192)
!9191 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/sigaction.h", directory: "")
!9192 = !{!9193, !9281, !9288, !9289}
!9193 = !DIDerivedType(tag: DW_TAG_member, name: "__sigaction_handler", scope: !9190, file: !9191, line: 35, baseType: !9194, size: 64)
!9194 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9190, file: !9191, line: 28, size: 64, elements: !9195)
!9195 = !{!9196, !9202}
!9196 = !DIDerivedType(tag: DW_TAG_member, name: "sa_handler", scope: !9194, file: !9191, line: 31, baseType: !9197, size: 64)
!9197 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sighandler_t", file: !9198, line: 72, baseType: !9199)
!9198 = !DIFile(filename: "/usr/include/signal.h", directory: "")
!9199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9200, size: 64)
!9200 = !DISubroutineType(types: !9201)
!9201 = !{null, !77}
!9202 = !DIDerivedType(tag: DW_TAG_member, name: "sa_sigaction", scope: !9194, file: !9191, line: 33, baseType: !9203, size: 64)
!9203 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9204, size: 64)
!9204 = !DISubroutineType(types: !9205)
!9205 = !{null, !77, !9206, !7}
!9206 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9207, size: 64)
!9207 = !DIDerivedType(tag: DW_TAG_typedef, name: "siginfo_t", file: !9208, line: 124, baseType: !9209)
!9208 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h", directory: "")
!9209 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !9208, line: 36, size: 1024, elements: !9210)
!9210 = !{!9211, !9212, !9213, !9214, !9215}
!9211 = !DIDerivedType(tag: DW_TAG_member, name: "si_signo", scope: !9209, file: !9208, line: 38, baseType: !77, size: 32)
!9212 = !DIDerivedType(tag: DW_TAG_member, name: "si_errno", scope: !9209, file: !9208, line: 40, baseType: !77, size: 32, offset: 32)
!9213 = !DIDerivedType(tag: DW_TAG_member, name: "si_code", scope: !9209, file: !9208, line: 42, baseType: !77, size: 32, offset: 64)
!9214 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !9209, file: !9208, line: 48, baseType: !77, size: 32, offset: 96)
!9215 = !DIDerivedType(tag: DW_TAG_member, name: "_sifields", scope: !9209, file: !9208, line: 123, baseType: !9216, size: 896, offset: 128)
!9216 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9209, file: !9208, line: 51, size: 896, elements: !9217)
!9217 = !{!9218, !9222, !9228, !9240, !9246, !9255, !9270, !9275}
!9218 = !DIDerivedType(tag: DW_TAG_member, name: "_pad", scope: !9216, file: !9208, line: 53, baseType: !9219, size: 896)
!9219 = !DICompositeType(tag: DW_TAG_array_type, baseType: !77, size: 896, elements: !9220)
!9220 = !{!9221}
!9221 = !DISubrange(count: 28)
!9222 = !DIDerivedType(tag: DW_TAG_member, name: "_kill", scope: !9216, file: !9208, line: 60, baseType: !9223, size: 64)
!9223 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !9216, file: !9208, line: 56, size: 64, elements: !9224)
!9224 = !{!9225, !9227}
!9225 = !DIDerivedType(tag: DW_TAG_member, name: "si_pid", scope: !9223, file: !9208, line: 58, baseType: !9226, size: 32)
!9226 = !DIDerivedType(tag: DW_TAG_typedef, name: "__pid_t", file: !146, line: 142, baseType: !77)
!9227 = !DIDerivedType(tag: DW_TAG_member, name: "si_uid", scope: !9223, file: !9208, line: 59, baseType: !154, size: 32, offset: 32)
!9228 = !DIDerivedType(tag: DW_TAG_member, name: "_timer", scope: !9216, file: !9208, line: 68, baseType: !9229, size: 128)
!9229 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !9216, file: !9208, line: 63, size: 128, elements: !9230)
!9230 = !{!9231, !9232, !9233}
!9231 = !DIDerivedType(tag: DW_TAG_member, name: "si_tid", scope: !9229, file: !9208, line: 65, baseType: !77, size: 32)
!9232 = !DIDerivedType(tag: DW_TAG_member, name: "si_overrun", scope: !9229, file: !9208, line: 66, baseType: !77, size: 32, offset: 32)
!9233 = !DIDerivedType(tag: DW_TAG_member, name: "si_sigval", scope: !9229, file: !9208, line: 67, baseType: !9234, size: 64, offset: 64)
!9234 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sigval_t", file: !9235, line: 30, baseType: !9236)
!9235 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h", directory: "")
!9236 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "sigval", file: !9235, line: 24, size: 64, elements: !9237)
!9237 = !{!9238, !9239}
!9238 = !DIDerivedType(tag: DW_TAG_member, name: "sival_int", scope: !9236, file: !9235, line: 26, baseType: !77, size: 32)
!9239 = !DIDerivedType(tag: DW_TAG_member, name: "sival_ptr", scope: !9236, file: !9235, line: 27, baseType: !7, size: 64)
!9240 = !DIDerivedType(tag: DW_TAG_member, name: "_rt", scope: !9216, file: !9208, line: 76, baseType: !9241, size: 128)
!9241 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !9216, file: !9208, line: 71, size: 128, elements: !9242)
!9242 = !{!9243, !9244, !9245}
!9243 = !DIDerivedType(tag: DW_TAG_member, name: "si_pid", scope: !9241, file: !9208, line: 73, baseType: !9226, size: 32)
!9244 = !DIDerivedType(tag: DW_TAG_member, name: "si_uid", scope: !9241, file: !9208, line: 74, baseType: !154, size: 32, offset: 32)
!9245 = !DIDerivedType(tag: DW_TAG_member, name: "si_sigval", scope: !9241, file: !9208, line: 75, baseType: !9234, size: 64, offset: 64)
!9246 = !DIDerivedType(tag: DW_TAG_member, name: "_sigchld", scope: !9216, file: !9208, line: 86, baseType: !9247, size: 256)
!9247 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !9216, file: !9208, line: 79, size: 256, elements: !9248)
!9248 = !{!9249, !9250, !9251, !9252, !9254}
!9249 = !DIDerivedType(tag: DW_TAG_member, name: "si_pid", scope: !9247, file: !9208, line: 81, baseType: !9226, size: 32)
!9250 = !DIDerivedType(tag: DW_TAG_member, name: "si_uid", scope: !9247, file: !9208, line: 82, baseType: !154, size: 32, offset: 32)
!9251 = !DIDerivedType(tag: DW_TAG_member, name: "si_status", scope: !9247, file: !9208, line: 83, baseType: !77, size: 32, offset: 64)
!9252 = !DIDerivedType(tag: DW_TAG_member, name: "si_utime", scope: !9247, file: !9208, line: 84, baseType: !9253, size: 64, offset: 128)
!9253 = !DIDerivedType(tag: DW_TAG_typedef, name: "__clock_t", file: !146, line: 144, baseType: !161)
!9254 = !DIDerivedType(tag: DW_TAG_member, name: "si_stime", scope: !9247, file: !9208, line: 85, baseType: !9253, size: 64, offset: 192)
!9255 = !DIDerivedType(tag: DW_TAG_member, name: "_sigfault", scope: !9216, file: !9208, line: 105, baseType: !9256, size: 256)
!9256 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !9216, file: !9208, line: 89, size: 256, elements: !9257)
!9257 = !{!9258, !9259, !9260}
!9258 = !DIDerivedType(tag: DW_TAG_member, name: "si_addr", scope: !9256, file: !9208, line: 91, baseType: !7, size: 64)
!9259 = !DIDerivedType(tag: DW_TAG_member, name: "si_addr_lsb", scope: !9256, file: !9208, line: 93, baseType: !115, size: 16, offset: 64)
!9260 = !DIDerivedType(tag: DW_TAG_member, name: "_bounds", scope: !9256, file: !9208, line: 104, baseType: !9261, size: 128, offset: 128)
!9261 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9256, file: !9208, line: 94, size: 128, elements: !9262)
!9262 = !{!9263, !9268}
!9263 = !DIDerivedType(tag: DW_TAG_member, name: "_addr_bnd", scope: !9261, file: !9208, line: 101, baseType: !9264, size: 128)
!9264 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !9261, file: !9208, line: 97, size: 128, elements: !9265)
!9265 = !{!9266, !9267}
!9266 = !DIDerivedType(tag: DW_TAG_member, name: "_lower", scope: !9264, file: !9208, line: 99, baseType: !7, size: 64)
!9267 = !DIDerivedType(tag: DW_TAG_member, name: "_upper", scope: !9264, file: !9208, line: 100, baseType: !7, size: 64, offset: 64)
!9268 = !DIDerivedType(tag: DW_TAG_member, name: "_pkey", scope: !9261, file: !9208, line: 103, baseType: !9269, size: 32)
!9269 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !146, line: 41, baseType: !32)
!9270 = !DIDerivedType(tag: DW_TAG_member, name: "_sigpoll", scope: !9216, file: !9208, line: 112, baseType: !9271, size: 128)
!9271 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !9216, file: !9208, line: 108, size: 128, elements: !9272)
!9272 = !{!9273, !9274}
!9273 = !DIDerivedType(tag: DW_TAG_member, name: "si_band", scope: !9271, file: !9208, line: 110, baseType: !161, size: 64)
!9274 = !DIDerivedType(tag: DW_TAG_member, name: "si_fd", scope: !9271, file: !9208, line: 111, baseType: !77, size: 32, offset: 64)
!9275 = !DIDerivedType(tag: DW_TAG_member, name: "_sigsys", scope: !9216, file: !9208, line: 121, baseType: !9276, size: 128)
!9276 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !9216, file: !9208, line: 116, size: 128, elements: !9277)
!9277 = !{!9278, !9279, !9280}
!9278 = !DIDerivedType(tag: DW_TAG_member, name: "_call_addr", scope: !9276, file: !9208, line: 118, baseType: !7, size: 64)
!9279 = !DIDerivedType(tag: DW_TAG_member, name: "_syscall", scope: !9276, file: !9208, line: 119, baseType: !77, size: 32, offset: 64)
!9280 = !DIDerivedType(tag: DW_TAG_member, name: "_arch", scope: !9276, file: !9208, line: 120, baseType: !32, size: 32, offset: 96)
!9281 = !DIDerivedType(tag: DW_TAG_member, name: "sa_mask", scope: !9190, file: !9191, line: 43, baseType: !9282, size: 1024, offset: 64)
!9282 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sigset_t", file: !9283, line: 8, baseType: !9284)
!9283 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h", directory: "")
!9284 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !9283, line: 5, size: 1024, elements: !9285)
!9285 = !{!9286}
!9286 = !DIDerivedType(tag: DW_TAG_member, name: "__val", scope: !9284, file: !9283, line: 7, baseType: !9287, size: 1024)
!9287 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 1024, elements: !8899)
!9288 = !DIDerivedType(tag: DW_TAG_member, name: "sa_flags", scope: !9190, file: !9191, line: 46, baseType: !77, size: 32, offset: 1088)
!9289 = !DIDerivedType(tag: DW_TAG_member, name: "sa_restorer", scope: !9190, file: !9191, line: 49, baseType: !9290, size: 64, offset: 1152)
!9290 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2917, size: 64)
!9291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9190, size: 64)
!9292 = !DILocalVariable(name: "signum", arg: 1, scope: !9185, file: !384, line: 44, type: !77)
!9293 = !DILocation(line: 44, column: 32, scope: !9185)
!9294 = !DILocalVariable(name: "act", arg: 2, scope: !9185, file: !384, line: 44, type: !9188)
!9295 = !DILocation(line: 44, column: 64, scope: !9185)
!9296 = !DILocalVariable(name: "oldact", arg: 3, scope: !9185, file: !384, line: 45, type: !9291)
!9297 = !DILocation(line: 45, column: 46, scope: !9185)
!9298 = !DILocalVariable(name: "_something", arg: 4, scope: !9185, file: !384, line: 45, type: !261)
!9299 = !DILocation(line: 45, column: 61, scope: !9185)
!9300 = !DILocation(line: 46, column: 3, scope: !9185)
!9301 = !DILocation(line: 47, column: 3, scope: !9185)
!9302 = distinct !DISubprogram(name: "sigaction", scope: !384, file: !384, line: 53, type: !9303, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9303 = !DISubroutineType(types: !9304)
!9304 = !{!77, !77, !9188, !9291}
!9305 = !DILocalVariable(name: "signum", arg: 1, scope: !9302, file: !384, line: 53, type: !77)
!9306 = !DILocation(line: 53, column: 19, scope: !9302)
!9307 = !DILocalVariable(name: "act", arg: 2, scope: !9302, file: !384, line: 53, type: !9188)
!9308 = !DILocation(line: 53, column: 51, scope: !9302)
!9309 = !DILocalVariable(name: "oldact", arg: 3, scope: !9302, file: !384, line: 54, type: !9291)
!9310 = !DILocation(line: 54, column: 33, scope: !9302)
!9311 = !DILocation(line: 55, column: 3, scope: !9302)
!9312 = !DILocation(line: 56, column: 3, scope: !9302)
!9313 = distinct !DISubprogram(name: "sigprocmask", scope: !384, file: !384, line: 61, type: !9314, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9314 = !DISubroutineType(types: !9315)
!9315 = !{!77, !77, !9316, !9320}
!9316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9317, size: 64)
!9317 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9318)
!9318 = !DIDerivedType(tag: DW_TAG_typedef, name: "sigset_t", file: !9319, line: 7, baseType: !9282)
!9319 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h", directory: "")
!9320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9318, size: 64)
!9321 = !DILocalVariable(name: "how", arg: 1, scope: !9313, file: !384, line: 61, type: !77)
!9322 = !DILocation(line: 61, column: 21, scope: !9313)
!9323 = !DILocalVariable(name: "set", arg: 2, scope: !9313, file: !384, line: 61, type: !9316)
!9324 = !DILocation(line: 61, column: 42, scope: !9313)
!9325 = !DILocalVariable(name: "oldset", arg: 3, scope: !9313, file: !384, line: 61, type: !9320)
!9326 = !DILocation(line: 61, column: 57, scope: !9313)
!9327 = !DILocation(line: 62, column: 3, scope: !9313)
!9328 = !DILocation(line: 63, column: 3, scope: !9313)
!9329 = distinct !DISubprogram(name: "fdatasync", scope: !384, file: !384, line: 68, type: !215, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9330 = !DILocalVariable(name: "fd", arg: 1, scope: !9329, file: !384, line: 68, type: !77)
!9331 = !DILocation(line: 68, column: 19, scope: !9329)
!9332 = !DILocation(line: 69, column: 3, scope: !9329)
!9333 = distinct !DISubprogram(name: "sync", scope: !384, file: !384, line: 74, type: !2917, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9334 = !DILocation(line: 75, column: 1, scope: !9333)
!9335 = distinct !DISubprogram(name: "__socketcall", scope: !384, file: !384, line: 83, type: !9336, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9336 = !DISubroutineType(types: !9337)
!9337 = !{!77, !77, !185}
!9338 = !DILocalVariable(name: "type", arg: 1, scope: !9335, file: !384, line: 83, type: !77)
!9339 = !DILocation(line: 83, column: 22, scope: !9335)
!9340 = !DILocalVariable(name: "args", arg: 2, scope: !9335, file: !384, line: 83, type: !185)
!9341 = !DILocation(line: 83, column: 33, scope: !9335)
!9342 = !DILocation(line: 84, column: 3, scope: !9335)
!9343 = !DILocation(line: 85, column: 3, scope: !9335)
!9344 = !DILocation(line: 85, column: 9, scope: !9335)
!9345 = !DILocation(line: 86, column: 3, scope: !9335)
!9346 = distinct !DISubprogram(name: "_IO_getc", scope: !384, file: !384, line: 90, type: !9347, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9347 = !DISubroutineType(types: !9348)
!9348 = !{!77, !9349}
!9349 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9350, size: 64)
!9350 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !9351, line: 7, baseType: !9352)
!9351 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!9352 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !9353, line: 245, size: 1728, elements: !9354)
!9353 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/libio.h", directory: "")
!9354 = !{!9355, !9356, !9357, !9358, !9359, !9360, !9361, !9362, !9363, !9364, !9365, !9366, !9367, !9375, !9376, !9377, !9378, !9379, !9380, !9381, !9383, !9386, !9387, !9388, !9389, !9390, !9391, !9392, !9393}
!9355 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !9352, file: !9353, line: 246, baseType: !77, size: 32)
!9356 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !9352, file: !9353, line: 251, baseType: !19, size: 64, offset: 64)
!9357 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !9352, file: !9353, line: 252, baseType: !19, size: 64, offset: 128)
!9358 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !9352, file: !9353, line: 253, baseType: !19, size: 64, offset: 192)
!9359 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !9352, file: !9353, line: 254, baseType: !19, size: 64, offset: 256)
!9360 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !9352, file: !9353, line: 255, baseType: !19, size: 64, offset: 320)
!9361 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !9352, file: !9353, line: 256, baseType: !19, size: 64, offset: 384)
!9362 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !9352, file: !9353, line: 257, baseType: !19, size: 64, offset: 448)
!9363 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !9352, file: !9353, line: 258, baseType: !19, size: 64, offset: 512)
!9364 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !9352, file: !9353, line: 260, baseType: !19, size: 64, offset: 576)
!9365 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !9352, file: !9353, line: 261, baseType: !19, size: 64, offset: 640)
!9366 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !9352, file: !9353, line: 262, baseType: !19, size: 64, offset: 704)
!9367 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !9352, file: !9353, line: 264, baseType: !9368, size: 64, offset: 768)
!9368 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9369, size: 64)
!9369 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !9353, line: 160, size: 192, elements: !9370)
!9370 = !{!9371, !9372, !9374}
!9371 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !9369, file: !9353, line: 161, baseType: !9368, size: 64)
!9372 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !9369, file: !9353, line: 162, baseType: !9373, size: 64, offset: 64)
!9373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9352, size: 64)
!9374 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !9369, file: !9353, line: 166, baseType: !77, size: 32, offset: 128)
!9375 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !9352, file: !9353, line: 266, baseType: !9373, size: 64, offset: 832)
!9376 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !9352, file: !9353, line: 268, baseType: !77, size: 32, offset: 896)
!9377 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !9352, file: !9353, line: 272, baseType: !77, size: 32, offset: 928)
!9378 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !9352, file: !9353, line: 274, baseType: !160, size: 64, offset: 960)
!9379 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !9352, file: !9353, line: 278, baseType: !58, size: 16, offset: 1024)
!9380 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !9352, file: !9353, line: 279, baseType: !2002, size: 8, offset: 1040)
!9381 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !9352, file: !9353, line: 280, baseType: !9382, size: 8, offset: 1048)
!9382 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 8, elements: !1353)
!9383 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !9352, file: !9353, line: 284, baseType: !9384, size: 64, offset: 1088)
!9384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9385, size: 64)
!9385 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !9353, line: 154, baseType: null)
!9386 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !9352, file: !9353, line: 293, baseType: !205, size: 64, offset: 1152)
!9387 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !9352, file: !9353, line: 301, baseType: !7, size: 64, offset: 1216)
!9388 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !9352, file: !9353, line: 302, baseType: !7, size: 64, offset: 1280)
!9389 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !9352, file: !9353, line: 303, baseType: !7, size: 64, offset: 1344)
!9390 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !9352, file: !9353, line: 304, baseType: !7, size: 64, offset: 1408)
!9391 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !9352, file: !9353, line: 306, baseType: !261, size: 64, offset: 1472)
!9392 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !9352, file: !9353, line: 307, baseType: !77, size: 32, offset: 1536)
!9393 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !9352, file: !9353, line: 309, baseType: !9394, size: 160, offset: 1568)
!9394 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 160, elements: !9395)
!9395 = !{!9396}
!9396 = !DISubrange(count: 20)
!9397 = !DILocalVariable(name: "f", arg: 1, scope: !9346, file: !384, line: 90, type: !9349)
!9398 = !DILocation(line: 90, column: 20, scope: !9346)
!9399 = !DILocation(line: 91, column: 27, scope: !9346)
!9400 = !DILocation(line: 91, column: 10, scope: !9346)
!9401 = !DILocation(line: 91, column: 3, scope: !9346)
!9402 = distinct !DISubprogram(name: "_IO_putc", scope: !384, file: !384, line: 95, type: !9403, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9403 = !DISubroutineType(types: !9404)
!9404 = !{!77, !77, !9349}
!9405 = !DILocalVariable(name: "c", arg: 1, scope: !9402, file: !384, line: 95, type: !77)
!9406 = !DILocation(line: 95, column: 18, scope: !9402)
!9407 = !DILocalVariable(name: "f", arg: 2, scope: !9402, file: !384, line: 95, type: !9349)
!9408 = !DILocation(line: 95, column: 27, scope: !9402)
!9409 = !DILocation(line: 96, column: 27, scope: !9402)
!9410 = !DILocation(line: 96, column: 30, scope: !9402)
!9411 = !DILocation(line: 96, column: 10, scope: !9402)
!9412 = !DILocation(line: 96, column: 3, scope: !9402)
!9413 = distinct !DISubprogram(name: "mkdir", scope: !384, file: !384, line: 100, type: !271, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9414 = !DILocalVariable(name: "pathname", arg: 1, scope: !9413, file: !384, line: 100, type: !273)
!9415 = !DILocation(line: 100, column: 23, scope: !9413)
!9416 = !DILocalVariable(name: "mode", arg: 2, scope: !9413, file: !384, line: 100, type: !208)
!9417 = !DILocation(line: 100, column: 40, scope: !9413)
!9418 = !DILocation(line: 101, column: 3, scope: !9413)
!9419 = !DILocation(line: 102, column: 3, scope: !9413)
!9420 = !DILocation(line: 102, column: 9, scope: !9413)
!9421 = !DILocation(line: 103, column: 3, scope: !9413)
!9422 = distinct !DISubprogram(name: "mkfifo", scope: !384, file: !384, line: 107, type: !271, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9423 = !DILocalVariable(name: "pathname", arg: 1, scope: !9422, file: !384, line: 107, type: !273)
!9424 = !DILocation(line: 107, column: 24, scope: !9422)
!9425 = !DILocalVariable(name: "mode", arg: 2, scope: !9422, file: !384, line: 107, type: !208)
!9426 = !DILocation(line: 107, column: 41, scope: !9422)
!9427 = !DILocation(line: 108, column: 3, scope: !9422)
!9428 = !DILocation(line: 109, column: 3, scope: !9422)
!9429 = !DILocation(line: 109, column: 9, scope: !9422)
!9430 = !DILocation(line: 110, column: 3, scope: !9422)
!9431 = distinct !DISubprogram(name: "mknod", scope: !384, file: !384, line: 114, type: !9432, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9432 = !DISubroutineType(types: !9433)
!9433 = !{!77, !273, !208, !385}
!9434 = !DILocalVariable(name: "pathname", arg: 1, scope: !9431, file: !384, line: 114, type: !273)
!9435 = !DILocation(line: 114, column: 23, scope: !9431)
!9436 = !DILocalVariable(name: "mode", arg: 2, scope: !9431, file: !384, line: 114, type: !208)
!9437 = !DILocation(line: 114, column: 40, scope: !9431)
!9438 = !DILocalVariable(name: "dev", arg: 3, scope: !9431, file: !384, line: 114, type: !385)
!9439 = !DILocation(line: 114, column: 52, scope: !9431)
!9440 = !DILocation(line: 115, column: 3, scope: !9431)
!9441 = !DILocation(line: 116, column: 3, scope: !9431)
!9442 = !DILocation(line: 116, column: 9, scope: !9431)
!9443 = !DILocation(line: 117, column: 3, scope: !9431)
!9444 = distinct !DISubprogram(name: "pipe", scope: !384, file: !384, line: 121, type: !9445, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9445 = !DISubroutineType(types: !9446)
!9446 = !{!77, !185}
!9447 = !DILocalVariable(name: "filedes", arg: 1, scope: !9444, file: !384, line: 121, type: !185)
!9448 = !DILocation(line: 121, column: 14, scope: !9444)
!9449 = !DILocation(line: 122, column: 3, scope: !9444)
!9450 = !DILocation(line: 123, column: 3, scope: !9444)
!9451 = !DILocation(line: 123, column: 9, scope: !9444)
!9452 = !DILocation(line: 124, column: 3, scope: !9444)
!9453 = distinct !DISubprogram(name: "link", scope: !384, file: !384, line: 128, type: !796, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9454 = !DILocalVariable(name: "oldpath", arg: 1, scope: !9453, file: !384, line: 128, type: !273)
!9455 = !DILocation(line: 128, column: 22, scope: !9453)
!9456 = !DILocalVariable(name: "newpath", arg: 2, scope: !9453, file: !384, line: 128, type: !273)
!9457 = !DILocation(line: 128, column: 43, scope: !9453)
!9458 = !DILocation(line: 129, column: 3, scope: !9453)
!9459 = !DILocation(line: 130, column: 3, scope: !9453)
!9460 = !DILocation(line: 130, column: 9, scope: !9453)
!9461 = !DILocation(line: 131, column: 3, scope: !9453)
!9462 = distinct !DISubprogram(name: "symlink", scope: !384, file: !384, line: 135, type: !796, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9463 = !DILocalVariable(name: "oldpath", arg: 1, scope: !9462, file: !384, line: 135, type: !273)
!9464 = !DILocation(line: 135, column: 25, scope: !9462)
!9465 = !DILocalVariable(name: "newpath", arg: 2, scope: !9462, file: !384, line: 135, type: !273)
!9466 = !DILocation(line: 135, column: 46, scope: !9462)
!9467 = !DILocation(line: 136, column: 3, scope: !9462)
!9468 = !DILocation(line: 137, column: 3, scope: !9462)
!9469 = !DILocation(line: 137, column: 9, scope: !9462)
!9470 = !DILocation(line: 138, column: 3, scope: !9462)
!9471 = distinct !DISubprogram(name: "rename", scope: !384, file: !384, line: 142, type: !796, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9472 = !DILocalVariable(name: "oldpath", arg: 1, scope: !9471, file: !384, line: 142, type: !273)
!9473 = !DILocation(line: 142, column: 24, scope: !9471)
!9474 = !DILocalVariable(name: "newpath", arg: 2, scope: !9471, file: !384, line: 142, type: !273)
!9475 = !DILocation(line: 142, column: 45, scope: !9471)
!9476 = !DILocation(line: 143, column: 3, scope: !9471)
!9477 = !DILocation(line: 144, column: 3, scope: !9471)
!9478 = !DILocation(line: 144, column: 9, scope: !9471)
!9479 = !DILocation(line: 145, column: 3, scope: !9471)
!9480 = distinct !DISubprogram(name: "nanosleep", scope: !384, file: !384, line: 149, type: !9481, scopeLine: 149, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9481 = !DISubroutineType(types: !9482)
!9482 = !{!77, !9483, !9489}
!9483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9484, size: 64)
!9484 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9485)
!9485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !168, line: 9, size: 128, elements: !9486)
!9486 = !{!9487, !9488}
!9487 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !9485, file: !168, line: 11, baseType: !171, size: 64)
!9488 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !9485, file: !168, line: 12, baseType: !173, size: 64, offset: 64)
!9489 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9485, size: 64)
!9490 = !DILocalVariable(name: "req", arg: 1, scope: !9480, file: !384, line: 149, type: !9483)
!9491 = !DILocation(line: 149, column: 38, scope: !9480)
!9492 = !DILocalVariable(name: "rem", arg: 2, scope: !9480, file: !384, line: 149, type: !9489)
!9493 = !DILocation(line: 149, column: 60, scope: !9480)
!9494 = !DILocation(line: 150, column: 3, scope: !9480)
!9495 = distinct !DISubprogram(name: "clock_gettime", scope: !384, file: !384, line: 155, type: !9496, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9496 = !DISubroutineType(types: !9497)
!9497 = !{!77, !9498, !9489}
!9498 = !DIDerivedType(tag: DW_TAG_typedef, name: "clockid_t", file: !9499, line: 7, baseType: !9500)
!9499 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h", directory: "")
!9500 = !DIDerivedType(tag: DW_TAG_typedef, name: "__clockid_t", file: !146, line: 156, baseType: !77)
!9501 = !DILocalVariable(name: "clk_id", arg: 1, scope: !9495, file: !384, line: 155, type: !9498)
!9502 = !DILocation(line: 155, column: 29, scope: !9495)
!9503 = !DILocalVariable(name: "res", arg: 2, scope: !9495, file: !384, line: 155, type: !9489)
!9504 = !DILocation(line: 155, column: 54, scope: !9495)
!9505 = !DILocalVariable(name: "tv", scope: !9495, file: !384, line: 157, type: !9506)
!9506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !6899, line: 8, size: 128, elements: !9507)
!9507 = !{!9508, !9509}
!9508 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !9506, file: !6899, line: 10, baseType: !171, size: 64)
!9509 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !9506, file: !6899, line: 11, baseType: !6903, size: 64, offset: 64)
!9510 = !DILocation(line: 157, column: 18, scope: !9495)
!9511 = !DILocation(line: 158, column: 3, scope: !9495)
!9512 = !DILocation(line: 159, column: 20, scope: !9495)
!9513 = !DILocation(line: 159, column: 3, scope: !9495)
!9514 = !DILocation(line: 159, column: 8, scope: !9495)
!9515 = !DILocation(line: 159, column: 15, scope: !9495)
!9516 = !DILocation(line: 160, column: 21, scope: !9495)
!9517 = !DILocation(line: 160, column: 29, scope: !9495)
!9518 = !DILocation(line: 160, column: 3, scope: !9495)
!9519 = !DILocation(line: 160, column: 8, scope: !9495)
!9520 = !DILocation(line: 160, column: 16, scope: !9495)
!9521 = !DILocation(line: 161, column: 3, scope: !9495)
!9522 = distinct !DISubprogram(name: "clock_settime", scope: !384, file: !384, line: 165, type: !9523, scopeLine: 165, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9523 = !DISubroutineType(types: !9524)
!9524 = !{!77, !9498, !9483}
!9525 = !DILocalVariable(name: "clk_id", arg: 1, scope: !9522, file: !384, line: 165, type: !9498)
!9526 = !DILocation(line: 165, column: 29, scope: !9522)
!9527 = !DILocalVariable(name: "res", arg: 2, scope: !9522, file: !384, line: 165, type: !9483)
!9528 = !DILocation(line: 165, column: 60, scope: !9522)
!9529 = !DILocation(line: 166, column: 3, scope: !9522)
!9530 = !DILocation(line: 167, column: 3, scope: !9522)
!9531 = !DILocation(line: 167, column: 9, scope: !9522)
!9532 = !DILocation(line: 168, column: 3, scope: !9522)
!9533 = distinct !DISubprogram(name: "time", scope: !384, file: !384, line: 171, type: !9534, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9534 = !DISubroutineType(types: !9535)
!9535 = !{!9536, !9538}
!9536 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !9537, line: 7, baseType: !171)
!9537 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/time_t.h", directory: "")
!9538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9536, size: 64)
!9539 = !DILocalVariable(name: "t", arg: 1, scope: !9533, file: !384, line: 171, type: !9538)
!9540 = !DILocation(line: 171, column: 21, scope: !9533)
!9541 = !DILocalVariable(name: "tv", scope: !9533, file: !384, line: 172, type: !9506)
!9542 = !DILocation(line: 172, column: 18, scope: !9533)
!9543 = !DILocation(line: 173, column: 3, scope: !9533)
!9544 = !DILocation(line: 174, column: 7, scope: !9545)
!9545 = distinct !DILexicalBlock(scope: !9533, file: !384, line: 174, column: 7)
!9546 = !DILocation(line: 174, column: 7, scope: !9533)
!9547 = !DILocation(line: 175, column: 13, scope: !9545)
!9548 = !DILocation(line: 175, column: 6, scope: !9545)
!9549 = !DILocation(line: 175, column: 8, scope: !9545)
!9550 = !DILocation(line: 175, column: 5, scope: !9545)
!9551 = !DILocation(line: 176, column: 13, scope: !9533)
!9552 = !DILocation(line: 176, column: 3, scope: !9533)
!9553 = distinct !DISubprogram(name: "times", scope: !384, file: !384, line: 179, type: !9554, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9554 = !DISubroutineType(types: !9555)
!9555 = !{!9556, !9558}
!9556 = !DIDerivedType(tag: DW_TAG_typedef, name: "clock_t", file: !9557, line: 7, baseType: !9253)
!9557 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h", directory: "")
!9558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9559, size: 64)
!9559 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tms", file: !9560, line: 32, size: 256, elements: !9561)
!9560 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/times.h", directory: "")
!9561 = !{!9562, !9563, !9564, !9565}
!9562 = !DIDerivedType(tag: DW_TAG_member, name: "tms_utime", scope: !9559, file: !9560, line: 34, baseType: !9556, size: 64)
!9563 = !DIDerivedType(tag: DW_TAG_member, name: "tms_stime", scope: !9559, file: !9560, line: 35, baseType: !9556, size: 64, offset: 64)
!9564 = !DIDerivedType(tag: DW_TAG_member, name: "tms_cutime", scope: !9559, file: !9560, line: 37, baseType: !9556, size: 64, offset: 128)
!9565 = !DIDerivedType(tag: DW_TAG_member, name: "tms_cstime", scope: !9559, file: !9560, line: 38, baseType: !9556, size: 64, offset: 192)
!9566 = !DILocalVariable(name: "buf", arg: 1, scope: !9553, file: !384, line: 179, type: !9558)
!9567 = !DILocation(line: 179, column: 27, scope: !9553)
!9568 = !DILocation(line: 181, column: 8, scope: !9569)
!9569 = distinct !DILexicalBlock(scope: !9553, file: !384, line: 181, column: 7)
!9570 = !DILocation(line: 181, column: 7, scope: !9553)
!9571 = !DILocation(line: 182, column: 5, scope: !9569)
!9572 = !DILocation(line: 184, column: 5, scope: !9573)
!9573 = distinct !DILexicalBlock(scope: !9569, file: !384, line: 183, column: 8)
!9574 = !DILocation(line: 185, column: 5, scope: !9573)
!9575 = !DILocation(line: 185, column: 10, scope: !9573)
!9576 = !DILocation(line: 185, column: 20, scope: !9573)
!9577 = !DILocation(line: 186, column: 5, scope: !9573)
!9578 = !DILocation(line: 186, column: 10, scope: !9573)
!9579 = !DILocation(line: 186, column: 20, scope: !9573)
!9580 = !DILocation(line: 187, column: 5, scope: !9573)
!9581 = !DILocation(line: 187, column: 10, scope: !9573)
!9582 = !DILocation(line: 187, column: 21, scope: !9573)
!9583 = !DILocation(line: 188, column: 5, scope: !9573)
!9584 = !DILocation(line: 188, column: 10, scope: !9573)
!9585 = !DILocation(line: 188, column: 21, scope: !9573)
!9586 = !DILocation(line: 190, column: 3, scope: !9553)
!9587 = distinct !DISubprogram(name: "getutxent", scope: !384, file: !384, line: 195, type: !9588, scopeLine: 195, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9588 = !DISubroutineType(types: !9589)
!9589 = !{!382}
!9590 = !DILocation(line: 196, column: 26, scope: !9587)
!9591 = !DILocation(line: 196, column: 10, scope: !9587)
!9592 = !DILocation(line: 196, column: 3, scope: !9587)
!9593 = distinct !DISubprogram(name: "setutxent", scope: !384, file: !384, line: 200, type: !2917, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9594 = !DILocation(line: 201, column: 3, scope: !9593)
!9595 = !DILocation(line: 202, column: 1, scope: !9593)
!9596 = distinct !DISubprogram(name: "endutxent", scope: !384, file: !384, line: 205, type: !2917, scopeLine: 205, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9597 = !DILocation(line: 206, column: 3, scope: !9596)
!9598 = !DILocation(line: 207, column: 1, scope: !9596)
!9599 = distinct !DISubprogram(name: "utmpxname", scope: !384, file: !384, line: 210, type: !1790, scopeLine: 210, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9600 = !DILocalVariable(name: "file", arg: 1, scope: !9599, file: !384, line: 210, type: !273)
!9601 = !DILocation(line: 210, column: 27, scope: !9599)
!9602 = !DILocation(line: 211, column: 12, scope: !9599)
!9603 = !DILocation(line: 211, column: 3, scope: !9599)
!9604 = !DILocation(line: 212, column: 3, scope: !9599)
!9605 = distinct !DISubprogram(name: "euidaccess", scope: !384, file: !384, line: 217, type: !6296, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9606 = !DILocalVariable(name: "pathname", arg: 1, scope: !9605, file: !384, line: 217, type: !273)
!9607 = !DILocation(line: 217, column: 28, scope: !9605)
!9608 = !DILocalVariable(name: "mode", arg: 2, scope: !9605, file: !384, line: 217, type: !77)
!9609 = !DILocation(line: 217, column: 42, scope: !9605)
!9610 = !DILocation(line: 218, column: 17, scope: !9605)
!9611 = !DILocation(line: 218, column: 27, scope: !9605)
!9612 = !DILocation(line: 218, column: 10, scope: !9605)
!9613 = !DILocation(line: 218, column: 3, scope: !9605)
!9614 = distinct !DISubprogram(name: "eaccess", scope: !384, file: !384, line: 222, type: !6296, scopeLine: 222, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9615 = !DILocalVariable(name: "pathname", arg: 1, scope: !9614, file: !384, line: 222, type: !273)
!9616 = !DILocation(line: 222, column: 25, scope: !9614)
!9617 = !DILocalVariable(name: "mode", arg: 2, scope: !9614, file: !384, line: 222, type: !77)
!9618 = !DILocation(line: 222, column: 39, scope: !9614)
!9619 = !DILocation(line: 223, column: 21, scope: !9614)
!9620 = !DILocation(line: 223, column: 31, scope: !9614)
!9621 = !DILocation(line: 223, column: 10, scope: !9614)
!9622 = !DILocation(line: 223, column: 3, scope: !9614)
!9623 = distinct !DISubprogram(name: "group_member", scope: !384, file: !384, line: 227, type: !9624, scopeLine: 227, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9624 = !DISubroutineType(types: !9625)
!9625 = !{!77, !7768}
!9626 = !DILocalVariable(name: "__gid", arg: 1, scope: !9623, file: !384, line: 227, type: !7768)
!9627 = !DILocation(line: 227, column: 25, scope: !9623)
!9628 = !DILocation(line: 228, column: 12, scope: !9623)
!9629 = !DILocation(line: 228, column: 21, scope: !9623)
!9630 = !DILocation(line: 228, column: 18, scope: !9623)
!9631 = !DILocation(line: 228, column: 32, scope: !9623)
!9632 = !DILocation(line: 228, column: 36, scope: !9623)
!9633 = !DILocation(line: 228, column: 45, scope: !9623)
!9634 = !DILocation(line: 228, column: 42, scope: !9623)
!9635 = !DILocation(line: 228, column: 3, scope: !9623)
!9636 = distinct !DISubprogram(name: "utime", scope: !384, file: !384, line: 232, type: !9637, scopeLine: 232, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9637 = !DISubroutineType(types: !9638)
!9638 = !{!77, !273, !9639}
!9639 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9640, size: 64)
!9640 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9641)
!9641 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utimbuf", file: !9642, line: 36, size: 128, elements: !9643)
!9642 = !DIFile(filename: "/usr/include/utime.h", directory: "")
!9643 = !{!9644, !9645}
!9644 = !DIDerivedType(tag: DW_TAG_member, name: "actime", scope: !9641, file: !9642, line: 38, baseType: !171, size: 64)
!9645 = !DIDerivedType(tag: DW_TAG_member, name: "modtime", scope: !9641, file: !9642, line: 39, baseType: !171, size: 64, offset: 64)
!9646 = !DILocalVariable(name: "filename", arg: 1, scope: !9636, file: !384, line: 232, type: !273)
!9647 = !DILocation(line: 232, column: 23, scope: !9636)
!9648 = !DILocalVariable(name: "buf", arg: 2, scope: !9636, file: !384, line: 232, type: !9639)
!9649 = !DILocation(line: 232, column: 55, scope: !9636)
!9650 = !DILocation(line: 233, column: 3, scope: !9636)
!9651 = !DILocation(line: 234, column: 3, scope: !9636)
!9652 = !DILocation(line: 234, column: 9, scope: !9636)
!9653 = !DILocation(line: 235, column: 3, scope: !9636)
!9654 = distinct !DISubprogram(name: "futimes", scope: !384, file: !384, line: 239, type: !9655, scopeLine: 239, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9655 = !DISubroutineType(types: !9656)
!9656 = !{!77, !77, !9657}
!9657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9658, size: 64)
!9658 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9506)
!9659 = !DILocalVariable(name: "fd", arg: 1, scope: !9654, file: !384, line: 239, type: !77)
!9660 = !DILocation(line: 239, column: 17, scope: !9654)
!9661 = !DILocalVariable(name: "times", arg: 2, scope: !9654, file: !384, line: 239, type: !9657)
!9662 = !DILocation(line: 239, column: 42, scope: !9654)
!9663 = !DILocation(line: 240, column: 3, scope: !9654)
!9664 = !DILocation(line: 241, column: 3, scope: !9654)
!9665 = !DILocation(line: 241, column: 9, scope: !9654)
!9666 = !DILocation(line: 242, column: 3, scope: !9654)
!9667 = distinct !DISubprogram(name: "strverscmp", scope: !384, file: !384, line: 245, type: !796, scopeLine: 245, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9668 = !DILocalVariable(name: "__s1", arg: 1, scope: !9667, file: !384, line: 245, type: !273)
!9669 = !DILocation(line: 245, column: 31, scope: !9667)
!9670 = !DILocalVariable(name: "__s2", arg: 2, scope: !9667, file: !384, line: 245, type: !273)
!9671 = !DILocation(line: 245, column: 51, scope: !9667)
!9672 = !DILocation(line: 246, column: 17, scope: !9667)
!9673 = !DILocation(line: 246, column: 23, scope: !9667)
!9674 = !DILocation(line: 246, column: 10, scope: !9667)
!9675 = !DILocation(line: 246, column: 3, scope: !9667)
!9676 = distinct !DISubprogram(name: "gnu_dev_major", scope: !384, file: !384, line: 256, type: !9677, scopeLine: 256, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9677 = !DISubroutineType(types: !9678)
!9678 = !{!32, !385}
!9679 = !DILocalVariable(name: "__dev", arg: 1, scope: !9676, file: !384, line: 256, type: !385)
!9680 = !DILocation(line: 256, column: 41, scope: !9676)
!9681 = !DILocation(line: 257, column: 12, scope: !9676)
!9682 = !DILocation(line: 257, column: 18, scope: !9676)
!9683 = !DILocation(line: 257, column: 24, scope: !9676)
!9684 = !DILocation(line: 257, column: 52, scope: !9676)
!9685 = !DILocation(line: 257, column: 58, scope: !9676)
!9686 = !DILocation(line: 257, column: 36, scope: !9676)
!9687 = !DILocation(line: 257, column: 65, scope: !9676)
!9688 = !DILocation(line: 257, column: 35, scope: !9676)
!9689 = !DILocation(line: 257, column: 33, scope: !9676)
!9690 = !DILocation(line: 257, column: 10, scope: !9676)
!9691 = !DILocation(line: 257, column: 3, scope: !9676)
!9692 = distinct !DISubprogram(name: "gnu_dev_minor", scope: !384, file: !384, line: 261, type: !9677, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9693 = !DILocalVariable(name: "__dev", arg: 1, scope: !9692, file: !384, line: 261, type: !385)
!9694 = !DILocation(line: 261, column: 41, scope: !9692)
!9695 = !DILocation(line: 262, column: 11, scope: !9692)
!9696 = !DILocation(line: 262, column: 17, scope: !9692)
!9697 = !DILocation(line: 262, column: 44, scope: !9692)
!9698 = !DILocation(line: 262, column: 50, scope: !9692)
!9699 = !DILocation(line: 262, column: 28, scope: !9692)
!9700 = !DILocation(line: 262, column: 57, scope: !9692)
!9701 = !DILocation(line: 262, column: 27, scope: !9692)
!9702 = !DILocation(line: 262, column: 25, scope: !9692)
!9703 = !DILocation(line: 262, column: 10, scope: !9692)
!9704 = !DILocation(line: 262, column: 3, scope: !9692)
!9705 = distinct !DISubprogram(name: "gnu_dev_makedev", scope: !384, file: !384, line: 266, type: !9706, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9706 = !DISubroutineType(types: !9707)
!9707 = !{!145, !32, !32}
!9708 = !DILocalVariable(name: "__major", arg: 1, scope: !9705, file: !384, line: 266, type: !32)
!9709 = !DILocation(line: 266, column: 43, scope: !9705)
!9710 = !DILocalVariable(name: "__minor", arg: 2, scope: !9705, file: !384, line: 266, type: !32)
!9711 = !DILocation(line: 266, column: 65, scope: !9705)
!9712 = !DILocation(line: 267, column: 12, scope: !9705)
!9713 = !DILocation(line: 267, column: 20, scope: !9705)
!9714 = !DILocation(line: 267, column: 32, scope: !9705)
!9715 = !DILocation(line: 267, column: 40, scope: !9705)
!9716 = !DILocation(line: 267, column: 49, scope: !9705)
!9717 = !DILocation(line: 267, column: 28, scope: !9705)
!9718 = !DILocation(line: 267, column: 11, scope: !9705)
!9719 = !DILocation(line: 268, column: 31, scope: !9705)
!9720 = !DILocation(line: 268, column: 39, scope: !9705)
!9721 = !DILocation(line: 268, column: 15, scope: !9705)
!9722 = !DILocation(line: 268, column: 49, scope: !9705)
!9723 = !DILocation(line: 268, column: 11, scope: !9705)
!9724 = !DILocation(line: 269, column: 31, scope: !9705)
!9725 = !DILocation(line: 269, column: 39, scope: !9705)
!9726 = !DILocation(line: 269, column: 15, scope: !9705)
!9727 = !DILocation(line: 269, column: 50, scope: !9705)
!9728 = !DILocation(line: 269, column: 11, scope: !9705)
!9729 = !DILocation(line: 267, column: 3, scope: !9705)
!9730 = distinct !DISubprogram(name: "canonicalize_file_name", scope: !384, file: !384, line: 273, type: !9731, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9731 = !DISubroutineType(types: !9732)
!9732 = !{!19, !273}
!9733 = !DILocalVariable(name: "name", arg: 1, scope: !9730, file: !384, line: 273, type: !273)
!9734 = !DILocation(line: 273, column: 43, scope: !9730)
!9735 = !DILocalVariable(name: "resolved_name", scope: !9730, file: !384, line: 276, type: !19)
!9736 = !DILocation(line: 276, column: 10, scope: !9730)
!9737 = !DILocation(line: 276, column: 26, scope: !9730)
!9738 = !DILocation(line: 277, column: 8, scope: !9739)
!9739 = distinct !DILexicalBlock(scope: !9730, file: !384, line: 277, column: 7)
!9740 = !DILocation(line: 277, column: 7, scope: !9730)
!9741 = !DILocation(line: 277, column: 23, scope: !9739)
!9742 = !DILocation(line: 278, column: 17, scope: !9743)
!9743 = distinct !DILexicalBlock(scope: !9730, file: !384, line: 278, column: 7)
!9744 = !DILocation(line: 278, column: 23, scope: !9743)
!9745 = !DILocation(line: 278, column: 8, scope: !9743)
!9746 = !DILocation(line: 0, scope: !9730)
!9747 = !DILocation(line: 278, column: 7, scope: !9730)
!9748 = !DILocation(line: 279, column: 5, scope: !9749)
!9749 = distinct !DILexicalBlock(scope: !9743, file: !384, line: 278, column: 39)
!9750 = !DILocation(line: 280, column: 5, scope: !9749)
!9751 = !DILocation(line: 282, column: 3, scope: !9730)
!9752 = !DILocation(line: 283, column: 1, scope: !9730)
!9753 = distinct !DISubprogram(name: "getloadavg", scope: !384, file: !384, line: 286, type: !9754, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9754 = !DISubroutineType(types: !9755)
!9755 = !{!77, !9756, !77}
!9756 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !61, size: 64)
!9757 = !DILocalVariable(name: "loadavg", arg: 1, scope: !9753, file: !384, line: 286, type: !9756)
!9758 = !DILocation(line: 286, column: 23, scope: !9753)
!9759 = !DILocalVariable(name: "nelem", arg: 2, scope: !9753, file: !384, line: 286, type: !77)
!9760 = !DILocation(line: 286, column: 38, scope: !9753)
!9761 = !DILocation(line: 287, column: 3, scope: !9753)
!9762 = !DILocation(line: 288, column: 3, scope: !9753)
!9763 = distinct !DISubprogram(name: "wait", scope: !384, file: !384, line: 292, type: !9764, scopeLine: 292, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9764 = !DISubroutineType(types: !9765)
!9765 = !{!9226, !185}
!9766 = !DILocalVariable(name: "status", arg: 1, scope: !9763, file: !384, line: 292, type: !185)
!9767 = !DILocation(line: 292, column: 17, scope: !9763)
!9768 = !DILocation(line: 293, column: 3, scope: !9763)
!9769 = !DILocation(line: 294, column: 3, scope: !9763)
!9770 = !DILocation(line: 294, column: 9, scope: !9763)
!9771 = !DILocation(line: 295, column: 3, scope: !9763)
!9772 = distinct !DISubprogram(name: "wait3", scope: !384, file: !384, line: 299, type: !9773, scopeLine: 299, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9773 = !DISubroutineType(types: !9774)
!9774 = !{!9226, !185, !77, !9775}
!9775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9776, size: 64)
!9776 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rusage", file: !9777, line: 31, size: 1152, elements: !9778)
!9777 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h", directory: "")
!9778 = !{!9779, !9780, !9781, !9786, !9791, !9796, !9801, !9806, !9811, !9816, !9821, !9826, !9831, !9836, !9841, !9846}
!9779 = !DIDerivedType(tag: DW_TAG_member, name: "ru_utime", scope: !9776, file: !9777, line: 34, baseType: !9506, size: 128)
!9780 = !DIDerivedType(tag: DW_TAG_member, name: "ru_stime", scope: !9776, file: !9777, line: 36, baseType: !9506, size: 128, offset: 128)
!9781 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 38, baseType: !9782, size: 64, offset: 256)
!9782 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 38, size: 64, elements: !9783)
!9783 = !{!9784, !9785}
!9784 = !DIDerivedType(tag: DW_TAG_member, name: "ru_maxrss", scope: !9782, file: !9777, line: 40, baseType: !161, size: 64)
!9785 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_maxrss_word", scope: !9782, file: !9777, line: 41, baseType: !173, size: 64)
!9786 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 46, baseType: !9787, size: 64, offset: 320)
!9787 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 46, size: 64, elements: !9788)
!9788 = !{!9789, !9790}
!9789 = !DIDerivedType(tag: DW_TAG_member, name: "ru_ixrss", scope: !9787, file: !9777, line: 48, baseType: !161, size: 64)
!9790 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_ixrss_word", scope: !9787, file: !9777, line: 49, baseType: !173, size: 64)
!9791 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 52, baseType: !9792, size: 64, offset: 384)
!9792 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 52, size: 64, elements: !9793)
!9793 = !{!9794, !9795}
!9794 = !DIDerivedType(tag: DW_TAG_member, name: "ru_idrss", scope: !9792, file: !9777, line: 54, baseType: !161, size: 64)
!9795 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_idrss_word", scope: !9792, file: !9777, line: 55, baseType: !173, size: 64)
!9796 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 58, baseType: !9797, size: 64, offset: 448)
!9797 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 58, size: 64, elements: !9798)
!9798 = !{!9799, !9800}
!9799 = !DIDerivedType(tag: DW_TAG_member, name: "ru_isrss", scope: !9797, file: !9777, line: 60, baseType: !161, size: 64)
!9800 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_isrss_word", scope: !9797, file: !9777, line: 61, baseType: !173, size: 64)
!9801 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 65, baseType: !9802, size: 64, offset: 512)
!9802 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 65, size: 64, elements: !9803)
!9803 = !{!9804, !9805}
!9804 = !DIDerivedType(tag: DW_TAG_member, name: "ru_minflt", scope: !9802, file: !9777, line: 67, baseType: !161, size: 64)
!9805 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_minflt_word", scope: !9802, file: !9777, line: 68, baseType: !173, size: 64)
!9806 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 71, baseType: !9807, size: 64, offset: 576)
!9807 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 71, size: 64, elements: !9808)
!9808 = !{!9809, !9810}
!9809 = !DIDerivedType(tag: DW_TAG_member, name: "ru_majflt", scope: !9807, file: !9777, line: 73, baseType: !161, size: 64)
!9810 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_majflt_word", scope: !9807, file: !9777, line: 74, baseType: !173, size: 64)
!9811 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 77, baseType: !9812, size: 64, offset: 640)
!9812 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 77, size: 64, elements: !9813)
!9813 = !{!9814, !9815}
!9814 = !DIDerivedType(tag: DW_TAG_member, name: "ru_nswap", scope: !9812, file: !9777, line: 79, baseType: !161, size: 64)
!9815 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_nswap_word", scope: !9812, file: !9777, line: 80, baseType: !173, size: 64)
!9816 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 84, baseType: !9817, size: 64, offset: 704)
!9817 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 84, size: 64, elements: !9818)
!9818 = !{!9819, !9820}
!9819 = !DIDerivedType(tag: DW_TAG_member, name: "ru_inblock", scope: !9817, file: !9777, line: 86, baseType: !161, size: 64)
!9820 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_inblock_word", scope: !9817, file: !9777, line: 87, baseType: !173, size: 64)
!9821 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 90, baseType: !9822, size: 64, offset: 768)
!9822 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 90, size: 64, elements: !9823)
!9823 = !{!9824, !9825}
!9824 = !DIDerivedType(tag: DW_TAG_member, name: "ru_oublock", scope: !9822, file: !9777, line: 92, baseType: !161, size: 64)
!9825 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_oublock_word", scope: !9822, file: !9777, line: 93, baseType: !173, size: 64)
!9826 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 96, baseType: !9827, size: 64, offset: 832)
!9827 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 96, size: 64, elements: !9828)
!9828 = !{!9829, !9830}
!9829 = !DIDerivedType(tag: DW_TAG_member, name: "ru_msgsnd", scope: !9827, file: !9777, line: 98, baseType: !161, size: 64)
!9830 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_msgsnd_word", scope: !9827, file: !9777, line: 99, baseType: !173, size: 64)
!9831 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 102, baseType: !9832, size: 64, offset: 896)
!9832 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 102, size: 64, elements: !9833)
!9833 = !{!9834, !9835}
!9834 = !DIDerivedType(tag: DW_TAG_member, name: "ru_msgrcv", scope: !9832, file: !9777, line: 104, baseType: !161, size: 64)
!9835 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_msgrcv_word", scope: !9832, file: !9777, line: 105, baseType: !173, size: 64)
!9836 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 108, baseType: !9837, size: 64, offset: 960)
!9837 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 108, size: 64, elements: !9838)
!9838 = !{!9839, !9840}
!9839 = !DIDerivedType(tag: DW_TAG_member, name: "ru_nsignals", scope: !9837, file: !9777, line: 110, baseType: !161, size: 64)
!9840 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_nsignals_word", scope: !9837, file: !9777, line: 111, baseType: !173, size: 64)
!9841 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 116, baseType: !9842, size: 64, offset: 1024)
!9842 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 116, size: 64, elements: !9843)
!9843 = !{!9844, !9845}
!9844 = !DIDerivedType(tag: DW_TAG_member, name: "ru_nvcsw", scope: !9842, file: !9777, line: 118, baseType: !161, size: 64)
!9845 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_nvcsw_word", scope: !9842, file: !9777, line: 119, baseType: !173, size: 64)
!9846 = !DIDerivedType(tag: DW_TAG_member, scope: !9776, file: !9777, line: 123, baseType: !9847, size: 64, offset: 1088)
!9847 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !9776, file: !9777, line: 123, size: 64, elements: !9848)
!9848 = !{!9849, !9850}
!9849 = !DIDerivedType(tag: DW_TAG_member, name: "ru_nivcsw", scope: !9847, file: !9777, line: 125, baseType: !161, size: 64)
!9850 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_nivcsw_word", scope: !9847, file: !9777, line: 126, baseType: !173, size: 64)
!9851 = !DILocalVariable(name: "status", arg: 1, scope: !9772, file: !384, line: 299, type: !185)
!9852 = !DILocation(line: 299, column: 18, scope: !9772)
!9853 = !DILocalVariable(name: "options", arg: 2, scope: !9772, file: !384, line: 299, type: !77)
!9854 = !DILocation(line: 299, column: 30, scope: !9772)
!9855 = !DILocalVariable(name: "rusage", arg: 3, scope: !9772, file: !384, line: 299, type: !9775)
!9856 = !DILocation(line: 299, column: 54, scope: !9772)
!9857 = !DILocation(line: 300, column: 3, scope: !9772)
!9858 = !DILocation(line: 301, column: 3, scope: !9772)
!9859 = !DILocation(line: 301, column: 9, scope: !9772)
!9860 = !DILocation(line: 302, column: 3, scope: !9772)
!9861 = distinct !DISubprogram(name: "wait4", scope: !384, file: !384, line: 306, type: !9862, scopeLine: 306, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9862 = !DISubroutineType(types: !9863)
!9863 = !{!9226, !9864, !185, !77, !9775}
!9864 = !DIDerivedType(tag: DW_TAG_typedef, name: "pid_t", file: !9198, line: 40, baseType: !9226)
!9865 = !DILocalVariable(name: "pid", arg: 1, scope: !9861, file: !384, line: 306, type: !9864)
!9866 = !DILocation(line: 306, column: 19, scope: !9861)
!9867 = !DILocalVariable(name: "status", arg: 2, scope: !9861, file: !384, line: 306, type: !185)
!9868 = !DILocation(line: 306, column: 29, scope: !9861)
!9869 = !DILocalVariable(name: "options", arg: 3, scope: !9861, file: !384, line: 306, type: !77)
!9870 = !DILocation(line: 306, column: 41, scope: !9861)
!9871 = !DILocalVariable(name: "rusage", arg: 4, scope: !9861, file: !384, line: 306, type: !9775)
!9872 = !DILocation(line: 306, column: 65, scope: !9861)
!9873 = !DILocation(line: 307, column: 3, scope: !9861)
!9874 = !DILocation(line: 308, column: 3, scope: !9861)
!9875 = !DILocation(line: 308, column: 9, scope: !9861)
!9876 = !DILocation(line: 309, column: 3, scope: !9861)
!9877 = distinct !DISubprogram(name: "waitpid", scope: !384, file: !384, line: 313, type: !9878, scopeLine: 313, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9878 = !DISubroutineType(types: !9879)
!9879 = !{!9226, !9864, !185, !77}
!9880 = !DILocalVariable(name: "pid", arg: 1, scope: !9877, file: !384, line: 313, type: !9864)
!9881 = !DILocation(line: 313, column: 21, scope: !9877)
!9882 = !DILocalVariable(name: "status", arg: 2, scope: !9877, file: !384, line: 313, type: !185)
!9883 = !DILocation(line: 313, column: 31, scope: !9877)
!9884 = !DILocalVariable(name: "options", arg: 3, scope: !9877, file: !384, line: 313, type: !77)
!9885 = !DILocation(line: 313, column: 43, scope: !9877)
!9886 = !DILocation(line: 314, column: 3, scope: !9877)
!9887 = !DILocation(line: 315, column: 3, scope: !9877)
!9888 = !DILocation(line: 315, column: 9, scope: !9877)
!9889 = !DILocation(line: 316, column: 3, scope: !9877)
!9890 = distinct !DISubprogram(name: "waitid", scope: !384, file: !384, line: 320, type: !9891, scopeLine: 320, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9891 = !DISubroutineType(types: !9892)
!9892 = !{!77, !9893, !9894, !9206, !77}
!9893 = !DIDerivedType(tag: DW_TAG_typedef, name: "idtype_t", file: !349, line: 57, baseType: !348)
!9894 = !DIDerivedType(tag: DW_TAG_typedef, name: "id_t", file: !204, line: 104, baseType: !9895)
!9895 = !DIDerivedType(tag: DW_TAG_typedef, name: "__id_t", file: !146, line: 147, baseType: !32)
!9896 = !DILocalVariable(name: "idtype", arg: 1, scope: !9890, file: !384, line: 320, type: !9893)
!9897 = !DILocation(line: 320, column: 23, scope: !9890)
!9898 = !DILocalVariable(name: "id", arg: 2, scope: !9890, file: !384, line: 320, type: !9894)
!9899 = !DILocation(line: 320, column: 36, scope: !9890)
!9900 = !DILocalVariable(name: "infop", arg: 3, scope: !9890, file: !384, line: 320, type: !9206)
!9901 = !DILocation(line: 320, column: 51, scope: !9890)
!9902 = !DILocalVariable(name: "options", arg: 4, scope: !9890, file: !384, line: 320, type: !77)
!9903 = !DILocation(line: 320, column: 62, scope: !9890)
!9904 = !DILocation(line: 321, column: 3, scope: !9890)
!9905 = !DILocation(line: 322, column: 3, scope: !9890)
!9906 = !DILocation(line: 322, column: 9, scope: !9890)
!9907 = !DILocation(line: 323, column: 3, scope: !9890)
!9908 = distinct !DISubprogram(name: "mount", scope: !384, file: !384, line: 400, type: !9909, scopeLine: 400, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9909 = !DISubroutineType(types: !9910)
!9910 = !{!77, !273, !273, !273, !16, !45}
!9911 = !DILocalVariable(name: "source", arg: 1, scope: !9908, file: !384, line: 400, type: !273)
!9912 = !DILocation(line: 400, column: 23, scope: !9908)
!9913 = !DILocalVariable(name: "target", arg: 2, scope: !9908, file: !384, line: 400, type: !273)
!9914 = !DILocation(line: 400, column: 43, scope: !9908)
!9915 = !DILocalVariable(name: "filesystemtype", arg: 3, scope: !9908, file: !384, line: 400, type: !273)
!9916 = !DILocation(line: 400, column: 63, scope: !9908)
!9917 = !DILocalVariable(name: "mountflags", arg: 4, scope: !9908, file: !384, line: 400, type: !16)
!9918 = !DILocation(line: 400, column: 93, scope: !9908)
!9919 = !DILocalVariable(name: "data", arg: 5, scope: !9908, file: !384, line: 400, type: !45)
!9920 = !DILocation(line: 400, column: 117, scope: !9908)
!9921 = !DILocation(line: 401, column: 3, scope: !9908)
!9922 = !DILocation(line: 402, column: 3, scope: !9908)
!9923 = !DILocation(line: 402, column: 9, scope: !9908)
!9924 = !DILocation(line: 403, column: 3, scope: !9908)
!9925 = distinct !DISubprogram(name: "umount", scope: !384, file: !384, line: 407, type: !1790, scopeLine: 407, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9926 = !DILocalVariable(name: "target", arg: 1, scope: !9925, file: !384, line: 407, type: !273)
!9927 = !DILocation(line: 407, column: 24, scope: !9925)
!9928 = !DILocation(line: 408, column: 3, scope: !9925)
!9929 = !DILocation(line: 409, column: 3, scope: !9925)
!9930 = !DILocation(line: 409, column: 9, scope: !9925)
!9931 = !DILocation(line: 410, column: 3, scope: !9925)
!9932 = distinct !DISubprogram(name: "umount2", scope: !384, file: !384, line: 414, type: !6296, scopeLine: 414, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9933 = !DILocalVariable(name: "target", arg: 1, scope: !9932, file: !384, line: 414, type: !273)
!9934 = !DILocation(line: 414, column: 25, scope: !9932)
!9935 = !DILocalVariable(name: "flags", arg: 2, scope: !9932, file: !384, line: 414, type: !77)
!9936 = !DILocation(line: 414, column: 37, scope: !9932)
!9937 = !DILocation(line: 415, column: 3, scope: !9932)
!9938 = !DILocation(line: 416, column: 3, scope: !9932)
!9939 = !DILocation(line: 416, column: 9, scope: !9932)
!9940 = !DILocation(line: 417, column: 3, scope: !9932)
!9941 = distinct !DISubprogram(name: "swapon", scope: !384, file: !384, line: 422, type: !6296, scopeLine: 422, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9942 = !DILocalVariable(name: "path", arg: 1, scope: !9941, file: !384, line: 422, type: !273)
!9943 = !DILocation(line: 422, column: 24, scope: !9941)
!9944 = !DILocalVariable(name: "swapflags", arg: 2, scope: !9941, file: !384, line: 422, type: !77)
!9945 = !DILocation(line: 422, column: 34, scope: !9941)
!9946 = !DILocation(line: 428, column: 3, scope: !9941)
!9947 = !DILocation(line: 429, column: 3, scope: !9941)
!9948 = !DILocation(line: 429, column: 9, scope: !9941)
!9949 = !DILocation(line: 430, column: 3, scope: !9941)
!9950 = distinct !DISubprogram(name: "swapoff", scope: !384, file: !384, line: 434, type: !1790, scopeLine: 434, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9951 = !DILocalVariable(name: "path", arg: 1, scope: !9950, file: !384, line: 434, type: !273)
!9952 = !DILocation(line: 434, column: 25, scope: !9950)
!9953 = !DILocation(line: 435, column: 3, scope: !9950)
!9954 = !DILocation(line: 436, column: 3, scope: !9950)
!9955 = !DILocation(line: 436, column: 9, scope: !9950)
!9956 = !DILocation(line: 437, column: 3, scope: !9950)
!9957 = distinct !DISubprogram(name: "setgid", scope: !384, file: !384, line: 441, type: !9624, scopeLine: 441, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9958 = !DILocalVariable(name: "gid", arg: 1, scope: !9957, file: !384, line: 441, type: !7768)
!9959 = !DILocation(line: 441, column: 18, scope: !9957)
!9960 = !DILocation(line: 442, column: 3, scope: !9957)
!9961 = !DILocation(line: 443, column: 3, scope: !9957)
!9962 = distinct !DISubprogram(name: "setgroups", scope: !384, file: !384, line: 448, type: !9963, scopeLine: 448, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9963 = !DISubroutineType(types: !9964)
!9964 = !{!77, !261, !9965}
!9965 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9966, size: 64)
!9966 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7768)
!9967 = !DILocalVariable(name: "size", arg: 1, scope: !9962, file: !384, line: 448, type: !261)
!9968 = !DILocation(line: 448, column: 22, scope: !9962)
!9969 = !DILocalVariable(name: "list", arg: 2, scope: !9962, file: !384, line: 448, type: !9965)
!9970 = !DILocation(line: 448, column: 41, scope: !9962)
!9971 = !DILocation(line: 453, column: 3, scope: !9962)
!9972 = !DILocation(line: 454, column: 3, scope: !9962)
!9973 = !DILocation(line: 454, column: 9, scope: !9962)
!9974 = !DILocation(line: 455, column: 3, scope: !9962)
!9975 = distinct !DISubprogram(name: "sethostname", scope: !384, file: !384, line: 460, type: !9976, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9976 = !DISubroutineType(types: !9977)
!9977 = !{!77, !273, !261}
!9978 = !DILocalVariable(name: "name", arg: 1, scope: !9975, file: !384, line: 460, type: !273)
!9979 = !DILocation(line: 460, column: 29, scope: !9975)
!9980 = !DILocalVariable(name: "len", arg: 2, scope: !9975, file: !384, line: 460, type: !261)
!9981 = !DILocation(line: 460, column: 42, scope: !9975)
!9982 = !DILocation(line: 465, column: 3, scope: !9975)
!9983 = !DILocation(line: 466, column: 3, scope: !9975)
!9984 = !DILocation(line: 466, column: 9, scope: !9975)
!9985 = !DILocation(line: 467, column: 3, scope: !9975)
!9986 = distinct !DISubprogram(name: "setpgid", scope: !384, file: !384, line: 471, type: !9987, scopeLine: 471, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9987 = !DISubroutineType(types: !9988)
!9988 = !{!77, !9864, !9864}
!9989 = !DILocalVariable(name: "pid", arg: 1, scope: !9986, file: !384, line: 471, type: !9864)
!9990 = !DILocation(line: 471, column: 19, scope: !9986)
!9991 = !DILocalVariable(name: "pgid", arg: 2, scope: !9986, file: !384, line: 471, type: !9864)
!9992 = !DILocation(line: 471, column: 30, scope: !9986)
!9993 = !DILocation(line: 472, column: 3, scope: !9986)
!9994 = !DILocation(line: 473, column: 3, scope: !9986)
!9995 = !DILocation(line: 473, column: 9, scope: !9986)
!9996 = !DILocation(line: 474, column: 3, scope: !9986)
!9997 = distinct !DISubprogram(name: "setpgrp", scope: !384, file: !384, line: 479, type: !3551, scopeLine: 479, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!9998 = !DILocation(line: 484, column: 3, scope: !9997)
!9999 = !DILocation(line: 485, column: 3, scope: !9997)
!10000 = !DILocation(line: 485, column: 9, scope: !9997)
!10001 = !DILocation(line: 486, column: 3, scope: !9997)
!10002 = distinct !DISubprogram(name: "setpriority", scope: !384, file: !384, line: 491, type: !10003, scopeLine: 491, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10003 = !DISubroutineType(types: !10004)
!10004 = !{!77, !10005, !9894, !77}
!10005 = !DIDerivedType(tag: DW_TAG_typedef, name: "__priority_which_t", file: !10006, line: 40, baseType: !354)
!10006 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/resource.h", directory: "")
!10007 = !DILocalVariable(name: "which", arg: 1, scope: !10002, file: !384, line: 491, type: !10005)
!10008 = !DILocation(line: 491, column: 36, scope: !10002)
!10009 = !DILocalVariable(name: "who", arg: 2, scope: !10002, file: !384, line: 491, type: !9894)
!10010 = !DILocation(line: 491, column: 48, scope: !10002)
!10011 = !DILocalVariable(name: "prio", arg: 3, scope: !10002, file: !384, line: 491, type: !77)
!10012 = !DILocation(line: 491, column: 57, scope: !10002)
!10013 = !DILocation(line: 496, column: 3, scope: !10002)
!10014 = !DILocation(line: 497, column: 3, scope: !10002)
!10015 = !DILocation(line: 497, column: 9, scope: !10002)
!10016 = !DILocation(line: 498, column: 3, scope: !10002)
!10017 = distinct !DISubprogram(name: "setresgid", scope: !384, file: !384, line: 502, type: !10018, scopeLine: 502, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10018 = !DISubroutineType(types: !10019)
!10019 = !{!77, !7768, !7768, !7768}
!10020 = !DILocalVariable(name: "rgid", arg: 1, scope: !10017, file: !384, line: 502, type: !7768)
!10021 = !DILocation(line: 502, column: 21, scope: !10017)
!10022 = !DILocalVariable(name: "egid", arg: 2, scope: !10017, file: !384, line: 502, type: !7768)
!10023 = !DILocation(line: 502, column: 33, scope: !10017)
!10024 = !DILocalVariable(name: "sgid", arg: 3, scope: !10017, file: !384, line: 502, type: !7768)
!10025 = !DILocation(line: 502, column: 45, scope: !10017)
!10026 = !DILocation(line: 503, column: 3, scope: !10017)
!10027 = !DILocation(line: 504, column: 3, scope: !10017)
!10028 = !DILocation(line: 504, column: 9, scope: !10017)
!10029 = !DILocation(line: 505, column: 3, scope: !10017)
!10030 = distinct !DISubprogram(name: "setresuid", scope: !384, file: !384, line: 509, type: !10031, scopeLine: 509, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10031 = !DISubroutineType(types: !10032)
!10032 = !{!77, !10033, !10033, !10033}
!10033 = !DIDerivedType(tag: DW_TAG_typedef, name: "uid_t", file: !9198, line: 46, baseType: !154)
!10034 = !DILocalVariable(name: "ruid", arg: 1, scope: !10030, file: !384, line: 509, type: !10033)
!10035 = !DILocation(line: 509, column: 21, scope: !10030)
!10036 = !DILocalVariable(name: "euid", arg: 2, scope: !10030, file: !384, line: 509, type: !10033)
!10037 = !DILocation(line: 509, column: 33, scope: !10030)
!10038 = !DILocalVariable(name: "suid", arg: 3, scope: !10030, file: !384, line: 509, type: !10033)
!10039 = !DILocation(line: 509, column: 45, scope: !10030)
!10040 = !DILocation(line: 510, column: 3, scope: !10030)
!10041 = !DILocation(line: 511, column: 3, scope: !10030)
!10042 = !DILocation(line: 511, column: 9, scope: !10030)
!10043 = !DILocation(line: 512, column: 3, scope: !10030)
!10044 = distinct !DISubprogram(name: "setrlimit", scope: !384, file: !384, line: 517, type: !10045, scopeLine: 517, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10045 = !DISubroutineType(types: !10046)
!10046 = !{!77, !10047, !10048}
!10047 = !DIDerivedType(tag: DW_TAG_typedef, name: "__rlimit_resource_t", file: !10006, line: 38, baseType: !360)
!10048 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10049, size: 64)
!10049 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10050)
!10050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rlimit", file: !355, line: 139, size: 128, elements: !10051)
!10051 = !{!10052, !10055}
!10052 = !DIDerivedType(tag: DW_TAG_member, name: "rlim_cur", scope: !10050, file: !355, line: 142, baseType: !10053, size: 64)
!10053 = !DIDerivedType(tag: DW_TAG_typedef, name: "rlim_t", file: !355, line: 131, baseType: !10054)
!10054 = !DIDerivedType(tag: DW_TAG_typedef, name: "__rlim_t", file: !146, line: 145, baseType: !16)
!10055 = !DIDerivedType(tag: DW_TAG_member, name: "rlim_max", scope: !10050, file: !355, line: 144, baseType: !10053, size: 64, offset: 64)
!10056 = !DILocalVariable(name: "resource", arg: 1, scope: !10044, file: !384, line: 517, type: !10047)
!10057 = !DILocation(line: 517, column: 35, scope: !10044)
!10058 = !DILocalVariable(name: "rlim", arg: 2, scope: !10044, file: !384, line: 517, type: !10048)
!10059 = !DILocation(line: 517, column: 66, scope: !10044)
!10060 = !DILocation(line: 522, column: 3, scope: !10044)
!10061 = !DILocation(line: 523, column: 3, scope: !10044)
!10062 = !DILocation(line: 523, column: 9, scope: !10044)
!10063 = !DILocation(line: 524, column: 3, scope: !10044)
!10064 = distinct !DISubprogram(name: "setrlimit64", scope: !384, file: !384, line: 529, type: !10065, scopeLine: 529, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10065 = !DISubroutineType(types: !10066)
!10066 = !{!77, !10047, !10067}
!10067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10068, size: 64)
!10068 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10069)
!10069 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rlimit64", file: !355, line: 148, size: 128, elements: !10070)
!10070 = !{!10071, !10074}
!10071 = !DIDerivedType(tag: DW_TAG_member, name: "rlim_cur", scope: !10069, file: !355, line: 151, baseType: !10072, size: 64)
!10072 = !DIDerivedType(tag: DW_TAG_typedef, name: "rlim64_t", file: !355, line: 136, baseType: !10073)
!10073 = !DIDerivedType(tag: DW_TAG_typedef, name: "__rlim64_t", file: !146, line: 146, baseType: !16)
!10074 = !DIDerivedType(tag: DW_TAG_member, name: "rlim_max", scope: !10069, file: !355, line: 153, baseType: !10072, size: 64, offset: 64)
!10075 = !DILocalVariable(name: "resource", arg: 1, scope: !10064, file: !384, line: 529, type: !10047)
!10076 = !DILocation(line: 529, column: 37, scope: !10064)
!10077 = !DILocalVariable(name: "rlim", arg: 2, scope: !10064, file: !384, line: 529, type: !10067)
!10078 = !DILocation(line: 529, column: 70, scope: !10064)
!10079 = !DILocation(line: 530, column: 3, scope: !10064)
!10080 = !DILocation(line: 531, column: 3, scope: !10064)
!10081 = !DILocation(line: 531, column: 9, scope: !10064)
!10082 = !DILocation(line: 532, column: 3, scope: !10064)
!10083 = distinct !DISubprogram(name: "setsid", scope: !384, file: !384, line: 537, type: !10084, scopeLine: 537, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10084 = !DISubroutineType(types: !10085)
!10085 = !{!9226}
!10086 = !DILocation(line: 538, column: 3, scope: !10083)
!10087 = !DILocation(line: 539, column: 3, scope: !10083)
!10088 = !DILocation(line: 539, column: 9, scope: !10083)
!10089 = !DILocation(line: 540, column: 3, scope: !10083)
!10090 = distinct !DISubprogram(name: "settimeofday", scope: !384, file: !384, line: 544, type: !10091, scopeLine: 544, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10091 = !DISubroutineType(types: !10092)
!10092 = !{!77, !9657, !10093}
!10093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10094, size: 64)
!10094 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10095)
!10095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timezone", file: !10096, line: 52, size: 64, elements: !10097)
!10096 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/time.h", directory: "")
!10097 = !{!10098, !10099}
!10098 = !DIDerivedType(tag: DW_TAG_member, name: "tz_minuteswest", scope: !10095, file: !10096, line: 54, baseType: !77, size: 32)
!10099 = !DIDerivedType(tag: DW_TAG_member, name: "tz_dsttime", scope: !10095, file: !10096, line: 55, baseType: !77, size: 32, offset: 32)
!10100 = !DILocalVariable(name: "tv", arg: 1, scope: !10090, file: !384, line: 544, type: !9657)
!10101 = !DILocation(line: 544, column: 40, scope: !10090)
!10102 = !DILocalVariable(name: "tz", arg: 2, scope: !10090, file: !384, line: 544, type: !10093)
!10103 = !DILocation(line: 544, column: 67, scope: !10090)
!10104 = !DILocation(line: 545, column: 3, scope: !10090)
!10105 = !DILocation(line: 546, column: 3, scope: !10090)
!10106 = !DILocation(line: 546, column: 9, scope: !10090)
!10107 = !DILocation(line: 547, column: 3, scope: !10090)
!10108 = distinct !DISubprogram(name: "setuid", scope: !384, file: !384, line: 551, type: !10109, scopeLine: 551, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10109 = !DISubroutineType(types: !10110)
!10110 = !{!77, !10033}
!10111 = !DILocalVariable(name: "uid", arg: 1, scope: !10108, file: !384, line: 551, type: !10033)
!10112 = !DILocation(line: 551, column: 18, scope: !10108)
!10113 = !DILocation(line: 552, column: 3, scope: !10108)
!10114 = !DILocation(line: 553, column: 3, scope: !10108)
!10115 = distinct !DISubprogram(name: "reboot", scope: !384, file: !384, line: 557, type: !215, scopeLine: 557, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10116 = !DILocalVariable(name: "flag", arg: 1, scope: !10115, file: !384, line: 557, type: !77)
!10117 = !DILocation(line: 557, column: 16, scope: !10115)
!10118 = !DILocation(line: 558, column: 3, scope: !10115)
!10119 = !DILocation(line: 559, column: 3, scope: !10115)
!10120 = !DILocation(line: 559, column: 9, scope: !10115)
!10121 = !DILocation(line: 560, column: 3, scope: !10115)
!10122 = distinct !DISubprogram(name: "mlock", scope: !384, file: !384, line: 564, type: !10123, scopeLine: 564, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10123 = !DISubroutineType(types: !10124)
!10124 = !{!77, !45, !261}
!10125 = !DILocalVariable(name: "addr", arg: 1, scope: !10122, file: !384, line: 564, type: !45)
!10126 = !DILocation(line: 564, column: 23, scope: !10122)
!10127 = !DILocalVariable(name: "len", arg: 2, scope: !10122, file: !384, line: 564, type: !261)
!10128 = !DILocation(line: 564, column: 36, scope: !10122)
!10129 = !DILocation(line: 565, column: 3, scope: !10122)
!10130 = !DILocation(line: 566, column: 3, scope: !10122)
!10131 = !DILocation(line: 566, column: 9, scope: !10122)
!10132 = !DILocation(line: 567, column: 3, scope: !10122)
!10133 = distinct !DISubprogram(name: "munlock", scope: !384, file: !384, line: 571, type: !10123, scopeLine: 571, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10134 = !DILocalVariable(name: "addr", arg: 1, scope: !10133, file: !384, line: 571, type: !45)
!10135 = !DILocation(line: 571, column: 25, scope: !10133)
!10136 = !DILocalVariable(name: "len", arg: 2, scope: !10133, file: !384, line: 571, type: !261)
!10137 = !DILocation(line: 571, column: 38, scope: !10133)
!10138 = !DILocation(line: 572, column: 3, scope: !10133)
!10139 = !DILocation(line: 573, column: 3, scope: !10133)
!10140 = !DILocation(line: 573, column: 9, scope: !10133)
!10141 = !DILocation(line: 574, column: 3, scope: !10133)
!10142 = distinct !DISubprogram(name: "pause", scope: !384, file: !384, line: 578, type: !3551, scopeLine: 578, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10143 = !DILocation(line: 579, column: 3, scope: !10142)
!10144 = !DILocation(line: 580, column: 3, scope: !10142)
!10145 = !DILocation(line: 580, column: 9, scope: !10142)
!10146 = !DILocation(line: 581, column: 3, scope: !10142)
!10147 = distinct !DISubprogram(name: "readahead", scope: !384, file: !384, line: 585, type: !10148, scopeLine: 585, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10148 = !DISubroutineType(types: !10149)
!10149 = !{!10150, !77, !10151, !261}
!10150 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !6078, line: 71, baseType: !260)
!10151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10152, size: 64)
!10152 = !DIDerivedType(tag: DW_TAG_typedef, name: "off64_t", file: !6078, line: 64, baseType: !205)
!10153 = !DILocalVariable(name: "fd", arg: 1, scope: !10147, file: !384, line: 585, type: !77)
!10154 = !DILocation(line: 585, column: 23, scope: !10147)
!10155 = !DILocalVariable(name: "offset", arg: 2, scope: !10147, file: !384, line: 585, type: !10151)
!10156 = !DILocation(line: 585, column: 36, scope: !10147)
!10157 = !DILocalVariable(name: "count", arg: 3, scope: !10147, file: !384, line: 585, type: !261)
!10158 = !DILocation(line: 585, column: 51, scope: !10147)
!10159 = !DILocation(line: 586, column: 3, scope: !10147)
!10160 = !DILocation(line: 587, column: 3, scope: !10147)
!10161 = !DILocation(line: 587, column: 9, scope: !10147)
!10162 = !DILocation(line: 588, column: 3, scope: !10147)
!10163 = distinct !DISubprogram(name: "mmap", scope: !384, file: !384, line: 592, type: !10164, scopeLine: 592, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10164 = !DISubroutineType(types: !10165)
!10165 = !{!7, !7, !261, !77, !77, !77, !10166}
!10166 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !6078, line: 57, baseType: !160)
!10167 = !DILocalVariable(name: "start", arg: 1, scope: !10163, file: !384, line: 592, type: !7)
!10168 = !DILocation(line: 592, column: 18, scope: !10163)
!10169 = !DILocalVariable(name: "length", arg: 2, scope: !10163, file: !384, line: 592, type: !261)
!10170 = !DILocation(line: 592, column: 32, scope: !10163)
!10171 = !DILocalVariable(name: "prot", arg: 3, scope: !10163, file: !384, line: 592, type: !77)
!10172 = !DILocation(line: 592, column: 44, scope: !10163)
!10173 = !DILocalVariable(name: "flags", arg: 4, scope: !10163, file: !384, line: 592, type: !77)
!10174 = !DILocation(line: 592, column: 54, scope: !10163)
!10175 = !DILocalVariable(name: "fd", arg: 5, scope: !10163, file: !384, line: 592, type: !77)
!10176 = !DILocation(line: 592, column: 65, scope: !10163)
!10177 = !DILocalVariable(name: "offset", arg: 6, scope: !10163, file: !384, line: 592, type: !10166)
!10178 = !DILocation(line: 592, column: 75, scope: !10163)
!10179 = !DILocation(line: 593, column: 3, scope: !10163)
!10180 = !DILocation(line: 594, column: 3, scope: !10163)
!10181 = !DILocation(line: 594, column: 9, scope: !10163)
!10182 = !DILocation(line: 595, column: 3, scope: !10163)
!10183 = distinct !DISubprogram(name: "mmap64", scope: !384, file: !384, line: 599, type: !10184, scopeLine: 599, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10184 = !DISubroutineType(types: !10185)
!10185 = !{!7, !7, !261, !77, !77, !77, !10152}
!10186 = !DILocalVariable(name: "start", arg: 1, scope: !10183, file: !384, line: 599, type: !7)
!10187 = !DILocation(line: 599, column: 20, scope: !10183)
!10188 = !DILocalVariable(name: "length", arg: 2, scope: !10183, file: !384, line: 599, type: !261)
!10189 = !DILocation(line: 599, column: 34, scope: !10183)
!10190 = !DILocalVariable(name: "prot", arg: 3, scope: !10183, file: !384, line: 599, type: !77)
!10191 = !DILocation(line: 599, column: 46, scope: !10183)
!10192 = !DILocalVariable(name: "flags", arg: 4, scope: !10183, file: !384, line: 599, type: !77)
!10193 = !DILocation(line: 599, column: 56, scope: !10183)
!10194 = !DILocalVariable(name: "fd", arg: 5, scope: !10183, file: !384, line: 599, type: !77)
!10195 = !DILocation(line: 599, column: 67, scope: !10183)
!10196 = !DILocalVariable(name: "offset", arg: 6, scope: !10183, file: !384, line: 599, type: !10152)
!10197 = !DILocation(line: 599, column: 79, scope: !10183)
!10198 = !DILocation(line: 600, column: 3, scope: !10183)
!10199 = !DILocation(line: 601, column: 3, scope: !10183)
!10200 = !DILocation(line: 601, column: 9, scope: !10183)
!10201 = !DILocation(line: 602, column: 3, scope: !10183)
!10202 = distinct !DISubprogram(name: "munmap", scope: !384, file: !384, line: 606, type: !10203, scopeLine: 606, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !345, retainedNodes: !4)
!10203 = !DISubroutineType(types: !10204)
!10204 = !{!77, !7, !261}
!10205 = !DILocalVariable(name: "start", arg: 1, scope: !10202, file: !384, line: 606, type: !7)
!10206 = !DILocation(line: 606, column: 17, scope: !10202)
!10207 = !DILocalVariable(name: "length", arg: 2, scope: !10202, file: !384, line: 606, type: !261)
!10208 = !DILocation(line: 606, column: 31, scope: !10202)
!10209 = !DILocation(line: 607, column: 3, scope: !10202)
!10210 = !DILocation(line: 608, column: 3, scope: !10202)
!10211 = !DILocation(line: 608, column: 9, scope: !10202)
!10212 = !DILocation(line: 609, column: 3, scope: !10202)
!10213 = distinct !DISubprogram(name: "memcpy", scope: !10214, file: !10214, line: 12, type: !10215, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !386, retainedNodes: !4)
!10214 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/FreeStanding/memcpy.c", directory: "")
!10215 = !DISubroutineType(types: !10216)
!10216 = !{!7, !7, !45, !261}
!10217 = !DILocalVariable(name: "destaddr", arg: 1, scope: !10213, file: !10214, line: 12, type: !7)
!10218 = !DILocation(line: 12, column: 20, scope: !10213)
!10219 = !DILocalVariable(name: "srcaddr", arg: 2, scope: !10213, file: !10214, line: 12, type: !45)
!10220 = !DILocation(line: 12, column: 42, scope: !10213)
!10221 = !DILocalVariable(name: "len", arg: 3, scope: !10213, file: !10214, line: 12, type: !261)
!10222 = !DILocation(line: 12, column: 58, scope: !10213)
!10223 = !DILocalVariable(name: "dest", scope: !10213, file: !10214, line: 13, type: !19)
!10224 = !DILocation(line: 13, column: 9, scope: !10213)
!10225 = !DILocation(line: 13, column: 16, scope: !10213)
!10226 = !DILocalVariable(name: "src", scope: !10213, file: !10214, line: 14, type: !273)
!10227 = !DILocation(line: 14, column: 15, scope: !10213)
!10228 = !DILocation(line: 14, column: 21, scope: !10213)
!10229 = !DILocation(line: 16, column: 3, scope: !10213)
!10230 = !DILocation(line: 16, column: 13, scope: !10213)
!10231 = !DILocation(line: 16, column: 16, scope: !10213)
!10232 = !DILocation(line: 17, column: 19, scope: !10213)
!10233 = !DILocation(line: 17, column: 15, scope: !10213)
!10234 = !DILocation(line: 17, column: 10, scope: !10213)
!10235 = !DILocation(line: 17, column: 13, scope: !10213)
!10236 = distinct !{!10236, !10229, !10232}
!10237 = !DILocation(line: 18, column: 10, scope: !10213)
!10238 = !DILocation(line: 18, column: 3, scope: !10213)
!10239 = distinct !DISubprogram(name: "memset", scope: !10240, file: !10240, line: 12, type: !10241, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !388, retainedNodes: !4)
!10240 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/FreeStanding/memset.c", directory: "")
!10241 = !DISubroutineType(types: !10242)
!10242 = !{!7, !7, !77, !261}
!10243 = !DILocalVariable(name: "dst", arg: 1, scope: !10239, file: !10240, line: 12, type: !7)
!10244 = !DILocation(line: 12, column: 20, scope: !10239)
!10245 = !DILocalVariable(name: "s", arg: 2, scope: !10239, file: !10240, line: 12, type: !77)
!10246 = !DILocation(line: 12, column: 29, scope: !10239)
!10247 = !DILocalVariable(name: "count", arg: 3, scope: !10239, file: !10240, line: 12, type: !261)
!10248 = !DILocation(line: 12, column: 39, scope: !10239)
!10249 = !DILocalVariable(name: "a", scope: !10239, file: !10240, line: 13, type: !19)
!10250 = !DILocation(line: 13, column: 9, scope: !10239)
!10251 = !DILocation(line: 13, column: 13, scope: !10239)
!10252 = !DILocation(line: 14, column: 3, scope: !10239)
!10253 = !DILocation(line: 14, column: 15, scope: !10239)
!10254 = !DILocation(line: 14, column: 18, scope: !10239)
!10255 = !DILocation(line: 15, column: 12, scope: !10239)
!10256 = !DILocation(line: 15, column: 7, scope: !10239)
!10257 = !DILocation(line: 15, column: 10, scope: !10239)
!10258 = distinct !{!10258, !10252, !10255}
!10259 = !DILocation(line: 16, column: 10, scope: !10239)
!10260 = !DILocation(line: 16, column: 3, scope: !10239)
!10261 = distinct !DISubprogram(name: "klee_div_zero_check", scope: !10262, file: !10262, line: 12, type: !10263, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !390, retainedNodes: !4)
!10262 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/Intrinsic/klee_div_zero_check.c", directory: "")
!10263 = !DISubroutineType(types: !10264)
!10264 = !{null, !10265}
!10265 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!10266 = !DILocalVariable(name: "z", arg: 1, scope: !10261, file: !10262, line: 12, type: !10265)
!10267 = !DILocation(line: 12, column: 36, scope: !10261)
!10268 = !DILocation(line: 13, column: 7, scope: !10269)
!10269 = distinct !DILexicalBlock(scope: !10261, file: !10262, line: 13, column: 7)
!10270 = !DILocation(line: 13, column: 9, scope: !10269)
!10271 = !DILocation(line: 13, column: 7, scope: !10261)
!10272 = !DILocation(line: 14, column: 5, scope: !10269)
!10273 = !DILocation(line: 15, column: 1, scope: !10261)
!10274 = distinct !DISubprogram(name: "klee_overshift_check", scope: !10275, file: !10275, line: 20, type: !10276, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !392, retainedNodes: !4)
!10275 = !DIFile(filename: "/home/haoxin/haoxin-data/smu-research/klee/runtime/Intrinsic/klee_overshift_check.c", directory: "")
!10276 = !DISubroutineType(types: !10277)
!10277 = !{null, !10278, !10278}
!10278 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!10279 = !DILocalVariable(name: "bitWidth", arg: 1, scope: !10274, file: !10275, line: 20, type: !10278)
!10280 = !DILocation(line: 20, column: 46, scope: !10274)
!10281 = !DILocalVariable(name: "shift", arg: 2, scope: !10274, file: !10275, line: 20, type: !10278)
!10282 = !DILocation(line: 20, column: 75, scope: !10274)
!10283 = !DILocation(line: 21, column: 7, scope: !10284)
!10284 = distinct !DILexicalBlock(scope: !10274, file: !10275, line: 21, column: 7)
!10285 = !DILocation(line: 21, column: 16, scope: !10284)
!10286 = !DILocation(line: 21, column: 13, scope: !10284)
!10287 = !DILocation(line: 21, column: 7, scope: !10274)
!10288 = !DILocation(line: 27, column: 5, scope: !10289)
!10289 = distinct !DILexicalBlock(scope: !10284, file: !10275, line: 21, column: 26)
!10290 = !DILocation(line: 29, column: 1, scope: !10274)
